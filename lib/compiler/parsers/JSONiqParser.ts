// This file was generated on Sat May 2, 2015 23:07 (UTC+01) by REx v5.33 which is Copyright (c) 1979-2015 by Gunther Rademacher <grd@gmx.net>
// REx command line: JSONiqParser.ebnf -ll 2 -backtrack -tree -typescript

  export interface ParsingEventHandler
  {
    reset(source: string): void;
    startNonterminal(name: string, begin: number): void;
    endNonterminal(name: string, end: number): void;
    terminal(name: string, begin: number, end: number): void;
    whitespace(begin: number, end: number): void;
  }

  export class ParseException
  {
    private begin: number;
    private end: number;
    private state: number;
    private offending: number;
    private expected: number;

    constructor(b: number, e: number, s: number, o: number, x: number)
    {
      this.begin = b;
      this.end = e;
      this.state = s;
      this.offending = o;
      this.expected = x;
    }

    getBegin() {return this.begin;}
    getEnd() {return this.end;}
    getState() {return this.state;}
    getExpected() {return this.expected;}
    getOffending() {return this.offending;}

    getMessage()
    {
      return this.offending < 0 ? "lexical analysis failed" : "syntax error";
    }
  }

  interface Memoizer
  {
    [index: number]: number;
  }

  export class Parser
  {
    constructor(source: string, parsingEventHandler: ParsingEventHandler)
    {
      this.eventHandler = parsingEventHandler;
      this.input = source;
      this.size = source.length;
      this.reset(0, 0, 0);
    }

    getInput()
    {
      return this.input;
    }

    private reset(l: number, b: number, e: number)
    {
                   this.b0 = b; this.e0 = b;
      this.l1 = l; this.b1 = b; this.e1 = e;
      this.l2 = 0;
      this.end = e;
      this.ex = -1;
      this.memo = {};
      this.eventHandler.reset(this.input);
    }

    getOffendingToken(e: ParseException)
    {
      var o = e.getOffending();
      return o >= 0 ? Parser.TOKEN[o] : null;
    }

    getExpectedTokenSet(e: ParseException)
    {
      var expected: string[];
      if (e.getExpected() < 0)
      {
        expected = Parser.getTokenSet(- e.getState());
      }
      else
      {
        expected = [Parser.TOKEN[e.getExpected()]];
      }
      return expected;
    }

    getErrorMessage(e: ParseException)
    {
      var tokenSet = this.getExpectedTokenSet(e);
      var found = this.getOffendingToken(e);
      var prefix = this.input.substring(0, e.getBegin());
      var lines = prefix.split("\n");
      var line = lines.length;
      var column = lines[line - 1].length + 1;
      var size = e.getEnd() - e.getBegin();
      return e.getMessage()
           + (found == null ? "" : ", found " + found)
           + "\nwhile expecting "
           + (tokenSet.length == 1 ? tokenSet[0] : ("[" + tokenSet.join(", ") + "]"))
           + "\n"
           + (size == 0 || found != null ? "" : "after successfully scanning " + size + " characters beginning ")
           + "at line " + line + ", column " + column + ":\n..."
           + this.input.substring(e.getBegin(), Math.min(this.input.length, e.getBegin() + 64))
           + "...";
    }

    parse_XQuery()
    {
      this.eventHandler.startNonterminal("XQuery", this.e0);
      this.lookahead1W(277);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | EOF | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' |
                                    // ';' | '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.whitespace();
      this.parse_Module();
      this.shift(25);               // EOF
      this.eventHandler.endNonterminal("XQuery", this.e0);
    }

    private parse_Module()
    {
      this.eventHandler.startNonterminal("Module", this.e0);
      switch (this.l1)
      {
      case 170:                     // 'jsoniq'
        this.lookahead2W(168);      // S^WS | '#' | '(' | '(:' | 'encoding' | 'version'
        break;
      default:
        this.lk = this.l1;
      }
      if (this.lk == 64682          // 'jsoniq' 'encoding'
       || this.lk == 137898)        // 'jsoniq' 'version'
      {
        this.parse_VersionDecl();
      }
      this.lookahead1W(277);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | EOF | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' |
                                    // ';' | '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      switch (this.l1)
      {
      case 185:                     // 'module'
        this.lookahead2W(146);      // S^WS | '#' | '(' | '(:' | 'namespace'
        break;
      default:
        this.lk = this.l1;
      }
      switch (this.lk)
      {
      case 95929:                   // 'module' 'namespace'
        this.whitespace();
        this.parse_LibraryModule();
        break;
      default:
        this.whitespace();
        this.parse_MainModule();
      }
      this.eventHandler.endNonterminal("Module", this.e0);
    }

    private parse_VersionDecl()
    {
      this.eventHandler.startNonterminal("VersionDecl", this.e0);
      this.shift(170);              // 'jsoniq'
      this.lookahead1W(120);        // S^WS | '(:' | 'encoding' | 'version'
      switch (this.l1)
      {
      case 126:                     // 'encoding'
        this.shift(126);            // 'encoding'
        this.lookahead1W(17);       // StringLiteral | S^WS | '(:'
        this.shift(11);             // StringLiteral
        break;
      default:
        this.shift(269);            // 'version'
        this.lookahead1W(17);       // StringLiteral | S^WS | '(:'
        this.shift(11);             // StringLiteral
        this.lookahead1W(113);      // S^WS | '(:' | ';' | 'encoding'
        if (this.l1 == 126)         // 'encoding'
        {
          this.shift(126);          // 'encoding'
          this.lookahead1W(17);     // StringLiteral | S^WS | '(:'
          this.shift(11);           // StringLiteral
        }
      }
      this.lookahead1W(29);         // S^WS | '(:' | ';'
      this.whitespace();
      this.parse_Separator();
      this.eventHandler.endNonterminal("VersionDecl", this.e0);
    }

    private parse_LibraryModule()
    {
      this.eventHandler.startNonterminal("LibraryModule", this.e0);
      this.parse_ModuleDecl();
      this.lookahead1W(142);        // S^WS | EOF | '(:' | 'declare' | 'import'
      this.whitespace();
      this.parse_Prolog();
      this.eventHandler.endNonterminal("LibraryModule", this.e0);
    }

    private parse_ModuleDecl()
    {
      this.eventHandler.startNonterminal("ModuleDecl", this.e0);
      this.shift(185);              // 'module'
      this.lookahead1W(64);         // S^WS | '(:' | 'namespace'
      this.shift(187);              // 'namespace'
      this.lookahead1W(239);        // NCName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'null' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with'
      this.whitespace();
      this.parse_NCName();
      this.lookahead1W(30);         // S^WS | '(:' | '='
      this.shift(61);               // '='
      this.lookahead1W(15);         // URILiteral | S^WS | '(:'
      this.shift(7);                // URILiteral
      this.lookahead1W(29);         // S^WS | '(:' | ';'
      this.whitespace();
      this.parse_Separator();
      this.eventHandler.endNonterminal("ModuleDecl", this.e0);
    }

    private parse_Prolog()
    {
      this.eventHandler.startNonterminal("Prolog", this.e0);
      for (;;)
      {
        this.lookahead1W(277);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | EOF | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' |
                                    // ';' | '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
        switch (this.l1)
        {
        case 109:                   // 'declare'
          this.lookahead2W(206);    // S^WS | '#' | '%' | '(' | '(:' | 'base-uri' | 'boundary-space' | 'collection' |
                                    // 'construction' | 'context' | 'copy-namespaces' | 'decimal-format' | 'default' |
                                    // 'ft-option' | 'function' | 'index' | 'integrity' | 'namespace' | 'option' |
                                    // 'ordering' | 'revalidation' | 'updating' | 'variable'
          break;
        case 155:                   // 'import'
          this.lookahead2W(169);    // S^WS | '#' | '(' | '(:' | 'module' | 'schema'
          break;
        default:
          this.lk = this.l1;
        }
        if (this.lk != 43117        // 'declare' 'base-uri'
         && this.lk != 44141        // 'declare' 'boundary-space'
         && this.lk != 50797        // 'declare' 'construction'
         && this.lk != 53869        // 'declare' 'copy-namespaces'
         && this.lk != 54893        // 'declare' 'decimal-format'
         && this.lk != 56429        // 'declare' 'default'
         && this.lk != 73325        // 'declare' 'ft-option'
         && this.lk != 94875        // 'import' 'module'
         && this.lk != 95853        // 'declare' 'namespace'
         && this.lk != 106093       // 'declare' 'ordering'
         && this.lk != 115821       // 'declare' 'revalidation'
         && this.lk != 117403)      // 'import' 'schema'
        {
          break;
        }
        switch (this.l1)
        {
        case 109:                   // 'declare'
          this.lookahead2W(200);    // S^WS | '(:' | 'base-uri' | 'boundary-space' | 'construction' |
                                    // 'copy-namespaces' | 'decimal-format' | 'default' | 'ft-option' | 'namespace' |
                                    // 'ordering' | 'revalidation'
          break;
        default:
          this.lk = this.l1;
        }
        if (this.lk == 56429)       // 'declare' 'default'
        {
          this.lk = this.memoized(0, this.e0);
          if (this.lk == 0)
          {
            var b0A = this.b0; var e0A = this.e0; var l1A = this.l1;
            var b1A = this.b1; var e1A = this.e1; var l2A = this.l2;
            var b2A = this.b2; var e2A = this.e2;
            try
            {
              this.try_DefaultNamespaceDecl();
              this.lk = -1;
            }
            catch (p1A)
            {
              this.lk = -2;
            }
            this.b0 = b0A; this.e0 = e0A; this.l1 = l1A; if (this.l1 == 0) {this.end = e0A;} else {
            this.b1 = b1A; this.e1 = e1A; this.l2 = l2A; if (this.l2 == 0) {this.end = e1A;} else {
            this.b2 = b2A; this.e2 = e2A; this.end = e2A; }}
            this.memoize(0, this.e0, this.lk);
          }
        }
        switch (this.lk)
        {
        case -1:
          this.whitespace();
          this.parse_DefaultNamespaceDecl();
          break;
        case 95853:                 // 'declare' 'namespace'
          this.whitespace();
          this.parse_NamespaceDecl();
          break;
        case 155:                   // 'import'
          this.whitespace();
          this.parse_Import();
          break;
        case 73325:                 // 'declare' 'ft-option'
          this.whitespace();
          this.parse_FTOptionDecl();
          break;
        default:
          this.whitespace();
          this.parse_Setter();
        }
        this.lookahead1W(29);       // S^WS | '(:' | ';'
        this.whitespace();
        this.parse_Separator();
      }
      for (;;)
      {
        this.lookahead1W(277);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | EOF | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' |
                                    // ';' | '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
        switch (this.l1)
        {
        case 109:                   // 'declare'
          this.lookahead2W(201);    // S^WS | '#' | '%' | '(' | '(:' | 'collection' | 'context' | 'function' | 'index' |
                                    // 'integrity' | 'option' | 'updating' | 'variable'
          break;
        default:
          this.lk = this.l1;
        }
        if (this.lk != 17005        // 'declare' '%'
         && this.lk != 49261        // 'declare' 'collection'
         && this.lk != 52333        // 'declare' 'context'
         && this.lk != 75373        // 'declare' 'function'
         && this.lk != 80493        // 'declare' 'index'
         && this.lk != 83565        // 'declare' 'integrity'
         && this.lk != 104045       // 'declare' 'option'
         && this.lk != 134765       // 'declare' 'updating'
         && this.lk != 137325)      // 'declare' 'variable'
        {
          break;
        }
        switch (this.l1)
        {
        case 109:                   // 'declare'
          this.lookahead2W(197);    // S^WS | '%' | '(:' | 'collection' | 'context' | 'function' | 'index' |
                                    // 'integrity' | 'option' | 'updating' | 'variable'
          break;
        default:
          this.lk = this.l1;
        }
        switch (this.lk)
        {
        case 52333:                 // 'declare' 'context'
          this.whitespace();
          this.parse_ContextItemDecl();
          break;
        case 104045:                // 'declare' 'option'
          this.whitespace();
          this.parse_OptionDecl();
          break;
        default:
          this.whitespace();
          this.parse_AnnotatedDecl();
        }
        this.lookahead1W(29);       // S^WS | '(:' | ';'
        this.whitespace();
        this.parse_Separator();
      }
      this.eventHandler.endNonterminal("Prolog", this.e0);
    }

    private parse_Separator()
    {
      this.eventHandler.startNonterminal("Separator", this.e0);
      this.shift(54);               // ';'
      this.eventHandler.endNonterminal("Separator", this.e0);
    }

    private parse_Setter()
    {
      this.eventHandler.startNonterminal("Setter", this.e0);
      switch (this.l1)
      {
      case 109:                     // 'declare'
        this.lookahead2W(194);      // S^WS | '(:' | 'base-uri' | 'boundary-space' | 'construction' |
                                    // 'copy-namespaces' | 'decimal-format' | 'default' | 'ordering' | 'revalidation'
        break;
      default:
        this.lk = this.l1;
      }
      if (this.lk == 56429)         // 'declare' 'default'
      {
        this.lk = this.memoized(1, this.e0);
        if (this.lk == 0)
        {
          var b0A = this.b0; var e0A = this.e0; var l1A = this.l1;
          var b1A = this.b1; var e1A = this.e1; var l2A = this.l2;
          var b2A = this.b2; var e2A = this.e2;
          try
          {
            this.try_DefaultCollationDecl();
            this.lk = -2;
          }
          catch (p2A)
          {
            try
            {
              this.b0 = b0A; this.e0 = e0A; this.l1 = l1A; if (this.l1 == 0) {this.end = e0A;} else {
              this.b1 = b1A; this.e1 = e1A; this.l2 = l2A; if (this.l2 == 0) {this.end = e1A;} else {
              this.b2 = b2A; this.e2 = e2A; this.end = e2A; }}
              this.try_EmptyOrderDecl();
              this.lk = -6;
            }
            catch (p6A)
            {
              this.lk = -9;
            }
          }
          this.b0 = b0A; this.e0 = e0A; this.l1 = l1A; if (this.l1 == 0) {this.end = e0A;} else {
          this.b1 = b1A; this.e1 = e1A; this.l2 = l2A; if (this.l2 == 0) {this.end = e1A;} else {
          this.b2 = b2A; this.e2 = e2A; this.end = e2A; }}
          this.memoize(1, this.e0, this.lk);
        }
      }
      switch (this.lk)
      {
      case 44141:                   // 'declare' 'boundary-space'
        this.parse_BoundarySpaceDecl();
        break;
      case -2:
        this.parse_DefaultCollationDecl();
        break;
      case 43117:                   // 'declare' 'base-uri'
        this.parse_BaseURIDecl();
        break;
      case 50797:                   // 'declare' 'construction'
        this.parse_ConstructionDecl();
        break;
      case 106093:                  // 'declare' 'ordering'
        this.parse_OrderingModeDecl();
        break;
      case -6:
        this.parse_EmptyOrderDecl();
        break;
      case 115821:                  // 'declare' 'revalidation'
        this.parse_RevalidationDecl();
        break;
      case 53869:                   // 'declare' 'copy-namespaces'
        this.parse_CopyNamespacesDecl();
        break;
      default:
        this.parse_DecimalFormatDecl();
      }
      this.eventHandler.endNonterminal("Setter", this.e0);
    }

    private parse_BoundarySpaceDecl()
    {
      this.eventHandler.startNonterminal("BoundarySpaceDecl", this.e0);
      this.shift(109);              // 'declare'
      this.lookahead1W(36);         // S^WS | '(:' | 'boundary-space'
      this.shift(86);               // 'boundary-space'
      this.lookahead1W(137);        // S^WS | '(:' | 'preserve' | 'strip'
      switch (this.l1)
      {
      case 218:                     // 'preserve'
        this.shift(218);            // 'preserve'
        break;
      default:
        this.shift(246);            // 'strip'
      }
      this.eventHandler.endNonterminal("BoundarySpaceDecl", this.e0);
    }

    private parse_DefaultCollationDecl()
    {
      this.eventHandler.startNonterminal("DefaultCollationDecl", this.e0);
      this.shift(109);              // 'declare'
      this.lookahead1W(49);         // S^WS | '(:' | 'default'
      this.shift(110);              // 'default'
      this.lookahead1W(41);         // S^WS | '(:' | 'collation'
      this.shift(95);               // 'collation'
      this.lookahead1W(15);         // URILiteral | S^WS | '(:'
      this.shift(7);                // URILiteral
      this.eventHandler.endNonterminal("DefaultCollationDecl", this.e0);
    }

    private try_DefaultCollationDecl()
    {
      this.shiftT(109);             // 'declare'
      this.lookahead1W(49);         // S^WS | '(:' | 'default'
      this.shiftT(110);             // 'default'
      this.lookahead1W(41);         // S^WS | '(:' | 'collation'
      this.shiftT(95);              // 'collation'
      this.lookahead1W(15);         // URILiteral | S^WS | '(:'
      this.shiftT(7);               // URILiteral
    }

    private parse_BaseURIDecl()
    {
      this.eventHandler.startNonterminal("BaseURIDecl", this.e0);
      this.shift(109);              // 'declare'
      this.lookahead1W(35);         // S^WS | '(:' | 'base-uri'
      this.shift(84);               // 'base-uri'
      this.lookahead1W(15);         // URILiteral | S^WS | '(:'
      this.shift(7);                // URILiteral
      this.eventHandler.endNonterminal("BaseURIDecl", this.e0);
    }

    private parse_ConstructionDecl()
    {
      this.eventHandler.startNonterminal("ConstructionDecl", this.e0);
      this.shift(109);              // 'declare'
      this.lookahead1W(44);         // S^WS | '(:' | 'construction'
      this.shift(99);               // 'construction'
      this.lookahead1W(137);        // S^WS | '(:' | 'preserve' | 'strip'
      switch (this.l1)
      {
      case 246:                     // 'strip'
        this.shift(246);            // 'strip'
        break;
      default:
        this.shift(218);            // 'preserve'
      }
      this.eventHandler.endNonterminal("ConstructionDecl", this.e0);
    }

    private parse_OrderingModeDecl()
    {
      this.eventHandler.startNonterminal("OrderingModeDecl", this.e0);
      this.shift(109);              // 'declare'
      this.lookahead1W(71);         // S^WS | '(:' | 'ordering'
      this.shift(207);              // 'ordering'
      this.lookahead1W(135);        // S^WS | '(:' | 'ordered' | 'unordered'
      switch (this.l1)
      {
      case 206:                     // 'ordered'
        this.shift(206);            // 'ordered'
        break;
      default:
        this.shift(262);            // 'unordered'
      }
      this.eventHandler.endNonterminal("OrderingModeDecl", this.e0);
    }

    private parse_EmptyOrderDecl()
    {
      this.eventHandler.startNonterminal("EmptyOrderDecl", this.e0);
      this.shift(109);              // 'declare'
      this.lookahead1W(49);         // S^WS | '(:' | 'default'
      this.shift(110);              // 'default'
      this.lookahead1W(70);         // S^WS | '(:' | 'order'
      this.shift(205);              // 'order'
      this.lookahead1W(52);         // S^WS | '(:' | 'empty'
      this.shift(124);              // 'empty'
      this.lookahead1W(125);        // S^WS | '(:' | 'greatest' | 'least'
      switch (this.l1)
      {
      case 149:                     // 'greatest'
        this.shift(149);            // 'greatest'
        break;
      default:
        this.shift(176);            // 'least'
      }
      this.eventHandler.endNonterminal("EmptyOrderDecl", this.e0);
    }

    private try_EmptyOrderDecl()
    {
      this.shiftT(109);             // 'declare'
      this.lookahead1W(49);         // S^WS | '(:' | 'default'
      this.shiftT(110);             // 'default'
      this.lookahead1W(70);         // S^WS | '(:' | 'order'
      this.shiftT(205);             // 'order'
      this.lookahead1W(52);         // S^WS | '(:' | 'empty'
      this.shiftT(124);             // 'empty'
      this.lookahead1W(125);        // S^WS | '(:' | 'greatest' | 'least'
      switch (this.l1)
      {
      case 149:                     // 'greatest'
        this.shiftT(149);           // 'greatest'
        break;
      default:
        this.shiftT(176);           // 'least'
      }
    }

    private parse_CopyNamespacesDecl()
    {
      this.eventHandler.startNonterminal("CopyNamespacesDecl", this.e0);
      this.shift(109);              // 'declare'
      this.lookahead1W(47);         // S^WS | '(:' | 'copy-namespaces'
      this.shift(105);              // 'copy-namespaces'
      this.lookahead1W(132);        // S^WS | '(:' | 'no-preserve' | 'preserve'
      this.whitespace();
      this.parse_PreserveMode();
      this.lookahead1W(25);         // S^WS | '(:' | ','
      this.shift(42);               // ','
      this.lookahead1W(127);        // S^WS | '(:' | 'inherit' | 'no-inherit'
      this.whitespace();
      this.parse_InheritMode();
      this.eventHandler.endNonterminal("CopyNamespacesDecl", this.e0);
    }

    private parse_PreserveMode()
    {
      this.eventHandler.startNonterminal("PreserveMode", this.e0);
      switch (this.l1)
      {
      case 218:                     // 'preserve'
        this.shift(218);            // 'preserve'
        break;
      default:
        this.shift(193);            // 'no-preserve'
      }
      this.eventHandler.endNonterminal("PreserveMode", this.e0);
    }

    private parse_InheritMode()
    {
      this.eventHandler.startNonterminal("InheritMode", this.e0);
      switch (this.l1)
      {
      case 159:                     // 'inherit'
        this.shift(159);            // 'inherit'
        break;
      default:
        this.shift(192);            // 'no-inherit'
      }
      this.eventHandler.endNonterminal("InheritMode", this.e0);
    }

    private parse_DecimalFormatDecl()
    {
      this.eventHandler.startNonterminal("DecimalFormatDecl", this.e0);
      this.shift(109);              // 'declare'
      this.lookahead1W(118);        // S^WS | '(:' | 'decimal-format' | 'default'
      switch (this.l1)
      {
      case 107:                     // 'decimal-format'
        this.shift(107);            // 'decimal-format'
        this.lookahead1W(245);      // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
        this.whitespace();
        this.parse_EQName();
        break;
      default:
        this.shift(110);            // 'default'
        this.lookahead1W(48);       // S^WS | '(:' | 'decimal-format'
        this.shift(107);            // 'decimal-format'
      }
      for (;;)
      {
        this.lookahead1W(203);      // S^WS | '(:' | ';' | 'NaN' | 'decimal-separator' | 'digit' |
                                    // 'grouping-separator' | 'infinity' | 'minus-sign' | 'pattern-separator' |
                                    // 'per-mille' | 'percent' | 'zero-digit'
        if (this.l1 == 54)          // ';'
        {
          break;
        }
        this.whitespace();
        this.parse_DFPropertyName();
        this.lookahead1W(30);       // S^WS | '(:' | '='
        this.shift(61);             // '='
        this.lookahead1W(17);       // StringLiteral | S^WS | '(:'
        this.shift(11);             // StringLiteral
      }
      this.eventHandler.endNonterminal("DecimalFormatDecl", this.e0);
    }

    private parse_DFPropertyName()
    {
      this.eventHandler.startNonterminal("DFPropertyName", this.e0);
      switch (this.l1)
      {
      case 108:                     // 'decimal-separator'
        this.shift(108);            // 'decimal-separator'
        break;
      case 151:                     // 'grouping-separator'
        this.shift(151);            // 'grouping-separator'
        break;
      case 158:                     // 'infinity'
        this.shift(158);            // 'infinity'
        break;
      case 182:                     // 'minus-sign'
        this.shift(182);            // 'minus-sign'
        break;
      case 68:                      // 'NaN'
        this.shift(68);             // 'NaN'
        break;
      case 213:                     // 'percent'
        this.shift(213);            // 'percent'
        break;
      case 212:                     // 'per-mille'
        this.shift(212);            // 'per-mille'
        break;
      case 280:                     // 'zero-digit'
        this.shift(280);            // 'zero-digit'
        break;
      case 117:                     // 'digit'
        this.shift(117);            // 'digit'
        break;
      default:
        this.shift(211);            // 'pattern-separator'
      }
      this.eventHandler.endNonterminal("DFPropertyName", this.e0);
    }

    private parse_Import()
    {
      this.eventHandler.startNonterminal("Import", this.e0);
      switch (this.l1)
      {
      case 155:                     // 'import'
        this.lookahead2W(130);      // S^WS | '(:' | 'module' | 'schema'
        break;
      default:
        this.lk = this.l1;
      }
      switch (this.lk)
      {
      case 117403:                  // 'import' 'schema'
        this.parse_SchemaImport();
        break;
      default:
        this.parse_ModuleImport();
      }
      this.eventHandler.endNonterminal("Import", this.e0);
    }

    private parse_SchemaImport()
    {
      this.eventHandler.startNonterminal("SchemaImport", this.e0);
      this.shift(155);              // 'import'
      this.lookahead1W(76);         // S^WS | '(:' | 'schema'
      this.shift(229);              // 'schema'
      this.lookahead1W(141);        // URILiteral | S^WS | '(:' | 'default' | 'namespace'
      if (this.l1 != 7)             // URILiteral
      {
        this.whitespace();
        this.parse_SchemaPrefix();
      }
      this.lookahead1W(15);         // URILiteral | S^WS | '(:'
      this.shift(7);                // URILiteral
      this.lookahead1W(112);        // S^WS | '(:' | ';' | 'at'
      if (this.l1 == 82)            // 'at'
      {
        this.shift(82);             // 'at'
        this.lookahead1W(15);       // URILiteral | S^WS | '(:'
        this.shift(7);              // URILiteral
        for (;;)
        {
          this.lookahead1W(107);    // S^WS | '(:' | ',' | ';'
          if (this.l1 != 42)        // ','
          {
            break;
          }
          this.shift(42);           // ','
          this.lookahead1W(15);     // URILiteral | S^WS | '(:'
          this.shift(7);            // URILiteral
        }
      }
      this.eventHandler.endNonterminal("SchemaImport", this.e0);
    }

    private parse_SchemaPrefix()
    {
      this.eventHandler.startNonterminal("SchemaPrefix", this.e0);
      switch (this.l1)
      {
      case 187:                     // 'namespace'
        this.shift(187);            // 'namespace'
        this.lookahead1W(239);      // NCName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'null' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with'
        this.whitespace();
        this.parse_NCName();
        this.lookahead1W(30);       // S^WS | '(:' | '='
        this.shift(61);             // '='
        break;
      default:
        this.shift(110);            // 'default'
        this.lookahead1W(50);       // S^WS | '(:' | 'element'
        this.shift(122);            // 'element'
        this.lookahead1W(64);       // S^WS | '(:' | 'namespace'
        this.shift(187);            // 'namespace'
      }
      this.eventHandler.endNonterminal("SchemaPrefix", this.e0);
    }

    private parse_ModuleImport()
    {
      this.eventHandler.startNonterminal("ModuleImport", this.e0);
      this.shift(155);              // 'import'
      this.lookahead1W(63);         // S^WS | '(:' | 'module'
      this.shift(185);              // 'module'
      this.lookahead1W(93);         // URILiteral | S^WS | '(:' | 'namespace'
      if (this.l1 == 187)           // 'namespace'
      {
        this.shift(187);            // 'namespace'
        this.lookahead1W(239);      // NCName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'null' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with'
        this.whitespace();
        this.parse_NCName();
        this.lookahead1W(30);       // S^WS | '(:' | '='
        this.shift(61);             // '='
      }
      this.lookahead1W(15);         // URILiteral | S^WS | '(:'
      this.shift(7);                // URILiteral
      this.lookahead1W(112);        // S^WS | '(:' | ';' | 'at'
      if (this.l1 == 82)            // 'at'
      {
        this.shift(82);             // 'at'
        this.lookahead1W(15);       // URILiteral | S^WS | '(:'
        this.shift(7);              // URILiteral
        for (;;)
        {
          this.lookahead1W(107);    // S^WS | '(:' | ',' | ';'
          if (this.l1 != 42)        // ','
          {
            break;
          }
          this.shift(42);           // ','
          this.lookahead1W(15);     // URILiteral | S^WS | '(:'
          this.shift(7);            // URILiteral
        }
      }
      this.eventHandler.endNonterminal("ModuleImport", this.e0);
    }

    private parse_NamespaceDecl()
    {
      this.eventHandler.startNonterminal("NamespaceDecl", this.e0);
      this.shift(109);              // 'declare'
      this.lookahead1W(64);         // S^WS | '(:' | 'namespace'
      this.shift(187);              // 'namespace'
      this.lookahead1W(239);        // NCName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'null' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with'
      this.whitespace();
      this.parse_NCName();
      this.lookahead1W(30);         // S^WS | '(:' | '='
      this.shift(61);               // '='
      this.lookahead1W(15);         // URILiteral | S^WS | '(:'
      this.shift(7);                // URILiteral
      this.eventHandler.endNonterminal("NamespaceDecl", this.e0);
    }

    private parse_DefaultNamespaceDecl()
    {
      this.eventHandler.startNonterminal("DefaultNamespaceDecl", this.e0);
      this.shift(109);              // 'declare'
      this.lookahead1W(49);         // S^WS | '(:' | 'default'
      this.shift(110);              // 'default'
      this.lookahead1W(119);        // S^WS | '(:' | 'element' | 'function'
      switch (this.l1)
      {
      case 122:                     // 'element'
        this.shift(122);            // 'element'
        break;
      default:
        this.shift(147);            // 'function'
      }
      this.lookahead1W(64);         // S^WS | '(:' | 'namespace'
      this.shift(187);              // 'namespace'
      this.lookahead1W(15);         // URILiteral | S^WS | '(:'
      this.shift(7);                // URILiteral
      this.eventHandler.endNonterminal("DefaultNamespaceDecl", this.e0);
    }

    private try_DefaultNamespaceDecl()
    {
      this.shiftT(109);             // 'declare'
      this.lookahead1W(49);         // S^WS | '(:' | 'default'
      this.shiftT(110);             // 'default'
      this.lookahead1W(119);        // S^WS | '(:' | 'element' | 'function'
      switch (this.l1)
      {
      case 122:                     // 'element'
        this.shiftT(122);           // 'element'
        break;
      default:
        this.shiftT(147);           // 'function'
      }
      this.lookahead1W(64);         // S^WS | '(:' | 'namespace'
      this.shiftT(187);             // 'namespace'
      this.lookahead1W(15);         // URILiteral | S^WS | '(:'
      this.shiftT(7);               // URILiteral
    }

    private parse_FTOptionDecl()
    {
      this.eventHandler.startNonterminal("FTOptionDecl", this.e0);
      this.shift(109);              // 'declare'
      this.lookahead1W(55);         // S^WS | '(:' | 'ft-option'
      this.shift(143);              // 'ft-option'
      this.lookahead1W(84);         // S^WS | '(:' | 'using'
      this.whitespace();
      this.parse_FTMatchOptions();
      this.eventHandler.endNonterminal("FTOptionDecl", this.e0);
    }

    private parse_AnnotatedDecl()
    {
      this.eventHandler.startNonterminal("AnnotatedDecl", this.e0);
      this.shift(109);              // 'declare'
      for (;;)
      {
        this.lookahead1W(192);      // S^WS | '%' | '(:' | 'collection' | 'function' | 'index' | 'integrity' |
                                    // 'updating' | 'variable'
        if (this.l1 != 33           // '%'
         && this.l1 != 263)         // 'updating'
        {
          break;
        }
        switch (this.l1)
        {
        case 263:                   // 'updating'
          this.whitespace();
          this.parse_CompatibilityAnnotation();
          break;
        default:
          this.whitespace();
          this.parse_Annotation();
        }
      }
      switch (this.l1)
      {
      case 268:                     // 'variable'
        this.whitespace();
        this.parse_VarDecl();
        break;
      case 147:                     // 'function'
        this.whitespace();
        this.parse_FunctionDecl();
        break;
      case 96:                      // 'collection'
        this.whitespace();
        this.parse_CollectionDecl();
        break;
      case 157:                     // 'index'
        this.whitespace();
        this.parse_IndexDecl();
        break;
      default:
        this.whitespace();
        this.parse_ICDecl();
      }
      this.eventHandler.endNonterminal("AnnotatedDecl", this.e0);
    }

    private parse_CompatibilityAnnotation()
    {
      this.eventHandler.startNonterminal("CompatibilityAnnotation", this.e0);
      this.shift(263);              // 'updating'
      this.eventHandler.endNonterminal("CompatibilityAnnotation", this.e0);
    }

    private parse_Annotation()
    {
      this.eventHandler.startNonterminal("Annotation", this.e0);
      this.shift(33);               // '%'
      this.lookahead1W(245);        // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      this.whitespace();
      this.parse_EQName();
      this.lookahead1W(193);        // S^WS | '%' | '(' | '(:' | 'collection' | 'function' | 'index' | 'integrity' |
                                    // 'updating' | 'variable'
      if (this.l1 == 35)            // '('
      {
        this.shift(35);             // '('
        this.lookahead1W(190);      // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | S^WS | '(:' |
                                    // 'false' | 'null' | 'true'
        this.whitespace();
        this.parse_Literal();
        for (;;)
        {
          this.lookahead1W(105);    // S^WS | '(:' | ')' | ','
          if (this.l1 != 42)        // ','
          {
            break;
          }
          this.shift(42);           // ','
          this.lookahead1W(190);    // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | S^WS | '(:' |
                                    // 'false' | 'null' | 'true'
          this.whitespace();
          this.parse_Literal();
        }
        this.shift(38);             // ')'
      }
      this.eventHandler.endNonterminal("Annotation", this.e0);
    }

    private try_Annotation()
    {
      this.shiftT(33);              // '%'
      this.lookahead1W(245);        // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      this.try_EQName();
      this.lookahead1W(193);        // S^WS | '%' | '(' | '(:' | 'collection' | 'function' | 'index' | 'integrity' |
                                    // 'updating' | 'variable'
      if (this.l1 == 35)            // '('
      {
        this.shiftT(35);            // '('
        this.lookahead1W(190);      // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | S^WS | '(:' |
                                    // 'false' | 'null' | 'true'
        this.try_Literal();
        for (;;)
        {
          this.lookahead1W(105);    // S^WS | '(:' | ')' | ','
          if (this.l1 != 42)        // ','
          {
            break;
          }
          this.shiftT(42);          // ','
          this.lookahead1W(190);    // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | S^WS | '(:' |
                                    // 'false' | 'null' | 'true'
          this.try_Literal();
        }
        this.shiftT(38);            // ')'
      }
    }

    private parse_VarDecl()
    {
      this.eventHandler.startNonterminal("VarDecl", this.e0);
      this.shift(268);              // 'variable'
      this.lookahead1W(21);         // S^WS | '$' | '(:'
      this.shift(31);               // '$'
      this.lookahead1W(245);        // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      this.whitespace();
      this.parse_VarName();
      this.lookahead1W(157);        // S^WS | '(:' | ':=' | 'as' | 'external'
      if (this.l1 == 80)            // 'as'
      {
        this.whitespace();
        this.parse_TypeDeclaration();
      }
      this.lookahead1W(110);        // S^WS | '(:' | ':=' | 'external'
      switch (this.l1)
      {
      case 53:                      // ':='
        this.shift(53);             // ':='
        this.lookahead1W(266);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
        this.whitespace();
        this.parse_VarValue();
        break;
      default:
        this.shift(134);            // 'external'
        this.lookahead1W(108);      // S^WS | '(:' | ':=' | ';'
        if (this.l1 == 53)          // ':='
        {
          this.shift(53);           // ':='
          this.lookahead1W(266);    // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
          this.whitespace();
          this.parse_VarDefaultValue();
        }
      }
      this.eventHandler.endNonterminal("VarDecl", this.e0);
    }

    private parse_VarValue()
    {
      this.eventHandler.startNonterminal("VarValue", this.e0);
      this.parse_ExprSingle();
      this.eventHandler.endNonterminal("VarValue", this.e0);
    }

    private parse_VarDefaultValue()
    {
      this.eventHandler.startNonterminal("VarDefaultValue", this.e0);
      this.parse_ExprSingle();
      this.eventHandler.endNonterminal("VarDefaultValue", this.e0);
    }

    private parse_ContextItemDecl()
    {
      this.eventHandler.startNonterminal("ContextItemDecl", this.e0);
      this.shift(109);              // 'declare'
      this.lookahead1W(46);         // S^WS | '(:' | 'context'
      this.shift(102);              // 'context'
      this.lookahead1W(58);         // S^WS | '(:' | 'item'
      this.shift(167);              // 'item'
      this.lookahead1W(157);        // S^WS | '(:' | ':=' | 'as' | 'external'
      if (this.l1 == 80)            // 'as'
      {
        this.shift(80);             // 'as'
        this.lookahead1W(253);      // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
        this.whitespace();
        this.parse_ItemType();
      }
      this.lookahead1W(110);        // S^WS | '(:' | ':=' | 'external'
      switch (this.l1)
      {
      case 53:                      // ':='
        this.shift(53);             // ':='
        this.lookahead1W(266);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
        this.whitespace();
        this.parse_VarValue();
        break;
      default:
        this.shift(134);            // 'external'
        this.lookahead1W(108);      // S^WS | '(:' | ':=' | ';'
        if (this.l1 == 53)          // ':='
        {
          this.shift(53);           // ':='
          this.lookahead1W(266);    // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
          this.whitespace();
          this.parse_VarDefaultValue();
        }
      }
      this.eventHandler.endNonterminal("ContextItemDecl", this.e0);
    }

    private parse_ParamList()
    {
      this.eventHandler.startNonterminal("ParamList", this.e0);
      this.parse_Param();
      for (;;)
      {
        this.lookahead1W(105);      // S^WS | '(:' | ')' | ','
        if (this.l1 != 42)          // ','
        {
          break;
        }
        this.shift(42);             // ','
        this.lookahead1W(21);       // S^WS | '$' | '(:'
        this.whitespace();
        this.parse_Param();
      }
      this.eventHandler.endNonterminal("ParamList", this.e0);
    }

    private try_ParamList()
    {
      this.try_Param();
      for (;;)
      {
        this.lookahead1W(105);      // S^WS | '(:' | ')' | ','
        if (this.l1 != 42)          // ','
        {
          break;
        }
        this.shiftT(42);            // ','
        this.lookahead1W(21);       // S^WS | '$' | '(:'
        this.try_Param();
      }
    }

    private parse_Param()
    {
      this.eventHandler.startNonterminal("Param", this.e0);
      this.shift(31);               // '$'
      this.lookahead1W(245);        // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      this.whitespace();
      this.parse_EQName();
      this.lookahead1W(153);        // S^WS | '(:' | ')' | ',' | 'as'
      if (this.l1 == 80)            // 'as'
      {
        this.whitespace();
        this.parse_TypeDeclaration();
      }
      this.eventHandler.endNonterminal("Param", this.e0);
    }

    private try_Param()
    {
      this.shiftT(31);              // '$'
      this.lookahead1W(245);        // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      this.try_EQName();
      this.lookahead1W(153);        // S^WS | '(:' | ')' | ',' | 'as'
      if (this.l1 == 80)            // 'as'
      {
        this.try_TypeDeclaration();
      }
    }

    private parse_FunctionBody()
    {
      this.eventHandler.startNonterminal("FunctionBody", this.e0);
      this.parse_EnclosedExpr();
      this.eventHandler.endNonterminal("FunctionBody", this.e0);
    }

    private try_FunctionBody()
    {
      this.try_EnclosedExpr();
    }

    private parse_EnclosedExpr()
    {
      this.eventHandler.startNonterminal("EnclosedExpr", this.e0);
      this.shift(281);              // '{'
      this.lookahead1W(266);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.whitespace();
      this.parse_Expr();
      this.shift(287);              // '}'
      this.eventHandler.endNonterminal("EnclosedExpr", this.e0);
    }

    private try_EnclosedExpr()
    {
      this.shiftT(281);             // '{'
      this.lookahead1W(266);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.try_Expr();
      this.shiftT(287);             // '}'
    }

    private parse_OptionDecl()
    {
      this.eventHandler.startNonterminal("OptionDecl", this.e0);
      this.shift(109);              // 'declare'
      this.lookahead1W(69);         // S^WS | '(:' | 'option'
      this.shift(203);              // 'option'
      this.lookahead1W(245);        // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      this.whitespace();
      this.parse_EQName();
      this.lookahead1W(17);         // StringLiteral | S^WS | '(:'
      this.shift(11);               // StringLiteral
      this.eventHandler.endNonterminal("OptionDecl", this.e0);
    }

    private parse_Expr()
    {
      this.eventHandler.startNonterminal("Expr", this.e0);
      this.parse_ExprSingle();
      for (;;)
      {
        if (this.l1 != 42)          // ','
        {
          break;
        }
        this.shift(42);             // ','
        this.lookahead1W(266);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
        this.whitespace();
        this.parse_ExprSingle();
      }
      this.eventHandler.endNonterminal("Expr", this.e0);
    }

    private try_Expr()
    {
      this.try_ExprSingle();
      for (;;)
      {
        if (this.l1 != 42)          // ','
        {
          break;
        }
        this.shiftT(42);            // ','
        this.lookahead1W(266);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
        this.try_ExprSingle();
      }
    }

    private parse_FLWORExpr()
    {
      this.eventHandler.startNonterminal("FLWORExpr", this.e0);
      this.parse_InitialClause();
      for (;;)
      {
        this.lookahead1W(195);      // S^WS | '(:' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' | 'stable' |
                                    // 'where'
        if (this.l1 == 224)         // 'return'
        {
          break;
        }
        this.whitespace();
        this.parse_IntermediateClause();
      }
      this.whitespace();
      this.parse_ReturnClause();
      this.eventHandler.endNonterminal("FLWORExpr", this.e0);
    }

    private try_FLWORExpr()
    {
      this.try_InitialClause();
      for (;;)
      {
        this.lookahead1W(195);      // S^WS | '(:' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' | 'stable' |
                                    // 'where'
        if (this.l1 == 224)         // 'return'
        {
          break;
        }
        this.try_IntermediateClause();
      }
      this.try_ReturnClause();
    }

    private parse_InitialClause()
    {
      this.eventHandler.startNonterminal("InitialClause", this.e0);
      switch (this.l1)
      {
      case 139:                     // 'for'
        this.lookahead2W(151);      // S^WS | '$' | '(:' | 'sliding' | 'tumbling'
        break;
      default:
        this.lk = this.l1;
      }
      switch (this.lk)
      {
      case 16011:                   // 'for' '$'
        this.parse_ForClause();
        break;
      case 177:                     // 'let'
        this.parse_LetClause();
        break;
      default:
        this.parse_WindowClause();
      }
      this.eventHandler.endNonterminal("InitialClause", this.e0);
    }

    private try_InitialClause()
    {
      switch (this.l1)
      {
      case 139:                     // 'for'
        this.lookahead2W(151);      // S^WS | '$' | '(:' | 'sliding' | 'tumbling'
        break;
      default:
        this.lk = this.l1;
      }
      switch (this.lk)
      {
      case 16011:                   // 'for' '$'
        this.try_ForClause();
        break;
      case 177:                     // 'let'
        this.try_LetClause();
        break;
      default:
        this.try_WindowClause();
      }
    }

    private parse_IntermediateClause()
    {
      this.eventHandler.startNonterminal("IntermediateClause", this.e0);
      switch (this.l1)
      {
      case 139:                     // 'for'
      case 177:                     // 'let'
        this.parse_InitialClause();
        break;
      case 272:                     // 'where'
        this.parse_WhereClause();
        break;
      case 150:                     // 'group'
        this.parse_GroupByClause();
        break;
      case 106:                     // 'count'
        this.parse_CountClause();
        break;
      default:
        this.parse_OrderByClause();
      }
      this.eventHandler.endNonterminal("IntermediateClause", this.e0);
    }

    private try_IntermediateClause()
    {
      switch (this.l1)
      {
      case 139:                     // 'for'
      case 177:                     // 'let'
        this.try_InitialClause();
        break;
      case 272:                     // 'where'
        this.try_WhereClause();
        break;
      case 150:                     // 'group'
        this.try_GroupByClause();
        break;
      case 106:                     // 'count'
        this.try_CountClause();
        break;
      default:
        this.try_OrderByClause();
      }
    }

    private parse_ForClause()
    {
      this.eventHandler.startNonterminal("ForClause", this.e0);
      this.shift(139);              // 'for'
      this.lookahead1W(21);         // S^WS | '$' | '(:'
      this.whitespace();
      this.parse_ForBinding();
      for (;;)
      {
        if (this.l1 != 42)          // ','
        {
          break;
        }
        this.shift(42);             // ','
        this.lookahead1W(21);       // S^WS | '$' | '(:'
        this.whitespace();
        this.parse_ForBinding();
      }
      this.eventHandler.endNonterminal("ForClause", this.e0);
    }

    private try_ForClause()
    {
      this.shiftT(139);             // 'for'
      this.lookahead1W(21);         // S^WS | '$' | '(:'
      this.try_ForBinding();
      for (;;)
      {
        if (this.l1 != 42)          // ','
        {
          break;
        }
        this.shiftT(42);            // ','
        this.lookahead1W(21);       // S^WS | '$' | '(:'
        this.try_ForBinding();
      }
    }

    private parse_ForBinding()
    {
      this.eventHandler.startNonterminal("ForBinding", this.e0);
      this.shift(31);               // '$'
      this.lookahead1W(245);        // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      this.whitespace();
      this.parse_VarName();
      this.lookahead1W(182);        // S^WS | '(:' | 'allowing' | 'as' | 'at' | 'in' | 'score'
      if (this.l1 == 80)            // 'as'
      {
        this.whitespace();
        this.parse_TypeDeclaration();
      }
      this.lookahead1W(173);        // S^WS | '(:' | 'allowing' | 'at' | 'in' | 'score'
      if (this.l1 == 73)            // 'allowing'
      {
        this.whitespace();
        this.parse_AllowingEmpty();
      }
      this.lookahead1W(160);        // S^WS | '(:' | 'at' | 'in' | 'score'
      if (this.l1 == 82)            // 'at'
      {
        this.whitespace();
        this.parse_PositionalVar();
      }
      this.lookahead1W(126);        // S^WS | '(:' | 'in' | 'score'
      if (this.l1 == 232)           // 'score'
      {
        this.whitespace();
        this.parse_FTScoreVar();
      }
      this.lookahead1W(56);         // S^WS | '(:' | 'in'
      this.shift(156);              // 'in'
      this.lookahead1W(266);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.whitespace();
      this.parse_ExprSingle();
      this.eventHandler.endNonterminal("ForBinding", this.e0);
    }

    private try_ForBinding()
    {
      this.shiftT(31);              // '$'
      this.lookahead1W(245);        // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      this.try_VarName();
      this.lookahead1W(182);        // S^WS | '(:' | 'allowing' | 'as' | 'at' | 'in' | 'score'
      if (this.l1 == 80)            // 'as'
      {
        this.try_TypeDeclaration();
      }
      this.lookahead1W(173);        // S^WS | '(:' | 'allowing' | 'at' | 'in' | 'score'
      if (this.l1 == 73)            // 'allowing'
      {
        this.try_AllowingEmpty();
      }
      this.lookahead1W(160);        // S^WS | '(:' | 'at' | 'in' | 'score'
      if (this.l1 == 82)            // 'at'
      {
        this.try_PositionalVar();
      }
      this.lookahead1W(126);        // S^WS | '(:' | 'in' | 'score'
      if (this.l1 == 232)           // 'score'
      {
        this.try_FTScoreVar();
      }
      this.lookahead1W(56);         // S^WS | '(:' | 'in'
      this.shiftT(156);             // 'in'
      this.lookahead1W(266);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.try_ExprSingle();
    }

    private parse_AllowingEmpty()
    {
      this.eventHandler.startNonterminal("AllowingEmpty", this.e0);
      this.shift(73);               // 'allowing'
      this.lookahead1W(52);         // S^WS | '(:' | 'empty'
      this.shift(124);              // 'empty'
      this.eventHandler.endNonterminal("AllowingEmpty", this.e0);
    }

    private try_AllowingEmpty()
    {
      this.shiftT(73);              // 'allowing'
      this.lookahead1W(52);         // S^WS | '(:' | 'empty'
      this.shiftT(124);             // 'empty'
    }

    private parse_PositionalVar()
    {
      this.eventHandler.startNonterminal("PositionalVar", this.e0);
      this.shift(82);               // 'at'
      this.lookahead1W(21);         // S^WS | '$' | '(:'
      this.shift(31);               // '$'
      this.lookahead1W(245);        // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      this.whitespace();
      this.parse_VarName();
      this.eventHandler.endNonterminal("PositionalVar", this.e0);
    }

    private try_PositionalVar()
    {
      this.shiftT(82);              // 'at'
      this.lookahead1W(21);         // S^WS | '$' | '(:'
      this.shiftT(31);              // '$'
      this.lookahead1W(245);        // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      this.try_VarName();
    }

    private parse_FTScoreVar()
    {
      this.eventHandler.startNonterminal("FTScoreVar", this.e0);
      this.shift(232);              // 'score'
      this.lookahead1W(21);         // S^WS | '$' | '(:'
      this.shift(31);               // '$'
      this.lookahead1W(245);        // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      this.whitespace();
      this.parse_VarName();
      this.eventHandler.endNonterminal("FTScoreVar", this.e0);
    }

    private try_FTScoreVar()
    {
      this.shiftT(232);             // 'score'
      this.lookahead1W(21);         // S^WS | '$' | '(:'
      this.shiftT(31);              // '$'
      this.lookahead1W(245);        // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      this.try_VarName();
    }

    private parse_LetClause()
    {
      this.eventHandler.startNonterminal("LetClause", this.e0);
      this.shift(177);              // 'let'
      this.lookahead1W(100);        // S^WS | '$' | '(:' | 'score'
      this.whitespace();
      this.parse_LetBinding();
      for (;;)
      {
        if (this.l1 != 42)          // ','
        {
          break;
        }
        this.shift(42);             // ','
        this.lookahead1W(100);      // S^WS | '$' | '(:' | 'score'
        this.whitespace();
        this.parse_LetBinding();
      }
      this.eventHandler.endNonterminal("LetClause", this.e0);
    }

    private try_LetClause()
    {
      this.shiftT(177);             // 'let'
      this.lookahead1W(100);        // S^WS | '$' | '(:' | 'score'
      this.try_LetBinding();
      for (;;)
      {
        if (this.l1 != 42)          // ','
        {
          break;
        }
        this.shiftT(42);            // ','
        this.lookahead1W(100);      // S^WS | '$' | '(:' | 'score'
        this.try_LetBinding();
      }
    }

    private parse_LetBinding()
    {
      this.eventHandler.startNonterminal("LetBinding", this.e0);
      switch (this.l1)
      {
      case 31:                      // '$'
        this.shift(31);             // '$'
        this.lookahead1W(245);      // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
        this.whitespace();
        this.parse_VarName();
        this.lookahead1W(109);      // S^WS | '(:' | ':=' | 'as'
        if (this.l1 == 80)          // 'as'
        {
          this.whitespace();
          this.parse_TypeDeclaration();
        }
        break;
      default:
        this.parse_FTScoreVar();
      }
      this.lookahead1W(28);         // S^WS | '(:' | ':='
      this.shift(53);               // ':='
      this.lookahead1W(266);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.whitespace();
      this.parse_ExprSingle();
      this.eventHandler.endNonterminal("LetBinding", this.e0);
    }

    private try_LetBinding()
    {
      switch (this.l1)
      {
      case 31:                      // '$'
        this.shiftT(31);            // '$'
        this.lookahead1W(245);      // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
        this.try_VarName();
        this.lookahead1W(109);      // S^WS | '(:' | ':=' | 'as'
        if (this.l1 == 80)          // 'as'
        {
          this.try_TypeDeclaration();
        }
        break;
      default:
        this.try_FTScoreVar();
      }
      this.lookahead1W(28);         // S^WS | '(:' | ':='
      this.shiftT(53);              // ':='
      this.lookahead1W(266);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.try_ExprSingle();
    }

    private parse_WindowClause()
    {
      this.eventHandler.startNonterminal("WindowClause", this.e0);
      this.shift(139);              // 'for'
      this.lookahead1W(139);        // S^WS | '(:' | 'sliding' | 'tumbling'
      switch (this.l1)
      {
      case 257:                     // 'tumbling'
        this.whitespace();
        this.parse_TumblingWindowClause();
        break;
      default:
        this.whitespace();
        this.parse_SlidingWindowClause();
      }
      this.eventHandler.endNonterminal("WindowClause", this.e0);
    }

    private try_WindowClause()
    {
      this.shiftT(139);             // 'for'
      this.lookahead1W(139);        // S^WS | '(:' | 'sliding' | 'tumbling'
      switch (this.l1)
      {
      case 257:                     // 'tumbling'
        this.try_TumblingWindowClause();
        break;
      default:
        this.try_SlidingWindowClause();
      }
    }

    private parse_TumblingWindowClause()
    {
      this.eventHandler.startNonterminal("TumblingWindowClause", this.e0);
      this.shift(257);              // 'tumbling'
      this.lookahead1W(88);         // S^WS | '(:' | 'window'
      this.shift(275);              // 'window'
      this.lookahead1W(21);         // S^WS | '$' | '(:'
      this.shift(31);               // '$'
      this.lookahead1W(245);        // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      this.whitespace();
      this.parse_VarName();
      this.lookahead1W(114);        // S^WS | '(:' | 'as' | 'in'
      if (this.l1 == 80)            // 'as'
      {
        this.whitespace();
        this.parse_TypeDeclaration();
      }
      this.lookahead1W(56);         // S^WS | '(:' | 'in'
      this.shift(156);              // 'in'
      this.lookahead1W(266);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.whitespace();
      this.parse_ExprSingle();
      this.whitespace();
      this.parse_WindowStartCondition();
      if (this.l1 == 127            // 'end'
       || this.l1 == 202)           // 'only'
      {
        this.whitespace();
        this.parse_WindowEndCondition();
      }
      this.eventHandler.endNonterminal("TumblingWindowClause", this.e0);
    }

    private try_TumblingWindowClause()
    {
      this.shiftT(257);             // 'tumbling'
      this.lookahead1W(88);         // S^WS | '(:' | 'window'
      this.shiftT(275);             // 'window'
      this.lookahead1W(21);         // S^WS | '$' | '(:'
      this.shiftT(31);              // '$'
      this.lookahead1W(245);        // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      this.try_VarName();
      this.lookahead1W(114);        // S^WS | '(:' | 'as' | 'in'
      if (this.l1 == 80)            // 'as'
      {
        this.try_TypeDeclaration();
      }
      this.lookahead1W(56);         // S^WS | '(:' | 'in'
      this.shiftT(156);             // 'in'
      this.lookahead1W(266);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.try_ExprSingle();
      this.try_WindowStartCondition();
      if (this.l1 == 127            // 'end'
       || this.l1 == 202)           // 'only'
      {
        this.try_WindowEndCondition();
      }
    }

    private parse_SlidingWindowClause()
    {
      this.eventHandler.startNonterminal("SlidingWindowClause", this.e0);
      this.shift(239);              // 'sliding'
      this.lookahead1W(88);         // S^WS | '(:' | 'window'
      this.shift(275);              // 'window'
      this.lookahead1W(21);         // S^WS | '$' | '(:'
      this.shift(31);               // '$'
      this.lookahead1W(245);        // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      this.whitespace();
      this.parse_VarName();
      this.lookahead1W(114);        // S^WS | '(:' | 'as' | 'in'
      if (this.l1 == 80)            // 'as'
      {
        this.whitespace();
        this.parse_TypeDeclaration();
      }
      this.lookahead1W(56);         // S^WS | '(:' | 'in'
      this.shift(156);              // 'in'
      this.lookahead1W(266);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.whitespace();
      this.parse_ExprSingle();
      this.whitespace();
      this.parse_WindowStartCondition();
      this.whitespace();
      this.parse_WindowEndCondition();
      this.eventHandler.endNonterminal("SlidingWindowClause", this.e0);
    }

    private try_SlidingWindowClause()
    {
      this.shiftT(239);             // 'sliding'
      this.lookahead1W(88);         // S^WS | '(:' | 'window'
      this.shiftT(275);             // 'window'
      this.lookahead1W(21);         // S^WS | '$' | '(:'
      this.shiftT(31);              // '$'
      this.lookahead1W(245);        // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      this.try_VarName();
      this.lookahead1W(114);        // S^WS | '(:' | 'as' | 'in'
      if (this.l1 == 80)            // 'as'
      {
        this.try_TypeDeclaration();
      }
      this.lookahead1W(56);         // S^WS | '(:' | 'in'
      this.shiftT(156);             // 'in'
      this.lookahead1W(266);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.try_ExprSingle();
      this.try_WindowStartCondition();
      this.try_WindowEndCondition();
    }

    private parse_WindowStartCondition()
    {
      this.eventHandler.startNonterminal("WindowStartCondition", this.e0);
      this.shift(242);              // 'start'
      this.lookahead1W(181);        // S^WS | '$' | '(:' | 'at' | 'next' | 'previous' | 'when'
      this.whitespace();
      this.parse_WindowVars();
      this.lookahead1W(86);         // S^WS | '(:' | 'when'
      this.shift(271);              // 'when'
      this.lookahead1W(266);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.whitespace();
      this.parse_ExprSingle();
      this.eventHandler.endNonterminal("WindowStartCondition", this.e0);
    }

    private try_WindowStartCondition()
    {
      this.shiftT(242);             // 'start'
      this.lookahead1W(181);        // S^WS | '$' | '(:' | 'at' | 'next' | 'previous' | 'when'
      this.try_WindowVars();
      this.lookahead1W(86);         // S^WS | '(:' | 'when'
      this.shiftT(271);             // 'when'
      this.lookahead1W(266);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.try_ExprSingle();
    }

    private parse_WindowEndCondition()
    {
      this.eventHandler.startNonterminal("WindowEndCondition", this.e0);
      if (this.l1 == 202)           // 'only'
      {
        this.shift(202);            // 'only'
      }
      this.lookahead1W(53);         // S^WS | '(:' | 'end'
      this.shift(127);              // 'end'
      this.lookahead1W(181);        // S^WS | '$' | '(:' | 'at' | 'next' | 'previous' | 'when'
      this.whitespace();
      this.parse_WindowVars();
      this.lookahead1W(86);         // S^WS | '(:' | 'when'
      this.shift(271);              // 'when'
      this.lookahead1W(266);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.whitespace();
      this.parse_ExprSingle();
      this.eventHandler.endNonterminal("WindowEndCondition", this.e0);
    }

    private try_WindowEndCondition()
    {
      if (this.l1 == 202)           // 'only'
      {
        this.shiftT(202);           // 'only'
      }
      this.lookahead1W(53);         // S^WS | '(:' | 'end'
      this.shiftT(127);             // 'end'
      this.lookahead1W(181);        // S^WS | '$' | '(:' | 'at' | 'next' | 'previous' | 'when'
      this.try_WindowVars();
      this.lookahead1W(86);         // S^WS | '(:' | 'when'
      this.shiftT(271);             // 'when'
      this.lookahead1W(266);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.try_ExprSingle();
    }

    private parse_WindowVars()
    {
      this.eventHandler.startNonterminal("WindowVars", this.e0);
      if (this.l1 == 31)            // '$'
      {
        this.shift(31);             // '$'
        this.lookahead1W(245);      // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
        this.whitespace();
        this.parse_CurrentItem();
      }
      this.lookahead1W(174);        // S^WS | '(:' | 'at' | 'next' | 'previous' | 'when'
      if (this.l1 == 82)            // 'at'
      {
        this.whitespace();
        this.parse_PositionalVar();
      }
      this.lookahead1W(163);        // S^WS | '(:' | 'next' | 'previous' | 'when'
      if (this.l1 == 219)           // 'previous'
      {
        this.shift(219);            // 'previous'
        this.lookahead1W(21);       // S^WS | '$' | '(:'
        this.shift(31);             // '$'
        this.lookahead1W(245);      // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
        this.whitespace();
        this.parse_PreviousItem();
      }
      this.lookahead1W(131);        // S^WS | '(:' | 'next' | 'when'
      if (this.l1 == 190)           // 'next'
      {
        this.shift(190);            // 'next'
        this.lookahead1W(21);       // S^WS | '$' | '(:'
        this.shift(31);             // '$'
        this.lookahead1W(245);      // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
        this.whitespace();
        this.parse_NextItem();
      }
      this.eventHandler.endNonterminal("WindowVars", this.e0);
    }

    private try_WindowVars()
    {
      if (this.l1 == 31)            // '$'
      {
        this.shiftT(31);            // '$'
        this.lookahead1W(245);      // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
        this.try_CurrentItem();
      }
      this.lookahead1W(174);        // S^WS | '(:' | 'at' | 'next' | 'previous' | 'when'
      if (this.l1 == 82)            // 'at'
      {
        this.try_PositionalVar();
      }
      this.lookahead1W(163);        // S^WS | '(:' | 'next' | 'previous' | 'when'
      if (this.l1 == 219)           // 'previous'
      {
        this.shiftT(219);           // 'previous'
        this.lookahead1W(21);       // S^WS | '$' | '(:'
        this.shiftT(31);            // '$'
        this.lookahead1W(245);      // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
        this.try_PreviousItem();
      }
      this.lookahead1W(131);        // S^WS | '(:' | 'next' | 'when'
      if (this.l1 == 190)           // 'next'
      {
        this.shiftT(190);           // 'next'
        this.lookahead1W(21);       // S^WS | '$' | '(:'
        this.shiftT(31);            // '$'
        this.lookahead1W(245);      // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
        this.try_NextItem();
      }
    }

    private parse_CurrentItem()
    {
      this.eventHandler.startNonterminal("CurrentItem", this.e0);
      this.parse_EQName();
      this.eventHandler.endNonterminal("CurrentItem", this.e0);
    }

    private try_CurrentItem()
    {
      this.try_EQName();
    }

    private parse_PreviousItem()
    {
      this.eventHandler.startNonterminal("PreviousItem", this.e0);
      this.parse_EQName();
      this.eventHandler.endNonterminal("PreviousItem", this.e0);
    }

    private try_PreviousItem()
    {
      this.try_EQName();
    }

    private parse_NextItem()
    {
      this.eventHandler.startNonterminal("NextItem", this.e0);
      this.parse_EQName();
      this.eventHandler.endNonterminal("NextItem", this.e0);
    }

    private try_NextItem()
    {
      this.try_EQName();
    }

    private parse_CountClause()
    {
      this.eventHandler.startNonterminal("CountClause", this.e0);
      this.shift(106);              // 'count'
      this.lookahead1W(21);         // S^WS | '$' | '(:'
      this.shift(31);               // '$'
      this.lookahead1W(245);        // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      this.whitespace();
      this.parse_VarName();
      this.eventHandler.endNonterminal("CountClause", this.e0);
    }

    private try_CountClause()
    {
      this.shiftT(106);             // 'count'
      this.lookahead1W(21);         // S^WS | '$' | '(:'
      this.shiftT(31);              // '$'
      this.lookahead1W(245);        // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      this.try_VarName();
    }

    private parse_WhereClause()
    {
      this.eventHandler.startNonterminal("WhereClause", this.e0);
      this.shift(272);              // 'where'
      this.lookahead1W(266);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.whitespace();
      this.parse_ExprSingle();
      this.eventHandler.endNonterminal("WhereClause", this.e0);
    }

    private try_WhereClause()
    {
      this.shiftT(272);             // 'where'
      this.lookahead1W(266);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.try_ExprSingle();
    }

    private parse_GroupByClause()
    {
      this.eventHandler.startNonterminal("GroupByClause", this.e0);
      this.shift(150);              // 'group'
      this.lookahead1W(37);         // S^WS | '(:' | 'by'
      this.shift(88);               // 'by'
      this.lookahead1W(266);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.whitespace();
      this.parse_GroupingSpecList();
      this.eventHandler.endNonterminal("GroupByClause", this.e0);
    }

    private try_GroupByClause()
    {
      this.shiftT(150);             // 'group'
      this.lookahead1W(37);         // S^WS | '(:' | 'by'
      this.shiftT(88);              // 'by'
      this.lookahead1W(266);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.try_GroupingSpecList();
    }

    private parse_GroupingSpecList()
    {
      this.eventHandler.startNonterminal("GroupingSpecList", this.e0);
      this.parse_GroupingSpec();
      for (;;)
      {
        this.lookahead1W(198);      // S^WS | '(:' | ',' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' |
                                    // 'stable' | 'where'
        if (this.l1 != 42)          // ','
        {
          break;
        }
        this.shift(42);             // ','
        this.lookahead1W(266);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
        this.whitespace();
        this.parse_GroupingSpec();
      }
      this.eventHandler.endNonterminal("GroupingSpecList", this.e0);
    }

    private try_GroupingSpecList()
    {
      this.try_GroupingSpec();
      for (;;)
      {
        this.lookahead1W(198);      // S^WS | '(:' | ',' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' |
                                    // 'stable' | 'where'
        if (this.l1 != 42)          // ','
        {
          break;
        }
        this.shiftT(42);            // ','
        this.lookahead1W(266);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
        this.try_GroupingSpec();
      }
    }

    private parse_GroupingSpec()
    {
      this.eventHandler.startNonterminal("GroupingSpec", this.e0);
      switch (this.l1)
      {
      case 31:                      // '$'
        this.lookahead2W(245);      // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
        break;
      default:
        this.lk = this.l1;
      }
      if (this.lk == 3103           // '$' EQName^Token
       || this.lk == 36383          // '$' 'after'
       || this.lk == 37407          // '$' 'allowing'
       || this.lk == 37919          // '$' 'ancestor'
       || this.lk == 38431          // '$' 'ancestor-or-self'
       || this.lk == 38943          // '$' 'and'
       || this.lk == 39967          // '$' 'append'
       || this.lk == 40479          // '$' 'array'
       || this.lk == 40991          // '$' 'as'
       || this.lk == 41503          // '$' 'ascending'
       || this.lk == 42015          // '$' 'at'
       || this.lk == 42527          // '$' 'attribute'
       || this.lk == 43039          // '$' 'base-uri'
       || this.lk == 43551          // '$' 'before'
       || this.lk == 44063          // '$' 'boundary-space'
       || this.lk == 44575          // '$' 'break'
       || this.lk == 45599          // '$' 'case'
       || this.lk == 46111          // '$' 'cast'
       || this.lk == 46623          // '$' 'castable'
       || this.lk == 47135          // '$' 'catch'
       || this.lk == 48159          // '$' 'child'
       || this.lk == 48671          // '$' 'collation'
       || this.lk == 49695          // '$' 'comment'
       || this.lk == 50207          // '$' 'constraint'
       || this.lk == 50719          // '$' 'construction'
       || this.lk == 52255          // '$' 'context'
       || this.lk == 52767          // '$' 'continue'
       || this.lk == 53279          // '$' 'copy'
       || this.lk == 53791          // '$' 'copy-namespaces'
       || this.lk == 54303          // '$' 'count'
       || this.lk == 54815          // '$' 'decimal-format'
       || this.lk == 55839          // '$' 'declare'
       || this.lk == 56351          // '$' 'default'
       || this.lk == 56863          // '$' 'delete'
       || this.lk == 57375          // '$' 'descendant'
       || this.lk == 57887          // '$' 'descendant-or-self'
       || this.lk == 58399          // '$' 'descending'
       || this.lk == 60959          // '$' 'div'
       || this.lk == 61471          // '$' 'document'
       || this.lk == 61983          // '$' 'document-node'
       || this.lk == 62495          // '$' 'element'
       || this.lk == 63007          // '$' 'else'
       || this.lk == 63519          // '$' 'empty'
       || this.lk == 64031          // '$' 'empty-sequence'
       || this.lk == 64543          // '$' 'encoding'
       || this.lk == 65055          // '$' 'end'
       || this.lk == 66079          // '$' 'eq'
       || this.lk == 66591          // '$' 'every'
       || this.lk == 67615          // '$' 'except'
       || this.lk == 68127          // '$' 'exit'
       || this.lk == 68639          // '$' 'external'
       || this.lk == 69151          // '$' 'false'
       || this.lk == 69663          // '$' 'first'
       || this.lk == 70175          // '$' 'following'
       || this.lk == 70687          // '$' 'following-sibling'
       || this.lk == 71199          // '$' 'for'
       || this.lk == 72735          // '$' 'from'
       || this.lk == 73247          // '$' 'ft-option'
       || this.lk == 75295          // '$' 'function'
       || this.lk == 75807          // '$' 'ge'
       || this.lk == 76831          // '$' 'group'
       || this.lk == 77855          // '$' 'gt'
       || this.lk == 78367          // '$' 'idiv'
       || this.lk == 78879          // '$' 'if'
       || this.lk == 79391          // '$' 'import'
       || this.lk == 79903          // '$' 'in'
       || this.lk == 80415          // '$' 'index'
       || this.lk == 82463          // '$' 'insert'
       || this.lk == 82975          // '$' 'instance'
       || this.lk == 83487          // '$' 'integrity'
       || this.lk == 83999          // '$' 'intersect'
       || this.lk == 84511          // '$' 'into'
       || this.lk == 85023          // '$' 'is'
       || this.lk == 85535          // '$' 'item'
       || this.lk == 86047          // '$' 'json'
       || this.lk == 86559          // '$' 'json-item'
       || this.lk == 87071          // '$' 'jsoniq'
       || this.lk == 88607          // '$' 'last'
       || this.lk == 89119          // '$' 'lax'
       || this.lk == 89631          // '$' 'le'
       || this.lk == 90655          // '$' 'let'
       || this.lk == 91679          // '$' 'loop'
       || this.lk == 92703          // '$' 'lt'
       || this.lk == 93727          // '$' 'mod'
       || this.lk == 94239          // '$' 'modify'
       || this.lk == 94751          // '$' 'module'
       || this.lk == 95775          // '$' 'namespace'
       || this.lk == 96287          // '$' 'namespace-node'
       || this.lk == 96799          // '$' 'ne'
       || this.lk == 99359          // '$' 'node'
       || this.lk == 99871          // '$' 'nodes'
       || this.lk == 100895         // '$' 'null'
       || this.lk == 101407         // '$' 'object'
       || this.lk == 103455         // '$' 'only'
       || this.lk == 103967         // '$' 'option'
       || this.lk == 104479         // '$' 'or'
       || this.lk == 104991         // '$' 'order'
       || this.lk == 105503         // '$' 'ordered'
       || this.lk == 106015         // '$' 'ordering'
       || this.lk == 107551         // '$' 'parent'
       || this.lk == 110623         // '$' 'preceding'
       || this.lk == 111135         // '$' 'preceding-sibling'
       || this.lk == 112671         // '$' 'processing-instruction'
       || this.lk == 113695         // '$' 'rename'
       || this.lk == 114207         // '$' 'replace'
       || this.lk == 114719         // '$' 'return'
       || this.lk == 115231         // '$' 'returning'
       || this.lk == 115743         // '$' 'revalidation'
       || this.lk == 116767         // '$' 'satisfies'
       || this.lk == 117279         // '$' 'schema'
       || this.lk == 117791         // '$' 'schema-attribute'
       || this.lk == 118303         // '$' 'schema-element'
       || this.lk == 118815         // '$' 'score'
       || this.lk == 119327         // '$' 'select'
       || this.lk == 119839         // '$' 'self'
       || this.lk == 122399         // '$' 'sliding'
       || this.lk == 122911         // '$' 'some'
       || this.lk == 123423         // '$' 'stable'
       || this.lk == 123935         // '$' 'start'
       || this.lk == 125471         // '$' 'strict'
       || this.lk == 126495         // '$' 'structured-item'
       || this.lk == 127007         // '$' 'switch'
       || this.lk == 127519         // '$' 'text'
       || this.lk == 129567         // '$' 'to'
       || this.lk == 130079         // '$' 'treat'
       || this.lk == 130591         // '$' 'true'
       || this.lk == 131103         // '$' 'try'
       || this.lk == 131615         // '$' 'tumbling'
       || this.lk == 132127         // '$' 'type'
       || this.lk == 132639         // '$' 'typeswitch'
       || this.lk == 133151         // '$' 'union'
       || this.lk == 134175         // '$' 'unordered'
       || this.lk == 134687         // '$' 'updating'
       || this.lk == 136223         // '$' 'validate'
       || this.lk == 136735         // '$' 'value'
       || this.lk == 137247         // '$' 'variable'
       || this.lk == 137759         // '$' 'version'
       || this.lk == 139295         // '$' 'where'
       || this.lk == 139807         // '$' 'while'
       || this.lk == 141343)        // '$' 'with'
      {
        this.lk = this.memoized(2, this.e0);
        if (this.lk == 0)
        {
          var b0A = this.b0; var e0A = this.e0; var l1A = this.l1;
          var b1A = this.b1; var e1A = this.e1; var l2A = this.l2;
          var b2A = this.b2; var e2A = this.e2;
          try
          {
            this.try_GroupingVariable();
            this.lookahead1W(205);  // S^WS | '(:' | ',' | ':=' | 'as' | 'collation' | 'count' | 'for' | 'group' |
                                    // 'let' | 'order' | 'return' | 'stable' | 'where'
            if (this.l1 == 53       // ':='
             || this.l1 == 80)      // 'as'
            {
              if (this.l1 == 80)    // 'as'
              {
                this.try_TypeDeclaration();
              }
              this.lookahead1W(28); // S^WS | '(:' | ':='
              this.shiftT(53);      // ':='
              this.lookahead1W(266); // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                     // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                     // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                     // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                     // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                     // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                     // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                     // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                     // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                     // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                     // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                     // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                     // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                     // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                     // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                     // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                     // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                     // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                     // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                     // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' |
                                     // 'schema-element' | 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' |
                                     // 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' |
                                     // 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                     // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                     // 'with' | '{' | '{|'
              this.try_ExprSingle();
            }
            if (this.l1 == 95)      // 'collation'
            {
              this.shiftT(95);      // 'collation'
              this.lookahead1W(15); // URILiteral | S^WS | '(:'
              this.shiftT(7);       // URILiteral
            }
            this.lk = -1;
          }
          catch (p1A)
          {
            this.lk = -2;
          }
          this.b0 = b0A; this.e0 = e0A; this.l1 = l1A; if (this.l1 == 0) {this.end = e0A;} else {
          this.b1 = b1A; this.e1 = e1A; this.l2 = l2A; if (this.l2 == 0) {this.end = e1A;} else {
          this.b2 = b2A; this.e2 = e2A; this.end = e2A; }}
          this.memoize(2, this.e0, this.lk);
        }
      }
      switch (this.lk)
      {
      case -1:
        this.parse_GroupingVariable();
        this.lookahead1W(205);      // S^WS | '(:' | ',' | ':=' | 'as' | 'collation' | 'count' | 'for' | 'group' |
                                    // 'let' | 'order' | 'return' | 'stable' | 'where'
        if (this.l1 == 53           // ':='
         || this.l1 == 80)          // 'as'
        {
          if (this.l1 == 80)        // 'as'
          {
            this.whitespace();
            this.parse_TypeDeclaration();
          }
          this.lookahead1W(28);     // S^WS | '(:' | ':='
          this.shift(53);           // ':='
          this.lookahead1W(266);    // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
          this.whitespace();
          this.parse_ExprSingle();
        }
        if (this.l1 == 95)          // 'collation'
        {
          this.shift(95);           // 'collation'
          this.lookahead1W(15);     // URILiteral | S^WS | '(:'
          this.shift(7);            // URILiteral
        }
        break;
      default:
        this.parse_ExprSingle();
      }
      this.eventHandler.endNonterminal("GroupingSpec", this.e0);
    }

    private try_GroupingSpec()
    {
      switch (this.l1)
      {
      case 31:                      // '$'
        this.lookahead2W(245);      // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
        break;
      default:
        this.lk = this.l1;
      }
      if (this.lk == 3103           // '$' EQName^Token
       || this.lk == 36383          // '$' 'after'
       || this.lk == 37407          // '$' 'allowing'
       || this.lk == 37919          // '$' 'ancestor'
       || this.lk == 38431          // '$' 'ancestor-or-self'
       || this.lk == 38943          // '$' 'and'
       || this.lk == 39967          // '$' 'append'
       || this.lk == 40479          // '$' 'array'
       || this.lk == 40991          // '$' 'as'
       || this.lk == 41503          // '$' 'ascending'
       || this.lk == 42015          // '$' 'at'
       || this.lk == 42527          // '$' 'attribute'
       || this.lk == 43039          // '$' 'base-uri'
       || this.lk == 43551          // '$' 'before'
       || this.lk == 44063          // '$' 'boundary-space'
       || this.lk == 44575          // '$' 'break'
       || this.lk == 45599          // '$' 'case'
       || this.lk == 46111          // '$' 'cast'
       || this.lk == 46623          // '$' 'castable'
       || this.lk == 47135          // '$' 'catch'
       || this.lk == 48159          // '$' 'child'
       || this.lk == 48671          // '$' 'collation'
       || this.lk == 49695          // '$' 'comment'
       || this.lk == 50207          // '$' 'constraint'
       || this.lk == 50719          // '$' 'construction'
       || this.lk == 52255          // '$' 'context'
       || this.lk == 52767          // '$' 'continue'
       || this.lk == 53279          // '$' 'copy'
       || this.lk == 53791          // '$' 'copy-namespaces'
       || this.lk == 54303          // '$' 'count'
       || this.lk == 54815          // '$' 'decimal-format'
       || this.lk == 55839          // '$' 'declare'
       || this.lk == 56351          // '$' 'default'
       || this.lk == 56863          // '$' 'delete'
       || this.lk == 57375          // '$' 'descendant'
       || this.lk == 57887          // '$' 'descendant-or-self'
       || this.lk == 58399          // '$' 'descending'
       || this.lk == 60959          // '$' 'div'
       || this.lk == 61471          // '$' 'document'
       || this.lk == 61983          // '$' 'document-node'
       || this.lk == 62495          // '$' 'element'
       || this.lk == 63007          // '$' 'else'
       || this.lk == 63519          // '$' 'empty'
       || this.lk == 64031          // '$' 'empty-sequence'
       || this.lk == 64543          // '$' 'encoding'
       || this.lk == 65055          // '$' 'end'
       || this.lk == 66079          // '$' 'eq'
       || this.lk == 66591          // '$' 'every'
       || this.lk == 67615          // '$' 'except'
       || this.lk == 68127          // '$' 'exit'
       || this.lk == 68639          // '$' 'external'
       || this.lk == 69151          // '$' 'false'
       || this.lk == 69663          // '$' 'first'
       || this.lk == 70175          // '$' 'following'
       || this.lk == 70687          // '$' 'following-sibling'
       || this.lk == 71199          // '$' 'for'
       || this.lk == 72735          // '$' 'from'
       || this.lk == 73247          // '$' 'ft-option'
       || this.lk == 75295          // '$' 'function'
       || this.lk == 75807          // '$' 'ge'
       || this.lk == 76831          // '$' 'group'
       || this.lk == 77855          // '$' 'gt'
       || this.lk == 78367          // '$' 'idiv'
       || this.lk == 78879          // '$' 'if'
       || this.lk == 79391          // '$' 'import'
       || this.lk == 79903          // '$' 'in'
       || this.lk == 80415          // '$' 'index'
       || this.lk == 82463          // '$' 'insert'
       || this.lk == 82975          // '$' 'instance'
       || this.lk == 83487          // '$' 'integrity'
       || this.lk == 83999          // '$' 'intersect'
       || this.lk == 84511          // '$' 'into'
       || this.lk == 85023          // '$' 'is'
       || this.lk == 85535          // '$' 'item'
       || this.lk == 86047          // '$' 'json'
       || this.lk == 86559          // '$' 'json-item'
       || this.lk == 87071          // '$' 'jsoniq'
       || this.lk == 88607          // '$' 'last'
       || this.lk == 89119          // '$' 'lax'
       || this.lk == 89631          // '$' 'le'
       || this.lk == 90655          // '$' 'let'
       || this.lk == 91679          // '$' 'loop'
       || this.lk == 92703          // '$' 'lt'
       || this.lk == 93727          // '$' 'mod'
       || this.lk == 94239          // '$' 'modify'
       || this.lk == 94751          // '$' 'module'
       || this.lk == 95775          // '$' 'namespace'
       || this.lk == 96287          // '$' 'namespace-node'
       || this.lk == 96799          // '$' 'ne'
       || this.lk == 99359          // '$' 'node'
       || this.lk == 99871          // '$' 'nodes'
       || this.lk == 100895         // '$' 'null'
       || this.lk == 101407         // '$' 'object'
       || this.lk == 103455         // '$' 'only'
       || this.lk == 103967         // '$' 'option'
       || this.lk == 104479         // '$' 'or'
       || this.lk == 104991         // '$' 'order'
       || this.lk == 105503         // '$' 'ordered'
       || this.lk == 106015         // '$' 'ordering'
       || this.lk == 107551         // '$' 'parent'
       || this.lk == 110623         // '$' 'preceding'
       || this.lk == 111135         // '$' 'preceding-sibling'
       || this.lk == 112671         // '$' 'processing-instruction'
       || this.lk == 113695         // '$' 'rename'
       || this.lk == 114207         // '$' 'replace'
       || this.lk == 114719         // '$' 'return'
       || this.lk == 115231         // '$' 'returning'
       || this.lk == 115743         // '$' 'revalidation'
       || this.lk == 116767         // '$' 'satisfies'
       || this.lk == 117279         // '$' 'schema'
       || this.lk == 117791         // '$' 'schema-attribute'
       || this.lk == 118303         // '$' 'schema-element'
       || this.lk == 118815         // '$' 'score'
       || this.lk == 119327         // '$' 'select'
       || this.lk == 119839         // '$' 'self'
       || this.lk == 122399         // '$' 'sliding'
       || this.lk == 122911         // '$' 'some'
       || this.lk == 123423         // '$' 'stable'
       || this.lk == 123935         // '$' 'start'
       || this.lk == 125471         // '$' 'strict'
       || this.lk == 126495         // '$' 'structured-item'
       || this.lk == 127007         // '$' 'switch'
       || this.lk == 127519         // '$' 'text'
       || this.lk == 129567         // '$' 'to'
       || this.lk == 130079         // '$' 'treat'
       || this.lk == 130591         // '$' 'true'
       || this.lk == 131103         // '$' 'try'
       || this.lk == 131615         // '$' 'tumbling'
       || this.lk == 132127         // '$' 'type'
       || this.lk == 132639         // '$' 'typeswitch'
       || this.lk == 133151         // '$' 'union'
       || this.lk == 134175         // '$' 'unordered'
       || this.lk == 134687         // '$' 'updating'
       || this.lk == 136223         // '$' 'validate'
       || this.lk == 136735         // '$' 'value'
       || this.lk == 137247         // '$' 'variable'
       || this.lk == 137759         // '$' 'version'
       || this.lk == 139295         // '$' 'where'
       || this.lk == 139807         // '$' 'while'
       || this.lk == 141343)        // '$' 'with'
      {
        this.lk = this.memoized(2, this.e0);
        if (this.lk == 0)
        {
          var b0A = this.b0; var e0A = this.e0; var l1A = this.l1;
          var b1A = this.b1; var e1A = this.e1; var l2A = this.l2;
          var b2A = this.b2; var e2A = this.e2;
          try
          {
            this.try_GroupingVariable();
            this.lookahead1W(205);  // S^WS | '(:' | ',' | ':=' | 'as' | 'collation' | 'count' | 'for' | 'group' |
                                    // 'let' | 'order' | 'return' | 'stable' | 'where'
            if (this.l1 == 53       // ':='
             || this.l1 == 80)      // 'as'
            {
              if (this.l1 == 80)    // 'as'
              {
                this.try_TypeDeclaration();
              }
              this.lookahead1W(28); // S^WS | '(:' | ':='
              this.shiftT(53);      // ':='
              this.lookahead1W(266); // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                     // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                     // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                     // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                     // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                     // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                     // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                     // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                     // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                     // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                     // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                     // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                     // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                     // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                     // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                     // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                     // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                     // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                     // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                     // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' |
                                     // 'schema-element' | 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' |
                                     // 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' |
                                     // 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                     // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                     // 'with' | '{' | '{|'
              this.try_ExprSingle();
            }
            if (this.l1 == 95)      // 'collation'
            {
              this.shiftT(95);      // 'collation'
              this.lookahead1W(15); // URILiteral | S^WS | '(:'
              this.shiftT(7);       // URILiteral
            }
            this.memoize(2, e0A, -1);
            this.lk = -3;
          }
          catch (p1A)
          {
            this.lk = -2;
            this.b0 = b0A; this.e0 = e0A; this.l1 = l1A; if (this.l1 == 0) {this.end = e0A;} else {
            this.b1 = b1A; this.e1 = e1A; this.l2 = l2A; if (this.l2 == 0) {this.end = e1A;} else {
            this.b2 = b2A; this.e2 = e2A; this.end = e2A; }}
            this.memoize(2, e0A, -2);
          }
        }
      }
      switch (this.lk)
      {
      case -1:
        this.try_GroupingVariable();
        this.lookahead1W(205);      // S^WS | '(:' | ',' | ':=' | 'as' | 'collation' | 'count' | 'for' | 'group' |
                                    // 'let' | 'order' | 'return' | 'stable' | 'where'
        if (this.l1 == 53           // ':='
         || this.l1 == 80)          // 'as'
        {
          if (this.l1 == 80)        // 'as'
          {
            this.try_TypeDeclaration();
          }
          this.lookahead1W(28);     // S^WS | '(:' | ':='
          this.shiftT(53);          // ':='
          this.lookahead1W(266);    // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
          this.try_ExprSingle();
        }
        if (this.l1 == 95)          // 'collation'
        {
          this.shiftT(95);          // 'collation'
          this.lookahead1W(15);     // URILiteral | S^WS | '(:'
          this.shiftT(7);           // URILiteral
        }
        break;
      case -3:
        break;
      default:
        this.try_ExprSingle();
      }
    }

    private parse_GroupingVariable()
    {
      this.eventHandler.startNonterminal("GroupingVariable", this.e0);
      this.shift(31);               // '$'
      this.lookahead1W(245);        // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      this.whitespace();
      this.parse_VarName();
      this.eventHandler.endNonterminal("GroupingVariable", this.e0);
    }

    private try_GroupingVariable()
    {
      this.shiftT(31);              // '$'
      this.lookahead1W(245);        // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      this.try_VarName();
    }

    private parse_OrderByClause()
    {
      this.eventHandler.startNonterminal("OrderByClause", this.e0);
      switch (this.l1)
      {
      case 205:                     // 'order'
        this.shift(205);            // 'order'
        this.lookahead1W(37);       // S^WS | '(:' | 'by'
        this.shift(88);             // 'by'
        break;
      default:
        this.shift(241);            // 'stable'
        this.lookahead1W(70);       // S^WS | '(:' | 'order'
        this.shift(205);            // 'order'
        this.lookahead1W(37);       // S^WS | '(:' | 'by'
        this.shift(88);             // 'by'
      }
      this.lookahead1W(266);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.whitespace();
      this.parse_OrderSpecList();
      this.eventHandler.endNonterminal("OrderByClause", this.e0);
    }

    private try_OrderByClause()
    {
      switch (this.l1)
      {
      case 205:                     // 'order'
        this.shiftT(205);           // 'order'
        this.lookahead1W(37);       // S^WS | '(:' | 'by'
        this.shiftT(88);            // 'by'
        break;
      default:
        this.shiftT(241);           // 'stable'
        this.lookahead1W(70);       // S^WS | '(:' | 'order'
        this.shiftT(205);           // 'order'
        this.lookahead1W(37);       // S^WS | '(:' | 'by'
        this.shiftT(88);            // 'by'
      }
      this.lookahead1W(266);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.try_OrderSpecList();
    }

    private parse_OrderSpecList()
    {
      this.eventHandler.startNonterminal("OrderSpecList", this.e0);
      this.parse_OrderSpec();
      for (;;)
      {
        this.lookahead1W(198);      // S^WS | '(:' | ',' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' |
                                    // 'stable' | 'where'
        if (this.l1 != 42)          // ','
        {
          break;
        }
        this.shift(42);             // ','
        this.lookahead1W(266);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
        this.whitespace();
        this.parse_OrderSpec();
      }
      this.eventHandler.endNonterminal("OrderSpecList", this.e0);
    }

    private try_OrderSpecList()
    {
      this.try_OrderSpec();
      for (;;)
      {
        this.lookahead1W(198);      // S^WS | '(:' | ',' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' |
                                    // 'stable' | 'where'
        if (this.l1 != 42)          // ','
        {
          break;
        }
        this.shiftT(42);            // ','
        this.lookahead1W(266);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
        this.try_OrderSpec();
      }
    }

    private parse_OrderSpec()
    {
      this.eventHandler.startNonterminal("OrderSpec", this.e0);
      this.parse_ExprSingle();
      this.whitespace();
      this.parse_OrderModifier();
      this.eventHandler.endNonterminal("OrderSpec", this.e0);
    }

    private try_OrderSpec()
    {
      this.try_ExprSingle();
      this.try_OrderModifier();
    }

    private parse_OrderModifier()
    {
      this.eventHandler.startNonterminal("OrderModifier", this.e0);
      if (this.l1 == 81             // 'ascending'
       || this.l1 == 114)           // 'descending'
      {
        switch (this.l1)
        {
        case 81:                    // 'ascending'
          this.shift(81);           // 'ascending'
          break;
        default:
          this.shift(114);          // 'descending'
        }
      }
      this.lookahead1W(202);        // S^WS | '(:' | ',' | 'collation' | 'count' | 'empty' | 'for' | 'group' | 'let' |
                                    // 'order' | 'return' | 'stable' | 'where'
      if (this.l1 == 124)           // 'empty'
      {
        this.shift(124);            // 'empty'
        this.lookahead1W(125);      // S^WS | '(:' | 'greatest' | 'least'
        switch (this.l1)
        {
        case 149:                   // 'greatest'
          this.shift(149);          // 'greatest'
          break;
        default:
          this.shift(176);          // 'least'
        }
      }
      this.lookahead1W(199);        // S^WS | '(:' | ',' | 'collation' | 'count' | 'for' | 'group' | 'let' | 'order' |
                                    // 'return' | 'stable' | 'where'
      if (this.l1 == 95)            // 'collation'
      {
        this.shift(95);             // 'collation'
        this.lookahead1W(15);       // URILiteral | S^WS | '(:'
        this.shift(7);              // URILiteral
      }
      this.eventHandler.endNonterminal("OrderModifier", this.e0);
    }

    private try_OrderModifier()
    {
      if (this.l1 == 81             // 'ascending'
       || this.l1 == 114)           // 'descending'
      {
        switch (this.l1)
        {
        case 81:                    // 'ascending'
          this.shiftT(81);          // 'ascending'
          break;
        default:
          this.shiftT(114);         // 'descending'
        }
      }
      this.lookahead1W(202);        // S^WS | '(:' | ',' | 'collation' | 'count' | 'empty' | 'for' | 'group' | 'let' |
                                    // 'order' | 'return' | 'stable' | 'where'
      if (this.l1 == 124)           // 'empty'
      {
        this.shiftT(124);           // 'empty'
        this.lookahead1W(125);      // S^WS | '(:' | 'greatest' | 'least'
        switch (this.l1)
        {
        case 149:                   // 'greatest'
          this.shiftT(149);         // 'greatest'
          break;
        default:
          this.shiftT(176);         // 'least'
        }
      }
      this.lookahead1W(199);        // S^WS | '(:' | ',' | 'collation' | 'count' | 'for' | 'group' | 'let' | 'order' |
                                    // 'return' | 'stable' | 'where'
      if (this.l1 == 95)            // 'collation'
      {
        this.shiftT(95);            // 'collation'
        this.lookahead1W(15);       // URILiteral | S^WS | '(:'
        this.shiftT(7);             // URILiteral
      }
    }

    private parse_ReturnClause()
    {
      this.eventHandler.startNonterminal("ReturnClause", this.e0);
      this.shift(224);              // 'return'
      this.lookahead1W(266);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.whitespace();
      this.parse_ExprSingle();
      this.eventHandler.endNonterminal("ReturnClause", this.e0);
    }

    private try_ReturnClause()
    {
      this.shiftT(224);             // 'return'
      this.lookahead1W(266);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.try_ExprSingle();
    }

    private parse_QuantifiedExpr()
    {
      this.eventHandler.startNonterminal("QuantifiedExpr", this.e0);
      switch (this.l1)
      {
      case 240:                     // 'some'
        this.shift(240);            // 'some'
        break;
      default:
        this.shift(130);            // 'every'
      }
      this.lookahead1W(21);         // S^WS | '$' | '(:'
      this.whitespace();
      this.parse_QuantifiedVarDecl();
      for (;;)
      {
        if (this.l1 != 42)          // ','
        {
          break;
        }
        this.shift(42);             // ','
        this.lookahead1W(21);       // S^WS | '$' | '(:'
        this.whitespace();
        this.parse_QuantifiedVarDecl();
      }
      this.shift(228);              // 'satisfies'
      this.lookahead1W(266);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.whitespace();
      this.parse_ExprSingle();
      this.eventHandler.endNonterminal("QuantifiedExpr", this.e0);
    }

    private try_QuantifiedExpr()
    {
      switch (this.l1)
      {
      case 240:                     // 'some'
        this.shiftT(240);           // 'some'
        break;
      default:
        this.shiftT(130);           // 'every'
      }
      this.lookahead1W(21);         // S^WS | '$' | '(:'
      this.try_QuantifiedVarDecl();
      for (;;)
      {
        if (this.l1 != 42)          // ','
        {
          break;
        }
        this.shiftT(42);            // ','
        this.lookahead1W(21);       // S^WS | '$' | '(:'
        this.try_QuantifiedVarDecl();
      }
      this.shiftT(228);             // 'satisfies'
      this.lookahead1W(266);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.try_ExprSingle();
    }

    private parse_QuantifiedVarDecl()
    {
      this.eventHandler.startNonterminal("QuantifiedVarDecl", this.e0);
      this.shift(31);               // '$'
      this.lookahead1W(245);        // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      this.whitespace();
      this.parse_VarName();
      this.lookahead1W(114);        // S^WS | '(:' | 'as' | 'in'
      if (this.l1 == 80)            // 'as'
      {
        this.whitespace();
        this.parse_TypeDeclaration();
      }
      this.lookahead1W(56);         // S^WS | '(:' | 'in'
      this.shift(156);              // 'in'
      this.lookahead1W(266);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.whitespace();
      this.parse_ExprSingle();
      this.eventHandler.endNonterminal("QuantifiedVarDecl", this.e0);
    }

    private try_QuantifiedVarDecl()
    {
      this.shiftT(31);              // '$'
      this.lookahead1W(245);        // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      this.try_VarName();
      this.lookahead1W(114);        // S^WS | '(:' | 'as' | 'in'
      if (this.l1 == 80)            // 'as'
      {
        this.try_TypeDeclaration();
      }
      this.lookahead1W(56);         // S^WS | '(:' | 'in'
      this.shiftT(156);             // 'in'
      this.lookahead1W(266);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.try_ExprSingle();
    }

    private parse_SwitchExpr()
    {
      this.eventHandler.startNonterminal("SwitchExpr", this.e0);
      this.shift(248);              // 'switch'
      this.lookahead1W(22);         // S^WS | '(' | '(:'
      this.shift(35);               // '('
      this.lookahead1W(266);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.whitespace();
      this.parse_Expr();
      this.shift(38);               // ')'
      for (;;)
      {
        this.lookahead1W(38);       // S^WS | '(:' | 'case'
        this.whitespace();
        this.parse_SwitchCaseClause();
        if (this.l1 != 89)          // 'case'
        {
          break;
        }
      }
      this.shift(110);              // 'default'
      this.lookahead1W(73);         // S^WS | '(:' | 'return'
      this.shift(224);              // 'return'
      this.lookahead1W(266);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.whitespace();
      this.parse_ExprSingle();
      this.eventHandler.endNonterminal("SwitchExpr", this.e0);
    }

    private try_SwitchExpr()
    {
      this.shiftT(248);             // 'switch'
      this.lookahead1W(22);         // S^WS | '(' | '(:'
      this.shiftT(35);              // '('
      this.lookahead1W(266);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.try_Expr();
      this.shiftT(38);              // ')'
      for (;;)
      {
        this.lookahead1W(38);       // S^WS | '(:' | 'case'
        this.try_SwitchCaseClause();
        if (this.l1 != 89)          // 'case'
        {
          break;
        }
      }
      this.shiftT(110);             // 'default'
      this.lookahead1W(73);         // S^WS | '(:' | 'return'
      this.shiftT(224);             // 'return'
      this.lookahead1W(266);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.try_ExprSingle();
    }

    private parse_SwitchCaseClause()
    {
      this.eventHandler.startNonterminal("SwitchCaseClause", this.e0);
      for (;;)
      {
        this.shift(89);             // 'case'
        this.lookahead1W(266);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
        this.whitespace();
        this.parse_SwitchCaseOperand();
        if (this.l1 != 89)          // 'case'
        {
          break;
        }
      }
      this.shift(224);              // 'return'
      this.lookahead1W(266);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.whitespace();
      this.parse_ExprSingle();
      this.eventHandler.endNonterminal("SwitchCaseClause", this.e0);
    }

    private try_SwitchCaseClause()
    {
      for (;;)
      {
        this.shiftT(89);            // 'case'
        this.lookahead1W(266);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
        this.try_SwitchCaseOperand();
        if (this.l1 != 89)          // 'case'
        {
          break;
        }
      }
      this.shiftT(224);             // 'return'
      this.lookahead1W(266);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.try_ExprSingle();
    }

    private parse_SwitchCaseOperand()
    {
      this.eventHandler.startNonterminal("SwitchCaseOperand", this.e0);
      this.parse_ExprSingle();
      this.eventHandler.endNonterminal("SwitchCaseOperand", this.e0);
    }

    private try_SwitchCaseOperand()
    {
      this.try_ExprSingle();
    }

    private parse_TypeswitchExpr()
    {
      this.eventHandler.startNonterminal("TypeswitchExpr", this.e0);
      this.shift(259);              // 'typeswitch'
      this.lookahead1W(22);         // S^WS | '(' | '(:'
      this.shift(35);               // '('
      this.lookahead1W(266);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.whitespace();
      this.parse_Expr();
      this.shift(38);               // ')'
      for (;;)
      {
        this.lookahead1W(38);       // S^WS | '(:' | 'case'
        this.whitespace();
        this.parse_CaseClause();
        if (this.l1 != 89)          // 'case'
        {
          break;
        }
      }
      this.shift(110);              // 'default'
      this.lookahead1W(99);         // S^WS | '$' | '(:' | 'return'
      if (this.l1 == 31)            // '$'
      {
        this.shift(31);             // '$'
        this.lookahead1W(245);      // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
        this.whitespace();
        this.parse_VarName();
      }
      this.lookahead1W(73);         // S^WS | '(:' | 'return'
      this.shift(224);              // 'return'
      this.lookahead1W(266);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.whitespace();
      this.parse_ExprSingle();
      this.eventHandler.endNonterminal("TypeswitchExpr", this.e0);
    }

    private try_TypeswitchExpr()
    {
      this.shiftT(259);             // 'typeswitch'
      this.lookahead1W(22);         // S^WS | '(' | '(:'
      this.shiftT(35);              // '('
      this.lookahead1W(266);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.try_Expr();
      this.shiftT(38);              // ')'
      for (;;)
      {
        this.lookahead1W(38);       // S^WS | '(:' | 'case'
        this.try_CaseClause();
        if (this.l1 != 89)          // 'case'
        {
          break;
        }
      }
      this.shiftT(110);             // 'default'
      this.lookahead1W(99);         // S^WS | '$' | '(:' | 'return'
      if (this.l1 == 31)            // '$'
      {
        this.shiftT(31);            // '$'
        this.lookahead1W(245);      // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
        this.try_VarName();
      }
      this.lookahead1W(73);         // S^WS | '(:' | 'return'
      this.shiftT(224);             // 'return'
      this.lookahead1W(266);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.try_ExprSingle();
    }

    private parse_CaseClause()
    {
      this.eventHandler.startNonterminal("CaseClause", this.e0);
      this.shift(89);               // 'case'
      this.lookahead1W(257);        // EQName^Token | S^WS | '$' | '%' | '(' | '(:' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      if (this.l1 == 31)            // '$'
      {
        this.shift(31);             // '$'
        this.lookahead1W(245);      // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
        this.whitespace();
        this.parse_VarName();
        this.lookahead1W(33);       // S^WS | '(:' | 'as'
        this.shift(80);             // 'as'
      }
      this.lookahead1W(253);        // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      this.whitespace();
      this.parse_SequenceTypeUnion();
      this.shift(224);              // 'return'
      this.lookahead1W(266);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.whitespace();
      this.parse_ExprSingle();
      this.eventHandler.endNonterminal("CaseClause", this.e0);
    }

    private try_CaseClause()
    {
      this.shiftT(89);              // 'case'
      this.lookahead1W(257);        // EQName^Token | S^WS | '$' | '%' | '(' | '(:' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      if (this.l1 == 31)            // '$'
      {
        this.shiftT(31);            // '$'
        this.lookahead1W(245);      // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
        this.try_VarName();
        this.lookahead1W(33);       // S^WS | '(:' | 'as'
        this.shiftT(80);            // 'as'
      }
      this.lookahead1W(253);        // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      this.try_SequenceTypeUnion();
      this.shiftT(224);             // 'return'
      this.lookahead1W(266);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.try_ExprSingle();
    }

    private parse_SequenceTypeUnion()
    {
      this.eventHandler.startNonterminal("SequenceTypeUnion", this.e0);
      this.parse_SequenceType();
      for (;;)
      {
        this.lookahead1W(138);      // S^WS | '(:' | 'return' | '|'
        if (this.l1 != 284)         // '|'
        {
          break;
        }
        this.shift(284);            // '|'
        this.lookahead1W(253);      // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
        this.whitespace();
        this.parse_SequenceType();
      }
      this.eventHandler.endNonterminal("SequenceTypeUnion", this.e0);
    }

    private try_SequenceTypeUnion()
    {
      this.try_SequenceType();
      for (;;)
      {
        this.lookahead1W(138);      // S^WS | '(:' | 'return' | '|'
        if (this.l1 != 284)         // '|'
        {
          break;
        }
        this.shiftT(284);           // '|'
        this.lookahead1W(253);      // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
        this.try_SequenceType();
      }
    }

    private parse_IfExpr()
    {
      this.eventHandler.startNonterminal("IfExpr", this.e0);
      this.shift(154);              // 'if'
      this.lookahead1W(22);         // S^WS | '(' | '(:'
      this.shift(35);               // '('
      this.lookahead1W(266);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.whitespace();
      this.parse_Expr();
      this.shift(38);               // ')'
      this.lookahead1W(80);         // S^WS | '(:' | 'then'
      this.shift(250);              // 'then'
      this.lookahead1W(266);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.whitespace();
      this.parse_ExprSingle();
      this.shift(123);              // 'else'
      this.lookahead1W(266);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.whitespace();
      this.parse_ExprSingle();
      this.eventHandler.endNonterminal("IfExpr", this.e0);
    }

    private try_IfExpr()
    {
      this.shiftT(154);             // 'if'
      this.lookahead1W(22);         // S^WS | '(' | '(:'
      this.shiftT(35);              // '('
      this.lookahead1W(266);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.try_Expr();
      this.shiftT(38);              // ')'
      this.lookahead1W(80);         // S^WS | '(:' | 'then'
      this.shiftT(250);             // 'then'
      this.lookahead1W(266);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.try_ExprSingle();
      this.shiftT(123);             // 'else'
      this.lookahead1W(266);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.try_ExprSingle();
    }

    private parse_TryCatchExpr()
    {
      this.eventHandler.startNonterminal("TryCatchExpr", this.e0);
      this.parse_TryClause();
      for (;;)
      {
        this.lookahead1W(39);       // S^WS | '(:' | 'catch'
        this.whitespace();
        this.parse_CatchClause();
        this.lookahead1W(207);      // S^WS | EOF | '(:' | ')' | ',' | ':' | ';' | ']' | 'after' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'catch' | 'collation' | 'count' | 'default' |
                                    // 'descending' | 'else' | 'empty' | 'end' | 'for' | 'group' | 'into' | 'let' |
                                    // 'modify' | 'only' | 'order' | 'return' | 'satisfies' | 'stable' | 'start' |
                                    // 'where' | 'with' | '|}' | '}'
        if (this.l1 != 92)          // 'catch'
        {
          break;
        }
      }
      this.eventHandler.endNonterminal("TryCatchExpr", this.e0);
    }

    private try_TryCatchExpr()
    {
      this.try_TryClause();
      for (;;)
      {
        this.lookahead1W(39);       // S^WS | '(:' | 'catch'
        this.try_CatchClause();
        this.lookahead1W(207);      // S^WS | EOF | '(:' | ')' | ',' | ':' | ';' | ']' | 'after' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'catch' | 'collation' | 'count' | 'default' |
                                    // 'descending' | 'else' | 'empty' | 'end' | 'for' | 'group' | 'into' | 'let' |
                                    // 'modify' | 'only' | 'order' | 'return' | 'satisfies' | 'stable' | 'start' |
                                    // 'where' | 'with' | '|}' | '}'
        if (this.l1 != 92)          // 'catch'
        {
          break;
        }
      }
    }

    private parse_TryClause()
    {
      this.eventHandler.startNonterminal("TryClause", this.e0);
      this.shift(256);              // 'try'
      this.lookahead1W(90);         // S^WS | '(:' | '{'
      this.shift(281);              // '{'
      this.lookahead1W(266);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.whitespace();
      this.parse_TryTargetExpr();
      this.shift(287);              // '}'
      this.eventHandler.endNonterminal("TryClause", this.e0);
    }

    private try_TryClause()
    {
      this.shiftT(256);             // 'try'
      this.lookahead1W(90);         // S^WS | '(:' | '{'
      this.shiftT(281);             // '{'
      this.lookahead1W(266);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.try_TryTargetExpr();
      this.shiftT(287);             // '}'
    }

    private parse_TryTargetExpr()
    {
      this.eventHandler.startNonterminal("TryTargetExpr", this.e0);
      this.parse_Expr();
      this.eventHandler.endNonterminal("TryTargetExpr", this.e0);
    }

    private try_TryTargetExpr()
    {
      this.try_Expr();
    }

    private parse_CatchClause()
    {
      this.eventHandler.startNonterminal("CatchClause", this.e0);
      this.shift(92);               // 'catch'
      this.lookahead1W(248);        // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      this.whitespace();
      this.parse_CatchErrorList();
      this.shift(281);              // '{'
      this.lookahead1W(266);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.whitespace();
      this.parse_Expr();
      this.shift(287);              // '}'
      this.eventHandler.endNonterminal("CatchClause", this.e0);
    }

    private try_CatchClause()
    {
      this.shiftT(92);              // 'catch'
      this.lookahead1W(248);        // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      this.try_CatchErrorList();
      this.shiftT(281);             // '{'
      this.lookahead1W(266);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.try_Expr();
      this.shiftT(287);             // '}'
    }

    private parse_CatchErrorList()
    {
      this.eventHandler.startNonterminal("CatchErrorList", this.e0);
      this.parse_NameTest();
      for (;;)
      {
        this.lookahead1W(140);      // S^WS | '(:' | '{' | '|'
        if (this.l1 != 284)         // '|'
        {
          break;
        }
        this.shift(284);            // '|'
        this.lookahead1W(248);      // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
        this.whitespace();
        this.parse_NameTest();
      }
      this.eventHandler.endNonterminal("CatchErrorList", this.e0);
    }

    private try_CatchErrorList()
    {
      this.try_NameTest();
      for (;;)
      {
        this.lookahead1W(140);      // S^WS | '(:' | '{' | '|'
        if (this.l1 != 284)         // '|'
        {
          break;
        }
        this.shiftT(284);           // '|'
        this.lookahead1W(248);      // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
        this.try_NameTest();
      }
    }

    private parse_OrExpr()
    {
      this.eventHandler.startNonterminal("OrExpr", this.e0);
      this.parse_AndExpr();
      for (;;)
      {
        if (this.l1 != 204)         // 'or'
        {
          break;
        }
        this.shift(204);            // 'or'
        this.lookahead1W(266);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
        this.whitespace();
        this.parse_AndExpr();
      }
      this.eventHandler.endNonterminal("OrExpr", this.e0);
    }

    private try_OrExpr()
    {
      this.try_AndExpr();
      for (;;)
      {
        if (this.l1 != 204)         // 'or'
        {
          break;
        }
        this.shiftT(204);           // 'or'
        this.lookahead1W(266);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
        this.try_AndExpr();
      }
    }

    private parse_AndExpr()
    {
      this.eventHandler.startNonterminal("AndExpr", this.e0);
      this.parse_NotExpr();
      for (;;)
      {
        if (this.l1 != 76)          // 'and'
        {
          break;
        }
        this.shift(76);             // 'and'
        this.lookahead1W(266);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
        this.whitespace();
        this.parse_NotExpr();
      }
      this.eventHandler.endNonterminal("AndExpr", this.e0);
    }

    private try_AndExpr()
    {
      this.try_NotExpr();
      for (;;)
      {
        if (this.l1 != 76)          // 'and'
        {
          break;
        }
        this.shiftT(76);            // 'and'
        this.lookahead1W(266);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
        this.try_NotExpr();
      }
    }

    private parse_NotExpr()
    {
      this.eventHandler.startNonterminal("NotExpr", this.e0);
      if (this.l1 == 196)           // 'not'
      {
        this.shift(196);            // 'not'
      }
      this.lookahead1W(265);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'structured-item' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
      this.whitespace();
      this.parse_ComparisonExpr();
      this.eventHandler.endNonterminal("NotExpr", this.e0);
    }

    private try_NotExpr()
    {
      if (this.l1 == 196)           // 'not'
      {
        this.shiftT(196);           // 'not'
      }
      this.lookahead1W(265);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'structured-item' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
      this.try_ComparisonExpr();
    }

    private parse_ComparisonExpr()
    {
      this.eventHandler.startNonterminal("ComparisonExpr", this.e0);
      this.parse_FTContainsExpr();
      if (this.l1 == 27             // '!='
       || this.l1 == 55             // '<'
       || this.l1 == 58             // '<<'
       || this.l1 == 59             // '<='
       || this.l1 == 61             // '='
       || this.l1 == 62             // '>'
       || this.l1 == 63             // '>='
       || this.l1 == 64             // '>>'
       || this.l1 == 129            // 'eq'
       || this.l1 == 148            // 'ge'
       || this.l1 == 152            // 'gt'
       || this.l1 == 166            // 'is'
       || this.l1 == 175            // 'le'
       || this.l1 == 181            // 'lt'
       || this.l1 == 189)           // 'ne'
      {
        switch (this.l1)
        {
        case 129:                   // 'eq'
        case 148:                   // 'ge'
        case 152:                   // 'gt'
        case 175:                   // 'le'
        case 181:                   // 'lt'
        case 189:                   // 'ne'
          this.whitespace();
          this.parse_ValueComp();
          break;
        case 58:                    // '<<'
        case 64:                    // '>>'
        case 166:                   // 'is'
          this.whitespace();
          this.parse_NodeComp();
          break;
        default:
          this.whitespace();
          this.parse_GeneralComp();
        }
        this.lookahead1W(265);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'structured-item' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
        this.whitespace();
        this.parse_FTContainsExpr();
      }
      this.eventHandler.endNonterminal("ComparisonExpr", this.e0);
    }

    private try_ComparisonExpr()
    {
      this.try_FTContainsExpr();
      if (this.l1 == 27             // '!='
       || this.l1 == 55             // '<'
       || this.l1 == 58             // '<<'
       || this.l1 == 59             // '<='
       || this.l1 == 61             // '='
       || this.l1 == 62             // '>'
       || this.l1 == 63             // '>='
       || this.l1 == 64             // '>>'
       || this.l1 == 129            // 'eq'
       || this.l1 == 148            // 'ge'
       || this.l1 == 152            // 'gt'
       || this.l1 == 166            // 'is'
       || this.l1 == 175            // 'le'
       || this.l1 == 181            // 'lt'
       || this.l1 == 189)           // 'ne'
      {
        switch (this.l1)
        {
        case 129:                   // 'eq'
        case 148:                   // 'ge'
        case 152:                   // 'gt'
        case 175:                   // 'le'
        case 181:                   // 'lt'
        case 189:                   // 'ne'
          this.try_ValueComp();
          break;
        case 58:                    // '<<'
        case 64:                    // '>>'
        case 166:                   // 'is'
          this.try_NodeComp();
          break;
        default:
          this.try_GeneralComp();
        }
        this.lookahead1W(265);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'structured-item' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
        this.try_FTContainsExpr();
      }
    }

    private parse_FTContainsExpr()
    {
      this.eventHandler.startNonterminal("FTContainsExpr", this.e0);
      this.parse_StringConcatExpr();
      if (this.l1 == 100)           // 'contains'
      {
        this.shift(100);            // 'contains'
        this.lookahead1W(79);       // S^WS | '(:' | 'text'
        this.shift(249);            // 'text'
        this.lookahead1W(177);      // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
        this.whitespace();
        this.parse_FTSelection();
        if (this.l1 == 277)         // 'without'
        {
          this.whitespace();
          this.parse_FTIgnoreOption();
        }
      }
      this.eventHandler.endNonterminal("FTContainsExpr", this.e0);
    }

    private try_FTContainsExpr()
    {
      this.try_StringConcatExpr();
      if (this.l1 == 100)           // 'contains'
      {
        this.shiftT(100);           // 'contains'
        this.lookahead1W(79);       // S^WS | '(:' | 'text'
        this.shiftT(249);           // 'text'
        this.lookahead1W(177);      // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
        this.try_FTSelection();
        if (this.l1 == 277)         // 'without'
        {
          this.try_FTIgnoreOption();
        }
      }
    }

    private parse_StringConcatExpr()
    {
      this.eventHandler.startNonterminal("StringConcatExpr", this.e0);
      this.parse_RangeExpr();
      for (;;)
      {
        if (this.l1 != 285)         // '||'
        {
          break;
        }
        this.shift(285);            // '||'
        this.lookahead1W(265);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'structured-item' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
        this.whitespace();
        this.parse_RangeExpr();
      }
      this.eventHandler.endNonterminal("StringConcatExpr", this.e0);
    }

    private try_StringConcatExpr()
    {
      this.try_RangeExpr();
      for (;;)
      {
        if (this.l1 != 285)         // '||'
        {
          break;
        }
        this.shiftT(285);           // '||'
        this.lookahead1W(265);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'structured-item' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
        this.try_RangeExpr();
      }
    }

    private parse_RangeExpr()
    {
      this.eventHandler.startNonterminal("RangeExpr", this.e0);
      this.parse_AdditiveExpr();
      if (this.l1 == 253)           // 'to'
      {
        this.shift(253);            // 'to'
        this.lookahead1W(265);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'structured-item' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
        this.whitespace();
        this.parse_AdditiveExpr();
      }
      this.eventHandler.endNonterminal("RangeExpr", this.e0);
    }

    private try_RangeExpr()
    {
      this.try_AdditiveExpr();
      if (this.l1 == 253)           // 'to'
      {
        this.shiftT(253);           // 'to'
        this.lookahead1W(265);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'structured-item' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
        this.try_AdditiveExpr();
      }
    }

    private parse_AdditiveExpr()
    {
      this.eventHandler.startNonterminal("AdditiveExpr", this.e0);
      this.parse_MultiplicativeExpr();
      for (;;)
      {
        if (this.l1 != 41           // '+'
         && this.l1 != 43)          // '-'
        {
          break;
        }
        switch (this.l1)
        {
        case 41:                    // '+'
          this.shift(41);           // '+'
          break;
        default:
          this.shift(43);           // '-'
        }
        this.lookahead1W(265);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'structured-item' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
        this.whitespace();
        this.parse_MultiplicativeExpr();
      }
      this.eventHandler.endNonterminal("AdditiveExpr", this.e0);
    }

    private try_AdditiveExpr()
    {
      this.try_MultiplicativeExpr();
      for (;;)
      {
        if (this.l1 != 41           // '+'
         && this.l1 != 43)          // '-'
        {
          break;
        }
        switch (this.l1)
        {
        case 41:                    // '+'
          this.shiftT(41);          // '+'
          break;
        default:
          this.shiftT(43);          // '-'
        }
        this.lookahead1W(265);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'structured-item' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
        this.try_MultiplicativeExpr();
      }
    }

    private parse_MultiplicativeExpr()
    {
      this.eventHandler.startNonterminal("MultiplicativeExpr", this.e0);
      this.parse_UnionExpr();
      for (;;)
      {
        if (this.l1 != 39           // '*'
         && this.l1 != 119          // 'div'
         && this.l1 != 153          // 'idiv'
         && this.l1 != 183)         // 'mod'
        {
          break;
        }
        switch (this.l1)
        {
        case 39:                    // '*'
          this.shift(39);           // '*'
          break;
        case 119:                   // 'div'
          this.shift(119);          // 'div'
          break;
        case 153:                   // 'idiv'
          this.shift(153);          // 'idiv'
          break;
        default:
          this.shift(183);          // 'mod'
        }
        this.lookahead1W(265);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'structured-item' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
        this.whitespace();
        this.parse_UnionExpr();
      }
      this.eventHandler.endNonterminal("MultiplicativeExpr", this.e0);
    }

    private try_MultiplicativeExpr()
    {
      this.try_UnionExpr();
      for (;;)
      {
        if (this.l1 != 39           // '*'
         && this.l1 != 119          // 'div'
         && this.l1 != 153          // 'idiv'
         && this.l1 != 183)         // 'mod'
        {
          break;
        }
        switch (this.l1)
        {
        case 39:                    // '*'
          this.shiftT(39);          // '*'
          break;
        case 119:                   // 'div'
          this.shiftT(119);         // 'div'
          break;
        case 153:                   // 'idiv'
          this.shiftT(153);         // 'idiv'
          break;
        default:
          this.shiftT(183);         // 'mod'
        }
        this.lookahead1W(265);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'structured-item' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
        this.try_UnionExpr();
      }
    }

    private parse_UnionExpr()
    {
      this.eventHandler.startNonterminal("UnionExpr", this.e0);
      this.parse_IntersectExceptExpr();
      for (;;)
      {
        if (this.l1 != 260          // 'union'
         && this.l1 != 284)         // '|'
        {
          break;
        }
        switch (this.l1)
        {
        case 260:                   // 'union'
          this.shift(260);          // 'union'
          break;
        default:
          this.shift(284);          // '|'
        }
        this.lookahead1W(265);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'structured-item' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
        this.whitespace();
        this.parse_IntersectExceptExpr();
      }
      this.eventHandler.endNonterminal("UnionExpr", this.e0);
    }

    private try_UnionExpr()
    {
      this.try_IntersectExceptExpr();
      for (;;)
      {
        if (this.l1 != 260          // 'union'
         && this.l1 != 284)         // '|'
        {
          break;
        }
        switch (this.l1)
        {
        case 260:                   // 'union'
          this.shiftT(260);         // 'union'
          break;
        default:
          this.shiftT(284);         // '|'
        }
        this.lookahead1W(265);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'structured-item' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
        this.try_IntersectExceptExpr();
      }
    }

    private parse_IntersectExceptExpr()
    {
      this.eventHandler.startNonterminal("IntersectExceptExpr", this.e0);
      this.parse_InstanceofExpr();
      for (;;)
      {
        this.lookahead1W(221);      // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'intersect' | 'into' | 'is' | 'le' | 'let' |
                                    // 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' |
                                    // 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
        if (this.l1 != 132          // 'except'
         && this.l1 != 164)         // 'intersect'
        {
          break;
        }
        switch (this.l1)
        {
        case 164:                   // 'intersect'
          this.shift(164);          // 'intersect'
          break;
        default:
          this.shift(132);          // 'except'
        }
        this.lookahead1W(265);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'structured-item' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
        this.whitespace();
        this.parse_InstanceofExpr();
      }
      this.eventHandler.endNonterminal("IntersectExceptExpr", this.e0);
    }

    private try_IntersectExceptExpr()
    {
      this.try_InstanceofExpr();
      for (;;)
      {
        this.lookahead1W(221);      // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'intersect' | 'into' | 'is' | 'le' | 'let' |
                                    // 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' |
                                    // 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
        if (this.l1 != 132          // 'except'
         && this.l1 != 164)         // 'intersect'
        {
          break;
        }
        switch (this.l1)
        {
        case 164:                   // 'intersect'
          this.shiftT(164);         // 'intersect'
          break;
        default:
          this.shiftT(132);         // 'except'
        }
        this.lookahead1W(265);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'structured-item' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
        this.try_InstanceofExpr();
      }
    }

    private parse_InstanceofExpr()
    {
      this.eventHandler.startNonterminal("InstanceofExpr", this.e0);
      this.parse_TreatExpr();
      this.lookahead1W(222);        // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
      if (this.l1 == 162)           // 'instance'
      {
        this.shift(162);            // 'instance'
        this.lookahead1W(67);       // S^WS | '(:' | 'of'
        this.shift(200);            // 'of'
        this.lookahead1W(253);      // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
        this.whitespace();
        this.parse_SequenceType();
      }
      this.eventHandler.endNonterminal("InstanceofExpr", this.e0);
    }

    private try_InstanceofExpr()
    {
      this.try_TreatExpr();
      this.lookahead1W(222);        // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
      if (this.l1 == 162)           // 'instance'
      {
        this.shiftT(162);           // 'instance'
        this.lookahead1W(67);       // S^WS | '(:' | 'of'
        this.shiftT(200);           // 'of'
        this.lookahead1W(253);      // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
        this.try_SequenceType();
      }
    }

    private parse_TreatExpr()
    {
      this.eventHandler.startNonterminal("TreatExpr", this.e0);
      this.parse_CastableExpr();
      this.lookahead1W(223);        // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' | '||' |
                                    // '|}' | '}'
      if (this.l1 == 254)           // 'treat'
      {
        this.shift(254);            // 'treat'
        this.lookahead1W(33);       // S^WS | '(:' | 'as'
        this.shift(80);             // 'as'
        this.lookahead1W(253);      // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
        this.whitespace();
        this.parse_SequenceType();
      }
      this.eventHandler.endNonterminal("TreatExpr", this.e0);
    }

    private try_TreatExpr()
    {
      this.try_CastableExpr();
      this.lookahead1W(223);        // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' | '||' |
                                    // '|}' | '}'
      if (this.l1 == 254)           // 'treat'
      {
        this.shiftT(254);           // 'treat'
        this.lookahead1W(33);       // S^WS | '(:' | 'as'
        this.shiftT(80);            // 'as'
        this.lookahead1W(253);      // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
        this.try_SequenceType();
      }
    }

    private parse_CastableExpr()
    {
      this.eventHandler.startNonterminal("CastableExpr", this.e0);
      this.parse_CastExpr();
      this.lookahead1W(224);        // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'castable' | 'collation' | 'contains' | 'count' |
                                    // 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                    // 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' | '||' |
                                    // '|}' | '}'
      if (this.l1 == 91)            // 'castable'
      {
        this.shift(91);             // 'castable'
        this.lookahead1W(33);       // S^WS | '(:' | 'as'
        this.shift(80);             // 'as'
        this.lookahead1W(245);      // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
        this.whitespace();
        this.parse_SingleType();
      }
      this.eventHandler.endNonterminal("CastableExpr", this.e0);
    }

    private try_CastableExpr()
    {
      this.try_CastExpr();
      this.lookahead1W(224);        // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'castable' | 'collation' | 'contains' | 'count' |
                                    // 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                    // 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' | '||' |
                                    // '|}' | '}'
      if (this.l1 == 91)            // 'castable'
      {
        this.shiftT(91);            // 'castable'
        this.lookahead1W(33);       // S^WS | '(:' | 'as'
        this.shiftT(80);            // 'as'
        this.lookahead1W(245);      // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
        this.try_SingleType();
      }
    }

    private parse_CastExpr()
    {
      this.eventHandler.startNonterminal("CastExpr", this.e0);
      this.parse_UnaryExpr();
      this.lookahead1W(226);        // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' |
                                    // 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' |
                                    // 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' |
                                    // 'order' | 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' |
                                    // 'start' | 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' |
                                    // '||' | '|}' | '}'
      if (this.l1 == 90)            // 'cast'
      {
        this.shift(90);             // 'cast'
        this.lookahead1W(33);       // S^WS | '(:' | 'as'
        this.shift(80);             // 'as'
        this.lookahead1W(245);      // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
        this.whitespace();
        this.parse_SingleType();
      }
      this.eventHandler.endNonterminal("CastExpr", this.e0);
    }

    private try_CastExpr()
    {
      this.try_UnaryExpr();
      this.lookahead1W(226);        // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' |
                                    // 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' |
                                    // 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' |
                                    // 'order' | 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' |
                                    // 'start' | 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' |
                                    // '||' | '|}' | '}'
      if (this.l1 == 90)            // 'cast'
      {
        this.shiftT(90);            // 'cast'
        this.lookahead1W(33);       // S^WS | '(:' | 'as'
        this.shiftT(80);            // 'as'
        this.lookahead1W(245);      // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
        this.try_SingleType();
      }
    }

    private parse_UnaryExpr()
    {
      this.eventHandler.startNonterminal("UnaryExpr", this.e0);
      for (;;)
      {
        this.lookahead1W(265);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'structured-item' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
        if (this.l1 != 41           // '+'
         && this.l1 != 43)          // '-'
        {
          break;
        }
        switch (this.l1)
        {
        case 43:                    // '-'
          this.shift(43);           // '-'
          break;
        default:
          this.shift(41);           // '+'
        }
      }
      this.whitespace();
      this.parse_ValueExpr();
      this.eventHandler.endNonterminal("UnaryExpr", this.e0);
    }

    private try_UnaryExpr()
    {
      for (;;)
      {
        this.lookahead1W(265);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'structured-item' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
        if (this.l1 != 41           // '+'
         && this.l1 != 43)          // '-'
        {
          break;
        }
        switch (this.l1)
        {
        case 43:                    // '-'
          this.shiftT(43);          // '-'
          break;
        default:
          this.shiftT(41);          // '+'
        }
      }
      this.try_ValueExpr();
    }

    private parse_ValueExpr()
    {
      this.eventHandler.startNonterminal("ValueExpr", this.e0);
      switch (this.l1)
      {
      case 266:                     // 'validate'
        this.lookahead2W(188);      // S^WS | '#' | '(' | '(:' | 'lax' | 'strict' | 'type' | '{'
        break;
      default:
        this.lk = this.l1;
      }
      switch (this.lk)
      {
      case 89354:                   // 'validate' 'lax'
      case 125706:                  // 'validate' 'strict'
      case 132362:                  // 'validate' 'type'
      case 144138:                  // 'validate' '{'
        this.parse_ValidateExpr();
        break;
      case 36:                      // '(#'
        this.parse_ExtensionExpr();
        break;
      default:
        this.parse_SimpleMapExpr();
      }
      this.eventHandler.endNonterminal("ValueExpr", this.e0);
    }

    private try_ValueExpr()
    {
      switch (this.l1)
      {
      case 266:                     // 'validate'
        this.lookahead2W(188);      // S^WS | '#' | '(' | '(:' | 'lax' | 'strict' | 'type' | '{'
        break;
      default:
        this.lk = this.l1;
      }
      switch (this.lk)
      {
      case 89354:                   // 'validate' 'lax'
      case 125706:                  // 'validate' 'strict'
      case 132362:                  // 'validate' 'type'
      case 144138:                  // 'validate' '{'
        this.try_ValidateExpr();
        break;
      case 36:                      // '(#'
        this.try_ExtensionExpr();
        break;
      default:
        this.try_SimpleMapExpr();
      }
    }

    private parse_SimpleMapExpr()
    {
      this.eventHandler.startNonterminal("SimpleMapExpr", this.e0);
      this.parse_PathExpr();
      for (;;)
      {
        if (this.l1 != 26)          // '!'
        {
          break;
        }
        this.shift(26);             // '!'
        this.lookahead1W(262);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(:' | '/' | '//' | '<' | '<!--' | '<?' | '[' |
                                    // 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'jsoniq' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'null' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | '{' | '{|'
        this.whitespace();
        this.parse_PathExpr();
      }
      this.eventHandler.endNonterminal("SimpleMapExpr", this.e0);
    }

    private try_SimpleMapExpr()
    {
      this.try_PathExpr();
      for (;;)
      {
        if (this.l1 != 26)          // '!'
        {
          break;
        }
        this.shiftT(26);            // '!'
        this.lookahead1W(262);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(:' | '/' | '//' | '<' | '<!--' | '<?' | '[' |
                                    // 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'jsoniq' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'null' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | '{' | '{|'
        this.try_PathExpr();
      }
    }

    private parse_GeneralComp()
    {
      this.eventHandler.startNonterminal("GeneralComp", this.e0);
      switch (this.l1)
      {
      case 61:                      // '='
        this.shift(61);             // '='
        break;
      case 27:                      // '!='
        this.shift(27);             // '!='
        break;
      case 55:                      // '<'
        this.shift(55);             // '<'
        break;
      case 59:                      // '<='
        this.shift(59);             // '<='
        break;
      case 62:                      // '>'
        this.shift(62);             // '>'
        break;
      default:
        this.shift(63);             // '>='
      }
      this.eventHandler.endNonterminal("GeneralComp", this.e0);
    }

    private try_GeneralComp()
    {
      switch (this.l1)
      {
      case 61:                      // '='
        this.shiftT(61);            // '='
        break;
      case 27:                      // '!='
        this.shiftT(27);            // '!='
        break;
      case 55:                      // '<'
        this.shiftT(55);            // '<'
        break;
      case 59:                      // '<='
        this.shiftT(59);            // '<='
        break;
      case 62:                      // '>'
        this.shiftT(62);            // '>'
        break;
      default:
        this.shiftT(63);            // '>='
      }
    }

    private parse_ValueComp()
    {
      this.eventHandler.startNonterminal("ValueComp", this.e0);
      switch (this.l1)
      {
      case 129:                     // 'eq'
        this.shift(129);            // 'eq'
        break;
      case 189:                     // 'ne'
        this.shift(189);            // 'ne'
        break;
      case 181:                     // 'lt'
        this.shift(181);            // 'lt'
        break;
      case 175:                     // 'le'
        this.shift(175);            // 'le'
        break;
      case 152:                     // 'gt'
        this.shift(152);            // 'gt'
        break;
      default:
        this.shift(148);            // 'ge'
      }
      this.eventHandler.endNonterminal("ValueComp", this.e0);
    }

    private try_ValueComp()
    {
      switch (this.l1)
      {
      case 129:                     // 'eq'
        this.shiftT(129);           // 'eq'
        break;
      case 189:                     // 'ne'
        this.shiftT(189);           // 'ne'
        break;
      case 181:                     // 'lt'
        this.shiftT(181);           // 'lt'
        break;
      case 175:                     // 'le'
        this.shiftT(175);           // 'le'
        break;
      case 152:                     // 'gt'
        this.shiftT(152);           // 'gt'
        break;
      default:
        this.shiftT(148);           // 'ge'
      }
    }

    private parse_NodeComp()
    {
      this.eventHandler.startNonterminal("NodeComp", this.e0);
      switch (this.l1)
      {
      case 166:                     // 'is'
        this.shift(166);            // 'is'
        break;
      case 58:                      // '<<'
        this.shift(58);             // '<<'
        break;
      default:
        this.shift(64);             // '>>'
      }
      this.eventHandler.endNonterminal("NodeComp", this.e0);
    }

    private try_NodeComp()
    {
      switch (this.l1)
      {
      case 166:                     // 'is'
        this.shiftT(166);           // 'is'
        break;
      case 58:                      // '<<'
        this.shiftT(58);            // '<<'
        break;
      default:
        this.shiftT(64);            // '>>'
      }
    }

    private parse_ValidateExpr()
    {
      this.eventHandler.startNonterminal("ValidateExpr", this.e0);
      this.shift(266);              // 'validate'
      this.lookahead1W(175);        // S^WS | '(:' | 'lax' | 'strict' | 'type' | '{'
      if (this.l1 != 281)           // '{'
      {
        switch (this.l1)
        {
        case 258:                   // 'type'
          this.shift(258);          // 'type'
          this.lookahead1W(245);    // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
          this.whitespace();
          this.parse_TypeName();
          break;
        default:
          this.whitespace();
          this.parse_ValidationMode();
        }
      }
      this.lookahead1W(90);         // S^WS | '(:' | '{'
      this.shift(281);              // '{'
      this.lookahead1W(266);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.whitespace();
      this.parse_Expr();
      this.shift(287);              // '}'
      this.eventHandler.endNonterminal("ValidateExpr", this.e0);
    }

    private try_ValidateExpr()
    {
      this.shiftT(266);             // 'validate'
      this.lookahead1W(175);        // S^WS | '(:' | 'lax' | 'strict' | 'type' | '{'
      if (this.l1 != 281)           // '{'
      {
        switch (this.l1)
        {
        case 258:                   // 'type'
          this.shiftT(258);         // 'type'
          this.lookahead1W(245);    // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
          this.try_TypeName();
          break;
        default:
          this.try_ValidationMode();
        }
      }
      this.lookahead1W(90);         // S^WS | '(:' | '{'
      this.shiftT(281);             // '{'
      this.lookahead1W(266);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.try_Expr();
      this.shiftT(287);             // '}'
    }

    private parse_ValidationMode()
    {
      this.eventHandler.startNonterminal("ValidationMode", this.e0);
      switch (this.l1)
      {
      case 174:                     // 'lax'
        this.shift(174);            // 'lax'
        break;
      default:
        this.shift(245);            // 'strict'
      }
      this.eventHandler.endNonterminal("ValidationMode", this.e0);
    }

    private try_ValidationMode()
    {
      switch (this.l1)
      {
      case 174:                     // 'lax'
        this.shiftT(174);           // 'lax'
        break;
      default:
        this.shiftT(245);           // 'strict'
      }
    }

    private parse_ExtensionExpr()
    {
      this.eventHandler.startNonterminal("ExtensionExpr", this.e0);
      for (;;)
      {
        this.whitespace();
        this.parse_Pragma();
        this.lookahead1W(104);      // S^WS | '(#' | '(:' | '{'
        if (this.l1 != 36)          // '(#'
        {
          break;
        }
      }
      this.shift(281);              // '{'
      this.lookahead1W(274);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|' | '}'
      if (this.l1 != 287)           // '}'
      {
        this.whitespace();
        this.parse_Expr();
      }
      this.shift(287);              // '}'
      this.eventHandler.endNonterminal("ExtensionExpr", this.e0);
    }

    private try_ExtensionExpr()
    {
      for (;;)
      {
        this.try_Pragma();
        this.lookahead1W(104);      // S^WS | '(#' | '(:' | '{'
        if (this.l1 != 36)          // '(#'
        {
          break;
        }
      }
      this.shiftT(281);             // '{'
      this.lookahead1W(274);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|' | '}'
      if (this.l1 != 287)           // '}'
      {
        this.try_Expr();
      }
      this.shiftT(287);             // '}'
    }

    private parse_Pragma()
    {
      this.eventHandler.startNonterminal("Pragma", this.e0);
      this.shift(36);               // '(#'
      this.lookahead1(242);         // EQName^Token | S | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'structured-item' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with'
      if (this.l1 == 21)            // S
      {
        this.shift(21);             // S
      }
      this.parse_EQName();
      this.lookahead1(10);          // S | '#)'
      if (this.l1 == 21)            // S
      {
        this.shift(21);             // S
        this.lookahead1(0);         // PragmaContents
        this.shift(1);              // PragmaContents
      }
      this.lookahead1(5);           // '#)'
      this.shift(30);               // '#)'
      this.eventHandler.endNonterminal("Pragma", this.e0);
    }

    private try_Pragma()
    {
      this.shiftT(36);              // '(#'
      this.lookahead1(242);         // EQName^Token | S | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'structured-item' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with'
      if (this.l1 == 21)            // S
      {
        this.shiftT(21);            // S
      }
      this.try_EQName();
      this.lookahead1(10);          // S | '#)'
      if (this.l1 == 21)            // S
      {
        this.shiftT(21);            // S
        this.lookahead1(0);         // PragmaContents
        this.shiftT(1);             // PragmaContents
      }
      this.lookahead1(5);           // '#)'
      this.shiftT(30);              // '#)'
    }

    private parse_PathExpr()
    {
      this.eventHandler.startNonterminal("PathExpr", this.e0);
      switch (this.l1)
      {
      case 47:                      // '/'
        this.shift(47);             // '/'
        this.lookahead1W(288);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | EOF | '!' | '!=' | '$' | '$$' | '%' | '(' | '(:' | ')' | '*' | '+' | ',' |
                                    // '-' | ':' | ';' | '<' | '<!--' | '<<' | '<=' | '<?' | '=' | '>' | '>=' | '>>' |
                                    // '[' | ']' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'by' | 'case' | 'cast' | 'castable' |
                                    // 'catch' | 'child' | 'collation' | 'comment' | 'constraint' | 'construction' |
                                    // 'contains' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'paragraphs' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sentences' | 'sliding' | 'some' | 'stable' |
                                    // 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'times' | 'to' |
                                    // 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'words' | '{' | '{|' | '|' | '||' | '|}' | '}'
        switch (this.l1)
        {
        case 25:                    // EOF
        case 26:                    // '!'
        case 27:                    // '!='
        case 38:                    // ')'
        case 39:                    // '*'
        case 41:                    // '+'
        case 42:                    // ','
        case 43:                    // '-'
        case 50:                    // ':'
        case 54:                    // ';'
        case 58:                    // '<<'
        case 59:                    // '<='
        case 61:                    // '='
        case 62:                    // '>'
        case 63:                    // '>='
        case 64:                    // '>>'
        case 70:                    // ']'
        case 88:                    // 'by'
        case 100:                   // 'contains'
        case 209:                   // 'paragraphs'
        case 237:                   // 'sentences'
        case 252:                   // 'times'
        case 279:                   // 'words'
        case 284:                   // '|'
        case 285:                   // '||'
        case 286:                   // '|}'
        case 287:                   // '}'
          break;
        default:
          this.whitespace();
          this.parse_RelativePathExpr();
        }
        break;
      case 48:                      // '//'
        this.shift(48);             // '//'
        this.lookahead1W(259);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(:' | '<' | '<!--' | '<?' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'jsoniq' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'null' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | '{' | '{|'
        this.whitespace();
        this.parse_RelativePathExpr();
        break;
      default:
        this.parse_RelativePathExpr();
      }
      this.eventHandler.endNonterminal("PathExpr", this.e0);
    }

    private try_PathExpr()
    {
      switch (this.l1)
      {
      case 47:                      // '/'
        this.shiftT(47);            // '/'
        this.lookahead1W(288);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | EOF | '!' | '!=' | '$' | '$$' | '%' | '(' | '(:' | ')' | '*' | '+' | ',' |
                                    // '-' | ':' | ';' | '<' | '<!--' | '<<' | '<=' | '<?' | '=' | '>' | '>=' | '>>' |
                                    // '[' | ']' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'by' | 'case' | 'cast' | 'castable' |
                                    // 'catch' | 'child' | 'collation' | 'comment' | 'constraint' | 'construction' |
                                    // 'contains' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'paragraphs' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sentences' | 'sliding' | 'some' | 'stable' |
                                    // 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'times' | 'to' |
                                    // 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'words' | '{' | '{|' | '|' | '||' | '|}' | '}'
        switch (this.l1)
        {
        case 25:                    // EOF
        case 26:                    // '!'
        case 27:                    // '!='
        case 38:                    // ')'
        case 39:                    // '*'
        case 41:                    // '+'
        case 42:                    // ','
        case 43:                    // '-'
        case 50:                    // ':'
        case 54:                    // ';'
        case 58:                    // '<<'
        case 59:                    // '<='
        case 61:                    // '='
        case 62:                    // '>'
        case 63:                    // '>='
        case 64:                    // '>>'
        case 70:                    // ']'
        case 88:                    // 'by'
        case 100:                   // 'contains'
        case 209:                   // 'paragraphs'
        case 237:                   // 'sentences'
        case 252:                   // 'times'
        case 279:                   // 'words'
        case 284:                   // '|'
        case 285:                   // '||'
        case 286:                   // '|}'
        case 287:                   // '}'
          break;
        default:
          this.try_RelativePathExpr();
        }
        break;
      case 48:                      // '//'
        this.shiftT(48);            // '//'
        this.lookahead1W(259);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(:' | '<' | '<!--' | '<?' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'jsoniq' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'null' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | '{' | '{|'
        this.try_RelativePathExpr();
        break;
      default:
        this.try_RelativePathExpr();
      }
    }

    private parse_RelativePathExpr()
    {
      this.eventHandler.startNonterminal("RelativePathExpr", this.e0);
      this.parse_PostfixExpr();
      for (;;)
      {
        switch (this.l1)
        {
        case 26:                    // '!'
          this.lookahead2W(264);    // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '$$' | '%' | '(' | '(:' | '..' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
          break;
        default:
          this.lk = this.l1;
        }
        if (this.lk != 25           // EOF
         && this.lk != 27           // '!='
         && this.lk != 38           // ')'
         && this.lk != 39           // '*'
         && this.lk != 41           // '+'
         && this.lk != 42           // ','
         && this.lk != 43           // '-'
         && this.lk != 47           // '/'
         && this.lk != 48           // '//'
         && this.lk != 50           // ':'
         && this.lk != 54           // ';'
         && this.lk != 55           // '<'
         && this.lk != 58           // '<<'
         && this.lk != 59           // '<='
         && this.lk != 61           // '='
         && this.lk != 62           // '>'
         && this.lk != 63           // '>='
         && this.lk != 64           // '>>'
         && this.lk != 70           // ']'
         && this.lk != 71           // 'after'
         && this.lk != 76           // 'and'
         && this.lk != 80           // 'as'
         && this.lk != 81           // 'ascending'
         && this.lk != 82           // 'at'
         && this.lk != 85           // 'before'
         && this.lk != 88           // 'by'
         && this.lk != 89           // 'case'
         && this.lk != 90           // 'cast'
         && this.lk != 91           // 'castable'
         && this.lk != 95           // 'collation'
         && this.lk != 100          // 'contains'
         && this.lk != 106          // 'count'
         && this.lk != 110          // 'default'
         && this.lk != 114          // 'descending'
         && this.lk != 119          // 'div'
         && this.lk != 123          // 'else'
         && this.lk != 124          // 'empty'
         && this.lk != 127          // 'end'
         && this.lk != 129          // 'eq'
         && this.lk != 132          // 'except'
         && this.lk != 139          // 'for'
         && this.lk != 148          // 'ge'
         && this.lk != 150          // 'group'
         && this.lk != 152          // 'gt'
         && this.lk != 153          // 'idiv'
         && this.lk != 162          // 'instance'
         && this.lk != 164          // 'intersect'
         && this.lk != 165          // 'into'
         && this.lk != 166          // 'is'
         && this.lk != 175          // 'le'
         && this.lk != 177          // 'let'
         && this.lk != 181          // 'lt'
         && this.lk != 183          // 'mod'
         && this.lk != 184          // 'modify'
         && this.lk != 189          // 'ne'
         && this.lk != 202          // 'only'
         && this.lk != 204          // 'or'
         && this.lk != 205          // 'order'
         && this.lk != 209          // 'paragraphs'
         && this.lk != 224          // 'return'
         && this.lk != 228          // 'satisfies'
         && this.lk != 237          // 'sentences'
         && this.lk != 241          // 'stable'
         && this.lk != 242          // 'start'
         && this.lk != 252          // 'times'
         && this.lk != 253          // 'to'
         && this.lk != 254          // 'treat'
         && this.lk != 260          // 'union'
         && this.lk != 272          // 'where'
         && this.lk != 276          // 'with'
         && this.lk != 279          // 'words'
         && this.lk != 284          // '|'
         && this.lk != 285          // '||'
         && this.lk != 286          // '|}'
         && this.lk != 287          // '}'
         && this.lk != 2586         // '!' Wildcard
         && this.lk != 23578        // '!' '..'
         && this.lk != 24090        // '!' '/'
         && this.lk != 24602        // '!' '//'
         && this.lk != 34330)       // '!' '@'
        {
          this.lk = this.memoized(3, this.e0);
          if (this.lk == 0)
          {
            var b0A = this.b0; var e0A = this.e0; var l1A = this.l1;
            var b1A = this.b1; var e1A = this.e1; var l2A = this.l2;
            var b2A = this.b2; var e2A = this.e2;
            try
            {
              switch (this.l1)
              {
              case 47:              // '/'
                this.shiftT(47);    // '/'
                break;
              case 48:              // '//'
                this.shiftT(48);    // '//'
                break;
              default:
                this.shiftT(26);    // '!'
              }
              this.lookahead1W(263); // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                     // StringLiteral | S^WS | '$' | '$$' | '%' | '(' | '(:' | '..' | '<' | '<!--' |
                                     // '<?' | '@' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                     // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                     // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                     // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                     // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                     // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                     // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                     // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                     // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                     // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                     // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                     // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                     // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                     // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                     // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                     // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                     // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                     // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' |
                                     // 'schema-element' | 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' |
                                     // 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' |
                                     // 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                     // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                     // 'with' | '{' | '{|'
              this.try_StepExpr();
              this.lk = -1;
            }
            catch (p1A)
            {
              this.lk = -2;
            }
            this.b0 = b0A; this.e0 = e0A; this.l1 = l1A; if (this.l1 == 0) {this.end = e0A;} else {
            this.b1 = b1A; this.e1 = e1A; this.l2 = l2A; if (this.l2 == 0) {this.end = e1A;} else {
            this.b2 = b2A; this.e2 = e2A; this.end = e2A; }}
            this.memoize(3, this.e0, this.lk);
          }
        }
        if (this.lk != -1
         && this.lk != 47           // '/'
         && this.lk != 48           // '//'
         && this.lk != 2586         // '!' Wildcard
         && this.lk != 23578        // '!' '..'
         && this.lk != 34330)       // '!' '@'
        {
          break;
        }
        switch (this.l1)
        {
        case 47:                    // '/'
          this.shift(47);           // '/'
          break;
        case 48:                    // '//'
          this.shift(48);           // '//'
          break;
        default:
          this.shift(26);           // '!'
        }
        this.lookahead1W(263);      // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '$$' | '%' | '(' | '(:' | '..' | '<' | '<!--' |
                                    // '<?' | '@' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'structured-item' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
        this.whitespace();
        this.parse_StepExpr();
      }
      this.eventHandler.endNonterminal("RelativePathExpr", this.e0);
    }

    private try_RelativePathExpr()
    {
      this.try_PostfixExpr();
      for (;;)
      {
        switch (this.l1)
        {
        case 26:                    // '!'
          this.lookahead2W(264);    // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '$$' | '%' | '(' | '(:' | '..' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
          break;
        default:
          this.lk = this.l1;
        }
        if (this.lk != 25           // EOF
         && this.lk != 27           // '!='
         && this.lk != 38           // ')'
         && this.lk != 39           // '*'
         && this.lk != 41           // '+'
         && this.lk != 42           // ','
         && this.lk != 43           // '-'
         && this.lk != 47           // '/'
         && this.lk != 48           // '//'
         && this.lk != 50           // ':'
         && this.lk != 54           // ';'
         && this.lk != 55           // '<'
         && this.lk != 58           // '<<'
         && this.lk != 59           // '<='
         && this.lk != 61           // '='
         && this.lk != 62           // '>'
         && this.lk != 63           // '>='
         && this.lk != 64           // '>>'
         && this.lk != 70           // ']'
         && this.lk != 71           // 'after'
         && this.lk != 76           // 'and'
         && this.lk != 80           // 'as'
         && this.lk != 81           // 'ascending'
         && this.lk != 82           // 'at'
         && this.lk != 85           // 'before'
         && this.lk != 88           // 'by'
         && this.lk != 89           // 'case'
         && this.lk != 90           // 'cast'
         && this.lk != 91           // 'castable'
         && this.lk != 95           // 'collation'
         && this.lk != 100          // 'contains'
         && this.lk != 106          // 'count'
         && this.lk != 110          // 'default'
         && this.lk != 114          // 'descending'
         && this.lk != 119          // 'div'
         && this.lk != 123          // 'else'
         && this.lk != 124          // 'empty'
         && this.lk != 127          // 'end'
         && this.lk != 129          // 'eq'
         && this.lk != 132          // 'except'
         && this.lk != 139          // 'for'
         && this.lk != 148          // 'ge'
         && this.lk != 150          // 'group'
         && this.lk != 152          // 'gt'
         && this.lk != 153          // 'idiv'
         && this.lk != 162          // 'instance'
         && this.lk != 164          // 'intersect'
         && this.lk != 165          // 'into'
         && this.lk != 166          // 'is'
         && this.lk != 175          // 'le'
         && this.lk != 177          // 'let'
         && this.lk != 181          // 'lt'
         && this.lk != 183          // 'mod'
         && this.lk != 184          // 'modify'
         && this.lk != 189          // 'ne'
         && this.lk != 202          // 'only'
         && this.lk != 204          // 'or'
         && this.lk != 205          // 'order'
         && this.lk != 209          // 'paragraphs'
         && this.lk != 224          // 'return'
         && this.lk != 228          // 'satisfies'
         && this.lk != 237          // 'sentences'
         && this.lk != 241          // 'stable'
         && this.lk != 242          // 'start'
         && this.lk != 252          // 'times'
         && this.lk != 253          // 'to'
         && this.lk != 254          // 'treat'
         && this.lk != 260          // 'union'
         && this.lk != 272          // 'where'
         && this.lk != 276          // 'with'
         && this.lk != 279          // 'words'
         && this.lk != 284          // '|'
         && this.lk != 285          // '||'
         && this.lk != 286          // '|}'
         && this.lk != 287          // '}'
         && this.lk != 2586         // '!' Wildcard
         && this.lk != 23578        // '!' '..'
         && this.lk != 24090        // '!' '/'
         && this.lk != 24602        // '!' '//'
         && this.lk != 34330)       // '!' '@'
        {
          this.lk = this.memoized(3, this.e0);
          if (this.lk == 0)
          {
            var b0A = this.b0; var e0A = this.e0; var l1A = this.l1;
            var b1A = this.b1; var e1A = this.e1; var l2A = this.l2;
            var b2A = this.b2; var e2A = this.e2;
            try
            {
              switch (this.l1)
              {
              case 47:              // '/'
                this.shiftT(47);    // '/'
                break;
              case 48:              // '//'
                this.shiftT(48);    // '//'
                break;
              default:
                this.shiftT(26);    // '!'
              }
              this.lookahead1W(263); // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                     // StringLiteral | S^WS | '$' | '$$' | '%' | '(' | '(:' | '..' | '<' | '<!--' |
                                     // '<?' | '@' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                     // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                     // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                     // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                     // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                     // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                     // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                     // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                     // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                     // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                     // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                     // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                     // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                     // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                     // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                     // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                     // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                     // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' |
                                     // 'schema-element' | 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' |
                                     // 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' |
                                     // 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                     // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                     // 'with' | '{' | '{|'
              this.try_StepExpr();
              this.memoize(3, e0A, -1);
              continue;
            }
            catch (p1A)
            {
              this.b0 = b0A; this.e0 = e0A; this.l1 = l1A; if (this.l1 == 0) {this.end = e0A;} else {
              this.b1 = b1A; this.e1 = e1A; this.l2 = l2A; if (this.l2 == 0) {this.end = e1A;} else {
              this.b2 = b2A; this.e2 = e2A; this.end = e2A; }}
              this.memoize(3, e0A, -2);
              break;
            }
          }
        }
        if (this.lk != -1
         && this.lk != 47           // '/'
         && this.lk != 48           // '//'
         && this.lk != 2586         // '!' Wildcard
         && this.lk != 23578        // '!' '..'
         && this.lk != 34330)       // '!' '@'
        {
          break;
        }
        switch (this.l1)
        {
        case 47:                    // '/'
          this.shiftT(47);          // '/'
          break;
        case 48:                    // '//'
          this.shiftT(48);          // '//'
          break;
        default:
          this.shiftT(26);          // '!'
        }
        this.lookahead1W(263);      // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '$$' | '%' | '(' | '(:' | '..' | '<' | '<!--' |
                                    // '<?' | '@' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'structured-item' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
        this.try_StepExpr();
      }
    }

    private parse_StepExpr()
    {
      this.eventHandler.startNonterminal("StepExpr", this.e0);
      switch (this.l1)
      {
      case 83:                      // 'attribute'
        this.lookahead2W(287);      // EQName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' |
                                    // ',' | '-' | '/' | '//' | ':' | '::' | ';' | '<' | '<<' | '<=' | '=' | '>' |
                                    // '>=' | '>>' | '[' | ']' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'by' |
                                    // 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'contains' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'paragraphs' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sentences' | 'sliding' | 'some' | 'stable' |
                                    // 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'times' | 'to' |
                                    // 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'words' | '{' | '|' | '||' | '|}' | '}'
        break;
      case 122:                     // 'element'
        this.lookahead2W(286);      // EQName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' |
                                    // ',' | '-' | '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' |
                                    // '>>' | '[' | ']' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'contains' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'paragraphs' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sentences' | 'sliding' | 'some' | 'stable' |
                                    // 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'times' | 'to' |
                                    // 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'words' | '{' | '|' | '||' | '|}' | '}'
        break;
      case 187:                     // 'namespace'
      case 220:                     // 'processing-instruction'
        this.lookahead2W(284);      // NCName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' |
                                    // ',' | '-' | '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' |
                                    // '>>' | '[' | ']' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'by' | 'case' | 'cast' | 'castable' |
                                    // 'catch' | 'child' | 'collation' | 'comment' | 'constraint' | 'construction' |
                                    // 'contains' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'null' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'paragraphs' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sentences' | 'sliding' | 'some' | 'stable' |
                                    // 'start' | 'strict' | 'switch' | 'text' | 'times' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'words' | '{' | '|' | '||' | '|}' | '}'
        break;
      case 135:                     // 'false'
      case 197:                     // 'null'
      case 255:                     // 'true'
        this.lookahead2W(236);      // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '.' |
                                    // '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' |
                                    // 'cast' | 'castable' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' | '||' |
                                    // '|}' | '}'
        break;
      case 97:                      // 'comment'
      case 120:                     // 'document'
      case 206:                     // 'ordered'
      case 249:                     // 'text'
      case 262:                     // 'unordered'
        this.lookahead2W(238);      // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '{' | '|' | '||' | '|}' | '}'
        break;
      case 79:                      // 'array'
      case 125:                     // 'empty-sequence'
      case 154:                     // 'if'
      case 167:                     // 'item'
      case 169:                     // 'json-item'
      case 247:                     // 'structured-item'
      case 248:                     // 'switch'
      case 259:                     // 'typeswitch'
        this.lookahead2W(229);      // S^WS | EOF | '!' | '!=' | '#' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'after' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
        break;
      case 74:                      // 'ancestor'
      case 75:                      // 'ancestor-or-self'
      case 94:                      // 'child'
      case 112:                     // 'descendant'
      case 113:                     // 'descendant-or-self'
      case 137:                     // 'following'
      case 138:                     // 'following-sibling'
      case 210:                     // 'parent'
      case 216:                     // 'preceding'
      case 217:                     // 'preceding-sibling'
      case 234:                     // 'self'
        this.lookahead2W(237);      // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | '::' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' |
                                    // 'cast' | 'castable' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' | '||' |
                                    // '|}' | '}'
        break;
      case 6:                       // EQName^Token
      case 71:                      // 'after'
      case 73:                      // 'allowing'
      case 76:                      // 'and'
      case 78:                      // 'append'
      case 80:                      // 'as'
      case 81:                      // 'ascending'
      case 82:                      // 'at'
      case 84:                      // 'base-uri'
      case 85:                      // 'before'
      case 86:                      // 'boundary-space'
      case 87:                      // 'break'
      case 89:                      // 'case'
      case 90:                      // 'cast'
      case 91:                      // 'castable'
      case 92:                      // 'catch'
      case 95:                      // 'collation'
      case 98:                      // 'constraint'
      case 99:                      // 'construction'
      case 102:                     // 'context'
      case 103:                     // 'continue'
      case 104:                     // 'copy'
      case 105:                     // 'copy-namespaces'
      case 106:                     // 'count'
      case 107:                     // 'decimal-format'
      case 109:                     // 'declare'
      case 110:                     // 'default'
      case 111:                     // 'delete'
      case 114:                     // 'descending'
      case 119:                     // 'div'
      case 121:                     // 'document-node'
      case 123:                     // 'else'
      case 124:                     // 'empty'
      case 126:                     // 'encoding'
      case 127:                     // 'end'
      case 129:                     // 'eq'
      case 130:                     // 'every'
      case 132:                     // 'except'
      case 133:                     // 'exit'
      case 134:                     // 'external'
      case 136:                     // 'first'
      case 139:                     // 'for'
      case 142:                     // 'from'
      case 143:                     // 'ft-option'
      case 147:                     // 'function'
      case 148:                     // 'ge'
      case 150:                     // 'group'
      case 152:                     // 'gt'
      case 153:                     // 'idiv'
      case 155:                     // 'import'
      case 156:                     // 'in'
      case 157:                     // 'index'
      case 161:                     // 'insert'
      case 162:                     // 'instance'
      case 163:                     // 'integrity'
      case 164:                     // 'intersect'
      case 165:                     // 'into'
      case 166:                     // 'is'
      case 168:                     // 'json'
      case 170:                     // 'jsoniq'
      case 173:                     // 'last'
      case 174:                     // 'lax'
      case 175:                     // 'le'
      case 177:                     // 'let'
      case 179:                     // 'loop'
      case 181:                     // 'lt'
      case 183:                     // 'mod'
      case 184:                     // 'modify'
      case 185:                     // 'module'
      case 188:                     // 'namespace-node'
      case 189:                     // 'ne'
      case 194:                     // 'node'
      case 195:                     // 'nodes'
      case 198:                     // 'object'
      case 202:                     // 'only'
      case 203:                     // 'option'
      case 204:                     // 'or'
      case 205:                     // 'order'
      case 207:                     // 'ordering'
      case 222:                     // 'rename'
      case 223:                     // 'replace'
      case 224:                     // 'return'
      case 225:                     // 'returning'
      case 226:                     // 'revalidation'
      case 228:                     // 'satisfies'
      case 229:                     // 'schema'
      case 230:                     // 'schema-attribute'
      case 231:                     // 'schema-element'
      case 232:                     // 'score'
      case 233:                     // 'select'
      case 239:                     // 'sliding'
      case 240:                     // 'some'
      case 241:                     // 'stable'
      case 242:                     // 'start'
      case 245:                     // 'strict'
      case 253:                     // 'to'
      case 254:                     // 'treat'
      case 256:                     // 'try'
      case 257:                     // 'tumbling'
      case 258:                     // 'type'
      case 260:                     // 'union'
      case 263:                     // 'updating'
      case 266:                     // 'validate'
      case 267:                     // 'value'
      case 268:                     // 'variable'
      case 269:                     // 'version'
      case 272:                     // 'where'
      case 273:                     // 'while'
      case 276:                     // 'with'
        this.lookahead2W(233);      // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
        break;
      default:
        this.lk = this.l1;
      }
      if (this.lk == 12935          // 'false' EOF
       || this.lk == 12997          // 'null' EOF
       || this.lk == 13055          // 'true' EOF
       || this.lk == 13447          // 'false' '!'
       || this.lk == 13509          // 'null' '!'
       || this.lk == 13567          // 'true' '!'
       || this.lk == 13959          // 'false' '!='
       || this.lk == 14021          // 'null' '!='
       || this.lk == 14079          // 'true' '!='
       || this.lk == 19591          // 'false' ')'
       || this.lk == 19653          // 'null' ')'
       || this.lk == 19711          // 'true' ')'
       || this.lk == 20103          // 'false' '*'
       || this.lk == 20165          // 'null' '*'
       || this.lk == 20223          // 'true' '*'
       || this.lk == 21127          // 'false' '+'
       || this.lk == 21189          // 'null' '+'
       || this.lk == 21247          // 'true' '+'
       || this.lk == 21639          // 'false' ','
       || this.lk == 21701          // 'null' ','
       || this.lk == 21759          // 'true' ','
       || this.lk == 22151          // 'false' '-'
       || this.lk == 22213          // 'null' '-'
       || this.lk == 22271          // 'true' '-'
       || this.lk == 24199          // 'false' '/'
       || this.lk == 24261          // 'null' '/'
       || this.lk == 24319          // 'true' '/'
       || this.lk == 24711          // 'false' '//'
       || this.lk == 24773          // 'null' '//'
       || this.lk == 24831          // 'true' '//'
       || this.lk == 25735          // 'false' ':'
       || this.lk == 25797          // 'null' ':'
       || this.lk == 25855          // 'true' ':'
       || this.lk == 27783          // 'false' ';'
       || this.lk == 27845          // 'null' ';'
       || this.lk == 27903          // 'true' ';'
       || this.lk == 28295          // 'false' '<'
       || this.lk == 28357          // 'null' '<'
       || this.lk == 28415          // 'true' '<'
       || this.lk == 29831          // 'false' '<<'
       || this.lk == 29893          // 'null' '<<'
       || this.lk == 29951          // 'true' '<<'
       || this.lk == 30343          // 'false' '<='
       || this.lk == 30405          // 'null' '<='
       || this.lk == 30463          // 'true' '<='
       || this.lk == 31367          // 'false' '='
       || this.lk == 31429          // 'null' '='
       || this.lk == 31487          // 'true' '='
       || this.lk == 31879          // 'false' '>'
       || this.lk == 31941          // 'null' '>'
       || this.lk == 31999          // 'true' '>'
       || this.lk == 32391          // 'false' '>='
       || this.lk == 32453          // 'null' '>='
       || this.lk == 32511          // 'true' '>='
       || this.lk == 32903          // 'false' '>>'
       || this.lk == 32965          // 'null' '>>'
       || this.lk == 33023          // 'true' '>>'
       || this.lk == 35463          // 'false' '['
       || this.lk == 35525          // 'null' '['
       || this.lk == 35583          // 'true' '['
       || this.lk == 35975          // 'false' ']'
       || this.lk == 36037          // 'null' ']'
       || this.lk == 36095          // 'true' ']'
       || this.lk == 36435          // 'attribute' 'after'
       || this.lk == 36474          // 'element' 'after'
       || this.lk == 36487          // 'false' 'after'
       || this.lk == 36539          // 'namespace' 'after'
       || this.lk == 36549          // 'null' 'after'
       || this.lk == 36572          // 'processing-instruction' 'after'
       || this.lk == 36607          // 'true' 'after'
       || this.lk == 38995          // 'attribute' 'and'
       || this.lk == 39034          // 'element' 'and'
       || this.lk == 39047          // 'false' 'and'
       || this.lk == 39099          // 'namespace' 'and'
       || this.lk == 39109          // 'null' 'and'
       || this.lk == 39132          // 'processing-instruction' 'and'
       || this.lk == 39167          // 'true' 'and'
       || this.lk == 41043          // 'attribute' 'as'
       || this.lk == 41082          // 'element' 'as'
       || this.lk == 41095          // 'false' 'as'
       || this.lk == 41147          // 'namespace' 'as'
       || this.lk == 41157          // 'null' 'as'
       || this.lk == 41180          // 'processing-instruction' 'as'
       || this.lk == 41215          // 'true' 'as'
       || this.lk == 41555          // 'attribute' 'ascending'
       || this.lk == 41594          // 'element' 'ascending'
       || this.lk == 41607          // 'false' 'ascending'
       || this.lk == 41659          // 'namespace' 'ascending'
       || this.lk == 41669          // 'null' 'ascending'
       || this.lk == 41692          // 'processing-instruction' 'ascending'
       || this.lk == 41727          // 'true' 'ascending'
       || this.lk == 42067          // 'attribute' 'at'
       || this.lk == 42106          // 'element' 'at'
       || this.lk == 42119          // 'false' 'at'
       || this.lk == 42171          // 'namespace' 'at'
       || this.lk == 42181          // 'null' 'at'
       || this.lk == 42204          // 'processing-instruction' 'at'
       || this.lk == 42239          // 'true' 'at'
       || this.lk == 43603          // 'attribute' 'before'
       || this.lk == 43642          // 'element' 'before'
       || this.lk == 43655          // 'false' 'before'
       || this.lk == 43707          // 'namespace' 'before'
       || this.lk == 43717          // 'null' 'before'
       || this.lk == 43740          // 'processing-instruction' 'before'
       || this.lk == 43775          // 'true' 'before'
       || this.lk == 45191          // 'false' 'by'
       || this.lk == 45253          // 'null' 'by'
       || this.lk == 45311          // 'true' 'by'
       || this.lk == 45651          // 'attribute' 'case'
       || this.lk == 45690          // 'element' 'case'
       || this.lk == 45703          // 'false' 'case'
       || this.lk == 45755          // 'namespace' 'case'
       || this.lk == 45765          // 'null' 'case'
       || this.lk == 45788          // 'processing-instruction' 'case'
       || this.lk == 45823          // 'true' 'case'
       || this.lk == 46163          // 'attribute' 'cast'
       || this.lk == 46202          // 'element' 'cast'
       || this.lk == 46215          // 'false' 'cast'
       || this.lk == 46267          // 'namespace' 'cast'
       || this.lk == 46277          // 'null' 'cast'
       || this.lk == 46300          // 'processing-instruction' 'cast'
       || this.lk == 46335          // 'true' 'cast'
       || this.lk == 46675          // 'attribute' 'castable'
       || this.lk == 46714          // 'element' 'castable'
       || this.lk == 46727          // 'false' 'castable'
       || this.lk == 46779          // 'namespace' 'castable'
       || this.lk == 46789          // 'null' 'castable'
       || this.lk == 46812          // 'processing-instruction' 'castable'
       || this.lk == 46847          // 'true' 'castable'
       || this.lk == 48723          // 'attribute' 'collation'
       || this.lk == 48762          // 'element' 'collation'
       || this.lk == 48775          // 'false' 'collation'
       || this.lk == 48827          // 'namespace' 'collation'
       || this.lk == 48837          // 'null' 'collation'
       || this.lk == 48860          // 'processing-instruction' 'collation'
       || this.lk == 48895          // 'true' 'collation'
       || this.lk == 51335          // 'false' 'contains'
       || this.lk == 51397          // 'null' 'contains'
       || this.lk == 51455          // 'true' 'contains'
       || this.lk == 54355          // 'attribute' 'count'
       || this.lk == 54394          // 'element' 'count'
       || this.lk == 54407          // 'false' 'count'
       || this.lk == 54459          // 'namespace' 'count'
       || this.lk == 54469          // 'null' 'count'
       || this.lk == 54492          // 'processing-instruction' 'count'
       || this.lk == 54527          // 'true' 'count'
       || this.lk == 56403          // 'attribute' 'default'
       || this.lk == 56442          // 'element' 'default'
       || this.lk == 56455          // 'false' 'default'
       || this.lk == 56507          // 'namespace' 'default'
       || this.lk == 56517          // 'null' 'default'
       || this.lk == 56540          // 'processing-instruction' 'default'
       || this.lk == 56575          // 'true' 'default'
       || this.lk == 58451          // 'attribute' 'descending'
       || this.lk == 58490          // 'element' 'descending'
       || this.lk == 58503          // 'false' 'descending'
       || this.lk == 58555          // 'namespace' 'descending'
       || this.lk == 58565          // 'null' 'descending'
       || this.lk == 58588          // 'processing-instruction' 'descending'
       || this.lk == 58623          // 'true' 'descending'
       || this.lk == 61011          // 'attribute' 'div'
       || this.lk == 61050          // 'element' 'div'
       || this.lk == 61063          // 'false' 'div'
       || this.lk == 61115          // 'namespace' 'div'
       || this.lk == 61125          // 'null' 'div'
       || this.lk == 61148          // 'processing-instruction' 'div'
       || this.lk == 61183          // 'true' 'div'
       || this.lk == 63059          // 'attribute' 'else'
       || this.lk == 63098          // 'element' 'else'
       || this.lk == 63111          // 'false' 'else'
       || this.lk == 63163          // 'namespace' 'else'
       || this.lk == 63173          // 'null' 'else'
       || this.lk == 63196          // 'processing-instruction' 'else'
       || this.lk == 63231          // 'true' 'else'
       || this.lk == 63571          // 'attribute' 'empty'
       || this.lk == 63610          // 'element' 'empty'
       || this.lk == 63623          // 'false' 'empty'
       || this.lk == 63675          // 'namespace' 'empty'
       || this.lk == 63685          // 'null' 'empty'
       || this.lk == 63708          // 'processing-instruction' 'empty'
       || this.lk == 63743          // 'true' 'empty'
       || this.lk == 65107          // 'attribute' 'end'
       || this.lk == 65146          // 'element' 'end'
       || this.lk == 65159          // 'false' 'end'
       || this.lk == 65211          // 'namespace' 'end'
       || this.lk == 65221          // 'null' 'end'
       || this.lk == 65244          // 'processing-instruction' 'end'
       || this.lk == 65279          // 'true' 'end'
       || this.lk == 66131          // 'attribute' 'eq'
       || this.lk == 66170          // 'element' 'eq'
       || this.lk == 66183          // 'false' 'eq'
       || this.lk == 66235          // 'namespace' 'eq'
       || this.lk == 66245          // 'null' 'eq'
       || this.lk == 66268          // 'processing-instruction' 'eq'
       || this.lk == 66303          // 'true' 'eq'
       || this.lk == 67667          // 'attribute' 'except'
       || this.lk == 67706          // 'element' 'except'
       || this.lk == 67719          // 'false' 'except'
       || this.lk == 67771          // 'namespace' 'except'
       || this.lk == 67781          // 'null' 'except'
       || this.lk == 67804          // 'processing-instruction' 'except'
       || this.lk == 67839          // 'true' 'except'
       || this.lk == 71251          // 'attribute' 'for'
       || this.lk == 71290          // 'element' 'for'
       || this.lk == 71303          // 'false' 'for'
       || this.lk == 71355          // 'namespace' 'for'
       || this.lk == 71365          // 'null' 'for'
       || this.lk == 71388          // 'processing-instruction' 'for'
       || this.lk == 71423          // 'true' 'for'
       || this.lk == 75859          // 'attribute' 'ge'
       || this.lk == 75898          // 'element' 'ge'
       || this.lk == 75911          // 'false' 'ge'
       || this.lk == 75963          // 'namespace' 'ge'
       || this.lk == 75973          // 'null' 'ge'
       || this.lk == 75996          // 'processing-instruction' 'ge'
       || this.lk == 76031          // 'true' 'ge'
       || this.lk == 76883          // 'attribute' 'group'
       || this.lk == 76922          // 'element' 'group'
       || this.lk == 76935          // 'false' 'group'
       || this.lk == 76987          // 'namespace' 'group'
       || this.lk == 76997          // 'null' 'group'
       || this.lk == 77020          // 'processing-instruction' 'group'
       || this.lk == 77055          // 'true' 'group'
       || this.lk == 77907          // 'attribute' 'gt'
       || this.lk == 77946          // 'element' 'gt'
       || this.lk == 77959          // 'false' 'gt'
       || this.lk == 78011          // 'namespace' 'gt'
       || this.lk == 78021          // 'null' 'gt'
       || this.lk == 78044          // 'processing-instruction' 'gt'
       || this.lk == 78079          // 'true' 'gt'
       || this.lk == 78419          // 'attribute' 'idiv'
       || this.lk == 78458          // 'element' 'idiv'
       || this.lk == 78471          // 'false' 'idiv'
       || this.lk == 78523          // 'namespace' 'idiv'
       || this.lk == 78533          // 'null' 'idiv'
       || this.lk == 78556          // 'processing-instruction' 'idiv'
       || this.lk == 78591          // 'true' 'idiv'
       || this.lk == 83027          // 'attribute' 'instance'
       || this.lk == 83066          // 'element' 'instance'
       || this.lk == 83079          // 'false' 'instance'
       || this.lk == 83131          // 'namespace' 'instance'
       || this.lk == 83141          // 'null' 'instance'
       || this.lk == 83164          // 'processing-instruction' 'instance'
       || this.lk == 83199          // 'true' 'instance'
       || this.lk == 84051          // 'attribute' 'intersect'
       || this.lk == 84090          // 'element' 'intersect'
       || this.lk == 84103          // 'false' 'intersect'
       || this.lk == 84155          // 'namespace' 'intersect'
       || this.lk == 84165          // 'null' 'intersect'
       || this.lk == 84188          // 'processing-instruction' 'intersect'
       || this.lk == 84223          // 'true' 'intersect'
       || this.lk == 84563          // 'attribute' 'into'
       || this.lk == 84602          // 'element' 'into'
       || this.lk == 84615          // 'false' 'into'
       || this.lk == 84667          // 'namespace' 'into'
       || this.lk == 84677          // 'null' 'into'
       || this.lk == 84700          // 'processing-instruction' 'into'
       || this.lk == 84735          // 'true' 'into'
       || this.lk == 85075          // 'attribute' 'is'
       || this.lk == 85114          // 'element' 'is'
       || this.lk == 85127          // 'false' 'is'
       || this.lk == 85179          // 'namespace' 'is'
       || this.lk == 85189          // 'null' 'is'
       || this.lk == 85212          // 'processing-instruction' 'is'
       || this.lk == 85247          // 'true' 'is'
       || this.lk == 89683          // 'attribute' 'le'
       || this.lk == 89722          // 'element' 'le'
       || this.lk == 89735          // 'false' 'le'
       || this.lk == 89787          // 'namespace' 'le'
       || this.lk == 89797          // 'null' 'le'
       || this.lk == 89820          // 'processing-instruction' 'le'
       || this.lk == 89855          // 'true' 'le'
       || this.lk == 90707          // 'attribute' 'let'
       || this.lk == 90746          // 'element' 'let'
       || this.lk == 90759          // 'false' 'let'
       || this.lk == 90811          // 'namespace' 'let'
       || this.lk == 90821          // 'null' 'let'
       || this.lk == 90844          // 'processing-instruction' 'let'
       || this.lk == 90879          // 'true' 'let'
       || this.lk == 92755          // 'attribute' 'lt'
       || this.lk == 92794          // 'element' 'lt'
       || this.lk == 92807          // 'false' 'lt'
       || this.lk == 92859          // 'namespace' 'lt'
       || this.lk == 92869          // 'null' 'lt'
       || this.lk == 92892          // 'processing-instruction' 'lt'
       || this.lk == 92927          // 'true' 'lt'
       || this.lk == 93779          // 'attribute' 'mod'
       || this.lk == 93818          // 'element' 'mod'
       || this.lk == 93831          // 'false' 'mod'
       || this.lk == 93883          // 'namespace' 'mod'
       || this.lk == 93893          // 'null' 'mod'
       || this.lk == 93916          // 'processing-instruction' 'mod'
       || this.lk == 93951          // 'true' 'mod'
       || this.lk == 94291          // 'attribute' 'modify'
       || this.lk == 94330          // 'element' 'modify'
       || this.lk == 94343          // 'false' 'modify'
       || this.lk == 94395          // 'namespace' 'modify'
       || this.lk == 94405          // 'null' 'modify'
       || this.lk == 94428          // 'processing-instruction' 'modify'
       || this.lk == 94463          // 'true' 'modify'
       || this.lk == 96851          // 'attribute' 'ne'
       || this.lk == 96890          // 'element' 'ne'
       || this.lk == 96903          // 'false' 'ne'
       || this.lk == 96955          // 'namespace' 'ne'
       || this.lk == 96965          // 'null' 'ne'
       || this.lk == 96988          // 'processing-instruction' 'ne'
       || this.lk == 97023          // 'true' 'ne'
       || this.lk == 103507         // 'attribute' 'only'
       || this.lk == 103546         // 'element' 'only'
       || this.lk == 103559         // 'false' 'only'
       || this.lk == 103611         // 'namespace' 'only'
       || this.lk == 103621         // 'null' 'only'
       || this.lk == 103644         // 'processing-instruction' 'only'
       || this.lk == 103679         // 'true' 'only'
       || this.lk == 104531         // 'attribute' 'or'
       || this.lk == 104570         // 'element' 'or'
       || this.lk == 104583         // 'false' 'or'
       || this.lk == 104635         // 'namespace' 'or'
       || this.lk == 104645         // 'null' 'or'
       || this.lk == 104668         // 'processing-instruction' 'or'
       || this.lk == 104703         // 'true' 'or'
       || this.lk == 105043         // 'attribute' 'order'
       || this.lk == 105082         // 'element' 'order'
       || this.lk == 105095         // 'false' 'order'
       || this.lk == 105147         // 'namespace' 'order'
       || this.lk == 105157         // 'null' 'order'
       || this.lk == 105180         // 'processing-instruction' 'order'
       || this.lk == 105215         // 'true' 'order'
       || this.lk == 107143         // 'false' 'paragraphs'
       || this.lk == 107205         // 'null' 'paragraphs'
       || this.lk == 107263         // 'true' 'paragraphs'
       || this.lk == 114771         // 'attribute' 'return'
       || this.lk == 114810         // 'element' 'return'
       || this.lk == 114823         // 'false' 'return'
       || this.lk == 114875         // 'namespace' 'return'
       || this.lk == 114885         // 'null' 'return'
       || this.lk == 114908         // 'processing-instruction' 'return'
       || this.lk == 114943         // 'true' 'return'
       || this.lk == 116819         // 'attribute' 'satisfies'
       || this.lk == 116858         // 'element' 'satisfies'
       || this.lk == 116871         // 'false' 'satisfies'
       || this.lk == 116923         // 'namespace' 'satisfies'
       || this.lk == 116933         // 'null' 'satisfies'
       || this.lk == 116956         // 'processing-instruction' 'satisfies'
       || this.lk == 116991         // 'true' 'satisfies'
       || this.lk == 121479         // 'false' 'sentences'
       || this.lk == 121541         // 'null' 'sentences'
       || this.lk == 121599         // 'true' 'sentences'
       || this.lk == 123475         // 'attribute' 'stable'
       || this.lk == 123514         // 'element' 'stable'
       || this.lk == 123527         // 'false' 'stable'
       || this.lk == 123579         // 'namespace' 'stable'
       || this.lk == 123589         // 'null' 'stable'
       || this.lk == 123612         // 'processing-instruction' 'stable'
       || this.lk == 123647         // 'true' 'stable'
       || this.lk == 123987         // 'attribute' 'start'
       || this.lk == 124026         // 'element' 'start'
       || this.lk == 124039         // 'false' 'start'
       || this.lk == 124091         // 'namespace' 'start'
       || this.lk == 124101         // 'null' 'start'
       || this.lk == 124124         // 'processing-instruction' 'start'
       || this.lk == 124159         // 'true' 'start'
       || this.lk == 129159         // 'false' 'times'
       || this.lk == 129221         // 'null' 'times'
       || this.lk == 129279         // 'true' 'times'
       || this.lk == 129619         // 'attribute' 'to'
       || this.lk == 129658         // 'element' 'to'
       || this.lk == 129671         // 'false' 'to'
       || this.lk == 129723         // 'namespace' 'to'
       || this.lk == 129733         // 'null' 'to'
       || this.lk == 129756         // 'processing-instruction' 'to'
       || this.lk == 129791         // 'true' 'to'
       || this.lk == 130131         // 'attribute' 'treat'
       || this.lk == 130170         // 'element' 'treat'
       || this.lk == 130183         // 'false' 'treat'
       || this.lk == 130235         // 'namespace' 'treat'
       || this.lk == 130245         // 'null' 'treat'
       || this.lk == 130268         // 'processing-instruction' 'treat'
       || this.lk == 130303         // 'true' 'treat'
       || this.lk == 133203         // 'attribute' 'union'
       || this.lk == 133242         // 'element' 'union'
       || this.lk == 133255         // 'false' 'union'
       || this.lk == 133307         // 'namespace' 'union'
       || this.lk == 133317         // 'null' 'union'
       || this.lk == 133340         // 'processing-instruction' 'union'
       || this.lk == 133375         // 'true' 'union'
       || this.lk == 139347         // 'attribute' 'where'
       || this.lk == 139386         // 'element' 'where'
       || this.lk == 139399         // 'false' 'where'
       || this.lk == 139451         // 'namespace' 'where'
       || this.lk == 139461         // 'null' 'where'
       || this.lk == 139484         // 'processing-instruction' 'where'
       || this.lk == 139519         // 'true' 'where'
       || this.lk == 141395         // 'attribute' 'with'
       || this.lk == 141434         // 'element' 'with'
       || this.lk == 141447         // 'false' 'with'
       || this.lk == 141499         // 'namespace' 'with'
       || this.lk == 141509         // 'null' 'with'
       || this.lk == 141532         // 'processing-instruction' 'with'
       || this.lk == 141567         // 'true' 'with'
       || this.lk == 142983         // 'false' 'words'
       || this.lk == 143045         // 'null' 'words'
       || this.lk == 143103         // 'true' 'words'
       || this.lk == 145543         // 'false' '|'
       || this.lk == 145605         // 'null' '|'
       || this.lk == 145663         // 'true' '|'
       || this.lk == 146055         // 'false' '||'
       || this.lk == 146117         // 'null' '||'
       || this.lk == 146175         // 'true' '||'
       || this.lk == 146567         // 'false' '|}'
       || this.lk == 146629         // 'null' '|}'
       || this.lk == 146687         // 'true' '|}'
       || this.lk == 147079         // 'false' '}'
       || this.lk == 147141         // 'null' '}'
       || this.lk == 147199)        // 'true' '}'
      {
        this.lk = this.memoized(4, this.e0);
        if (this.lk == 0)
        {
          var b0A = this.b0; var e0A = this.e0; var l1A = this.l1;
          var b1A = this.b1; var e1A = this.e1; var l2A = this.l2;
          var b2A = this.b2; var e2A = this.e2;
          try
          {
            this.try_PostfixExpr();
            this.lk = -1;
          }
          catch (p1A)
          {
            this.lk = -2;
          }
          this.b0 = b0A; this.e0 = e0A; this.l1 = l1A; if (this.l1 == 0) {this.end = e0A;} else {
          this.b1 = b1A; this.e1 = e1A; this.l2 = l2A; if (this.l2 == 0) {this.end = e1A;} else {
          this.b2 = b2A; this.e2 = e2A; this.end = e2A; }}
          this.memoize(4, this.e0, this.lk);
        }
      }
      switch (this.lk)
      {
      case -1:
      case 8:                       // IntegerLiteral
      case 9:                       // DecimalLiteral
      case 10:                      // DoubleLiteral
      case 11:                      // StringLiteral
      case 31:                      // '$'
      case 32:                      // '$$'
      case 33:                      // '%'
      case 35:                      // '('
      case 55:                      // '<'
      case 56:                      // '<!--'
      case 60:                      // '<?'
      case 69:                      // '['
      case 281:                     // '{'
      case 283:                     // '{|'
      case 3155:                    // 'attribute' EQName^Token
      case 3194:                    // 'element' EQName^Token
      case 9915:                    // 'namespace' NCName^Token
      case 9948:                    // 'processing-instruction' NCName^Token
      case 14854:                   // EQName^Token '#'
      case 14919:                   // 'after' '#'
      case 14921:                   // 'allowing' '#'
      case 14922:                   // 'ancestor' '#'
      case 14923:                   // 'ancestor-or-self' '#'
      case 14924:                   // 'and' '#'
      case 14926:                   // 'append' '#'
      case 14927:                   // 'array' '#'
      case 14928:                   // 'as' '#'
      case 14929:                   // 'ascending' '#'
      case 14930:                   // 'at' '#'
      case 14931:                   // 'attribute' '#'
      case 14932:                   // 'base-uri' '#'
      case 14933:                   // 'before' '#'
      case 14934:                   // 'boundary-space' '#'
      case 14935:                   // 'break' '#'
      case 14937:                   // 'case' '#'
      case 14938:                   // 'cast' '#'
      case 14939:                   // 'castable' '#'
      case 14940:                   // 'catch' '#'
      case 14942:                   // 'child' '#'
      case 14943:                   // 'collation' '#'
      case 14945:                   // 'comment' '#'
      case 14946:                   // 'constraint' '#'
      case 14947:                   // 'construction' '#'
      case 14950:                   // 'context' '#'
      case 14951:                   // 'continue' '#'
      case 14952:                   // 'copy' '#'
      case 14953:                   // 'copy-namespaces' '#'
      case 14954:                   // 'count' '#'
      case 14955:                   // 'decimal-format' '#'
      case 14957:                   // 'declare' '#'
      case 14958:                   // 'default' '#'
      case 14959:                   // 'delete' '#'
      case 14960:                   // 'descendant' '#'
      case 14961:                   // 'descendant-or-self' '#'
      case 14962:                   // 'descending' '#'
      case 14967:                   // 'div' '#'
      case 14968:                   // 'document' '#'
      case 14969:                   // 'document-node' '#'
      case 14970:                   // 'element' '#'
      case 14971:                   // 'else' '#'
      case 14972:                   // 'empty' '#'
      case 14973:                   // 'empty-sequence' '#'
      case 14974:                   // 'encoding' '#'
      case 14975:                   // 'end' '#'
      case 14977:                   // 'eq' '#'
      case 14978:                   // 'every' '#'
      case 14980:                   // 'except' '#'
      case 14981:                   // 'exit' '#'
      case 14982:                   // 'external' '#'
      case 14983:                   // 'false' '#'
      case 14984:                   // 'first' '#'
      case 14985:                   // 'following' '#'
      case 14986:                   // 'following-sibling' '#'
      case 14987:                   // 'for' '#'
      case 14990:                   // 'from' '#'
      case 14991:                   // 'ft-option' '#'
      case 14995:                   // 'function' '#'
      case 14996:                   // 'ge' '#'
      case 14998:                   // 'group' '#'
      case 15000:                   // 'gt' '#'
      case 15001:                   // 'idiv' '#'
      case 15002:                   // 'if' '#'
      case 15003:                   // 'import' '#'
      case 15004:                   // 'in' '#'
      case 15005:                   // 'index' '#'
      case 15009:                   // 'insert' '#'
      case 15010:                   // 'instance' '#'
      case 15011:                   // 'integrity' '#'
      case 15012:                   // 'intersect' '#'
      case 15013:                   // 'into' '#'
      case 15014:                   // 'is' '#'
      case 15015:                   // 'item' '#'
      case 15016:                   // 'json' '#'
      case 15017:                   // 'json-item' '#'
      case 15018:                   // 'jsoniq' '#'
      case 15021:                   // 'last' '#'
      case 15022:                   // 'lax' '#'
      case 15023:                   // 'le' '#'
      case 15025:                   // 'let' '#'
      case 15027:                   // 'loop' '#'
      case 15029:                   // 'lt' '#'
      case 15031:                   // 'mod' '#'
      case 15032:                   // 'modify' '#'
      case 15033:                   // 'module' '#'
      case 15035:                   // 'namespace' '#'
      case 15036:                   // 'namespace-node' '#'
      case 15037:                   // 'ne' '#'
      case 15042:                   // 'node' '#'
      case 15043:                   // 'nodes' '#'
      case 15045:                   // 'null' '#'
      case 15046:                   // 'object' '#'
      case 15050:                   // 'only' '#'
      case 15051:                   // 'option' '#'
      case 15052:                   // 'or' '#'
      case 15053:                   // 'order' '#'
      case 15054:                   // 'ordered' '#'
      case 15055:                   // 'ordering' '#'
      case 15058:                   // 'parent' '#'
      case 15064:                   // 'preceding' '#'
      case 15065:                   // 'preceding-sibling' '#'
      case 15068:                   // 'processing-instruction' '#'
      case 15070:                   // 'rename' '#'
      case 15071:                   // 'replace' '#'
      case 15072:                   // 'return' '#'
      case 15073:                   // 'returning' '#'
      case 15074:                   // 'revalidation' '#'
      case 15076:                   // 'satisfies' '#'
      case 15077:                   // 'schema' '#'
      case 15078:                   // 'schema-attribute' '#'
      case 15079:                   // 'schema-element' '#'
      case 15080:                   // 'score' '#'
      case 15081:                   // 'select' '#'
      case 15082:                   // 'self' '#'
      case 15087:                   // 'sliding' '#'
      case 15088:                   // 'some' '#'
      case 15089:                   // 'stable' '#'
      case 15090:                   // 'start' '#'
      case 15093:                   // 'strict' '#'
      case 15095:                   // 'structured-item' '#'
      case 15096:                   // 'switch' '#'
      case 15097:                   // 'text' '#'
      case 15101:                   // 'to' '#'
      case 15102:                   // 'treat' '#'
      case 15103:                   // 'true' '#'
      case 15104:                   // 'try' '#'
      case 15105:                   // 'tumbling' '#'
      case 15106:                   // 'type' '#'
      case 15107:                   // 'typeswitch' '#'
      case 15108:                   // 'union' '#'
      case 15110:                   // 'unordered' '#'
      case 15111:                   // 'updating' '#'
      case 15114:                   // 'validate' '#'
      case 15115:                   // 'value' '#'
      case 15116:                   // 'variable' '#'
      case 15117:                   // 'version' '#'
      case 15120:                   // 'where' '#'
      case 15121:                   // 'while' '#'
      case 15124:                   // 'with' '#'
      case 17926:                   // EQName^Token '('
      case 17991:                   // 'after' '('
      case 17993:                   // 'allowing' '('
      case 17994:                   // 'ancestor' '('
      case 17995:                   // 'ancestor-or-self' '('
      case 17996:                   // 'and' '('
      case 17998:                   // 'append' '('
      case 18000:                   // 'as' '('
      case 18001:                   // 'ascending' '('
      case 18002:                   // 'at' '('
      case 18004:                   // 'base-uri' '('
      case 18005:                   // 'before' '('
      case 18006:                   // 'boundary-space' '('
      case 18007:                   // 'break' '('
      case 18009:                   // 'case' '('
      case 18010:                   // 'cast' '('
      case 18011:                   // 'castable' '('
      case 18012:                   // 'catch' '('
      case 18014:                   // 'child' '('
      case 18015:                   // 'collation' '('
      case 18018:                   // 'constraint' '('
      case 18019:                   // 'construction' '('
      case 18022:                   // 'context' '('
      case 18023:                   // 'continue' '('
      case 18024:                   // 'copy' '('
      case 18025:                   // 'copy-namespaces' '('
      case 18026:                   // 'count' '('
      case 18027:                   // 'decimal-format' '('
      case 18029:                   // 'declare' '('
      case 18030:                   // 'default' '('
      case 18031:                   // 'delete' '('
      case 18032:                   // 'descendant' '('
      case 18033:                   // 'descendant-or-self' '('
      case 18034:                   // 'descending' '('
      case 18039:                   // 'div' '('
      case 18040:                   // 'document' '('
      case 18043:                   // 'else' '('
      case 18044:                   // 'empty' '('
      case 18046:                   // 'encoding' '('
      case 18047:                   // 'end' '('
      case 18049:                   // 'eq' '('
      case 18050:                   // 'every' '('
      case 18052:                   // 'except' '('
      case 18053:                   // 'exit' '('
      case 18054:                   // 'external' '('
      case 18055:                   // 'false' '('
      case 18056:                   // 'first' '('
      case 18057:                   // 'following' '('
      case 18058:                   // 'following-sibling' '('
      case 18059:                   // 'for' '('
      case 18062:                   // 'from' '('
      case 18063:                   // 'ft-option' '('
      case 18067:                   // 'function' '('
      case 18068:                   // 'ge' '('
      case 18070:                   // 'group' '('
      case 18072:                   // 'gt' '('
      case 18073:                   // 'idiv' '('
      case 18075:                   // 'import' '('
      case 18076:                   // 'in' '('
      case 18077:                   // 'index' '('
      case 18081:                   // 'insert' '('
      case 18082:                   // 'instance' '('
      case 18083:                   // 'integrity' '('
      case 18084:                   // 'intersect' '('
      case 18085:                   // 'into' '('
      case 18086:                   // 'is' '('
      case 18088:                   // 'json' '('
      case 18090:                   // 'jsoniq' '('
      case 18093:                   // 'last' '('
      case 18094:                   // 'lax' '('
      case 18095:                   // 'le' '('
      case 18097:                   // 'let' '('
      case 18099:                   // 'loop' '('
      case 18101:                   // 'lt' '('
      case 18103:                   // 'mod' '('
      case 18104:                   // 'modify' '('
      case 18105:                   // 'module' '('
      case 18107:                   // 'namespace' '('
      case 18109:                   // 'ne' '('
      case 18115:                   // 'nodes' '('
      case 18117:                   // 'null' '('
      case 18118:                   // 'object' '('
      case 18122:                   // 'only' '('
      case 18123:                   // 'option' '('
      case 18124:                   // 'or' '('
      case 18125:                   // 'order' '('
      case 18126:                   // 'ordered' '('
      case 18127:                   // 'ordering' '('
      case 18130:                   // 'parent' '('
      case 18136:                   // 'preceding' '('
      case 18137:                   // 'preceding-sibling' '('
      case 18142:                   // 'rename' '('
      case 18143:                   // 'replace' '('
      case 18144:                   // 'return' '('
      case 18145:                   // 'returning' '('
      case 18146:                   // 'revalidation' '('
      case 18148:                   // 'satisfies' '('
      case 18149:                   // 'schema' '('
      case 18152:                   // 'score' '('
      case 18153:                   // 'select' '('
      case 18154:                   // 'self' '('
      case 18159:                   // 'sliding' '('
      case 18160:                   // 'some' '('
      case 18161:                   // 'stable' '('
      case 18162:                   // 'start' '('
      case 18165:                   // 'strict' '('
      case 18173:                   // 'to' '('
      case 18174:                   // 'treat' '('
      case 18175:                   // 'true' '('
      case 18176:                   // 'try' '('
      case 18177:                   // 'tumbling' '('
      case 18178:                   // 'type' '('
      case 18180:                   // 'union' '('
      case 18182:                   // 'unordered' '('
      case 18183:                   // 'updating' '('
      case 18186:                   // 'validate' '('
      case 18187:                   // 'value' '('
      case 18188:                   // 'variable' '('
      case 18189:                   // 'version' '('
      case 18192:                   // 'where' '('
      case 18193:                   // 'while' '('
      case 18196:                   // 'with' '('
      case 23175:                   // 'false' '.'
      case 23237:                   // 'null' '.'
      case 23295:                   // 'true' '.'
      case 37459:                   // 'attribute' 'allowing'
      case 37498:                   // 'element' 'allowing'
      case 37563:                   // 'namespace' 'allowing'
      case 37596:                   // 'processing-instruction' 'allowing'
      case 37971:                   // 'attribute' 'ancestor'
      case 38010:                   // 'element' 'ancestor'
      case 38075:                   // 'namespace' 'ancestor'
      case 38108:                   // 'processing-instruction' 'ancestor'
      case 38483:                   // 'attribute' 'ancestor-or-self'
      case 38522:                   // 'element' 'ancestor-or-self'
      case 38587:                   // 'namespace' 'ancestor-or-self'
      case 38620:                   // 'processing-instruction' 'ancestor-or-self'
      case 40019:                   // 'attribute' 'append'
      case 40058:                   // 'element' 'append'
      case 40123:                   // 'namespace' 'append'
      case 40156:                   // 'processing-instruction' 'append'
      case 40531:                   // 'attribute' 'array'
      case 40570:                   // 'element' 'array'
      case 42579:                   // 'attribute' 'attribute'
      case 42618:                   // 'element' 'attribute'
      case 42683:                   // 'namespace' 'attribute'
      case 42716:                   // 'processing-instruction' 'attribute'
      case 43091:                   // 'attribute' 'base-uri'
      case 43130:                   // 'element' 'base-uri'
      case 43195:                   // 'namespace' 'base-uri'
      case 43228:                   // 'processing-instruction' 'base-uri'
      case 44115:                   // 'attribute' 'boundary-space'
      case 44154:                   // 'element' 'boundary-space'
      case 44219:                   // 'namespace' 'boundary-space'
      case 44252:                   // 'processing-instruction' 'boundary-space'
      case 44627:                   // 'attribute' 'break'
      case 44666:                   // 'element' 'break'
      case 44731:                   // 'namespace' 'break'
      case 44764:                   // 'processing-instruction' 'break'
      case 47187:                   // 'attribute' 'catch'
      case 47226:                   // 'element' 'catch'
      case 47291:                   // 'namespace' 'catch'
      case 47324:                   // 'processing-instruction' 'catch'
      case 48211:                   // 'attribute' 'child'
      case 48250:                   // 'element' 'child'
      case 48315:                   // 'namespace' 'child'
      case 48348:                   // 'processing-instruction' 'child'
      case 49747:                   // 'attribute' 'comment'
      case 49786:                   // 'element' 'comment'
      case 49851:                   // 'namespace' 'comment'
      case 49884:                   // 'processing-instruction' 'comment'
      case 50259:                   // 'attribute' 'constraint'
      case 50298:                   // 'element' 'constraint'
      case 50363:                   // 'namespace' 'constraint'
      case 50396:                   // 'processing-instruction' 'constraint'
      case 50771:                   // 'attribute' 'construction'
      case 50810:                   // 'element' 'construction'
      case 50875:                   // 'namespace' 'construction'
      case 50908:                   // 'processing-instruction' 'construction'
      case 52307:                   // 'attribute' 'context'
      case 52346:                   // 'element' 'context'
      case 52411:                   // 'namespace' 'context'
      case 52444:                   // 'processing-instruction' 'context'
      case 52819:                   // 'attribute' 'continue'
      case 52858:                   // 'element' 'continue'
      case 52923:                   // 'namespace' 'continue'
      case 52956:                   // 'processing-instruction' 'continue'
      case 53331:                   // 'attribute' 'copy'
      case 53370:                   // 'element' 'copy'
      case 53435:                   // 'namespace' 'copy'
      case 53468:                   // 'processing-instruction' 'copy'
      case 53843:                   // 'attribute' 'copy-namespaces'
      case 53882:                   // 'element' 'copy-namespaces'
      case 53947:                   // 'namespace' 'copy-namespaces'
      case 53980:                   // 'processing-instruction' 'copy-namespaces'
      case 54867:                   // 'attribute' 'decimal-format'
      case 54906:                   // 'element' 'decimal-format'
      case 54971:                   // 'namespace' 'decimal-format'
      case 55004:                   // 'processing-instruction' 'decimal-format'
      case 55891:                   // 'attribute' 'declare'
      case 55930:                   // 'element' 'declare'
      case 55995:                   // 'namespace' 'declare'
      case 56028:                   // 'processing-instruction' 'declare'
      case 56915:                   // 'attribute' 'delete'
      case 56954:                   // 'element' 'delete'
      case 57019:                   // 'namespace' 'delete'
      case 57052:                   // 'processing-instruction' 'delete'
      case 57427:                   // 'attribute' 'descendant'
      case 57466:                   // 'element' 'descendant'
      case 57531:                   // 'namespace' 'descendant'
      case 57564:                   // 'processing-instruction' 'descendant'
      case 57939:                   // 'attribute' 'descendant-or-self'
      case 57978:                   // 'element' 'descendant-or-self'
      case 58043:                   // 'namespace' 'descendant-or-self'
      case 58076:                   // 'processing-instruction' 'descendant-or-self'
      case 61523:                   // 'attribute' 'document'
      case 61562:                   // 'element' 'document'
      case 61627:                   // 'namespace' 'document'
      case 61660:                   // 'processing-instruction' 'document'
      case 62035:                   // 'attribute' 'document-node'
      case 62074:                   // 'element' 'document-node'
      case 62139:                   // 'namespace' 'document-node'
      case 62172:                   // 'processing-instruction' 'document-node'
      case 62547:                   // 'attribute' 'element'
      case 62586:                   // 'element' 'element'
      case 62651:                   // 'namespace' 'element'
      case 62684:                   // 'processing-instruction' 'element'
      case 64083:                   // 'attribute' 'empty-sequence'
      case 64122:                   // 'element' 'empty-sequence'
      case 64187:                   // 'namespace' 'empty-sequence'
      case 64220:                   // 'processing-instruction' 'empty-sequence'
      case 64595:                   // 'attribute' 'encoding'
      case 64634:                   // 'element' 'encoding'
      case 64699:                   // 'namespace' 'encoding'
      case 64732:                   // 'processing-instruction' 'encoding'
      case 66643:                   // 'attribute' 'every'
      case 66682:                   // 'element' 'every'
      case 66747:                   // 'namespace' 'every'
      case 66780:                   // 'processing-instruction' 'every'
      case 68179:                   // 'attribute' 'exit'
      case 68218:                   // 'element' 'exit'
      case 68283:                   // 'namespace' 'exit'
      case 68316:                   // 'processing-instruction' 'exit'
      case 68691:                   // 'attribute' 'external'
      case 68730:                   // 'element' 'external'
      case 68795:                   // 'namespace' 'external'
      case 68828:                   // 'processing-instruction' 'external'
      case 69203:                   // 'attribute' 'false'
      case 69242:                   // 'element' 'false'
      case 69307:                   // 'namespace' 'false'
      case 69340:                   // 'processing-instruction' 'false'
      case 69715:                   // 'attribute' 'first'
      case 69754:                   // 'element' 'first'
      case 69819:                   // 'namespace' 'first'
      case 69852:                   // 'processing-instruction' 'first'
      case 70227:                   // 'attribute' 'following'
      case 70266:                   // 'element' 'following'
      case 70331:                   // 'namespace' 'following'
      case 70364:                   // 'processing-instruction' 'following'
      case 70739:                   // 'attribute' 'following-sibling'
      case 70778:                   // 'element' 'following-sibling'
      case 70843:                   // 'namespace' 'following-sibling'
      case 70876:                   // 'processing-instruction' 'following-sibling'
      case 72787:                   // 'attribute' 'from'
      case 72826:                   // 'element' 'from'
      case 72891:                   // 'namespace' 'from'
      case 72924:                   // 'processing-instruction' 'from'
      case 73299:                   // 'attribute' 'ft-option'
      case 73338:                   // 'element' 'ft-option'
      case 73403:                   // 'namespace' 'ft-option'
      case 73436:                   // 'processing-instruction' 'ft-option'
      case 75347:                   // 'attribute' 'function'
      case 75386:                   // 'element' 'function'
      case 75451:                   // 'namespace' 'function'
      case 75484:                   // 'processing-instruction' 'function'
      case 78931:                   // 'attribute' 'if'
      case 78970:                   // 'element' 'if'
      case 79035:                   // 'namespace' 'if'
      case 79068:                   // 'processing-instruction' 'if'
      case 79443:                   // 'attribute' 'import'
      case 79482:                   // 'element' 'import'
      case 79547:                   // 'namespace' 'import'
      case 79580:                   // 'processing-instruction' 'import'
      case 79955:                   // 'attribute' 'in'
      case 79994:                   // 'element' 'in'
      case 80059:                   // 'namespace' 'in'
      case 80092:                   // 'processing-instruction' 'in'
      case 80467:                   // 'attribute' 'index'
      case 80506:                   // 'element' 'index'
      case 80571:                   // 'namespace' 'index'
      case 80604:                   // 'processing-instruction' 'index'
      case 82515:                   // 'attribute' 'insert'
      case 82554:                   // 'element' 'insert'
      case 82619:                   // 'namespace' 'insert'
      case 82652:                   // 'processing-instruction' 'insert'
      case 83539:                   // 'attribute' 'integrity'
      case 83578:                   // 'element' 'integrity'
      case 83643:                   // 'namespace' 'integrity'
      case 83676:                   // 'processing-instruction' 'integrity'
      case 85587:                   // 'attribute' 'item'
      case 85626:                   // 'element' 'item'
      case 85691:                   // 'namespace' 'item'
      case 85724:                   // 'processing-instruction' 'item'
      case 86099:                   // 'attribute' 'json'
      case 86138:                   // 'element' 'json'
      case 86203:                   // 'namespace' 'json'
      case 86236:                   // 'processing-instruction' 'json'
      case 86611:                   // 'attribute' 'json-item'
      case 86650:                   // 'element' 'json-item'
      case 87123:                   // 'attribute' 'jsoniq'
      case 87162:                   // 'element' 'jsoniq'
      case 87227:                   // 'namespace' 'jsoniq'
      case 87260:                   // 'processing-instruction' 'jsoniq'
      case 88659:                   // 'attribute' 'last'
      case 88698:                   // 'element' 'last'
      case 88763:                   // 'namespace' 'last'
      case 88796:                   // 'processing-instruction' 'last'
      case 89171:                   // 'attribute' 'lax'
      case 89210:                   // 'element' 'lax'
      case 89275:                   // 'namespace' 'lax'
      case 89308:                   // 'processing-instruction' 'lax'
      case 91731:                   // 'attribute' 'loop'
      case 91770:                   // 'element' 'loop'
      case 91835:                   // 'namespace' 'loop'
      case 91868:                   // 'processing-instruction' 'loop'
      case 94803:                   // 'attribute' 'module'
      case 94842:                   // 'element' 'module'
      case 94907:                   // 'namespace' 'module'
      case 94940:                   // 'processing-instruction' 'module'
      case 95827:                   // 'attribute' 'namespace'
      case 95866:                   // 'element' 'namespace'
      case 95931:                   // 'namespace' 'namespace'
      case 95964:                   // 'processing-instruction' 'namespace'
      case 96339:                   // 'attribute' 'namespace-node'
      case 96378:                   // 'element' 'namespace-node'
      case 96443:                   // 'namespace' 'namespace-node'
      case 96476:                   // 'processing-instruction' 'namespace-node'
      case 99411:                   // 'attribute' 'node'
      case 99450:                   // 'element' 'node'
      case 99515:                   // 'namespace' 'node'
      case 99548:                   // 'processing-instruction' 'node'
      case 99923:                   // 'attribute' 'nodes'
      case 99962:                   // 'element' 'nodes'
      case 100027:                  // 'namespace' 'nodes'
      case 100060:                  // 'processing-instruction' 'nodes'
      case 100947:                  // 'attribute' 'null'
      case 100986:                  // 'element' 'null'
      case 101051:                  // 'namespace' 'null'
      case 101084:                  // 'processing-instruction' 'null'
      case 101459:                  // 'attribute' 'object'
      case 101498:                  // 'element' 'object'
      case 101563:                  // 'namespace' 'object'
      case 101596:                  // 'processing-instruction' 'object'
      case 104019:                  // 'attribute' 'option'
      case 104058:                  // 'element' 'option'
      case 104123:                  // 'namespace' 'option'
      case 104156:                  // 'processing-instruction' 'option'
      case 105555:                  // 'attribute' 'ordered'
      case 105594:                  // 'element' 'ordered'
      case 105659:                  // 'namespace' 'ordered'
      case 105692:                  // 'processing-instruction' 'ordered'
      case 106067:                  // 'attribute' 'ordering'
      case 106106:                  // 'element' 'ordering'
      case 106171:                  // 'namespace' 'ordering'
      case 106204:                  // 'processing-instruction' 'ordering'
      case 107603:                  // 'attribute' 'parent'
      case 107642:                  // 'element' 'parent'
      case 107707:                  // 'namespace' 'parent'
      case 107740:                  // 'processing-instruction' 'parent'
      case 110675:                  // 'attribute' 'preceding'
      case 110714:                  // 'element' 'preceding'
      case 110779:                  // 'namespace' 'preceding'
      case 110812:                  // 'processing-instruction' 'preceding'
      case 111187:                  // 'attribute' 'preceding-sibling'
      case 111226:                  // 'element' 'preceding-sibling'
      case 111291:                  // 'namespace' 'preceding-sibling'
      case 111324:                  // 'processing-instruction' 'preceding-sibling'
      case 112723:                  // 'attribute' 'processing-instruction'
      case 112762:                  // 'element' 'processing-instruction'
      case 112827:                  // 'namespace' 'processing-instruction'
      case 112860:                  // 'processing-instruction' 'processing-instruction'
      case 113747:                  // 'attribute' 'rename'
      case 113786:                  // 'element' 'rename'
      case 113851:                  // 'namespace' 'rename'
      case 113884:                  // 'processing-instruction' 'rename'
      case 114259:                  // 'attribute' 'replace'
      case 114298:                  // 'element' 'replace'
      case 114363:                  // 'namespace' 'replace'
      case 114396:                  // 'processing-instruction' 'replace'
      case 115283:                  // 'attribute' 'returning'
      case 115322:                  // 'element' 'returning'
      case 115387:                  // 'namespace' 'returning'
      case 115420:                  // 'processing-instruction' 'returning'
      case 115795:                  // 'attribute' 'revalidation'
      case 115834:                  // 'element' 'revalidation'
      case 115899:                  // 'namespace' 'revalidation'
      case 115932:                  // 'processing-instruction' 'revalidation'
      case 117331:                  // 'attribute' 'schema'
      case 117370:                  // 'element' 'schema'
      case 117435:                  // 'namespace' 'schema'
      case 117468:                  // 'processing-instruction' 'schema'
      case 117843:                  // 'attribute' 'schema-attribute'
      case 117882:                  // 'element' 'schema-attribute'
      case 117947:                  // 'namespace' 'schema-attribute'
      case 117980:                  // 'processing-instruction' 'schema-attribute'
      case 118355:                  // 'attribute' 'schema-element'
      case 118394:                  // 'element' 'schema-element'
      case 118459:                  // 'namespace' 'schema-element'
      case 118492:                  // 'processing-instruction' 'schema-element'
      case 118867:                  // 'attribute' 'score'
      case 118906:                  // 'element' 'score'
      case 118971:                  // 'namespace' 'score'
      case 119004:                  // 'processing-instruction' 'score'
      case 119379:                  // 'attribute' 'select'
      case 119418:                  // 'element' 'select'
      case 119483:                  // 'namespace' 'select'
      case 119516:                  // 'processing-instruction' 'select'
      case 119891:                  // 'attribute' 'self'
      case 119930:                  // 'element' 'self'
      case 119995:                  // 'namespace' 'self'
      case 120028:                  // 'processing-instruction' 'self'
      case 122451:                  // 'attribute' 'sliding'
      case 122490:                  // 'element' 'sliding'
      case 122555:                  // 'namespace' 'sliding'
      case 122588:                  // 'processing-instruction' 'sliding'
      case 122963:                  // 'attribute' 'some'
      case 123002:                  // 'element' 'some'
      case 123067:                  // 'namespace' 'some'
      case 123100:                  // 'processing-instruction' 'some'
      case 125523:                  // 'attribute' 'strict'
      case 125562:                  // 'element' 'strict'
      case 125627:                  // 'namespace' 'strict'
      case 125660:                  // 'processing-instruction' 'strict'
      case 126547:                  // 'attribute' 'structured-item'
      case 126586:                  // 'element' 'structured-item'
      case 127059:                  // 'attribute' 'switch'
      case 127098:                  // 'element' 'switch'
      case 127163:                  // 'namespace' 'switch'
      case 127196:                  // 'processing-instruction' 'switch'
      case 127571:                  // 'attribute' 'text'
      case 127610:                  // 'element' 'text'
      case 127675:                  // 'namespace' 'text'
      case 127708:                  // 'processing-instruction' 'text'
      case 130643:                  // 'attribute' 'true'
      case 130682:                  // 'element' 'true'
      case 130747:                  // 'namespace' 'true'
      case 130780:                  // 'processing-instruction' 'true'
      case 131155:                  // 'attribute' 'try'
      case 131194:                  // 'element' 'try'
      case 131259:                  // 'namespace' 'try'
      case 131292:                  // 'processing-instruction' 'try'
      case 131667:                  // 'attribute' 'tumbling'
      case 131706:                  // 'element' 'tumbling'
      case 131771:                  // 'namespace' 'tumbling'
      case 131804:                  // 'processing-instruction' 'tumbling'
      case 132179:                  // 'attribute' 'type'
      case 132218:                  // 'element' 'type'
      case 132283:                  // 'namespace' 'type'
      case 132316:                  // 'processing-instruction' 'type'
      case 132691:                  // 'attribute' 'typeswitch'
      case 132730:                  // 'element' 'typeswitch'
      case 132795:                  // 'namespace' 'typeswitch'
      case 132828:                  // 'processing-instruction' 'typeswitch'
      case 134227:                  // 'attribute' 'unordered'
      case 134266:                  // 'element' 'unordered'
      case 134331:                  // 'namespace' 'unordered'
      case 134364:                  // 'processing-instruction' 'unordered'
      case 134739:                  // 'attribute' 'updating'
      case 134778:                  // 'element' 'updating'
      case 134843:                  // 'namespace' 'updating'
      case 134876:                  // 'processing-instruction' 'updating'
      case 136275:                  // 'attribute' 'validate'
      case 136314:                  // 'element' 'validate'
      case 136379:                  // 'namespace' 'validate'
      case 136412:                  // 'processing-instruction' 'validate'
      case 136787:                  // 'attribute' 'value'
      case 136826:                  // 'element' 'value'
      case 136891:                  // 'namespace' 'value'
      case 136924:                  // 'processing-instruction' 'value'
      case 137299:                  // 'attribute' 'variable'
      case 137338:                  // 'element' 'variable'
      case 137403:                  // 'namespace' 'variable'
      case 137436:                  // 'processing-instruction' 'variable'
      case 137811:                  // 'attribute' 'version'
      case 137850:                  // 'element' 'version'
      case 137915:                  // 'namespace' 'version'
      case 137948:                  // 'processing-instruction' 'version'
      case 139859:                  // 'attribute' 'while'
      case 139898:                  // 'element' 'while'
      case 139963:                  // 'namespace' 'while'
      case 139996:                  // 'processing-instruction' 'while'
      case 143955:                  // 'attribute' '{'
      case 143969:                  // 'comment' '{'
      case 143992:                  // 'document' '{'
      case 143994:                  // 'element' '{'
      case 144059:                  // 'namespace' '{'
      case 144078:                  // 'ordered' '{'
      case 144092:                  // 'processing-instruction' '{'
      case 144121:                  // 'text' '{'
      case 144134:                  // 'unordered' '{'
        this.parse_PostfixExpr();
        break;
      default:
        this.parse_AxisStep();
      }
      this.eventHandler.endNonterminal("StepExpr", this.e0);
    }

    private try_StepExpr()
    {
      switch (this.l1)
      {
      case 83:                      // 'attribute'
        this.lookahead2W(287);      // EQName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' |
                                    // ',' | '-' | '/' | '//' | ':' | '::' | ';' | '<' | '<<' | '<=' | '=' | '>' |
                                    // '>=' | '>>' | '[' | ']' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'by' |
                                    // 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'contains' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'paragraphs' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sentences' | 'sliding' | 'some' | 'stable' |
                                    // 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'times' | 'to' |
                                    // 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'words' | '{' | '|' | '||' | '|}' | '}'
        break;
      case 122:                     // 'element'
        this.lookahead2W(286);      // EQName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' |
                                    // ',' | '-' | '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' |
                                    // '>>' | '[' | ']' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'contains' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'paragraphs' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sentences' | 'sliding' | 'some' | 'stable' |
                                    // 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'times' | 'to' |
                                    // 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'words' | '{' | '|' | '||' | '|}' | '}'
        break;
      case 187:                     // 'namespace'
      case 220:                     // 'processing-instruction'
        this.lookahead2W(284);      // NCName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' |
                                    // ',' | '-' | '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' |
                                    // '>>' | '[' | ']' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'by' | 'case' | 'cast' | 'castable' |
                                    // 'catch' | 'child' | 'collation' | 'comment' | 'constraint' | 'construction' |
                                    // 'contains' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'null' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'paragraphs' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sentences' | 'sliding' | 'some' | 'stable' |
                                    // 'start' | 'strict' | 'switch' | 'text' | 'times' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'words' | '{' | '|' | '||' | '|}' | '}'
        break;
      case 135:                     // 'false'
      case 197:                     // 'null'
      case 255:                     // 'true'
        this.lookahead2W(236);      // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '.' |
                                    // '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' |
                                    // 'cast' | 'castable' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' | '||' |
                                    // '|}' | '}'
        break;
      case 97:                      // 'comment'
      case 120:                     // 'document'
      case 206:                     // 'ordered'
      case 249:                     // 'text'
      case 262:                     // 'unordered'
        this.lookahead2W(238);      // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '{' | '|' | '||' | '|}' | '}'
        break;
      case 79:                      // 'array'
      case 125:                     // 'empty-sequence'
      case 154:                     // 'if'
      case 167:                     // 'item'
      case 169:                     // 'json-item'
      case 247:                     // 'structured-item'
      case 248:                     // 'switch'
      case 259:                     // 'typeswitch'
        this.lookahead2W(229);      // S^WS | EOF | '!' | '!=' | '#' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'after' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
        break;
      case 74:                      // 'ancestor'
      case 75:                      // 'ancestor-or-self'
      case 94:                      // 'child'
      case 112:                     // 'descendant'
      case 113:                     // 'descendant-or-self'
      case 137:                     // 'following'
      case 138:                     // 'following-sibling'
      case 210:                     // 'parent'
      case 216:                     // 'preceding'
      case 217:                     // 'preceding-sibling'
      case 234:                     // 'self'
        this.lookahead2W(237);      // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | '::' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' |
                                    // 'cast' | 'castable' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' | '||' |
                                    // '|}' | '}'
        break;
      case 6:                       // EQName^Token
      case 71:                      // 'after'
      case 73:                      // 'allowing'
      case 76:                      // 'and'
      case 78:                      // 'append'
      case 80:                      // 'as'
      case 81:                      // 'ascending'
      case 82:                      // 'at'
      case 84:                      // 'base-uri'
      case 85:                      // 'before'
      case 86:                      // 'boundary-space'
      case 87:                      // 'break'
      case 89:                      // 'case'
      case 90:                      // 'cast'
      case 91:                      // 'castable'
      case 92:                      // 'catch'
      case 95:                      // 'collation'
      case 98:                      // 'constraint'
      case 99:                      // 'construction'
      case 102:                     // 'context'
      case 103:                     // 'continue'
      case 104:                     // 'copy'
      case 105:                     // 'copy-namespaces'
      case 106:                     // 'count'
      case 107:                     // 'decimal-format'
      case 109:                     // 'declare'
      case 110:                     // 'default'
      case 111:                     // 'delete'
      case 114:                     // 'descending'
      case 119:                     // 'div'
      case 121:                     // 'document-node'
      case 123:                     // 'else'
      case 124:                     // 'empty'
      case 126:                     // 'encoding'
      case 127:                     // 'end'
      case 129:                     // 'eq'
      case 130:                     // 'every'
      case 132:                     // 'except'
      case 133:                     // 'exit'
      case 134:                     // 'external'
      case 136:                     // 'first'
      case 139:                     // 'for'
      case 142:                     // 'from'
      case 143:                     // 'ft-option'
      case 147:                     // 'function'
      case 148:                     // 'ge'
      case 150:                     // 'group'
      case 152:                     // 'gt'
      case 153:                     // 'idiv'
      case 155:                     // 'import'
      case 156:                     // 'in'
      case 157:                     // 'index'
      case 161:                     // 'insert'
      case 162:                     // 'instance'
      case 163:                     // 'integrity'
      case 164:                     // 'intersect'
      case 165:                     // 'into'
      case 166:                     // 'is'
      case 168:                     // 'json'
      case 170:                     // 'jsoniq'
      case 173:                     // 'last'
      case 174:                     // 'lax'
      case 175:                     // 'le'
      case 177:                     // 'let'
      case 179:                     // 'loop'
      case 181:                     // 'lt'
      case 183:                     // 'mod'
      case 184:                     // 'modify'
      case 185:                     // 'module'
      case 188:                     // 'namespace-node'
      case 189:                     // 'ne'
      case 194:                     // 'node'
      case 195:                     // 'nodes'
      case 198:                     // 'object'
      case 202:                     // 'only'
      case 203:                     // 'option'
      case 204:                     // 'or'
      case 205:                     // 'order'
      case 207:                     // 'ordering'
      case 222:                     // 'rename'
      case 223:                     // 'replace'
      case 224:                     // 'return'
      case 225:                     // 'returning'
      case 226:                     // 'revalidation'
      case 228:                     // 'satisfies'
      case 229:                     // 'schema'
      case 230:                     // 'schema-attribute'
      case 231:                     // 'schema-element'
      case 232:                     // 'score'
      case 233:                     // 'select'
      case 239:                     // 'sliding'
      case 240:                     // 'some'
      case 241:                     // 'stable'
      case 242:                     // 'start'
      case 245:                     // 'strict'
      case 253:                     // 'to'
      case 254:                     // 'treat'
      case 256:                     // 'try'
      case 257:                     // 'tumbling'
      case 258:                     // 'type'
      case 260:                     // 'union'
      case 263:                     // 'updating'
      case 266:                     // 'validate'
      case 267:                     // 'value'
      case 268:                     // 'variable'
      case 269:                     // 'version'
      case 272:                     // 'where'
      case 273:                     // 'while'
      case 276:                     // 'with'
        this.lookahead2W(233);      // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
        break;
      default:
        this.lk = this.l1;
      }
      if (this.lk == 12935          // 'false' EOF
       || this.lk == 12997          // 'null' EOF
       || this.lk == 13055          // 'true' EOF
       || this.lk == 13447          // 'false' '!'
       || this.lk == 13509          // 'null' '!'
       || this.lk == 13567          // 'true' '!'
       || this.lk == 13959          // 'false' '!='
       || this.lk == 14021          // 'null' '!='
       || this.lk == 14079          // 'true' '!='
       || this.lk == 19591          // 'false' ')'
       || this.lk == 19653          // 'null' ')'
       || this.lk == 19711          // 'true' ')'
       || this.lk == 20103          // 'false' '*'
       || this.lk == 20165          // 'null' '*'
       || this.lk == 20223          // 'true' '*'
       || this.lk == 21127          // 'false' '+'
       || this.lk == 21189          // 'null' '+'
       || this.lk == 21247          // 'true' '+'
       || this.lk == 21639          // 'false' ','
       || this.lk == 21701          // 'null' ','
       || this.lk == 21759          // 'true' ','
       || this.lk == 22151          // 'false' '-'
       || this.lk == 22213          // 'null' '-'
       || this.lk == 22271          // 'true' '-'
       || this.lk == 24199          // 'false' '/'
       || this.lk == 24261          // 'null' '/'
       || this.lk == 24319          // 'true' '/'
       || this.lk == 24711          // 'false' '//'
       || this.lk == 24773          // 'null' '//'
       || this.lk == 24831          // 'true' '//'
       || this.lk == 25735          // 'false' ':'
       || this.lk == 25797          // 'null' ':'
       || this.lk == 25855          // 'true' ':'
       || this.lk == 27783          // 'false' ';'
       || this.lk == 27845          // 'null' ';'
       || this.lk == 27903          // 'true' ';'
       || this.lk == 28295          // 'false' '<'
       || this.lk == 28357          // 'null' '<'
       || this.lk == 28415          // 'true' '<'
       || this.lk == 29831          // 'false' '<<'
       || this.lk == 29893          // 'null' '<<'
       || this.lk == 29951          // 'true' '<<'
       || this.lk == 30343          // 'false' '<='
       || this.lk == 30405          // 'null' '<='
       || this.lk == 30463          // 'true' '<='
       || this.lk == 31367          // 'false' '='
       || this.lk == 31429          // 'null' '='
       || this.lk == 31487          // 'true' '='
       || this.lk == 31879          // 'false' '>'
       || this.lk == 31941          // 'null' '>'
       || this.lk == 31999          // 'true' '>'
       || this.lk == 32391          // 'false' '>='
       || this.lk == 32453          // 'null' '>='
       || this.lk == 32511          // 'true' '>='
       || this.lk == 32903          // 'false' '>>'
       || this.lk == 32965          // 'null' '>>'
       || this.lk == 33023          // 'true' '>>'
       || this.lk == 35463          // 'false' '['
       || this.lk == 35525          // 'null' '['
       || this.lk == 35583          // 'true' '['
       || this.lk == 35975          // 'false' ']'
       || this.lk == 36037          // 'null' ']'
       || this.lk == 36095          // 'true' ']'
       || this.lk == 36435          // 'attribute' 'after'
       || this.lk == 36474          // 'element' 'after'
       || this.lk == 36487          // 'false' 'after'
       || this.lk == 36539          // 'namespace' 'after'
       || this.lk == 36549          // 'null' 'after'
       || this.lk == 36572          // 'processing-instruction' 'after'
       || this.lk == 36607          // 'true' 'after'
       || this.lk == 38995          // 'attribute' 'and'
       || this.lk == 39034          // 'element' 'and'
       || this.lk == 39047          // 'false' 'and'
       || this.lk == 39099          // 'namespace' 'and'
       || this.lk == 39109          // 'null' 'and'
       || this.lk == 39132          // 'processing-instruction' 'and'
       || this.lk == 39167          // 'true' 'and'
       || this.lk == 41043          // 'attribute' 'as'
       || this.lk == 41082          // 'element' 'as'
       || this.lk == 41095          // 'false' 'as'
       || this.lk == 41147          // 'namespace' 'as'
       || this.lk == 41157          // 'null' 'as'
       || this.lk == 41180          // 'processing-instruction' 'as'
       || this.lk == 41215          // 'true' 'as'
       || this.lk == 41555          // 'attribute' 'ascending'
       || this.lk == 41594          // 'element' 'ascending'
       || this.lk == 41607          // 'false' 'ascending'
       || this.lk == 41659          // 'namespace' 'ascending'
       || this.lk == 41669          // 'null' 'ascending'
       || this.lk == 41692          // 'processing-instruction' 'ascending'
       || this.lk == 41727          // 'true' 'ascending'
       || this.lk == 42067          // 'attribute' 'at'
       || this.lk == 42106          // 'element' 'at'
       || this.lk == 42119          // 'false' 'at'
       || this.lk == 42171          // 'namespace' 'at'
       || this.lk == 42181          // 'null' 'at'
       || this.lk == 42204          // 'processing-instruction' 'at'
       || this.lk == 42239          // 'true' 'at'
       || this.lk == 43603          // 'attribute' 'before'
       || this.lk == 43642          // 'element' 'before'
       || this.lk == 43655          // 'false' 'before'
       || this.lk == 43707          // 'namespace' 'before'
       || this.lk == 43717          // 'null' 'before'
       || this.lk == 43740          // 'processing-instruction' 'before'
       || this.lk == 43775          // 'true' 'before'
       || this.lk == 45191          // 'false' 'by'
       || this.lk == 45253          // 'null' 'by'
       || this.lk == 45311          // 'true' 'by'
       || this.lk == 45651          // 'attribute' 'case'
       || this.lk == 45690          // 'element' 'case'
       || this.lk == 45703          // 'false' 'case'
       || this.lk == 45755          // 'namespace' 'case'
       || this.lk == 45765          // 'null' 'case'
       || this.lk == 45788          // 'processing-instruction' 'case'
       || this.lk == 45823          // 'true' 'case'
       || this.lk == 46163          // 'attribute' 'cast'
       || this.lk == 46202          // 'element' 'cast'
       || this.lk == 46215          // 'false' 'cast'
       || this.lk == 46267          // 'namespace' 'cast'
       || this.lk == 46277          // 'null' 'cast'
       || this.lk == 46300          // 'processing-instruction' 'cast'
       || this.lk == 46335          // 'true' 'cast'
       || this.lk == 46675          // 'attribute' 'castable'
       || this.lk == 46714          // 'element' 'castable'
       || this.lk == 46727          // 'false' 'castable'
       || this.lk == 46779          // 'namespace' 'castable'
       || this.lk == 46789          // 'null' 'castable'
       || this.lk == 46812          // 'processing-instruction' 'castable'
       || this.lk == 46847          // 'true' 'castable'
       || this.lk == 48723          // 'attribute' 'collation'
       || this.lk == 48762          // 'element' 'collation'
       || this.lk == 48775          // 'false' 'collation'
       || this.lk == 48827          // 'namespace' 'collation'
       || this.lk == 48837          // 'null' 'collation'
       || this.lk == 48860          // 'processing-instruction' 'collation'
       || this.lk == 48895          // 'true' 'collation'
       || this.lk == 51335          // 'false' 'contains'
       || this.lk == 51397          // 'null' 'contains'
       || this.lk == 51455          // 'true' 'contains'
       || this.lk == 54355          // 'attribute' 'count'
       || this.lk == 54394          // 'element' 'count'
       || this.lk == 54407          // 'false' 'count'
       || this.lk == 54459          // 'namespace' 'count'
       || this.lk == 54469          // 'null' 'count'
       || this.lk == 54492          // 'processing-instruction' 'count'
       || this.lk == 54527          // 'true' 'count'
       || this.lk == 56403          // 'attribute' 'default'
       || this.lk == 56442          // 'element' 'default'
       || this.lk == 56455          // 'false' 'default'
       || this.lk == 56507          // 'namespace' 'default'
       || this.lk == 56517          // 'null' 'default'
       || this.lk == 56540          // 'processing-instruction' 'default'
       || this.lk == 56575          // 'true' 'default'
       || this.lk == 58451          // 'attribute' 'descending'
       || this.lk == 58490          // 'element' 'descending'
       || this.lk == 58503          // 'false' 'descending'
       || this.lk == 58555          // 'namespace' 'descending'
       || this.lk == 58565          // 'null' 'descending'
       || this.lk == 58588          // 'processing-instruction' 'descending'
       || this.lk == 58623          // 'true' 'descending'
       || this.lk == 61011          // 'attribute' 'div'
       || this.lk == 61050          // 'element' 'div'
       || this.lk == 61063          // 'false' 'div'
       || this.lk == 61115          // 'namespace' 'div'
       || this.lk == 61125          // 'null' 'div'
       || this.lk == 61148          // 'processing-instruction' 'div'
       || this.lk == 61183          // 'true' 'div'
       || this.lk == 63059          // 'attribute' 'else'
       || this.lk == 63098          // 'element' 'else'
       || this.lk == 63111          // 'false' 'else'
       || this.lk == 63163          // 'namespace' 'else'
       || this.lk == 63173          // 'null' 'else'
       || this.lk == 63196          // 'processing-instruction' 'else'
       || this.lk == 63231          // 'true' 'else'
       || this.lk == 63571          // 'attribute' 'empty'
       || this.lk == 63610          // 'element' 'empty'
       || this.lk == 63623          // 'false' 'empty'
       || this.lk == 63675          // 'namespace' 'empty'
       || this.lk == 63685          // 'null' 'empty'
       || this.lk == 63708          // 'processing-instruction' 'empty'
       || this.lk == 63743          // 'true' 'empty'
       || this.lk == 65107          // 'attribute' 'end'
       || this.lk == 65146          // 'element' 'end'
       || this.lk == 65159          // 'false' 'end'
       || this.lk == 65211          // 'namespace' 'end'
       || this.lk == 65221          // 'null' 'end'
       || this.lk == 65244          // 'processing-instruction' 'end'
       || this.lk == 65279          // 'true' 'end'
       || this.lk == 66131          // 'attribute' 'eq'
       || this.lk == 66170          // 'element' 'eq'
       || this.lk == 66183          // 'false' 'eq'
       || this.lk == 66235          // 'namespace' 'eq'
       || this.lk == 66245          // 'null' 'eq'
       || this.lk == 66268          // 'processing-instruction' 'eq'
       || this.lk == 66303          // 'true' 'eq'
       || this.lk == 67667          // 'attribute' 'except'
       || this.lk == 67706          // 'element' 'except'
       || this.lk == 67719          // 'false' 'except'
       || this.lk == 67771          // 'namespace' 'except'
       || this.lk == 67781          // 'null' 'except'
       || this.lk == 67804          // 'processing-instruction' 'except'
       || this.lk == 67839          // 'true' 'except'
       || this.lk == 71251          // 'attribute' 'for'
       || this.lk == 71290          // 'element' 'for'
       || this.lk == 71303          // 'false' 'for'
       || this.lk == 71355          // 'namespace' 'for'
       || this.lk == 71365          // 'null' 'for'
       || this.lk == 71388          // 'processing-instruction' 'for'
       || this.lk == 71423          // 'true' 'for'
       || this.lk == 75859          // 'attribute' 'ge'
       || this.lk == 75898          // 'element' 'ge'
       || this.lk == 75911          // 'false' 'ge'
       || this.lk == 75963          // 'namespace' 'ge'
       || this.lk == 75973          // 'null' 'ge'
       || this.lk == 75996          // 'processing-instruction' 'ge'
       || this.lk == 76031          // 'true' 'ge'
       || this.lk == 76883          // 'attribute' 'group'
       || this.lk == 76922          // 'element' 'group'
       || this.lk == 76935          // 'false' 'group'
       || this.lk == 76987          // 'namespace' 'group'
       || this.lk == 76997          // 'null' 'group'
       || this.lk == 77020          // 'processing-instruction' 'group'
       || this.lk == 77055          // 'true' 'group'
       || this.lk == 77907          // 'attribute' 'gt'
       || this.lk == 77946          // 'element' 'gt'
       || this.lk == 77959          // 'false' 'gt'
       || this.lk == 78011          // 'namespace' 'gt'
       || this.lk == 78021          // 'null' 'gt'
       || this.lk == 78044          // 'processing-instruction' 'gt'
       || this.lk == 78079          // 'true' 'gt'
       || this.lk == 78419          // 'attribute' 'idiv'
       || this.lk == 78458          // 'element' 'idiv'
       || this.lk == 78471          // 'false' 'idiv'
       || this.lk == 78523          // 'namespace' 'idiv'
       || this.lk == 78533          // 'null' 'idiv'
       || this.lk == 78556          // 'processing-instruction' 'idiv'
       || this.lk == 78591          // 'true' 'idiv'
       || this.lk == 83027          // 'attribute' 'instance'
       || this.lk == 83066          // 'element' 'instance'
       || this.lk == 83079          // 'false' 'instance'
       || this.lk == 83131          // 'namespace' 'instance'
       || this.lk == 83141          // 'null' 'instance'
       || this.lk == 83164          // 'processing-instruction' 'instance'
       || this.lk == 83199          // 'true' 'instance'
       || this.lk == 84051          // 'attribute' 'intersect'
       || this.lk == 84090          // 'element' 'intersect'
       || this.lk == 84103          // 'false' 'intersect'
       || this.lk == 84155          // 'namespace' 'intersect'
       || this.lk == 84165          // 'null' 'intersect'
       || this.lk == 84188          // 'processing-instruction' 'intersect'
       || this.lk == 84223          // 'true' 'intersect'
       || this.lk == 84563          // 'attribute' 'into'
       || this.lk == 84602          // 'element' 'into'
       || this.lk == 84615          // 'false' 'into'
       || this.lk == 84667          // 'namespace' 'into'
       || this.lk == 84677          // 'null' 'into'
       || this.lk == 84700          // 'processing-instruction' 'into'
       || this.lk == 84735          // 'true' 'into'
       || this.lk == 85075          // 'attribute' 'is'
       || this.lk == 85114          // 'element' 'is'
       || this.lk == 85127          // 'false' 'is'
       || this.lk == 85179          // 'namespace' 'is'
       || this.lk == 85189          // 'null' 'is'
       || this.lk == 85212          // 'processing-instruction' 'is'
       || this.lk == 85247          // 'true' 'is'
       || this.lk == 89683          // 'attribute' 'le'
       || this.lk == 89722          // 'element' 'le'
       || this.lk == 89735          // 'false' 'le'
       || this.lk == 89787          // 'namespace' 'le'
       || this.lk == 89797          // 'null' 'le'
       || this.lk == 89820          // 'processing-instruction' 'le'
       || this.lk == 89855          // 'true' 'le'
       || this.lk == 90707          // 'attribute' 'let'
       || this.lk == 90746          // 'element' 'let'
       || this.lk == 90759          // 'false' 'let'
       || this.lk == 90811          // 'namespace' 'let'
       || this.lk == 90821          // 'null' 'let'
       || this.lk == 90844          // 'processing-instruction' 'let'
       || this.lk == 90879          // 'true' 'let'
       || this.lk == 92755          // 'attribute' 'lt'
       || this.lk == 92794          // 'element' 'lt'
       || this.lk == 92807          // 'false' 'lt'
       || this.lk == 92859          // 'namespace' 'lt'
       || this.lk == 92869          // 'null' 'lt'
       || this.lk == 92892          // 'processing-instruction' 'lt'
       || this.lk == 92927          // 'true' 'lt'
       || this.lk == 93779          // 'attribute' 'mod'
       || this.lk == 93818          // 'element' 'mod'
       || this.lk == 93831          // 'false' 'mod'
       || this.lk == 93883          // 'namespace' 'mod'
       || this.lk == 93893          // 'null' 'mod'
       || this.lk == 93916          // 'processing-instruction' 'mod'
       || this.lk == 93951          // 'true' 'mod'
       || this.lk == 94291          // 'attribute' 'modify'
       || this.lk == 94330          // 'element' 'modify'
       || this.lk == 94343          // 'false' 'modify'
       || this.lk == 94395          // 'namespace' 'modify'
       || this.lk == 94405          // 'null' 'modify'
       || this.lk == 94428          // 'processing-instruction' 'modify'
       || this.lk == 94463          // 'true' 'modify'
       || this.lk == 96851          // 'attribute' 'ne'
       || this.lk == 96890          // 'element' 'ne'
       || this.lk == 96903          // 'false' 'ne'
       || this.lk == 96955          // 'namespace' 'ne'
       || this.lk == 96965          // 'null' 'ne'
       || this.lk == 96988          // 'processing-instruction' 'ne'
       || this.lk == 97023          // 'true' 'ne'
       || this.lk == 103507         // 'attribute' 'only'
       || this.lk == 103546         // 'element' 'only'
       || this.lk == 103559         // 'false' 'only'
       || this.lk == 103611         // 'namespace' 'only'
       || this.lk == 103621         // 'null' 'only'
       || this.lk == 103644         // 'processing-instruction' 'only'
       || this.lk == 103679         // 'true' 'only'
       || this.lk == 104531         // 'attribute' 'or'
       || this.lk == 104570         // 'element' 'or'
       || this.lk == 104583         // 'false' 'or'
       || this.lk == 104635         // 'namespace' 'or'
       || this.lk == 104645         // 'null' 'or'
       || this.lk == 104668         // 'processing-instruction' 'or'
       || this.lk == 104703         // 'true' 'or'
       || this.lk == 105043         // 'attribute' 'order'
       || this.lk == 105082         // 'element' 'order'
       || this.lk == 105095         // 'false' 'order'
       || this.lk == 105147         // 'namespace' 'order'
       || this.lk == 105157         // 'null' 'order'
       || this.lk == 105180         // 'processing-instruction' 'order'
       || this.lk == 105215         // 'true' 'order'
       || this.lk == 107143         // 'false' 'paragraphs'
       || this.lk == 107205         // 'null' 'paragraphs'
       || this.lk == 107263         // 'true' 'paragraphs'
       || this.lk == 114771         // 'attribute' 'return'
       || this.lk == 114810         // 'element' 'return'
       || this.lk == 114823         // 'false' 'return'
       || this.lk == 114875         // 'namespace' 'return'
       || this.lk == 114885         // 'null' 'return'
       || this.lk == 114908         // 'processing-instruction' 'return'
       || this.lk == 114943         // 'true' 'return'
       || this.lk == 116819         // 'attribute' 'satisfies'
       || this.lk == 116858         // 'element' 'satisfies'
       || this.lk == 116871         // 'false' 'satisfies'
       || this.lk == 116923         // 'namespace' 'satisfies'
       || this.lk == 116933         // 'null' 'satisfies'
       || this.lk == 116956         // 'processing-instruction' 'satisfies'
       || this.lk == 116991         // 'true' 'satisfies'
       || this.lk == 121479         // 'false' 'sentences'
       || this.lk == 121541         // 'null' 'sentences'
       || this.lk == 121599         // 'true' 'sentences'
       || this.lk == 123475         // 'attribute' 'stable'
       || this.lk == 123514         // 'element' 'stable'
       || this.lk == 123527         // 'false' 'stable'
       || this.lk == 123579         // 'namespace' 'stable'
       || this.lk == 123589         // 'null' 'stable'
       || this.lk == 123612         // 'processing-instruction' 'stable'
       || this.lk == 123647         // 'true' 'stable'
       || this.lk == 123987         // 'attribute' 'start'
       || this.lk == 124026         // 'element' 'start'
       || this.lk == 124039         // 'false' 'start'
       || this.lk == 124091         // 'namespace' 'start'
       || this.lk == 124101         // 'null' 'start'
       || this.lk == 124124         // 'processing-instruction' 'start'
       || this.lk == 124159         // 'true' 'start'
       || this.lk == 129159         // 'false' 'times'
       || this.lk == 129221         // 'null' 'times'
       || this.lk == 129279         // 'true' 'times'
       || this.lk == 129619         // 'attribute' 'to'
       || this.lk == 129658         // 'element' 'to'
       || this.lk == 129671         // 'false' 'to'
       || this.lk == 129723         // 'namespace' 'to'
       || this.lk == 129733         // 'null' 'to'
       || this.lk == 129756         // 'processing-instruction' 'to'
       || this.lk == 129791         // 'true' 'to'
       || this.lk == 130131         // 'attribute' 'treat'
       || this.lk == 130170         // 'element' 'treat'
       || this.lk == 130183         // 'false' 'treat'
       || this.lk == 130235         // 'namespace' 'treat'
       || this.lk == 130245         // 'null' 'treat'
       || this.lk == 130268         // 'processing-instruction' 'treat'
       || this.lk == 130303         // 'true' 'treat'
       || this.lk == 133203         // 'attribute' 'union'
       || this.lk == 133242         // 'element' 'union'
       || this.lk == 133255         // 'false' 'union'
       || this.lk == 133307         // 'namespace' 'union'
       || this.lk == 133317         // 'null' 'union'
       || this.lk == 133340         // 'processing-instruction' 'union'
       || this.lk == 133375         // 'true' 'union'
       || this.lk == 139347         // 'attribute' 'where'
       || this.lk == 139386         // 'element' 'where'
       || this.lk == 139399         // 'false' 'where'
       || this.lk == 139451         // 'namespace' 'where'
       || this.lk == 139461         // 'null' 'where'
       || this.lk == 139484         // 'processing-instruction' 'where'
       || this.lk == 139519         // 'true' 'where'
       || this.lk == 141395         // 'attribute' 'with'
       || this.lk == 141434         // 'element' 'with'
       || this.lk == 141447         // 'false' 'with'
       || this.lk == 141499         // 'namespace' 'with'
       || this.lk == 141509         // 'null' 'with'
       || this.lk == 141532         // 'processing-instruction' 'with'
       || this.lk == 141567         // 'true' 'with'
       || this.lk == 142983         // 'false' 'words'
       || this.lk == 143045         // 'null' 'words'
       || this.lk == 143103         // 'true' 'words'
       || this.lk == 145543         // 'false' '|'
       || this.lk == 145605         // 'null' '|'
       || this.lk == 145663         // 'true' '|'
       || this.lk == 146055         // 'false' '||'
       || this.lk == 146117         // 'null' '||'
       || this.lk == 146175         // 'true' '||'
       || this.lk == 146567         // 'false' '|}'
       || this.lk == 146629         // 'null' '|}'
       || this.lk == 146687         // 'true' '|}'
       || this.lk == 147079         // 'false' '}'
       || this.lk == 147141         // 'null' '}'
       || this.lk == 147199)        // 'true' '}'
      {
        this.lk = this.memoized(4, this.e0);
        if (this.lk == 0)
        {
          var b0A = this.b0; var e0A = this.e0; var l1A = this.l1;
          var b1A = this.b1; var e1A = this.e1; var l2A = this.l2;
          var b2A = this.b2; var e2A = this.e2;
          try
          {
            this.try_PostfixExpr();
            this.memoize(4, e0A, -1);
            this.lk = -3;
          }
          catch (p1A)
          {
            this.lk = -2;
            this.b0 = b0A; this.e0 = e0A; this.l1 = l1A; if (this.l1 == 0) {this.end = e0A;} else {
            this.b1 = b1A; this.e1 = e1A; this.l2 = l2A; if (this.l2 == 0) {this.end = e1A;} else {
            this.b2 = b2A; this.e2 = e2A; this.end = e2A; }}
            this.memoize(4, e0A, -2);
          }
        }
      }
      switch (this.lk)
      {
      case -1:
      case 8:                       // IntegerLiteral
      case 9:                       // DecimalLiteral
      case 10:                      // DoubleLiteral
      case 11:                      // StringLiteral
      case 31:                      // '$'
      case 32:                      // '$$'
      case 33:                      // '%'
      case 35:                      // '('
      case 55:                      // '<'
      case 56:                      // '<!--'
      case 60:                      // '<?'
      case 69:                      // '['
      case 281:                     // '{'
      case 283:                     // '{|'
      case 3155:                    // 'attribute' EQName^Token
      case 3194:                    // 'element' EQName^Token
      case 9915:                    // 'namespace' NCName^Token
      case 9948:                    // 'processing-instruction' NCName^Token
      case 14854:                   // EQName^Token '#'
      case 14919:                   // 'after' '#'
      case 14921:                   // 'allowing' '#'
      case 14922:                   // 'ancestor' '#'
      case 14923:                   // 'ancestor-or-self' '#'
      case 14924:                   // 'and' '#'
      case 14926:                   // 'append' '#'
      case 14927:                   // 'array' '#'
      case 14928:                   // 'as' '#'
      case 14929:                   // 'ascending' '#'
      case 14930:                   // 'at' '#'
      case 14931:                   // 'attribute' '#'
      case 14932:                   // 'base-uri' '#'
      case 14933:                   // 'before' '#'
      case 14934:                   // 'boundary-space' '#'
      case 14935:                   // 'break' '#'
      case 14937:                   // 'case' '#'
      case 14938:                   // 'cast' '#'
      case 14939:                   // 'castable' '#'
      case 14940:                   // 'catch' '#'
      case 14942:                   // 'child' '#'
      case 14943:                   // 'collation' '#'
      case 14945:                   // 'comment' '#'
      case 14946:                   // 'constraint' '#'
      case 14947:                   // 'construction' '#'
      case 14950:                   // 'context' '#'
      case 14951:                   // 'continue' '#'
      case 14952:                   // 'copy' '#'
      case 14953:                   // 'copy-namespaces' '#'
      case 14954:                   // 'count' '#'
      case 14955:                   // 'decimal-format' '#'
      case 14957:                   // 'declare' '#'
      case 14958:                   // 'default' '#'
      case 14959:                   // 'delete' '#'
      case 14960:                   // 'descendant' '#'
      case 14961:                   // 'descendant-or-self' '#'
      case 14962:                   // 'descending' '#'
      case 14967:                   // 'div' '#'
      case 14968:                   // 'document' '#'
      case 14969:                   // 'document-node' '#'
      case 14970:                   // 'element' '#'
      case 14971:                   // 'else' '#'
      case 14972:                   // 'empty' '#'
      case 14973:                   // 'empty-sequence' '#'
      case 14974:                   // 'encoding' '#'
      case 14975:                   // 'end' '#'
      case 14977:                   // 'eq' '#'
      case 14978:                   // 'every' '#'
      case 14980:                   // 'except' '#'
      case 14981:                   // 'exit' '#'
      case 14982:                   // 'external' '#'
      case 14983:                   // 'false' '#'
      case 14984:                   // 'first' '#'
      case 14985:                   // 'following' '#'
      case 14986:                   // 'following-sibling' '#'
      case 14987:                   // 'for' '#'
      case 14990:                   // 'from' '#'
      case 14991:                   // 'ft-option' '#'
      case 14995:                   // 'function' '#'
      case 14996:                   // 'ge' '#'
      case 14998:                   // 'group' '#'
      case 15000:                   // 'gt' '#'
      case 15001:                   // 'idiv' '#'
      case 15002:                   // 'if' '#'
      case 15003:                   // 'import' '#'
      case 15004:                   // 'in' '#'
      case 15005:                   // 'index' '#'
      case 15009:                   // 'insert' '#'
      case 15010:                   // 'instance' '#'
      case 15011:                   // 'integrity' '#'
      case 15012:                   // 'intersect' '#'
      case 15013:                   // 'into' '#'
      case 15014:                   // 'is' '#'
      case 15015:                   // 'item' '#'
      case 15016:                   // 'json' '#'
      case 15017:                   // 'json-item' '#'
      case 15018:                   // 'jsoniq' '#'
      case 15021:                   // 'last' '#'
      case 15022:                   // 'lax' '#'
      case 15023:                   // 'le' '#'
      case 15025:                   // 'let' '#'
      case 15027:                   // 'loop' '#'
      case 15029:                   // 'lt' '#'
      case 15031:                   // 'mod' '#'
      case 15032:                   // 'modify' '#'
      case 15033:                   // 'module' '#'
      case 15035:                   // 'namespace' '#'
      case 15036:                   // 'namespace-node' '#'
      case 15037:                   // 'ne' '#'
      case 15042:                   // 'node' '#'
      case 15043:                   // 'nodes' '#'
      case 15045:                   // 'null' '#'
      case 15046:                   // 'object' '#'
      case 15050:                   // 'only' '#'
      case 15051:                   // 'option' '#'
      case 15052:                   // 'or' '#'
      case 15053:                   // 'order' '#'
      case 15054:                   // 'ordered' '#'
      case 15055:                   // 'ordering' '#'
      case 15058:                   // 'parent' '#'
      case 15064:                   // 'preceding' '#'
      case 15065:                   // 'preceding-sibling' '#'
      case 15068:                   // 'processing-instruction' '#'
      case 15070:                   // 'rename' '#'
      case 15071:                   // 'replace' '#'
      case 15072:                   // 'return' '#'
      case 15073:                   // 'returning' '#'
      case 15074:                   // 'revalidation' '#'
      case 15076:                   // 'satisfies' '#'
      case 15077:                   // 'schema' '#'
      case 15078:                   // 'schema-attribute' '#'
      case 15079:                   // 'schema-element' '#'
      case 15080:                   // 'score' '#'
      case 15081:                   // 'select' '#'
      case 15082:                   // 'self' '#'
      case 15087:                   // 'sliding' '#'
      case 15088:                   // 'some' '#'
      case 15089:                   // 'stable' '#'
      case 15090:                   // 'start' '#'
      case 15093:                   // 'strict' '#'
      case 15095:                   // 'structured-item' '#'
      case 15096:                   // 'switch' '#'
      case 15097:                   // 'text' '#'
      case 15101:                   // 'to' '#'
      case 15102:                   // 'treat' '#'
      case 15103:                   // 'true' '#'
      case 15104:                   // 'try' '#'
      case 15105:                   // 'tumbling' '#'
      case 15106:                   // 'type' '#'
      case 15107:                   // 'typeswitch' '#'
      case 15108:                   // 'union' '#'
      case 15110:                   // 'unordered' '#'
      case 15111:                   // 'updating' '#'
      case 15114:                   // 'validate' '#'
      case 15115:                   // 'value' '#'
      case 15116:                   // 'variable' '#'
      case 15117:                   // 'version' '#'
      case 15120:                   // 'where' '#'
      case 15121:                   // 'while' '#'
      case 15124:                   // 'with' '#'
      case 17926:                   // EQName^Token '('
      case 17991:                   // 'after' '('
      case 17993:                   // 'allowing' '('
      case 17994:                   // 'ancestor' '('
      case 17995:                   // 'ancestor-or-self' '('
      case 17996:                   // 'and' '('
      case 17998:                   // 'append' '('
      case 18000:                   // 'as' '('
      case 18001:                   // 'ascending' '('
      case 18002:                   // 'at' '('
      case 18004:                   // 'base-uri' '('
      case 18005:                   // 'before' '('
      case 18006:                   // 'boundary-space' '('
      case 18007:                   // 'break' '('
      case 18009:                   // 'case' '('
      case 18010:                   // 'cast' '('
      case 18011:                   // 'castable' '('
      case 18012:                   // 'catch' '('
      case 18014:                   // 'child' '('
      case 18015:                   // 'collation' '('
      case 18018:                   // 'constraint' '('
      case 18019:                   // 'construction' '('
      case 18022:                   // 'context' '('
      case 18023:                   // 'continue' '('
      case 18024:                   // 'copy' '('
      case 18025:                   // 'copy-namespaces' '('
      case 18026:                   // 'count' '('
      case 18027:                   // 'decimal-format' '('
      case 18029:                   // 'declare' '('
      case 18030:                   // 'default' '('
      case 18031:                   // 'delete' '('
      case 18032:                   // 'descendant' '('
      case 18033:                   // 'descendant-or-self' '('
      case 18034:                   // 'descending' '('
      case 18039:                   // 'div' '('
      case 18040:                   // 'document' '('
      case 18043:                   // 'else' '('
      case 18044:                   // 'empty' '('
      case 18046:                   // 'encoding' '('
      case 18047:                   // 'end' '('
      case 18049:                   // 'eq' '('
      case 18050:                   // 'every' '('
      case 18052:                   // 'except' '('
      case 18053:                   // 'exit' '('
      case 18054:                   // 'external' '('
      case 18055:                   // 'false' '('
      case 18056:                   // 'first' '('
      case 18057:                   // 'following' '('
      case 18058:                   // 'following-sibling' '('
      case 18059:                   // 'for' '('
      case 18062:                   // 'from' '('
      case 18063:                   // 'ft-option' '('
      case 18067:                   // 'function' '('
      case 18068:                   // 'ge' '('
      case 18070:                   // 'group' '('
      case 18072:                   // 'gt' '('
      case 18073:                   // 'idiv' '('
      case 18075:                   // 'import' '('
      case 18076:                   // 'in' '('
      case 18077:                   // 'index' '('
      case 18081:                   // 'insert' '('
      case 18082:                   // 'instance' '('
      case 18083:                   // 'integrity' '('
      case 18084:                   // 'intersect' '('
      case 18085:                   // 'into' '('
      case 18086:                   // 'is' '('
      case 18088:                   // 'json' '('
      case 18090:                   // 'jsoniq' '('
      case 18093:                   // 'last' '('
      case 18094:                   // 'lax' '('
      case 18095:                   // 'le' '('
      case 18097:                   // 'let' '('
      case 18099:                   // 'loop' '('
      case 18101:                   // 'lt' '('
      case 18103:                   // 'mod' '('
      case 18104:                   // 'modify' '('
      case 18105:                   // 'module' '('
      case 18107:                   // 'namespace' '('
      case 18109:                   // 'ne' '('
      case 18115:                   // 'nodes' '('
      case 18117:                   // 'null' '('
      case 18118:                   // 'object' '('
      case 18122:                   // 'only' '('
      case 18123:                   // 'option' '('
      case 18124:                   // 'or' '('
      case 18125:                   // 'order' '('
      case 18126:                   // 'ordered' '('
      case 18127:                   // 'ordering' '('
      case 18130:                   // 'parent' '('
      case 18136:                   // 'preceding' '('
      case 18137:                   // 'preceding-sibling' '('
      case 18142:                   // 'rename' '('
      case 18143:                   // 'replace' '('
      case 18144:                   // 'return' '('
      case 18145:                   // 'returning' '('
      case 18146:                   // 'revalidation' '('
      case 18148:                   // 'satisfies' '('
      case 18149:                   // 'schema' '('
      case 18152:                   // 'score' '('
      case 18153:                   // 'select' '('
      case 18154:                   // 'self' '('
      case 18159:                   // 'sliding' '('
      case 18160:                   // 'some' '('
      case 18161:                   // 'stable' '('
      case 18162:                   // 'start' '('
      case 18165:                   // 'strict' '('
      case 18173:                   // 'to' '('
      case 18174:                   // 'treat' '('
      case 18175:                   // 'true' '('
      case 18176:                   // 'try' '('
      case 18177:                   // 'tumbling' '('
      case 18178:                   // 'type' '('
      case 18180:                   // 'union' '('
      case 18182:                   // 'unordered' '('
      case 18183:                   // 'updating' '('
      case 18186:                   // 'validate' '('
      case 18187:                   // 'value' '('
      case 18188:                   // 'variable' '('
      case 18189:                   // 'version' '('
      case 18192:                   // 'where' '('
      case 18193:                   // 'while' '('
      case 18196:                   // 'with' '('
      case 23175:                   // 'false' '.'
      case 23237:                   // 'null' '.'
      case 23295:                   // 'true' '.'
      case 37459:                   // 'attribute' 'allowing'
      case 37498:                   // 'element' 'allowing'
      case 37563:                   // 'namespace' 'allowing'
      case 37596:                   // 'processing-instruction' 'allowing'
      case 37971:                   // 'attribute' 'ancestor'
      case 38010:                   // 'element' 'ancestor'
      case 38075:                   // 'namespace' 'ancestor'
      case 38108:                   // 'processing-instruction' 'ancestor'
      case 38483:                   // 'attribute' 'ancestor-or-self'
      case 38522:                   // 'element' 'ancestor-or-self'
      case 38587:                   // 'namespace' 'ancestor-or-self'
      case 38620:                   // 'processing-instruction' 'ancestor-or-self'
      case 40019:                   // 'attribute' 'append'
      case 40058:                   // 'element' 'append'
      case 40123:                   // 'namespace' 'append'
      case 40156:                   // 'processing-instruction' 'append'
      case 40531:                   // 'attribute' 'array'
      case 40570:                   // 'element' 'array'
      case 42579:                   // 'attribute' 'attribute'
      case 42618:                   // 'element' 'attribute'
      case 42683:                   // 'namespace' 'attribute'
      case 42716:                   // 'processing-instruction' 'attribute'
      case 43091:                   // 'attribute' 'base-uri'
      case 43130:                   // 'element' 'base-uri'
      case 43195:                   // 'namespace' 'base-uri'
      case 43228:                   // 'processing-instruction' 'base-uri'
      case 44115:                   // 'attribute' 'boundary-space'
      case 44154:                   // 'element' 'boundary-space'
      case 44219:                   // 'namespace' 'boundary-space'
      case 44252:                   // 'processing-instruction' 'boundary-space'
      case 44627:                   // 'attribute' 'break'
      case 44666:                   // 'element' 'break'
      case 44731:                   // 'namespace' 'break'
      case 44764:                   // 'processing-instruction' 'break'
      case 47187:                   // 'attribute' 'catch'
      case 47226:                   // 'element' 'catch'
      case 47291:                   // 'namespace' 'catch'
      case 47324:                   // 'processing-instruction' 'catch'
      case 48211:                   // 'attribute' 'child'
      case 48250:                   // 'element' 'child'
      case 48315:                   // 'namespace' 'child'
      case 48348:                   // 'processing-instruction' 'child'
      case 49747:                   // 'attribute' 'comment'
      case 49786:                   // 'element' 'comment'
      case 49851:                   // 'namespace' 'comment'
      case 49884:                   // 'processing-instruction' 'comment'
      case 50259:                   // 'attribute' 'constraint'
      case 50298:                   // 'element' 'constraint'
      case 50363:                   // 'namespace' 'constraint'
      case 50396:                   // 'processing-instruction' 'constraint'
      case 50771:                   // 'attribute' 'construction'
      case 50810:                   // 'element' 'construction'
      case 50875:                   // 'namespace' 'construction'
      case 50908:                   // 'processing-instruction' 'construction'
      case 52307:                   // 'attribute' 'context'
      case 52346:                   // 'element' 'context'
      case 52411:                   // 'namespace' 'context'
      case 52444:                   // 'processing-instruction' 'context'
      case 52819:                   // 'attribute' 'continue'
      case 52858:                   // 'element' 'continue'
      case 52923:                   // 'namespace' 'continue'
      case 52956:                   // 'processing-instruction' 'continue'
      case 53331:                   // 'attribute' 'copy'
      case 53370:                   // 'element' 'copy'
      case 53435:                   // 'namespace' 'copy'
      case 53468:                   // 'processing-instruction' 'copy'
      case 53843:                   // 'attribute' 'copy-namespaces'
      case 53882:                   // 'element' 'copy-namespaces'
      case 53947:                   // 'namespace' 'copy-namespaces'
      case 53980:                   // 'processing-instruction' 'copy-namespaces'
      case 54867:                   // 'attribute' 'decimal-format'
      case 54906:                   // 'element' 'decimal-format'
      case 54971:                   // 'namespace' 'decimal-format'
      case 55004:                   // 'processing-instruction' 'decimal-format'
      case 55891:                   // 'attribute' 'declare'
      case 55930:                   // 'element' 'declare'
      case 55995:                   // 'namespace' 'declare'
      case 56028:                   // 'processing-instruction' 'declare'
      case 56915:                   // 'attribute' 'delete'
      case 56954:                   // 'element' 'delete'
      case 57019:                   // 'namespace' 'delete'
      case 57052:                   // 'processing-instruction' 'delete'
      case 57427:                   // 'attribute' 'descendant'
      case 57466:                   // 'element' 'descendant'
      case 57531:                   // 'namespace' 'descendant'
      case 57564:                   // 'processing-instruction' 'descendant'
      case 57939:                   // 'attribute' 'descendant-or-self'
      case 57978:                   // 'element' 'descendant-or-self'
      case 58043:                   // 'namespace' 'descendant-or-self'
      case 58076:                   // 'processing-instruction' 'descendant-or-self'
      case 61523:                   // 'attribute' 'document'
      case 61562:                   // 'element' 'document'
      case 61627:                   // 'namespace' 'document'
      case 61660:                   // 'processing-instruction' 'document'
      case 62035:                   // 'attribute' 'document-node'
      case 62074:                   // 'element' 'document-node'
      case 62139:                   // 'namespace' 'document-node'
      case 62172:                   // 'processing-instruction' 'document-node'
      case 62547:                   // 'attribute' 'element'
      case 62586:                   // 'element' 'element'
      case 62651:                   // 'namespace' 'element'
      case 62684:                   // 'processing-instruction' 'element'
      case 64083:                   // 'attribute' 'empty-sequence'
      case 64122:                   // 'element' 'empty-sequence'
      case 64187:                   // 'namespace' 'empty-sequence'
      case 64220:                   // 'processing-instruction' 'empty-sequence'
      case 64595:                   // 'attribute' 'encoding'
      case 64634:                   // 'element' 'encoding'
      case 64699:                   // 'namespace' 'encoding'
      case 64732:                   // 'processing-instruction' 'encoding'
      case 66643:                   // 'attribute' 'every'
      case 66682:                   // 'element' 'every'
      case 66747:                   // 'namespace' 'every'
      case 66780:                   // 'processing-instruction' 'every'
      case 68179:                   // 'attribute' 'exit'
      case 68218:                   // 'element' 'exit'
      case 68283:                   // 'namespace' 'exit'
      case 68316:                   // 'processing-instruction' 'exit'
      case 68691:                   // 'attribute' 'external'
      case 68730:                   // 'element' 'external'
      case 68795:                   // 'namespace' 'external'
      case 68828:                   // 'processing-instruction' 'external'
      case 69203:                   // 'attribute' 'false'
      case 69242:                   // 'element' 'false'
      case 69307:                   // 'namespace' 'false'
      case 69340:                   // 'processing-instruction' 'false'
      case 69715:                   // 'attribute' 'first'
      case 69754:                   // 'element' 'first'
      case 69819:                   // 'namespace' 'first'
      case 69852:                   // 'processing-instruction' 'first'
      case 70227:                   // 'attribute' 'following'
      case 70266:                   // 'element' 'following'
      case 70331:                   // 'namespace' 'following'
      case 70364:                   // 'processing-instruction' 'following'
      case 70739:                   // 'attribute' 'following-sibling'
      case 70778:                   // 'element' 'following-sibling'
      case 70843:                   // 'namespace' 'following-sibling'
      case 70876:                   // 'processing-instruction' 'following-sibling'
      case 72787:                   // 'attribute' 'from'
      case 72826:                   // 'element' 'from'
      case 72891:                   // 'namespace' 'from'
      case 72924:                   // 'processing-instruction' 'from'
      case 73299:                   // 'attribute' 'ft-option'
      case 73338:                   // 'element' 'ft-option'
      case 73403:                   // 'namespace' 'ft-option'
      case 73436:                   // 'processing-instruction' 'ft-option'
      case 75347:                   // 'attribute' 'function'
      case 75386:                   // 'element' 'function'
      case 75451:                   // 'namespace' 'function'
      case 75484:                   // 'processing-instruction' 'function'
      case 78931:                   // 'attribute' 'if'
      case 78970:                   // 'element' 'if'
      case 79035:                   // 'namespace' 'if'
      case 79068:                   // 'processing-instruction' 'if'
      case 79443:                   // 'attribute' 'import'
      case 79482:                   // 'element' 'import'
      case 79547:                   // 'namespace' 'import'
      case 79580:                   // 'processing-instruction' 'import'
      case 79955:                   // 'attribute' 'in'
      case 79994:                   // 'element' 'in'
      case 80059:                   // 'namespace' 'in'
      case 80092:                   // 'processing-instruction' 'in'
      case 80467:                   // 'attribute' 'index'
      case 80506:                   // 'element' 'index'
      case 80571:                   // 'namespace' 'index'
      case 80604:                   // 'processing-instruction' 'index'
      case 82515:                   // 'attribute' 'insert'
      case 82554:                   // 'element' 'insert'
      case 82619:                   // 'namespace' 'insert'
      case 82652:                   // 'processing-instruction' 'insert'
      case 83539:                   // 'attribute' 'integrity'
      case 83578:                   // 'element' 'integrity'
      case 83643:                   // 'namespace' 'integrity'
      case 83676:                   // 'processing-instruction' 'integrity'
      case 85587:                   // 'attribute' 'item'
      case 85626:                   // 'element' 'item'
      case 85691:                   // 'namespace' 'item'
      case 85724:                   // 'processing-instruction' 'item'
      case 86099:                   // 'attribute' 'json'
      case 86138:                   // 'element' 'json'
      case 86203:                   // 'namespace' 'json'
      case 86236:                   // 'processing-instruction' 'json'
      case 86611:                   // 'attribute' 'json-item'
      case 86650:                   // 'element' 'json-item'
      case 87123:                   // 'attribute' 'jsoniq'
      case 87162:                   // 'element' 'jsoniq'
      case 87227:                   // 'namespace' 'jsoniq'
      case 87260:                   // 'processing-instruction' 'jsoniq'
      case 88659:                   // 'attribute' 'last'
      case 88698:                   // 'element' 'last'
      case 88763:                   // 'namespace' 'last'
      case 88796:                   // 'processing-instruction' 'last'
      case 89171:                   // 'attribute' 'lax'
      case 89210:                   // 'element' 'lax'
      case 89275:                   // 'namespace' 'lax'
      case 89308:                   // 'processing-instruction' 'lax'
      case 91731:                   // 'attribute' 'loop'
      case 91770:                   // 'element' 'loop'
      case 91835:                   // 'namespace' 'loop'
      case 91868:                   // 'processing-instruction' 'loop'
      case 94803:                   // 'attribute' 'module'
      case 94842:                   // 'element' 'module'
      case 94907:                   // 'namespace' 'module'
      case 94940:                   // 'processing-instruction' 'module'
      case 95827:                   // 'attribute' 'namespace'
      case 95866:                   // 'element' 'namespace'
      case 95931:                   // 'namespace' 'namespace'
      case 95964:                   // 'processing-instruction' 'namespace'
      case 96339:                   // 'attribute' 'namespace-node'
      case 96378:                   // 'element' 'namespace-node'
      case 96443:                   // 'namespace' 'namespace-node'
      case 96476:                   // 'processing-instruction' 'namespace-node'
      case 99411:                   // 'attribute' 'node'
      case 99450:                   // 'element' 'node'
      case 99515:                   // 'namespace' 'node'
      case 99548:                   // 'processing-instruction' 'node'
      case 99923:                   // 'attribute' 'nodes'
      case 99962:                   // 'element' 'nodes'
      case 100027:                  // 'namespace' 'nodes'
      case 100060:                  // 'processing-instruction' 'nodes'
      case 100947:                  // 'attribute' 'null'
      case 100986:                  // 'element' 'null'
      case 101051:                  // 'namespace' 'null'
      case 101084:                  // 'processing-instruction' 'null'
      case 101459:                  // 'attribute' 'object'
      case 101498:                  // 'element' 'object'
      case 101563:                  // 'namespace' 'object'
      case 101596:                  // 'processing-instruction' 'object'
      case 104019:                  // 'attribute' 'option'
      case 104058:                  // 'element' 'option'
      case 104123:                  // 'namespace' 'option'
      case 104156:                  // 'processing-instruction' 'option'
      case 105555:                  // 'attribute' 'ordered'
      case 105594:                  // 'element' 'ordered'
      case 105659:                  // 'namespace' 'ordered'
      case 105692:                  // 'processing-instruction' 'ordered'
      case 106067:                  // 'attribute' 'ordering'
      case 106106:                  // 'element' 'ordering'
      case 106171:                  // 'namespace' 'ordering'
      case 106204:                  // 'processing-instruction' 'ordering'
      case 107603:                  // 'attribute' 'parent'
      case 107642:                  // 'element' 'parent'
      case 107707:                  // 'namespace' 'parent'
      case 107740:                  // 'processing-instruction' 'parent'
      case 110675:                  // 'attribute' 'preceding'
      case 110714:                  // 'element' 'preceding'
      case 110779:                  // 'namespace' 'preceding'
      case 110812:                  // 'processing-instruction' 'preceding'
      case 111187:                  // 'attribute' 'preceding-sibling'
      case 111226:                  // 'element' 'preceding-sibling'
      case 111291:                  // 'namespace' 'preceding-sibling'
      case 111324:                  // 'processing-instruction' 'preceding-sibling'
      case 112723:                  // 'attribute' 'processing-instruction'
      case 112762:                  // 'element' 'processing-instruction'
      case 112827:                  // 'namespace' 'processing-instruction'
      case 112860:                  // 'processing-instruction' 'processing-instruction'
      case 113747:                  // 'attribute' 'rename'
      case 113786:                  // 'element' 'rename'
      case 113851:                  // 'namespace' 'rename'
      case 113884:                  // 'processing-instruction' 'rename'
      case 114259:                  // 'attribute' 'replace'
      case 114298:                  // 'element' 'replace'
      case 114363:                  // 'namespace' 'replace'
      case 114396:                  // 'processing-instruction' 'replace'
      case 115283:                  // 'attribute' 'returning'
      case 115322:                  // 'element' 'returning'
      case 115387:                  // 'namespace' 'returning'
      case 115420:                  // 'processing-instruction' 'returning'
      case 115795:                  // 'attribute' 'revalidation'
      case 115834:                  // 'element' 'revalidation'
      case 115899:                  // 'namespace' 'revalidation'
      case 115932:                  // 'processing-instruction' 'revalidation'
      case 117331:                  // 'attribute' 'schema'
      case 117370:                  // 'element' 'schema'
      case 117435:                  // 'namespace' 'schema'
      case 117468:                  // 'processing-instruction' 'schema'
      case 117843:                  // 'attribute' 'schema-attribute'
      case 117882:                  // 'element' 'schema-attribute'
      case 117947:                  // 'namespace' 'schema-attribute'
      case 117980:                  // 'processing-instruction' 'schema-attribute'
      case 118355:                  // 'attribute' 'schema-element'
      case 118394:                  // 'element' 'schema-element'
      case 118459:                  // 'namespace' 'schema-element'
      case 118492:                  // 'processing-instruction' 'schema-element'
      case 118867:                  // 'attribute' 'score'
      case 118906:                  // 'element' 'score'
      case 118971:                  // 'namespace' 'score'
      case 119004:                  // 'processing-instruction' 'score'
      case 119379:                  // 'attribute' 'select'
      case 119418:                  // 'element' 'select'
      case 119483:                  // 'namespace' 'select'
      case 119516:                  // 'processing-instruction' 'select'
      case 119891:                  // 'attribute' 'self'
      case 119930:                  // 'element' 'self'
      case 119995:                  // 'namespace' 'self'
      case 120028:                  // 'processing-instruction' 'self'
      case 122451:                  // 'attribute' 'sliding'
      case 122490:                  // 'element' 'sliding'
      case 122555:                  // 'namespace' 'sliding'
      case 122588:                  // 'processing-instruction' 'sliding'
      case 122963:                  // 'attribute' 'some'
      case 123002:                  // 'element' 'some'
      case 123067:                  // 'namespace' 'some'
      case 123100:                  // 'processing-instruction' 'some'
      case 125523:                  // 'attribute' 'strict'
      case 125562:                  // 'element' 'strict'
      case 125627:                  // 'namespace' 'strict'
      case 125660:                  // 'processing-instruction' 'strict'
      case 126547:                  // 'attribute' 'structured-item'
      case 126586:                  // 'element' 'structured-item'
      case 127059:                  // 'attribute' 'switch'
      case 127098:                  // 'element' 'switch'
      case 127163:                  // 'namespace' 'switch'
      case 127196:                  // 'processing-instruction' 'switch'
      case 127571:                  // 'attribute' 'text'
      case 127610:                  // 'element' 'text'
      case 127675:                  // 'namespace' 'text'
      case 127708:                  // 'processing-instruction' 'text'
      case 130643:                  // 'attribute' 'true'
      case 130682:                  // 'element' 'true'
      case 130747:                  // 'namespace' 'true'
      case 130780:                  // 'processing-instruction' 'true'
      case 131155:                  // 'attribute' 'try'
      case 131194:                  // 'element' 'try'
      case 131259:                  // 'namespace' 'try'
      case 131292:                  // 'processing-instruction' 'try'
      case 131667:                  // 'attribute' 'tumbling'
      case 131706:                  // 'element' 'tumbling'
      case 131771:                  // 'namespace' 'tumbling'
      case 131804:                  // 'processing-instruction' 'tumbling'
      case 132179:                  // 'attribute' 'type'
      case 132218:                  // 'element' 'type'
      case 132283:                  // 'namespace' 'type'
      case 132316:                  // 'processing-instruction' 'type'
      case 132691:                  // 'attribute' 'typeswitch'
      case 132730:                  // 'element' 'typeswitch'
      case 132795:                  // 'namespace' 'typeswitch'
      case 132828:                  // 'processing-instruction' 'typeswitch'
      case 134227:                  // 'attribute' 'unordered'
      case 134266:                  // 'element' 'unordered'
      case 134331:                  // 'namespace' 'unordered'
      case 134364:                  // 'processing-instruction' 'unordered'
      case 134739:                  // 'attribute' 'updating'
      case 134778:                  // 'element' 'updating'
      case 134843:                  // 'namespace' 'updating'
      case 134876:                  // 'processing-instruction' 'updating'
      case 136275:                  // 'attribute' 'validate'
      case 136314:                  // 'element' 'validate'
      case 136379:                  // 'namespace' 'validate'
      case 136412:                  // 'processing-instruction' 'validate'
      case 136787:                  // 'attribute' 'value'
      case 136826:                  // 'element' 'value'
      case 136891:                  // 'namespace' 'value'
      case 136924:                  // 'processing-instruction' 'value'
      case 137299:                  // 'attribute' 'variable'
      case 137338:                  // 'element' 'variable'
      case 137403:                  // 'namespace' 'variable'
      case 137436:                  // 'processing-instruction' 'variable'
      case 137811:                  // 'attribute' 'version'
      case 137850:                  // 'element' 'version'
      case 137915:                  // 'namespace' 'version'
      case 137948:                  // 'processing-instruction' 'version'
      case 139859:                  // 'attribute' 'while'
      case 139898:                  // 'element' 'while'
      case 139963:                  // 'namespace' 'while'
      case 139996:                  // 'processing-instruction' 'while'
      case 143955:                  // 'attribute' '{'
      case 143969:                  // 'comment' '{'
      case 143992:                  // 'document' '{'
      case 143994:                  // 'element' '{'
      case 144059:                  // 'namespace' '{'
      case 144078:                  // 'ordered' '{'
      case 144092:                  // 'processing-instruction' '{'
      case 144121:                  // 'text' '{'
      case 144134:                  // 'unordered' '{'
        this.try_PostfixExpr();
        break;
      case -3:
        break;
      default:
        this.try_AxisStep();
      }
    }

    private parse_AxisStep()
    {
      this.eventHandler.startNonterminal("AxisStep", this.e0);
      switch (this.l1)
      {
      case 74:                      // 'ancestor'
      case 75:                      // 'ancestor-or-self'
      case 210:                     // 'parent'
      case 216:                     // 'preceding'
      case 217:                     // 'preceding-sibling'
        this.lookahead2W(231);      // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
                                    // '::' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'after' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
        break;
      default:
        this.lk = this.l1;
      }
      switch (this.lk)
      {
      case 46:                      // '..'
      case 26698:                   // 'ancestor' '::'
      case 26699:                   // 'ancestor-or-self' '::'
      case 26834:                   // 'parent' '::'
      case 26840:                   // 'preceding' '::'
      case 26841:                   // 'preceding-sibling' '::'
        this.parse_ReverseStep();
        break;
      default:
        this.parse_ForwardStep();
      }
      this.lookahead1W(227);        // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'after' | 'and' |
                                    // 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
      this.whitespace();
      this.parse_PredicateList();
      this.eventHandler.endNonterminal("AxisStep", this.e0);
    }

    private try_AxisStep()
    {
      switch (this.l1)
      {
      case 74:                      // 'ancestor'
      case 75:                      // 'ancestor-or-self'
      case 210:                     // 'parent'
      case 216:                     // 'preceding'
      case 217:                     // 'preceding-sibling'
        this.lookahead2W(231);      // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
                                    // '::' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'after' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
        break;
      default:
        this.lk = this.l1;
      }
      switch (this.lk)
      {
      case 46:                      // '..'
      case 26698:                   // 'ancestor' '::'
      case 26699:                   // 'ancestor-or-self' '::'
      case 26834:                   // 'parent' '::'
      case 26840:                   // 'preceding' '::'
      case 26841:                   // 'preceding-sibling' '::'
        this.try_ReverseStep();
        break;
      default:
        this.try_ForwardStep();
      }
      this.lookahead1W(227);        // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'after' | 'and' |
                                    // 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
      this.try_PredicateList();
    }

    private parse_ForwardStep()
    {
      this.eventHandler.startNonterminal("ForwardStep", this.e0);
      switch (this.l1)
      {
      case 83:                      // 'attribute'
        this.lookahead2W(235);      // S^WS | EOF | '!' | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | '::' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
        break;
      case 94:                      // 'child'
      case 112:                     // 'descendant'
      case 113:                     // 'descendant-or-self'
      case 137:                     // 'following'
      case 138:                     // 'following-sibling'
      case 234:                     // 'self'
        this.lookahead2W(231);      // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
                                    // '::' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'after' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
        break;
      default:
        this.lk = this.l1;
      }
      switch (this.lk)
      {
      case 26707:                   // 'attribute' '::'
      case 26718:                   // 'child' '::'
      case 26736:                   // 'descendant' '::'
      case 26737:                   // 'descendant-or-self' '::'
      case 26761:                   // 'following' '::'
      case 26762:                   // 'following-sibling' '::'
      case 26858:                   // 'self' '::'
        this.parse_ForwardAxis();
        this.lookahead1W(248);      // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
        this.whitespace();
        this.parse_NodeTest();
        break;
      default:
        this.parse_AbbrevForwardStep();
      }
      this.eventHandler.endNonterminal("ForwardStep", this.e0);
    }

    private try_ForwardStep()
    {
      switch (this.l1)
      {
      case 83:                      // 'attribute'
        this.lookahead2W(235);      // S^WS | EOF | '!' | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | '::' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
        break;
      case 94:                      // 'child'
      case 112:                     // 'descendant'
      case 113:                     // 'descendant-or-self'
      case 137:                     // 'following'
      case 138:                     // 'following-sibling'
      case 234:                     // 'self'
        this.lookahead2W(231);      // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
                                    // '::' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'after' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
        break;
      default:
        this.lk = this.l1;
      }
      switch (this.lk)
      {
      case 26707:                   // 'attribute' '::'
      case 26718:                   // 'child' '::'
      case 26736:                   // 'descendant' '::'
      case 26737:                   // 'descendant-or-self' '::'
      case 26761:                   // 'following' '::'
      case 26762:                   // 'following-sibling' '::'
      case 26858:                   // 'self' '::'
        this.try_ForwardAxis();
        this.lookahead1W(248);      // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
        this.try_NodeTest();
        break;
      default:
        this.try_AbbrevForwardStep();
      }
    }

    private parse_ForwardAxis()
    {
      this.eventHandler.startNonterminal("ForwardAxis", this.e0);
      switch (this.l1)
      {
      case 94:                      // 'child'
        this.shift(94);             // 'child'
        this.lookahead1W(27);       // S^WS | '(:' | '::'
        this.shift(52);             // '::'
        break;
      case 112:                     // 'descendant'
        this.shift(112);            // 'descendant'
        this.lookahead1W(27);       // S^WS | '(:' | '::'
        this.shift(52);             // '::'
        break;
      case 83:                      // 'attribute'
        this.shift(83);             // 'attribute'
        this.lookahead1W(27);       // S^WS | '(:' | '::'
        this.shift(52);             // '::'
        break;
      case 234:                     // 'self'
        this.shift(234);            // 'self'
        this.lookahead1W(27);       // S^WS | '(:' | '::'
        this.shift(52);             // '::'
        break;
      case 113:                     // 'descendant-or-self'
        this.shift(113);            // 'descendant-or-self'
        this.lookahead1W(27);       // S^WS | '(:' | '::'
        this.shift(52);             // '::'
        break;
      case 138:                     // 'following-sibling'
        this.shift(138);            // 'following-sibling'
        this.lookahead1W(27);       // S^WS | '(:' | '::'
        this.shift(52);             // '::'
        break;
      default:
        this.shift(137);            // 'following'
        this.lookahead1W(27);       // S^WS | '(:' | '::'
        this.shift(52);             // '::'
      }
      this.eventHandler.endNonterminal("ForwardAxis", this.e0);
    }

    private try_ForwardAxis()
    {
      switch (this.l1)
      {
      case 94:                      // 'child'
        this.shiftT(94);            // 'child'
        this.lookahead1W(27);       // S^WS | '(:' | '::'
        this.shiftT(52);            // '::'
        break;
      case 112:                     // 'descendant'
        this.shiftT(112);           // 'descendant'
        this.lookahead1W(27);       // S^WS | '(:' | '::'
        this.shiftT(52);            // '::'
        break;
      case 83:                      // 'attribute'
        this.shiftT(83);            // 'attribute'
        this.lookahead1W(27);       // S^WS | '(:' | '::'
        this.shiftT(52);            // '::'
        break;
      case 234:                     // 'self'
        this.shiftT(234);           // 'self'
        this.lookahead1W(27);       // S^WS | '(:' | '::'
        this.shiftT(52);            // '::'
        break;
      case 113:                     // 'descendant-or-self'
        this.shiftT(113);           // 'descendant-or-self'
        this.lookahead1W(27);       // S^WS | '(:' | '::'
        this.shiftT(52);            // '::'
        break;
      case 138:                     // 'following-sibling'
        this.shiftT(138);           // 'following-sibling'
        this.lookahead1W(27);       // S^WS | '(:' | '::'
        this.shiftT(52);            // '::'
        break;
      default:
        this.shiftT(137);           // 'following'
        this.lookahead1W(27);       // S^WS | '(:' | '::'
        this.shiftT(52);            // '::'
      }
    }

    private parse_AbbrevForwardStep()
    {
      this.eventHandler.startNonterminal("AbbrevForwardStep", this.e0);
      if (this.l1 == 67)            // '@'
      {
        this.shift(67);             // '@'
      }
      this.lookahead1W(248);        // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      this.whitespace();
      this.parse_NodeTest();
      this.eventHandler.endNonterminal("AbbrevForwardStep", this.e0);
    }

    private try_AbbrevForwardStep()
    {
      if (this.l1 == 67)            // '@'
      {
        this.shiftT(67);            // '@'
      }
      this.lookahead1W(248);        // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      this.try_NodeTest();
    }

    private parse_ReverseStep()
    {
      this.eventHandler.startNonterminal("ReverseStep", this.e0);
      switch (this.l1)
      {
      case 46:                      // '..'
        this.parse_AbbrevReverseStep();
        break;
      default:
        this.parse_ReverseAxis();
        this.lookahead1W(248);      // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
        this.whitespace();
        this.parse_NodeTest();
      }
      this.eventHandler.endNonterminal("ReverseStep", this.e0);
    }

    private try_ReverseStep()
    {
      switch (this.l1)
      {
      case 46:                      // '..'
        this.try_AbbrevReverseStep();
        break;
      default:
        this.try_ReverseAxis();
        this.lookahead1W(248);      // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
        this.try_NodeTest();
      }
    }

    private parse_ReverseAxis()
    {
      this.eventHandler.startNonterminal("ReverseAxis", this.e0);
      switch (this.l1)
      {
      case 210:                     // 'parent'
        this.shift(210);            // 'parent'
        this.lookahead1W(27);       // S^WS | '(:' | '::'
        this.shift(52);             // '::'
        break;
      case 74:                      // 'ancestor'
        this.shift(74);             // 'ancestor'
        this.lookahead1W(27);       // S^WS | '(:' | '::'
        this.shift(52);             // '::'
        break;
      case 217:                     // 'preceding-sibling'
        this.shift(217);            // 'preceding-sibling'
        this.lookahead1W(27);       // S^WS | '(:' | '::'
        this.shift(52);             // '::'
        break;
      case 216:                     // 'preceding'
        this.shift(216);            // 'preceding'
        this.lookahead1W(27);       // S^WS | '(:' | '::'
        this.shift(52);             // '::'
        break;
      default:
        this.shift(75);             // 'ancestor-or-self'
        this.lookahead1W(27);       // S^WS | '(:' | '::'
        this.shift(52);             // '::'
      }
      this.eventHandler.endNonterminal("ReverseAxis", this.e0);
    }

    private try_ReverseAxis()
    {
      switch (this.l1)
      {
      case 210:                     // 'parent'
        this.shiftT(210);           // 'parent'
        this.lookahead1W(27);       // S^WS | '(:' | '::'
        this.shiftT(52);            // '::'
        break;
      case 74:                      // 'ancestor'
        this.shiftT(74);            // 'ancestor'
        this.lookahead1W(27);       // S^WS | '(:' | '::'
        this.shiftT(52);            // '::'
        break;
      case 217:                     // 'preceding-sibling'
        this.shiftT(217);           // 'preceding-sibling'
        this.lookahead1W(27);       // S^WS | '(:' | '::'
        this.shiftT(52);            // '::'
        break;
      case 216:                     // 'preceding'
        this.shiftT(216);           // 'preceding'
        this.lookahead1W(27);       // S^WS | '(:' | '::'
        this.shiftT(52);            // '::'
        break;
      default:
        this.shiftT(75);            // 'ancestor-or-self'
        this.lookahead1W(27);       // S^WS | '(:' | '::'
        this.shiftT(52);            // '::'
      }
    }

    private parse_AbbrevReverseStep()
    {
      this.eventHandler.startNonterminal("AbbrevReverseStep", this.e0);
      this.shift(46);               // '..'
      this.eventHandler.endNonterminal("AbbrevReverseStep", this.e0);
    }

    private try_AbbrevReverseStep()
    {
      this.shiftT(46);              // '..'
    }

    private parse_NodeTest()
    {
      this.eventHandler.startNonterminal("NodeTest", this.e0);
      switch (this.l1)
      {
      case 83:                      // 'attribute'
      case 97:                      // 'comment'
      case 121:                     // 'document-node'
      case 122:                     // 'element'
      case 188:                     // 'namespace-node'
      case 194:                     // 'node'
      case 220:                     // 'processing-instruction'
      case 230:                     // 'schema-attribute'
      case 231:                     // 'schema-element'
      case 249:                     // 'text'
        this.lookahead2W(230);      // S^WS | EOF | '!' | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'after' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
        break;
      default:
        this.lk = this.l1;
      }
      switch (this.lk)
      {
      case 18003:                   // 'attribute' '('
      case 18017:                   // 'comment' '('
      case 18041:                   // 'document-node' '('
      case 18042:                   // 'element' '('
      case 18108:                   // 'namespace-node' '('
      case 18114:                   // 'node' '('
      case 18140:                   // 'processing-instruction' '('
      case 18150:                   // 'schema-attribute' '('
      case 18151:                   // 'schema-element' '('
      case 18169:                   // 'text' '('
        this.parse_KindTest();
        break;
      default:
        this.parse_NameTest();
      }
      this.eventHandler.endNonterminal("NodeTest", this.e0);
    }

    private try_NodeTest()
    {
      switch (this.l1)
      {
      case 83:                      // 'attribute'
      case 97:                      // 'comment'
      case 121:                     // 'document-node'
      case 122:                     // 'element'
      case 188:                     // 'namespace-node'
      case 194:                     // 'node'
      case 220:                     // 'processing-instruction'
      case 230:                     // 'schema-attribute'
      case 231:                     // 'schema-element'
      case 249:                     // 'text'
        this.lookahead2W(230);      // S^WS | EOF | '!' | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'after' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
        break;
      default:
        this.lk = this.l1;
      }
      switch (this.lk)
      {
      case 18003:                   // 'attribute' '('
      case 18017:                   // 'comment' '('
      case 18041:                   // 'document-node' '('
      case 18042:                   // 'element' '('
      case 18108:                   // 'namespace-node' '('
      case 18114:                   // 'node' '('
      case 18140:                   // 'processing-instruction' '('
      case 18150:                   // 'schema-attribute' '('
      case 18151:                   // 'schema-element' '('
      case 18169:                   // 'text' '('
        this.try_KindTest();
        break;
      default:
        this.try_NameTest();
      }
    }

    private parse_NameTest()
    {
      this.eventHandler.startNonterminal("NameTest", this.e0);
      switch (this.l1)
      {
      case 5:                       // Wildcard
        this.shift(5);              // Wildcard
        break;
      default:
        this.parse_EQName();
      }
      this.eventHandler.endNonterminal("NameTest", this.e0);
    }

    private try_NameTest()
    {
      switch (this.l1)
      {
      case 5:                       // Wildcard
        this.shiftT(5);             // Wildcard
        break;
      default:
        this.try_EQName();
      }
    }

    private parse_PostfixExpr()
    {
      this.eventHandler.startNonterminal("PostfixExpr", this.e0);
      this.parse_PrimaryExpr();
      for (;;)
      {
        this.lookahead1W(234);      // S^WS | EOF | '!' | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '.' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
        if (this.l1 != 35           // '('
         && this.l1 != 45           // '.'
         && this.l1 != 69)          // '['
        {
          break;
        }
        switch (this.l1)
        {
        case 69:                    // '['
          this.lookahead2W(272);    // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | ']' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
          break;
        default:
          this.lk = this.l1;
        }
        if (this.lk == 35397)       // '[' '['
        {
          this.lk = this.memoized(5, this.e0);
          if (this.lk == 0)
          {
            var b0A = this.b0; var e0A = this.e0; var l1A = this.l1;
            var b1A = this.b1; var e1A = this.e1; var l2A = this.l2;
            var b2A = this.b2; var e2A = this.e2;
            try
            {
              this.try_Predicate();
              this.lk = -1;
            }
            catch (p1A)
            {
              this.lk = -4;
            }
            this.b0 = b0A; this.e0 = e0A; this.l1 = l1A; if (this.l1 == 0) {this.end = e0A;} else {
            this.b1 = b1A; this.e1 = e1A; this.l2 = l2A; if (this.l2 == 0) {this.end = e1A;} else {
            this.b2 = b2A; this.e2 = e2A; this.end = e2A; }}
            this.memoize(5, this.e0, this.lk);
          }
        }
        switch (this.lk)
        {
        case 35:                    // '('
          this.whitespace();
          this.parse_ArgumentList();
          break;
        case 45:                    // '.'
          this.whitespace();
          this.parse_ObjectLookup();
          break;
        case -4:
          this.whitespace();
          this.parse_ArrayLookup();
          break;
        case 35909:                 // '[' ']'
          this.whitespace();
          this.parse_ArrayUnboxing();
          break;
        default:
          this.whitespace();
          this.parse_Predicate();
        }
      }
      this.eventHandler.endNonterminal("PostfixExpr", this.e0);
    }

    private try_PostfixExpr()
    {
      this.try_PrimaryExpr();
      for (;;)
      {
        this.lookahead1W(234);      // S^WS | EOF | '!' | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '.' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
        if (this.l1 != 35           // '('
         && this.l1 != 45           // '.'
         && this.l1 != 69)          // '['
        {
          break;
        }
        switch (this.l1)
        {
        case 69:                    // '['
          this.lookahead2W(272);    // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | ']' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
          break;
        default:
          this.lk = this.l1;
        }
        if (this.lk == 35397)       // '[' '['
        {
          this.lk = this.memoized(5, this.e0);
          if (this.lk == 0)
          {
            var b0A = this.b0; var e0A = this.e0; var l1A = this.l1;
            var b1A = this.b1; var e1A = this.e1; var l2A = this.l2;
            var b2A = this.b2; var e2A = this.e2;
            try
            {
              this.try_Predicate();
              this.memoize(5, e0A, -1);
              this.lk = -6;
            }
            catch (p1A)
            {
              this.lk = -4;
              this.b0 = b0A; this.e0 = e0A; this.l1 = l1A; if (this.l1 == 0) {this.end = e0A;} else {
              this.b1 = b1A; this.e1 = e1A; this.l2 = l2A; if (this.l2 == 0) {this.end = e1A;} else {
              this.b2 = b2A; this.e2 = e2A; this.end = e2A; }}
              this.memoize(5, e0A, -4);
            }
          }
        }
        switch (this.lk)
        {
        case 35:                    // '('
          this.try_ArgumentList();
          break;
        case 45:                    // '.'
          this.try_ObjectLookup();
          break;
        case -4:
          this.try_ArrayLookup();
          break;
        case 35909:                 // '[' ']'
          this.try_ArrayUnboxing();
          break;
        case -6:
          break;
        default:
          this.try_Predicate();
        }
      }
    }

    private parse_ObjectLookup()
    {
      this.eventHandler.startNonterminal("ObjectLookup", this.e0);
      this.shift(45);               // '.'
      this.lookahead1W(250);        // StringLiteral | NCName^Token | S^WS | '$' | '$$' | '(' | '(:' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with'
      switch (this.l1)
      {
      case 11:                      // StringLiteral
        this.shift(11);             // StringLiteral
        break;
      case 35:                      // '('
        this.whitespace();
        this.parse_ParenthesizedExpr();
        break;
      case 31:                      // '$'
        this.whitespace();
        this.parse_VarRef();
        break;
      case 32:                      // '$$'
        this.whitespace();
        this.parse_ContextItemExpr();
        break;
      default:
        this.whitespace();
        this.parse_NCName();
      }
      this.eventHandler.endNonterminal("ObjectLookup", this.e0);
    }

    private try_ObjectLookup()
    {
      this.shiftT(45);              // '.'
      this.lookahead1W(250);        // StringLiteral | NCName^Token | S^WS | '$' | '$$' | '(' | '(:' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with'
      switch (this.l1)
      {
      case 11:                      // StringLiteral
        this.shiftT(11);            // StringLiteral
        break;
      case 35:                      // '('
        this.try_ParenthesizedExpr();
        break;
      case 31:                      // '$'
        this.try_VarRef();
        break;
      case 32:                      // '$$'
        this.try_ContextItemExpr();
        break;
      default:
        this.try_NCName();
      }
    }

    private parse_ArrayLookup()
    {
      this.eventHandler.startNonterminal("ArrayLookup", this.e0);
      this.shift(69);               // '['
      this.lookahead1W(31);         // S^WS | '(:' | '['
      this.shift(69);               // '['
      this.lookahead1W(266);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.whitespace();
      this.parse_Expr();
      this.shift(70);               // ']'
      this.lookahead1W(32);         // S^WS | '(:' | ']'
      this.shift(70);               // ']'
      this.eventHandler.endNonterminal("ArrayLookup", this.e0);
    }

    private try_ArrayLookup()
    {
      this.shiftT(69);              // '['
      this.lookahead1W(31);         // S^WS | '(:' | '['
      this.shiftT(69);              // '['
      this.lookahead1W(266);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.try_Expr();
      this.shiftT(70);              // ']'
      this.lookahead1W(32);         // S^WS | '(:' | ']'
      this.shiftT(70);              // ']'
    }

    private parse_ArrayUnboxing()
    {
      this.eventHandler.startNonterminal("ArrayUnboxing", this.e0);
      this.shift(69);               // '['
      this.lookahead1W(32);         // S^WS | '(:' | ']'
      this.shift(70);               // ']'
      this.eventHandler.endNonterminal("ArrayUnboxing", this.e0);
    }

    private try_ArrayUnboxing()
    {
      this.shiftT(69);              // '['
      this.lookahead1W(32);         // S^WS | '(:' | ']'
      this.shiftT(70);              // ']'
    }

    private parse_ArgumentList()
    {
      this.eventHandler.startNonterminal("ArgumentList", this.e0);
      this.shift(35);               // '('
      this.lookahead1W(279);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | ')' | '+' | '-' | '/' | '//' |
                                    // '<' | '<!--' | '<?' | '?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      if (this.l1 != 38)            // ')'
      {
        this.whitespace();
        this.parse_Argument();
        for (;;)
        {
          this.lookahead1W(105);    // S^WS | '(:' | ')' | ','
          if (this.l1 != 42)        // ','
          {
            break;
          }
          this.shift(42);           // ','
          this.lookahead1W(271);    // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
          this.whitespace();
          this.parse_Argument();
        }
      }
      this.shift(38);               // ')'
      this.eventHandler.endNonterminal("ArgumentList", this.e0);
    }

    private try_ArgumentList()
    {
      this.shiftT(35);              // '('
      this.lookahead1W(279);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | ')' | '+' | '-' | '/' | '//' |
                                    // '<' | '<!--' | '<?' | '?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      if (this.l1 != 38)            // ')'
      {
        this.try_Argument();
        for (;;)
        {
          this.lookahead1W(105);    // S^WS | '(:' | ')' | ','
          if (this.l1 != 42)        // ','
          {
            break;
          }
          this.shiftT(42);          // ','
          this.lookahead1W(271);    // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
          this.try_Argument();
        }
      }
      this.shiftT(38);              // ')'
    }

    private parse_PredicateList()
    {
      this.eventHandler.startNonterminal("PredicateList", this.e0);
      for (;;)
      {
        this.lookahead1W(227);      // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'after' | 'and' |
                                    // 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
        if (this.l1 != 69)          // '['
        {
          break;
        }
        this.whitespace();
        this.parse_Predicate();
      }
      this.eventHandler.endNonterminal("PredicateList", this.e0);
    }

    private try_PredicateList()
    {
      for (;;)
      {
        this.lookahead1W(227);      // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'after' | 'and' |
                                    // 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
        if (this.l1 != 69)          // '['
        {
          break;
        }
        this.try_Predicate();
      }
    }

    private parse_Predicate()
    {
      this.eventHandler.startNonterminal("Predicate", this.e0);
      this.shift(69);               // '['
      this.lookahead1W(266);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.whitespace();
      this.parse_Expr();
      this.shift(70);               // ']'
      this.eventHandler.endNonterminal("Predicate", this.e0);
    }

    private try_Predicate()
    {
      this.shiftT(69);              // '['
      this.lookahead1W(266);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.try_Expr();
      this.shiftT(70);              // ']'
    }

    private parse_Literal()
    {
      this.eventHandler.startNonterminal("Literal", this.e0);
      switch (this.l1)
      {
      case 11:                      // StringLiteral
        this.shift(11);             // StringLiteral
        break;
      case 135:                     // 'false'
      case 255:                     // 'true'
        this.parse_BooleanLiteral();
        break;
      case 197:                     // 'null'
        this.parse_NullLiteral();
        break;
      default:
        this.parse_NumericLiteral();
      }
      this.eventHandler.endNonterminal("Literal", this.e0);
    }

    private try_Literal()
    {
      switch (this.l1)
      {
      case 11:                      // StringLiteral
        this.shiftT(11);            // StringLiteral
        break;
      case 135:                     // 'false'
      case 255:                     // 'true'
        this.try_BooleanLiteral();
        break;
      case 197:                     // 'null'
        this.try_NullLiteral();
        break;
      default:
        this.try_NumericLiteral();
      }
    }

    private parse_BooleanLiteral()
    {
      this.eventHandler.startNonterminal("BooleanLiteral", this.e0);
      switch (this.l1)
      {
      case 255:                     // 'true'
        this.shift(255);            // 'true'
        break;
      default:
        this.shift(135);            // 'false'
      }
      this.eventHandler.endNonterminal("BooleanLiteral", this.e0);
    }

    private try_BooleanLiteral()
    {
      switch (this.l1)
      {
      case 255:                     // 'true'
        this.shiftT(255);           // 'true'
        break;
      default:
        this.shiftT(135);           // 'false'
      }
    }

    private parse_NullLiteral()
    {
      this.eventHandler.startNonterminal("NullLiteral", this.e0);
      this.shift(197);              // 'null'
      this.eventHandler.endNonterminal("NullLiteral", this.e0);
    }

    private try_NullLiteral()
    {
      this.shiftT(197);             // 'null'
    }

    private parse_NumericLiteral()
    {
      this.eventHandler.startNonterminal("NumericLiteral", this.e0);
      switch (this.l1)
      {
      case 8:                       // IntegerLiteral
        this.shift(8);              // IntegerLiteral
        break;
      case 9:                       // DecimalLiteral
        this.shift(9);              // DecimalLiteral
        break;
      default:
        this.shift(10);             // DoubleLiteral
      }
      this.eventHandler.endNonterminal("NumericLiteral", this.e0);
    }

    private try_NumericLiteral()
    {
      switch (this.l1)
      {
      case 8:                       // IntegerLiteral
        this.shiftT(8);             // IntegerLiteral
        break;
      case 9:                       // DecimalLiteral
        this.shiftT(9);             // DecimalLiteral
        break;
      default:
        this.shiftT(10);            // DoubleLiteral
      }
    }

    private parse_VarRef()
    {
      this.eventHandler.startNonterminal("VarRef", this.e0);
      this.shift(31);               // '$'
      this.lookahead1W(245);        // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      this.whitespace();
      this.parse_VarName();
      this.eventHandler.endNonterminal("VarRef", this.e0);
    }

    private try_VarRef()
    {
      this.shiftT(31);              // '$'
      this.lookahead1W(245);        // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      this.try_VarName();
    }

    private parse_VarName()
    {
      this.eventHandler.startNonterminal("VarName", this.e0);
      this.parse_EQName();
      this.eventHandler.endNonterminal("VarName", this.e0);
    }

    private try_VarName()
    {
      this.try_EQName();
    }

    private parse_ParenthesizedExpr()
    {
      this.eventHandler.startNonterminal("ParenthesizedExpr", this.e0);
      this.shift(35);               // '('
      this.lookahead1W(269);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | ')' | '+' | '-' | '/' | '//' |
                                    // '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      if (this.l1 != 38)            // ')'
      {
        this.whitespace();
        this.parse_Expr();
      }
      this.shift(38);               // ')'
      this.eventHandler.endNonterminal("ParenthesizedExpr", this.e0);
    }

    private try_ParenthesizedExpr()
    {
      this.shiftT(35);              // '('
      this.lookahead1W(269);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | ')' | '+' | '-' | '/' | '//' |
                                    // '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      if (this.l1 != 38)            // ')'
      {
        this.try_Expr();
      }
      this.shiftT(38);              // ')'
    }

    private parse_ContextItemExpr()
    {
      this.eventHandler.startNonterminal("ContextItemExpr", this.e0);
      this.shift(32);               // '$$'
      this.eventHandler.endNonterminal("ContextItemExpr", this.e0);
    }

    private try_ContextItemExpr()
    {
      this.shiftT(32);              // '$$'
    }

    private parse_OrderedExpr()
    {
      this.eventHandler.startNonterminal("OrderedExpr", this.e0);
      this.shift(206);              // 'ordered'
      this.lookahead1W(90);         // S^WS | '(:' | '{'
      this.shift(281);              // '{'
      this.lookahead1W(266);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.whitespace();
      this.parse_Expr();
      this.shift(287);              // '}'
      this.eventHandler.endNonterminal("OrderedExpr", this.e0);
    }

    private try_OrderedExpr()
    {
      this.shiftT(206);             // 'ordered'
      this.lookahead1W(90);         // S^WS | '(:' | '{'
      this.shiftT(281);             // '{'
      this.lookahead1W(266);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.try_Expr();
      this.shiftT(287);             // '}'
    }

    private parse_UnorderedExpr()
    {
      this.eventHandler.startNonterminal("UnorderedExpr", this.e0);
      this.shift(262);              // 'unordered'
      this.lookahead1W(90);         // S^WS | '(:' | '{'
      this.shift(281);              // '{'
      this.lookahead1W(266);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.whitespace();
      this.parse_Expr();
      this.shift(287);              // '}'
      this.eventHandler.endNonterminal("UnorderedExpr", this.e0);
    }

    private try_UnorderedExpr()
    {
      this.shiftT(262);             // 'unordered'
      this.lookahead1W(90);         // S^WS | '(:' | '{'
      this.shiftT(281);             // '{'
      this.lookahead1W(266);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.try_Expr();
      this.shiftT(287);             // '}'
    }

    private parse_FunctionCall()
    {
      this.eventHandler.startNonterminal("FunctionCall", this.e0);
      this.parse_FunctionName();
      this.lookahead1W(22);         // S^WS | '(' | '(:'
      this.whitespace();
      this.parse_ArgumentList();
      this.eventHandler.endNonterminal("FunctionCall", this.e0);
    }

    private try_FunctionCall()
    {
      this.try_FunctionName();
      this.lookahead1W(22);         // S^WS | '(' | '(:'
      this.try_ArgumentList();
    }

    private parse_Argument()
    {
      this.eventHandler.startNonterminal("Argument", this.e0);
      switch (this.l1)
      {
      case 65:                      // '?'
        this.parse_ArgumentPlaceholder();
        break;
      default:
        this.parse_ExprSingle();
      }
      this.eventHandler.endNonterminal("Argument", this.e0);
    }

    private try_Argument()
    {
      switch (this.l1)
      {
      case 65:                      // '?'
        this.try_ArgumentPlaceholder();
        break;
      default:
        this.try_ExprSingle();
      }
    }

    private parse_ArgumentPlaceholder()
    {
      this.eventHandler.startNonterminal("ArgumentPlaceholder", this.e0);
      this.shift(65);               // '?'
      this.eventHandler.endNonterminal("ArgumentPlaceholder", this.e0);
    }

    private try_ArgumentPlaceholder()
    {
      this.shiftT(65);              // '?'
    }

    private parse_Constructor()
    {
      this.eventHandler.startNonterminal("Constructor", this.e0);
      switch (this.l1)
      {
      case 55:                      // '<'
      case 56:                      // '<!--'
      case 60:                      // '<?'
        this.parse_DirectConstructor();
        break;
      default:
        this.parse_ComputedConstructor();
      }
      this.eventHandler.endNonterminal("Constructor", this.e0);
    }

    private try_Constructor()
    {
      switch (this.l1)
      {
      case 55:                      // '<'
      case 56:                      // '<!--'
      case 60:                      // '<?'
        this.try_DirectConstructor();
        break;
      default:
        this.try_ComputedConstructor();
      }
    }

    private parse_DirectConstructor()
    {
      this.eventHandler.startNonterminal("DirectConstructor", this.e0);
      switch (this.l1)
      {
      case 55:                      // '<'
        this.parse_DirElemConstructor();
        break;
      case 56:                      // '<!--'
        this.parse_DirCommentConstructor();
        break;
      default:
        this.parse_DirPIConstructor();
      }
      this.eventHandler.endNonterminal("DirectConstructor", this.e0);
    }

    private try_DirectConstructor()
    {
      switch (this.l1)
      {
      case 55:                      // '<'
        this.try_DirElemConstructor();
        break;
      case 56:                      // '<!--'
        this.try_DirCommentConstructor();
        break;
      default:
        this.try_DirPIConstructor();
      }
    }

    private parse_DirElemConstructor()
    {
      this.eventHandler.startNonterminal("DirElemConstructor", this.e0);
      this.shift(55);               // '<'
      this.lookahead1(4);           // QName
      this.shift(20);               // QName
      this.parse_DirAttributeList();
      switch (this.l1)
      {
      case 49:                      // '/>'
        this.shift(49);             // '/>'
        break;
      default:
        this.shift(62);             // '>'
        for (;;)
        {
          this.lookahead1(196);     // CDataSection | PredefinedEntityRef | ElementContentChar | CharRef | '<' |
                                    // '<!--' | '</' | '<?' | '{' | '{{' | '}}'
          if (this.l1 == 57)        // '</'
          {
            break;
          }
          this.parse_DirElemContent();
        }
        this.shift(57);             // '</'
        this.lookahead1(4);         // QName
        this.shift(20);             // QName
        this.lookahead1(12);        // S | '>'
        if (this.l1 == 21)          // S
        {
          this.shift(21);           // S
        }
        this.lookahead1(8);         // '>'
        this.shift(62);             // '>'
      }
      this.eventHandler.endNonterminal("DirElemConstructor", this.e0);
    }

    private try_DirElemConstructor()
    {
      this.shiftT(55);              // '<'
      this.lookahead1(4);           // QName
      this.shiftT(20);              // QName
      this.try_DirAttributeList();
      switch (this.l1)
      {
      case 49:                      // '/>'
        this.shiftT(49);            // '/>'
        break;
      default:
        this.shiftT(62);            // '>'
        for (;;)
        {
          this.lookahead1(196);     // CDataSection | PredefinedEntityRef | ElementContentChar | CharRef | '<' |
                                    // '<!--' | '</' | '<?' | '{' | '{{' | '}}'
          if (this.l1 == 57)        // '</'
          {
            break;
          }
          this.try_DirElemContent();
        }
        this.shiftT(57);            // '</'
        this.lookahead1(4);         // QName
        this.shiftT(20);            // QName
        this.lookahead1(12);        // S | '>'
        if (this.l1 == 21)          // S
        {
          this.shiftT(21);          // S
        }
        this.lookahead1(8);         // '>'
        this.shiftT(62);            // '>'
      }
    }

    private parse_DirAttributeList()
    {
      this.eventHandler.startNonterminal("DirAttributeList", this.e0);
      for (;;)
      {
        this.lookahead1(19);        // S | '/>' | '>'
        if (this.l1 != 21)          // S
        {
          break;
        }
        this.shift(21);             // S
        this.lookahead1(94);        // QName | S | '/>' | '>'
        if (this.l1 == 20)          // QName
        {
          this.shift(20);           // QName
          this.lookahead1(11);      // S | '='
          if (this.l1 == 21)        // S
          {
            this.shift(21);         // S
          }
          this.lookahead1(7);       // '='
          this.shift(61);           // '='
          this.lookahead1(18);      // S | '"' | "'"
          if (this.l1 == 21)        // S
          {
            this.shift(21);         // S
          }
          this.parse_DirAttributeValue();
        }
      }
      this.eventHandler.endNonterminal("DirAttributeList", this.e0);
    }

    private try_DirAttributeList()
    {
      for (;;)
      {
        this.lookahead1(19);        // S | '/>' | '>'
        if (this.l1 != 21)          // S
        {
          break;
        }
        this.shiftT(21);            // S
        this.lookahead1(94);        // QName | S | '/>' | '>'
        if (this.l1 == 20)          // QName
        {
          this.shiftT(20);          // QName
          this.lookahead1(11);      // S | '='
          if (this.l1 == 21)        // S
          {
            this.shiftT(21);        // S
          }
          this.lookahead1(7);       // '='
          this.shiftT(61);          // '='
          this.lookahead1(18);      // S | '"' | "'"
          if (this.l1 == 21)        // S
          {
            this.shiftT(21);        // S
          }
          this.try_DirAttributeValue();
        }
      }
    }

    private parse_DirAttributeValue()
    {
      this.eventHandler.startNonterminal("DirAttributeValue", this.e0);
      this.lookahead1(14);          // '"' | "'"
      switch (this.l1)
      {
      case 28:                      // '"'
        this.shift(28);             // '"'
        for (;;)
        {
          this.lookahead1(185);     // PredefinedEntityRef | EscapeQuot | QuotAttrContentChar | CharRef | '"' | '{' |
                                    // '{{' | '}}'
          if (this.l1 == 28)        // '"'
          {
            break;
          }
          switch (this.l1)
          {
          case 13:                  // EscapeQuot
            this.shift(13);         // EscapeQuot
            break;
          default:
            this.parse_QuotAttrValueContent();
          }
        }
        this.shift(28);             // '"'
        break;
      default:
        this.shift(34);             // "'"
        for (;;)
        {
          this.lookahead1(186);     // PredefinedEntityRef | EscapeApos | AposAttrContentChar | CharRef | "'" | '{' |
                                    // '{{' | '}}'
          if (this.l1 == 34)        // "'"
          {
            break;
          }
          switch (this.l1)
          {
          case 14:                  // EscapeApos
            this.shift(14);         // EscapeApos
            break;
          default:
            this.parse_AposAttrValueContent();
          }
        }
        this.shift(34);             // "'"
      }
      this.eventHandler.endNonterminal("DirAttributeValue", this.e0);
    }

    private try_DirAttributeValue()
    {
      this.lookahead1(14);          // '"' | "'"
      switch (this.l1)
      {
      case 28:                      // '"'
        this.shiftT(28);            // '"'
        for (;;)
        {
          this.lookahead1(185);     // PredefinedEntityRef | EscapeQuot | QuotAttrContentChar | CharRef | '"' | '{' |
                                    // '{{' | '}}'
          if (this.l1 == 28)        // '"'
          {
            break;
          }
          switch (this.l1)
          {
          case 13:                  // EscapeQuot
            this.shiftT(13);        // EscapeQuot
            break;
          default:
            this.try_QuotAttrValueContent();
          }
        }
        this.shiftT(28);            // '"'
        break;
      default:
        this.shiftT(34);            // "'"
        for (;;)
        {
          this.lookahead1(186);     // PredefinedEntityRef | EscapeApos | AposAttrContentChar | CharRef | "'" | '{' |
                                    // '{{' | '}}'
          if (this.l1 == 34)        // "'"
          {
            break;
          }
          switch (this.l1)
          {
          case 14:                  // EscapeApos
            this.shiftT(14);        // EscapeApos
            break;
          default:
            this.try_AposAttrValueContent();
          }
        }
        this.shiftT(34);            // "'"
      }
    }

    private parse_QuotAttrValueContent()
    {
      this.eventHandler.startNonterminal("QuotAttrValueContent", this.e0);
      switch (this.l1)
      {
      case 16:                      // QuotAttrContentChar
        this.shift(16);             // QuotAttrContentChar
        break;
      default:
        this.parse_CommonContent();
      }
      this.eventHandler.endNonterminal("QuotAttrValueContent", this.e0);
    }

    private try_QuotAttrValueContent()
    {
      switch (this.l1)
      {
      case 16:                      // QuotAttrContentChar
        this.shiftT(16);            // QuotAttrContentChar
        break;
      default:
        this.try_CommonContent();
      }
    }

    private parse_AposAttrValueContent()
    {
      this.eventHandler.startNonterminal("AposAttrValueContent", this.e0);
      switch (this.l1)
      {
      case 17:                      // AposAttrContentChar
        this.shift(17);             // AposAttrContentChar
        break;
      default:
        this.parse_CommonContent();
      }
      this.eventHandler.endNonterminal("AposAttrValueContent", this.e0);
    }

    private try_AposAttrValueContent()
    {
      switch (this.l1)
      {
      case 17:                      // AposAttrContentChar
        this.shiftT(17);            // AposAttrContentChar
        break;
      default:
        this.try_CommonContent();
      }
    }

    private parse_DirElemContent()
    {
      this.eventHandler.startNonterminal("DirElemContent", this.e0);
      switch (this.l1)
      {
      case 55:                      // '<'
      case 56:                      // '<!--'
      case 60:                      // '<?'
        this.parse_DirectConstructor();
        break;
      case 4:                       // CDataSection
        this.shift(4);              // CDataSection
        break;
      case 15:                      // ElementContentChar
        this.shift(15);             // ElementContentChar
        break;
      default:
        this.parse_CommonContent();
      }
      this.eventHandler.endNonterminal("DirElemContent", this.e0);
    }

    private try_DirElemContent()
    {
      switch (this.l1)
      {
      case 55:                      // '<'
      case 56:                      // '<!--'
      case 60:                      // '<?'
        this.try_DirectConstructor();
        break;
      case 4:                       // CDataSection
        this.shiftT(4);             // CDataSection
        break;
      case 15:                      // ElementContentChar
        this.shiftT(15);            // ElementContentChar
        break;
      default:
        this.try_CommonContent();
      }
    }

    private parse_DirCommentConstructor()
    {
      this.eventHandler.startNonterminal("DirCommentConstructor", this.e0);
      this.shift(56);               // '<!--'
      this.lookahead1(1);           // DirCommentContents
      this.shift(2);                // DirCommentContents
      this.lookahead1(6);           // '-->'
      this.shift(44);               // '-->'
      this.eventHandler.endNonterminal("DirCommentConstructor", this.e0);
    }

    private try_DirCommentConstructor()
    {
      this.shiftT(56);              // '<!--'
      this.lookahead1(1);           // DirCommentContents
      this.shiftT(2);               // DirCommentContents
      this.lookahead1(6);           // '-->'
      this.shiftT(44);              // '-->'
    }

    private parse_DirPIConstructor()
    {
      this.eventHandler.startNonterminal("DirPIConstructor", this.e0);
      this.shift(60);               // '<?'
      this.lookahead1(3);           // PITarget
      this.shift(18);               // PITarget
      this.lookahead1(13);          // S | '?>'
      if (this.l1 == 21)            // S
      {
        this.shift(21);             // S
        this.lookahead1(2);         // DirPIContents
        this.shift(3);              // DirPIContents
      }
      this.lookahead1(9);           // '?>'
      this.shift(66);               // '?>'
      this.eventHandler.endNonterminal("DirPIConstructor", this.e0);
    }

    private try_DirPIConstructor()
    {
      this.shiftT(60);              // '<?'
      this.lookahead1(3);           // PITarget
      this.shiftT(18);              // PITarget
      this.lookahead1(13);          // S | '?>'
      if (this.l1 == 21)            // S
      {
        this.shiftT(21);            // S
        this.lookahead1(2);         // DirPIContents
        this.shiftT(3);             // DirPIContents
      }
      this.lookahead1(9);           // '?>'
      this.shiftT(66);              // '?>'
    }

    private parse_ComputedConstructor()
    {
      this.eventHandler.startNonterminal("ComputedConstructor", this.e0);
      switch (this.l1)
      {
      case 120:                     // 'document'
        this.parse_CompDocConstructor();
        break;
      case 122:                     // 'element'
        this.parse_CompElemConstructor();
        break;
      case 83:                      // 'attribute'
        this.parse_CompAttrConstructor();
        break;
      case 187:                     // 'namespace'
        this.parse_CompNamespaceConstructor();
        break;
      case 249:                     // 'text'
        this.parse_CompTextConstructor();
        break;
      case 97:                      // 'comment'
        this.parse_CompCommentConstructor();
        break;
      default:
        this.parse_CompPIConstructor();
      }
      this.eventHandler.endNonterminal("ComputedConstructor", this.e0);
    }

    private try_ComputedConstructor()
    {
      switch (this.l1)
      {
      case 120:                     // 'document'
        this.try_CompDocConstructor();
        break;
      case 122:                     // 'element'
        this.try_CompElemConstructor();
        break;
      case 83:                      // 'attribute'
        this.try_CompAttrConstructor();
        break;
      case 187:                     // 'namespace'
        this.try_CompNamespaceConstructor();
        break;
      case 249:                     // 'text'
        this.try_CompTextConstructor();
        break;
      case 97:                      // 'comment'
        this.try_CompCommentConstructor();
        break;
      default:
        this.try_CompPIConstructor();
      }
    }

    private parse_CompElemConstructor()
    {
      this.eventHandler.startNonterminal("CompElemConstructor", this.e0);
      this.shift(122);              // 'element'
      this.lookahead1W(249);        // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | '{'
      switch (this.l1)
      {
      case 281:                     // '{'
        this.shift(281);            // '{'
        this.lookahead1W(266);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
        this.whitespace();
        this.parse_Expr();
        this.shift(287);            // '}'
        break;
      default:
        this.whitespace();
        this.parse_EQName();
      }
      this.lookahead1W(90);         // S^WS | '(:' | '{'
      this.shift(281);              // '{'
      this.lookahead1W(280);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | ';' |
                                    // '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|' | '}'
      if (this.l1 != 287)           // '}'
      {
        this.whitespace();
        this.parse_ContentExpr();
      }
      this.shift(287);              // '}'
      this.eventHandler.endNonterminal("CompElemConstructor", this.e0);
    }

    private try_CompElemConstructor()
    {
      this.shiftT(122);             // 'element'
      this.lookahead1W(249);        // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | '{'
      switch (this.l1)
      {
      case 281:                     // '{'
        this.shiftT(281);           // '{'
        this.lookahead1W(266);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
        this.try_Expr();
        this.shiftT(287);           // '}'
        break;
      default:
        this.try_EQName();
      }
      this.lookahead1W(90);         // S^WS | '(:' | '{'
      this.shiftT(281);             // '{'
      this.lookahead1W(280);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | ';' |
                                    // '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|' | '}'
      if (this.l1 != 287)           // '}'
      {
        this.try_ContentExpr();
      }
      this.shiftT(287);             // '}'
    }

    private parse_CompNamespaceConstructor()
    {
      this.eventHandler.startNonterminal("CompNamespaceConstructor", this.e0);
      this.shift(187);              // 'namespace'
      this.lookahead1W(241);        // NCName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'null' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | '{'
      switch (this.l1)
      {
      case 281:                     // '{'
        this.shift(281);            // '{'
        this.lookahead1W(266);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
        this.whitespace();
        this.parse_PrefixExpr();
        this.shift(287);            // '}'
        break;
      default:
        this.whitespace();
        this.parse_Prefix();
      }
      this.lookahead1W(90);         // S^WS | '(:' | '{'
      this.shift(281);              // '{'
      this.lookahead1W(266);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.whitespace();
      this.parse_URIExpr();
      this.shift(287);              // '}'
      this.eventHandler.endNonterminal("CompNamespaceConstructor", this.e0);
    }

    private try_CompNamespaceConstructor()
    {
      this.shiftT(187);             // 'namespace'
      this.lookahead1W(241);        // NCName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'null' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | '{'
      switch (this.l1)
      {
      case 281:                     // '{'
        this.shiftT(281);           // '{'
        this.lookahead1W(266);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
        this.try_PrefixExpr();
        this.shiftT(287);           // '}'
        break;
      default:
        this.try_Prefix();
      }
      this.lookahead1W(90);         // S^WS | '(:' | '{'
      this.shiftT(281);             // '{'
      this.lookahead1W(266);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.try_URIExpr();
      this.shiftT(287);             // '}'
    }

    private parse_Prefix()
    {
      this.eventHandler.startNonterminal("Prefix", this.e0);
      this.parse_NCName();
      this.eventHandler.endNonterminal("Prefix", this.e0);
    }

    private try_Prefix()
    {
      this.try_NCName();
    }

    private parse_PrefixExpr()
    {
      this.eventHandler.startNonterminal("PrefixExpr", this.e0);
      this.parse_Expr();
      this.eventHandler.endNonterminal("PrefixExpr", this.e0);
    }

    private try_PrefixExpr()
    {
      this.try_Expr();
    }

    private parse_URIExpr()
    {
      this.eventHandler.startNonterminal("URIExpr", this.e0);
      this.parse_Expr();
      this.eventHandler.endNonterminal("URIExpr", this.e0);
    }

    private try_URIExpr()
    {
      this.try_Expr();
    }

    private parse_FunctionItemExpr()
    {
      this.eventHandler.startNonterminal("FunctionItemExpr", this.e0);
      switch (this.l1)
      {
      case 147:                     // 'function'
        this.lookahead2W(95);       // S^WS | '#' | '(' | '(:'
        break;
      default:
        this.lk = this.l1;
      }
      switch (this.lk)
      {
      case 33:                      // '%'
      case 18067:                   // 'function' '('
        this.parse_InlineFunctionExpr();
        break;
      default:
        this.parse_NamedFunctionRef();
      }
      this.eventHandler.endNonterminal("FunctionItemExpr", this.e0);
    }

    private try_FunctionItemExpr()
    {
      switch (this.l1)
      {
      case 147:                     // 'function'
        this.lookahead2W(95);       // S^WS | '#' | '(' | '(:'
        break;
      default:
        this.lk = this.l1;
      }
      switch (this.lk)
      {
      case 33:                      // '%'
      case 18067:                   // 'function' '('
        this.try_InlineFunctionExpr();
        break;
      default:
        this.try_NamedFunctionRef();
      }
    }

    private parse_NamedFunctionRef()
    {
      this.eventHandler.startNonterminal("NamedFunctionRef", this.e0);
      this.parse_EQName();
      this.lookahead1W(20);         // S^WS | '#' | '(:'
      this.shift(29);               // '#'
      this.lookahead1W(16);         // IntegerLiteral | S^WS | '(:'
      this.shift(8);                // IntegerLiteral
      this.eventHandler.endNonterminal("NamedFunctionRef", this.e0);
    }

    private try_NamedFunctionRef()
    {
      this.try_EQName();
      this.lookahead1W(20);         // S^WS | '#' | '(:'
      this.shiftT(29);              // '#'
      this.lookahead1W(16);         // IntegerLiteral | S^WS | '(:'
      this.shiftT(8);               // IntegerLiteral
    }

    private parse_InlineFunctionExpr()
    {
      this.eventHandler.startNonterminal("InlineFunctionExpr", this.e0);
      for (;;)
      {
        this.lookahead1W(101);      // S^WS | '%' | '(:' | 'function'
        if (this.l1 != 33)          // '%'
        {
          break;
        }
        this.whitespace();
        this.parse_Annotation();
      }
      this.shift(147);              // 'function'
      this.lookahead1W(22);         // S^WS | '(' | '(:'
      this.shift(35);               // '('
      this.lookahead1W(98);         // S^WS | '$' | '(:' | ')'
      if (this.l1 == 31)            // '$'
      {
        this.whitespace();
        this.parse_ParamList();
      }
      this.shift(38);               // ')'
      this.lookahead1W(115);        // S^WS | '(:' | 'as' | '{'
      if (this.l1 == 80)            // 'as'
      {
        this.shift(80);             // 'as'
        this.lookahead1W(253);      // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
        this.whitespace();
        this.parse_SequenceType();
      }
      this.lookahead1W(90);         // S^WS | '(:' | '{'
      this.whitespace();
      this.parse_FunctionBody();
      this.eventHandler.endNonterminal("InlineFunctionExpr", this.e0);
    }

    private try_InlineFunctionExpr()
    {
      for (;;)
      {
        this.lookahead1W(101);      // S^WS | '%' | '(:' | 'function'
        if (this.l1 != 33)          // '%'
        {
          break;
        }
        this.try_Annotation();
      }
      this.shiftT(147);             // 'function'
      this.lookahead1W(22);         // S^WS | '(' | '(:'
      this.shiftT(35);              // '('
      this.lookahead1W(98);         // S^WS | '$' | '(:' | ')'
      if (this.l1 == 31)            // '$'
      {
        this.try_ParamList();
      }
      this.shiftT(38);              // ')'
      this.lookahead1W(115);        // S^WS | '(:' | 'as' | '{'
      if (this.l1 == 80)            // 'as'
      {
        this.shiftT(80);            // 'as'
        this.lookahead1W(253);      // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
        this.try_SequenceType();
      }
      this.lookahead1W(90);         // S^WS | '(:' | '{'
      this.try_FunctionBody();
    }

    private parse_SingleType()
    {
      this.eventHandler.startNonterminal("SingleType", this.e0);
      this.parse_SimpleTypeName();
      this.lookahead1W(225);        // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' | 'and' | 'as' |
                                    // 'ascending' | 'at' | 'before' | 'case' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' |
                                    // 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' |
                                    // 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' |
                                    // 'order' | 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' |
                                    // 'start' | 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' |
                                    // '||' | '|}' | '}'
      if (this.l1 == 65)            // '?'
      {
        this.shift(65);             // '?'
      }
      this.eventHandler.endNonterminal("SingleType", this.e0);
    }

    private try_SingleType()
    {
      this.try_SimpleTypeName();
      this.lookahead1W(225);        // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' | 'and' | 'as' |
                                    // 'ascending' | 'at' | 'before' | 'case' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' |
                                    // 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' |
                                    // 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' |
                                    // 'order' | 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' |
                                    // 'start' | 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' |
                                    // '||' | '|}' | '}'
      if (this.l1 == 65)            // '?'
      {
        this.shiftT(65);            // '?'
      }
    }

    private parse_TypeDeclaration()
    {
      this.eventHandler.startNonterminal("TypeDeclaration", this.e0);
      this.shift(80);               // 'as'
      this.lookahead1W(253);        // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      this.whitespace();
      this.parse_SequenceType();
      this.eventHandler.endNonterminal("TypeDeclaration", this.e0);
    }

    private try_TypeDeclaration()
    {
      this.shiftT(80);              // 'as'
      this.lookahead1W(253);        // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      this.try_SequenceType();
    }

    private parse_SequenceType()
    {
      this.eventHandler.startNonterminal("SequenceType", this.e0);
      switch (this.l1)
      {
      case 35:                      // '('
        this.lookahead2W(258);      // EQName^Token | S^WS | '%' | '(' | '(:' | ')' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
        break;
      case 125:                     // 'empty-sequence'
        this.lookahead2W(232);      // S^WS | EOF | '!=' | '(' | '(:' | ')' | '*' | '*' | '+' | ',' | '-' | ':' | ':=' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' |
                                    // 'allowing' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'external' | 'for' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'in' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'score' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'union' | 'where' | 'with' | 'words' | '{' | '|' | '||' | '|}' | '}'
        break;
      default:
        this.lk = this.l1;
      }
      switch (this.lk)
      {
      case 18045:                   // 'empty-sequence' '('
      case 19491:                   // '(' ')'
        if (this.l1 == 125)         // 'empty-sequence'
        {
          this.shift(125);          // 'empty-sequence'
        }
        this.lookahead1W(22);       // S^WS | '(' | '(:'
        this.shift(35);             // '('
        this.lookahead1W(23);       // S^WS | '(:' | ')'
        this.shift(38);             // ')'
        break;
      default:
        this.parse_ItemType();
        this.lookahead1W(228);      // S^WS | EOF | '!=' | '(:' | ')' | '*' | '*' | '+' | ',' | '-' | ':' | ':=' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' | 'allowing' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'collation' |
                                    // 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' |
                                    // 'end' | 'eq' | 'except' | 'external' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'in' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'score' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'union' | 'where' | 'with' | 'words' | '{' | '|' | '||' | '|}' | '}'
        switch (this.l1)
        {
        case 40:                    // '*'
        case 41:                    // '+'
        case 65:                    // '?'
          this.whitespace();
          this.parse_OccurrenceIndicator();
          break;
        default:
          break;
        }
      }
      this.eventHandler.endNonterminal("SequenceType", this.e0);
    }

    private try_SequenceType()
    {
      switch (this.l1)
      {
      case 35:                      // '('
        this.lookahead2W(258);      // EQName^Token | S^WS | '%' | '(' | '(:' | ')' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
        break;
      case 125:                     // 'empty-sequence'
        this.lookahead2W(232);      // S^WS | EOF | '!=' | '(' | '(:' | ')' | '*' | '*' | '+' | ',' | '-' | ':' | ':=' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' |
                                    // 'allowing' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'external' | 'for' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'in' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'score' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'union' | 'where' | 'with' | 'words' | '{' | '|' | '||' | '|}' | '}'
        break;
      default:
        this.lk = this.l1;
      }
      switch (this.lk)
      {
      case 18045:                   // 'empty-sequence' '('
      case 19491:                   // '(' ')'
        if (this.l1 == 125)         // 'empty-sequence'
        {
          this.shiftT(125);         // 'empty-sequence'
        }
        this.lookahead1W(22);       // S^WS | '(' | '(:'
        this.shiftT(35);            // '('
        this.lookahead1W(23);       // S^WS | '(:' | ')'
        this.shiftT(38);            // ')'
        break;
      default:
        this.try_ItemType();
        this.lookahead1W(228);      // S^WS | EOF | '!=' | '(:' | ')' | '*' | '*' | '+' | ',' | '-' | ':' | ':=' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' | 'allowing' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'collation' |
                                    // 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' |
                                    // 'end' | 'eq' | 'except' | 'external' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'in' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'score' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'union' | 'where' | 'with' | 'words' | '{' | '|' | '||' | '|}' | '}'
        switch (this.l1)
        {
        case 40:                    // '*'
        case 41:                    // '+'
        case 65:                    // '?'
          this.try_OccurrenceIndicator();
          break;
        default:
          break;
        }
      }
    }

    private parse_OccurrenceIndicator()
    {
      this.eventHandler.startNonterminal("OccurrenceIndicator", this.e0);
      switch (this.l1)
      {
      case 65:                      // '?'
        this.shift(65);             // '?'
        break;
      case 40:                      // '*'
        this.shift(40);             // '*'
        break;
      default:
        this.shift(41);             // '+'
      }
      this.eventHandler.endNonterminal("OccurrenceIndicator", this.e0);
    }

    private try_OccurrenceIndicator()
    {
      switch (this.l1)
      {
      case 65:                      // '?'
        this.shiftT(65);            // '?'
        break;
      case 40:                      // '*'
        this.shiftT(40);            // '*'
        break;
      default:
        this.shiftT(41);            // '+'
      }
    }

    private parse_ItemType()
    {
      this.eventHandler.startNonterminal("ItemType", this.e0);
      switch (this.l1)
      {
      case 79:                      // 'array'
      case 83:                      // 'attribute'
      case 97:                      // 'comment'
      case 121:                     // 'document-node'
      case 122:                     // 'element'
      case 147:                     // 'function'
      case 167:                     // 'item'
      case 169:                     // 'json-item'
      case 188:                     // 'namespace-node'
      case 194:                     // 'node'
      case 198:                     // 'object'
      case 220:                     // 'processing-instruction'
      case 230:                     // 'schema-attribute'
      case 231:                     // 'schema-element'
      case 247:                     // 'structured-item'
      case 249:                     // 'text'
        this.lookahead2W(232);      // S^WS | EOF | '!=' | '(' | '(:' | ')' | '*' | '*' | '+' | ',' | '-' | ':' | ':=' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' |
                                    // 'allowing' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'external' | 'for' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'in' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'score' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'union' | 'where' | 'with' | 'words' | '{' | '|' | '||' | '|}' | '}'
        break;
      default:
        this.lk = this.l1;
      }
      if (this.lk == 12879          // 'array' EOF
       || this.lk == 12969          // 'json-item' EOF
       || this.lk == 12998          // 'object' EOF
       || this.lk == 13047          // 'structured-item' EOF
       || this.lk == 13903          // 'array' '!='
       || this.lk == 13993          // 'json-item' '!='
       || this.lk == 14022          // 'object' '!='
       || this.lk == 14071          // 'structured-item' '!='
       || this.lk == 19535          // 'array' ')'
       || this.lk == 19625          // 'json-item' ')'
       || this.lk == 19654          // 'object' ')'
       || this.lk == 19703          // 'structured-item' ')'
       || this.lk == 20047          // 'array' '*'
       || this.lk == 20137          // 'json-item' '*'
       || this.lk == 20166          // 'object' '*'
       || this.lk == 20215          // 'structured-item' '*'
       || this.lk == 20559          // 'array' '*'
       || this.lk == 20649          // 'json-item' '*'
       || this.lk == 20678          // 'object' '*'
       || this.lk == 20727          // 'structured-item' '*'
       || this.lk == 21071          // 'array' '+'
       || this.lk == 21161          // 'json-item' '+'
       || this.lk == 21190          // 'object' '+'
       || this.lk == 21239          // 'structured-item' '+'
       || this.lk == 21583          // 'array' ','
       || this.lk == 21673          // 'json-item' ','
       || this.lk == 21702          // 'object' ','
       || this.lk == 21751          // 'structured-item' ','
       || this.lk == 22095          // 'array' '-'
       || this.lk == 22185          // 'json-item' '-'
       || this.lk == 22214          // 'object' '-'
       || this.lk == 22263          // 'structured-item' '-'
       || this.lk == 25679          // 'array' ':'
       || this.lk == 25769          // 'json-item' ':'
       || this.lk == 25798          // 'object' ':'
       || this.lk == 25847          // 'structured-item' ':'
       || this.lk == 27215          // 'array' ':='
       || this.lk == 27305          // 'json-item' ':='
       || this.lk == 27334          // 'object' ':='
       || this.lk == 27383          // 'structured-item' ':='
       || this.lk == 27727          // 'array' ';'
       || this.lk == 27817          // 'json-item' ';'
       || this.lk == 27846          // 'object' ';'
       || this.lk == 27895          // 'structured-item' ';'
       || this.lk == 28239          // 'array' '<'
       || this.lk == 28329          // 'json-item' '<'
       || this.lk == 28358          // 'object' '<'
       || this.lk == 28407          // 'structured-item' '<'
       || this.lk == 29775          // 'array' '<<'
       || this.lk == 29865          // 'json-item' '<<'
       || this.lk == 29894          // 'object' '<<'
       || this.lk == 29943          // 'structured-item' '<<'
       || this.lk == 30287          // 'array' '<='
       || this.lk == 30377          // 'json-item' '<='
       || this.lk == 30406          // 'object' '<='
       || this.lk == 30455          // 'structured-item' '<='
       || this.lk == 31311          // 'array' '='
       || this.lk == 31401          // 'json-item' '='
       || this.lk == 31430          // 'object' '='
       || this.lk == 31479          // 'structured-item' '='
       || this.lk == 31823          // 'array' '>'
       || this.lk == 31913          // 'json-item' '>'
       || this.lk == 31942          // 'object' '>'
       || this.lk == 31991          // 'structured-item' '>'
       || this.lk == 32335          // 'array' '>='
       || this.lk == 32425          // 'json-item' '>='
       || this.lk == 32454          // 'object' '>='
       || this.lk == 32503          // 'structured-item' '>='
       || this.lk == 32847          // 'array' '>>'
       || this.lk == 32937          // 'json-item' '>>'
       || this.lk == 32966          // 'object' '>>'
       || this.lk == 33015          // 'structured-item' '>>'
       || this.lk == 33359          // 'array' '?'
       || this.lk == 33449          // 'json-item' '?'
       || this.lk == 33478          // 'object' '?'
       || this.lk == 33527          // 'structured-item' '?'
       || this.lk == 35919          // 'array' ']'
       || this.lk == 36009          // 'json-item' ']'
       || this.lk == 36038          // 'object' ']'
       || this.lk == 36087          // 'structured-item' ']'
       || this.lk == 36431          // 'array' 'after'
       || this.lk == 36521          // 'json-item' 'after'
       || this.lk == 36550          // 'object' 'after'
       || this.lk == 36599          // 'structured-item' 'after'
       || this.lk == 37455          // 'array' 'allowing'
       || this.lk == 37545          // 'json-item' 'allowing'
       || this.lk == 37574          // 'object' 'allowing'
       || this.lk == 37623          // 'structured-item' 'allowing'
       || this.lk == 38991          // 'array' 'and'
       || this.lk == 39081          // 'json-item' 'and'
       || this.lk == 39110          // 'object' 'and'
       || this.lk == 39159          // 'structured-item' 'and'
       || this.lk == 41039          // 'array' 'as'
       || this.lk == 41129          // 'json-item' 'as'
       || this.lk == 41158          // 'object' 'as'
       || this.lk == 41207          // 'structured-item' 'as'
       || this.lk == 41551          // 'array' 'ascending'
       || this.lk == 41641          // 'json-item' 'ascending'
       || this.lk == 41670          // 'object' 'ascending'
       || this.lk == 41719          // 'structured-item' 'ascending'
       || this.lk == 42063          // 'array' 'at'
       || this.lk == 42153          // 'json-item' 'at'
       || this.lk == 42182          // 'object' 'at'
       || this.lk == 42231          // 'structured-item' 'at'
       || this.lk == 43599          // 'array' 'before'
       || this.lk == 43689          // 'json-item' 'before'
       || this.lk == 43718          // 'object' 'before'
       || this.lk == 43767          // 'structured-item' 'before'
       || this.lk == 45647          // 'array' 'case'
       || this.lk == 45737          // 'json-item' 'case'
       || this.lk == 45766          // 'object' 'case'
       || this.lk == 45815          // 'structured-item' 'case'
       || this.lk == 48719          // 'array' 'collation'
       || this.lk == 48809          // 'json-item' 'collation'
       || this.lk == 48838          // 'object' 'collation'
       || this.lk == 48887          // 'structured-item' 'collation'
       || this.lk == 51279          // 'array' 'contains'
       || this.lk == 51369          // 'json-item' 'contains'
       || this.lk == 51398          // 'object' 'contains'
       || this.lk == 51447          // 'structured-item' 'contains'
       || this.lk == 54351          // 'array' 'count'
       || this.lk == 54441          // 'json-item' 'count'
       || this.lk == 54470          // 'object' 'count'
       || this.lk == 54519          // 'structured-item' 'count'
       || this.lk == 56399          // 'array' 'default'
       || this.lk == 56489          // 'json-item' 'default'
       || this.lk == 56518          // 'object' 'default'
       || this.lk == 56567          // 'structured-item' 'default'
       || this.lk == 58447          // 'array' 'descending'
       || this.lk == 58537          // 'json-item' 'descending'
       || this.lk == 58566          // 'object' 'descending'
       || this.lk == 58615          // 'structured-item' 'descending'
       || this.lk == 61007          // 'array' 'div'
       || this.lk == 61097          // 'json-item' 'div'
       || this.lk == 61126          // 'object' 'div'
       || this.lk == 61175          // 'structured-item' 'div'
       || this.lk == 63055          // 'array' 'else'
       || this.lk == 63145          // 'json-item' 'else'
       || this.lk == 63174          // 'object' 'else'
       || this.lk == 63223          // 'structured-item' 'else'
       || this.lk == 63567          // 'array' 'empty'
       || this.lk == 63657          // 'json-item' 'empty'
       || this.lk == 63686          // 'object' 'empty'
       || this.lk == 63735          // 'structured-item' 'empty'
       || this.lk == 65103          // 'array' 'end'
       || this.lk == 65193          // 'json-item' 'end'
       || this.lk == 65222          // 'object' 'end'
       || this.lk == 65271          // 'structured-item' 'end'
       || this.lk == 66127          // 'array' 'eq'
       || this.lk == 66217          // 'json-item' 'eq'
       || this.lk == 66246          // 'object' 'eq'
       || this.lk == 66295          // 'structured-item' 'eq'
       || this.lk == 67663          // 'array' 'except'
       || this.lk == 67753          // 'json-item' 'except'
       || this.lk == 67782          // 'object' 'except'
       || this.lk == 67831          // 'structured-item' 'except'
       || this.lk == 68687          // 'array' 'external'
       || this.lk == 68777          // 'json-item' 'external'
       || this.lk == 68806          // 'object' 'external'
       || this.lk == 68855          // 'structured-item' 'external'
       || this.lk == 71247          // 'array' 'for'
       || this.lk == 71337          // 'json-item' 'for'
       || this.lk == 71366          // 'object' 'for'
       || this.lk == 71415          // 'structured-item' 'for'
       || this.lk == 75855          // 'array' 'ge'
       || this.lk == 75945          // 'json-item' 'ge'
       || this.lk == 75974          // 'object' 'ge'
       || this.lk == 76023          // 'structured-item' 'ge'
       || this.lk == 76879          // 'array' 'group'
       || this.lk == 76969          // 'json-item' 'group'
       || this.lk == 76998          // 'object' 'group'
       || this.lk == 77047          // 'structured-item' 'group'
       || this.lk == 77903          // 'array' 'gt'
       || this.lk == 77993          // 'json-item' 'gt'
       || this.lk == 78022          // 'object' 'gt'
       || this.lk == 78071          // 'structured-item' 'gt'
       || this.lk == 78415          // 'array' 'idiv'
       || this.lk == 78505          // 'json-item' 'idiv'
       || this.lk == 78534          // 'object' 'idiv'
       || this.lk == 78583          // 'structured-item' 'idiv'
       || this.lk == 79951          // 'array' 'in'
       || this.lk == 80041          // 'json-item' 'in'
       || this.lk == 80070          // 'object' 'in'
       || this.lk == 80119          // 'structured-item' 'in'
       || this.lk == 83023          // 'array' 'instance'
       || this.lk == 83113          // 'json-item' 'instance'
       || this.lk == 83142          // 'object' 'instance'
       || this.lk == 83191          // 'structured-item' 'instance'
       || this.lk == 84047          // 'array' 'intersect'
       || this.lk == 84137          // 'json-item' 'intersect'
       || this.lk == 84166          // 'object' 'intersect'
       || this.lk == 84215          // 'structured-item' 'intersect'
       || this.lk == 84559          // 'array' 'into'
       || this.lk == 84649          // 'json-item' 'into'
       || this.lk == 84678          // 'object' 'into'
       || this.lk == 84727          // 'structured-item' 'into'
       || this.lk == 85071          // 'array' 'is'
       || this.lk == 85161          // 'json-item' 'is'
       || this.lk == 85190          // 'object' 'is'
       || this.lk == 85239          // 'structured-item' 'is'
       || this.lk == 89679          // 'array' 'le'
       || this.lk == 89769          // 'json-item' 'le'
       || this.lk == 89798          // 'object' 'le'
       || this.lk == 89847          // 'structured-item' 'le'
       || this.lk == 90703          // 'array' 'let'
       || this.lk == 90793          // 'json-item' 'let'
       || this.lk == 90822          // 'object' 'let'
       || this.lk == 90871          // 'structured-item' 'let'
       || this.lk == 92751          // 'array' 'lt'
       || this.lk == 92841          // 'json-item' 'lt'
       || this.lk == 92870          // 'object' 'lt'
       || this.lk == 92919          // 'structured-item' 'lt'
       || this.lk == 93775          // 'array' 'mod'
       || this.lk == 93865          // 'json-item' 'mod'
       || this.lk == 93894          // 'object' 'mod'
       || this.lk == 93943          // 'structured-item' 'mod'
       || this.lk == 94287          // 'array' 'modify'
       || this.lk == 94377          // 'json-item' 'modify'
       || this.lk == 94406          // 'object' 'modify'
       || this.lk == 94455          // 'structured-item' 'modify'
       || this.lk == 96847          // 'array' 'ne'
       || this.lk == 96937          // 'json-item' 'ne'
       || this.lk == 96966          // 'object' 'ne'
       || this.lk == 97015          // 'structured-item' 'ne'
       || this.lk == 103503         // 'array' 'only'
       || this.lk == 103593         // 'json-item' 'only'
       || this.lk == 103622         // 'object' 'only'
       || this.lk == 103671         // 'structured-item' 'only'
       || this.lk == 104527         // 'array' 'or'
       || this.lk == 104617         // 'json-item' 'or'
       || this.lk == 104646         // 'object' 'or'
       || this.lk == 104695         // 'structured-item' 'or'
       || this.lk == 105039         // 'array' 'order'
       || this.lk == 105129         // 'json-item' 'order'
       || this.lk == 105158         // 'object' 'order'
       || this.lk == 105207         // 'structured-item' 'order'
       || this.lk == 107087         // 'array' 'paragraphs'
       || this.lk == 107177         // 'json-item' 'paragraphs'
       || this.lk == 107206         // 'object' 'paragraphs'
       || this.lk == 107255         // 'structured-item' 'paragraphs'
       || this.lk == 114767         // 'array' 'return'
       || this.lk == 114857         // 'json-item' 'return'
       || this.lk == 114886         // 'object' 'return'
       || this.lk == 114935         // 'structured-item' 'return'
       || this.lk == 116815         // 'array' 'satisfies'
       || this.lk == 116905         // 'json-item' 'satisfies'
       || this.lk == 116934         // 'object' 'satisfies'
       || this.lk == 116983         // 'structured-item' 'satisfies'
       || this.lk == 118863         // 'array' 'score'
       || this.lk == 118953         // 'json-item' 'score'
       || this.lk == 118982         // 'object' 'score'
       || this.lk == 119031         // 'structured-item' 'score'
       || this.lk == 121423         // 'array' 'sentences'
       || this.lk == 121513         // 'json-item' 'sentences'
       || this.lk == 121542         // 'object' 'sentences'
       || this.lk == 121591         // 'structured-item' 'sentences'
       || this.lk == 123471         // 'array' 'stable'
       || this.lk == 123561         // 'json-item' 'stable'
       || this.lk == 123590         // 'object' 'stable'
       || this.lk == 123639         // 'structured-item' 'stable'
       || this.lk == 123983         // 'array' 'start'
       || this.lk == 124073         // 'json-item' 'start'
       || this.lk == 124102         // 'object' 'start'
       || this.lk == 124151         // 'structured-item' 'start'
       || this.lk == 129103         // 'array' 'times'
       || this.lk == 129193         // 'json-item' 'times'
       || this.lk == 129222         // 'object' 'times'
       || this.lk == 129271         // 'structured-item' 'times'
       || this.lk == 129615         // 'array' 'to'
       || this.lk == 129705         // 'json-item' 'to'
       || this.lk == 129734         // 'object' 'to'
       || this.lk == 129783         // 'structured-item' 'to'
       || this.lk == 133199         // 'array' 'union'
       || this.lk == 133289         // 'json-item' 'union'
       || this.lk == 133318         // 'object' 'union'
       || this.lk == 133367         // 'structured-item' 'union'
       || this.lk == 139343         // 'array' 'where'
       || this.lk == 139433         // 'json-item' 'where'
       || this.lk == 139462         // 'object' 'where'
       || this.lk == 139511         // 'structured-item' 'where'
       || this.lk == 141391         // 'array' 'with'
       || this.lk == 141481         // 'json-item' 'with'
       || this.lk == 141510         // 'object' 'with'
       || this.lk == 141559         // 'structured-item' 'with'
       || this.lk == 142927         // 'array' 'words'
       || this.lk == 143017         // 'json-item' 'words'
       || this.lk == 143046         // 'object' 'words'
       || this.lk == 143095         // 'structured-item' 'words'
       || this.lk == 143951         // 'array' '{'
       || this.lk == 144041         // 'json-item' '{'
       || this.lk == 144070         // 'object' '{'
       || this.lk == 144119         // 'structured-item' '{'
       || this.lk == 145487         // 'array' '|'
       || this.lk == 145577         // 'json-item' '|'
       || this.lk == 145606         // 'object' '|'
       || this.lk == 145655         // 'structured-item' '|'
       || this.lk == 145999         // 'array' '||'
       || this.lk == 146089         // 'json-item' '||'
       || this.lk == 146118         // 'object' '||'
       || this.lk == 146167         // 'structured-item' '||'
       || this.lk == 146511         // 'array' '|}'
       || this.lk == 146601         // 'json-item' '|}'
       || this.lk == 146630         // 'object' '|}'
       || this.lk == 146679         // 'structured-item' '|}'
       || this.lk == 147023         // 'array' '}'
       || this.lk == 147113         // 'json-item' '}'
       || this.lk == 147142         // 'object' '}'
       || this.lk == 147191)        // 'structured-item' '}'
      {
        this.lk = this.memoized(6, this.e0);
        if (this.lk == 0)
        {
          var b0A = this.b0; var e0A = this.e0; var l1A = this.l1;
          var b1A = this.b1; var e1A = this.e1; var l2A = this.l2;
          var b2A = this.b2; var e2A = this.e2;
          try
          {
            this.try_AtomicOrUnionType();
            this.lk = -4;
          }
          catch (p4A)
          {
            try
            {
              this.b0 = b0A; this.e0 = e0A; this.l1 = l1A; if (this.l1 == 0) {this.end = e0A;} else {
              this.b1 = b1A; this.e1 = e1A; this.l2 = l2A; if (this.l2 == 0) {this.end = e1A;} else {
              this.b2 = b2A; this.e2 = e2A; this.end = e2A; }}
              this.try_JSONTest();
              this.lk = -6;
            }
            catch (p6A)
            {
              this.lk = -7;
            }
          }
          this.b0 = b0A; this.e0 = e0A; this.l1 = l1A; if (this.l1 == 0) {this.end = e0A;} else {
          this.b1 = b1A; this.e1 = e1A; this.l2 = l2A; if (this.l2 == 0) {this.end = e1A;} else {
          this.b2 = b2A; this.e2 = e2A; this.end = e2A; }}
          this.memoize(6, this.e0, this.lk);
        }
      }
      switch (this.lk)
      {
      case 18003:                   // 'attribute' '('
      case 18017:                   // 'comment' '('
      case 18041:                   // 'document-node' '('
      case 18042:                   // 'element' '('
      case 18108:                   // 'namespace-node' '('
      case 18114:                   // 'node' '('
      case 18140:                   // 'processing-instruction' '('
      case 18150:                   // 'schema-attribute' '('
      case 18151:                   // 'schema-element' '('
      case 18169:                   // 'text' '('
        this.parse_KindTest();
        break;
      case 18087:                   // 'item' '('
        this.shift(167);            // 'item'
        this.lookahead1W(22);       // S^WS | '(' | '(:'
        this.shift(35);             // '('
        this.lookahead1W(23);       // S^WS | '(:' | ')'
        this.shift(38);             // ')'
        break;
      case 33:                      // '%'
      case 18067:                   // 'function' '('
        this.parse_FunctionTest();
        break;
      case 35:                      // '('
        this.parse_ParenthesizedItemType();
        break;
      case -6:
      case 17999:                   // 'array' '('
      case 18089:                   // 'json-item' '('
      case 18118:                   // 'object' '('
        this.parse_JSONTest();
        break;
      case -7:
      case 18167:                   // 'structured-item' '('
        this.parse_StructuredItemTest();
        break;
      default:
        this.parse_AtomicOrUnionType();
      }
      this.eventHandler.endNonterminal("ItemType", this.e0);
    }

    private try_ItemType()
    {
      switch (this.l1)
      {
      case 79:                      // 'array'
      case 83:                      // 'attribute'
      case 97:                      // 'comment'
      case 121:                     // 'document-node'
      case 122:                     // 'element'
      case 147:                     // 'function'
      case 167:                     // 'item'
      case 169:                     // 'json-item'
      case 188:                     // 'namespace-node'
      case 194:                     // 'node'
      case 198:                     // 'object'
      case 220:                     // 'processing-instruction'
      case 230:                     // 'schema-attribute'
      case 231:                     // 'schema-element'
      case 247:                     // 'structured-item'
      case 249:                     // 'text'
        this.lookahead2W(232);      // S^WS | EOF | '!=' | '(' | '(:' | ')' | '*' | '*' | '+' | ',' | '-' | ':' | ':=' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' |
                                    // 'allowing' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'external' | 'for' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'in' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'score' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'union' | 'where' | 'with' | 'words' | '{' | '|' | '||' | '|}' | '}'
        break;
      default:
        this.lk = this.l1;
      }
      if (this.lk == 12879          // 'array' EOF
       || this.lk == 12969          // 'json-item' EOF
       || this.lk == 12998          // 'object' EOF
       || this.lk == 13047          // 'structured-item' EOF
       || this.lk == 13903          // 'array' '!='
       || this.lk == 13993          // 'json-item' '!='
       || this.lk == 14022          // 'object' '!='
       || this.lk == 14071          // 'structured-item' '!='
       || this.lk == 19535          // 'array' ')'
       || this.lk == 19625          // 'json-item' ')'
       || this.lk == 19654          // 'object' ')'
       || this.lk == 19703          // 'structured-item' ')'
       || this.lk == 20047          // 'array' '*'
       || this.lk == 20137          // 'json-item' '*'
       || this.lk == 20166          // 'object' '*'
       || this.lk == 20215          // 'structured-item' '*'
       || this.lk == 20559          // 'array' '*'
       || this.lk == 20649          // 'json-item' '*'
       || this.lk == 20678          // 'object' '*'
       || this.lk == 20727          // 'structured-item' '*'
       || this.lk == 21071          // 'array' '+'
       || this.lk == 21161          // 'json-item' '+'
       || this.lk == 21190          // 'object' '+'
       || this.lk == 21239          // 'structured-item' '+'
       || this.lk == 21583          // 'array' ','
       || this.lk == 21673          // 'json-item' ','
       || this.lk == 21702          // 'object' ','
       || this.lk == 21751          // 'structured-item' ','
       || this.lk == 22095          // 'array' '-'
       || this.lk == 22185          // 'json-item' '-'
       || this.lk == 22214          // 'object' '-'
       || this.lk == 22263          // 'structured-item' '-'
       || this.lk == 25679          // 'array' ':'
       || this.lk == 25769          // 'json-item' ':'
       || this.lk == 25798          // 'object' ':'
       || this.lk == 25847          // 'structured-item' ':'
       || this.lk == 27215          // 'array' ':='
       || this.lk == 27305          // 'json-item' ':='
       || this.lk == 27334          // 'object' ':='
       || this.lk == 27383          // 'structured-item' ':='
       || this.lk == 27727          // 'array' ';'
       || this.lk == 27817          // 'json-item' ';'
       || this.lk == 27846          // 'object' ';'
       || this.lk == 27895          // 'structured-item' ';'
       || this.lk == 28239          // 'array' '<'
       || this.lk == 28329          // 'json-item' '<'
       || this.lk == 28358          // 'object' '<'
       || this.lk == 28407          // 'structured-item' '<'
       || this.lk == 29775          // 'array' '<<'
       || this.lk == 29865          // 'json-item' '<<'
       || this.lk == 29894          // 'object' '<<'
       || this.lk == 29943          // 'structured-item' '<<'
       || this.lk == 30287          // 'array' '<='
       || this.lk == 30377          // 'json-item' '<='
       || this.lk == 30406          // 'object' '<='
       || this.lk == 30455          // 'structured-item' '<='
       || this.lk == 31311          // 'array' '='
       || this.lk == 31401          // 'json-item' '='
       || this.lk == 31430          // 'object' '='
       || this.lk == 31479          // 'structured-item' '='
       || this.lk == 31823          // 'array' '>'
       || this.lk == 31913          // 'json-item' '>'
       || this.lk == 31942          // 'object' '>'
       || this.lk == 31991          // 'structured-item' '>'
       || this.lk == 32335          // 'array' '>='
       || this.lk == 32425          // 'json-item' '>='
       || this.lk == 32454          // 'object' '>='
       || this.lk == 32503          // 'structured-item' '>='
       || this.lk == 32847          // 'array' '>>'
       || this.lk == 32937          // 'json-item' '>>'
       || this.lk == 32966          // 'object' '>>'
       || this.lk == 33015          // 'structured-item' '>>'
       || this.lk == 33359          // 'array' '?'
       || this.lk == 33449          // 'json-item' '?'
       || this.lk == 33478          // 'object' '?'
       || this.lk == 33527          // 'structured-item' '?'
       || this.lk == 35919          // 'array' ']'
       || this.lk == 36009          // 'json-item' ']'
       || this.lk == 36038          // 'object' ']'
       || this.lk == 36087          // 'structured-item' ']'
       || this.lk == 36431          // 'array' 'after'
       || this.lk == 36521          // 'json-item' 'after'
       || this.lk == 36550          // 'object' 'after'
       || this.lk == 36599          // 'structured-item' 'after'
       || this.lk == 37455          // 'array' 'allowing'
       || this.lk == 37545          // 'json-item' 'allowing'
       || this.lk == 37574          // 'object' 'allowing'
       || this.lk == 37623          // 'structured-item' 'allowing'
       || this.lk == 38991          // 'array' 'and'
       || this.lk == 39081          // 'json-item' 'and'
       || this.lk == 39110          // 'object' 'and'
       || this.lk == 39159          // 'structured-item' 'and'
       || this.lk == 41039          // 'array' 'as'
       || this.lk == 41129          // 'json-item' 'as'
       || this.lk == 41158          // 'object' 'as'
       || this.lk == 41207          // 'structured-item' 'as'
       || this.lk == 41551          // 'array' 'ascending'
       || this.lk == 41641          // 'json-item' 'ascending'
       || this.lk == 41670          // 'object' 'ascending'
       || this.lk == 41719          // 'structured-item' 'ascending'
       || this.lk == 42063          // 'array' 'at'
       || this.lk == 42153          // 'json-item' 'at'
       || this.lk == 42182          // 'object' 'at'
       || this.lk == 42231          // 'structured-item' 'at'
       || this.lk == 43599          // 'array' 'before'
       || this.lk == 43689          // 'json-item' 'before'
       || this.lk == 43718          // 'object' 'before'
       || this.lk == 43767          // 'structured-item' 'before'
       || this.lk == 45647          // 'array' 'case'
       || this.lk == 45737          // 'json-item' 'case'
       || this.lk == 45766          // 'object' 'case'
       || this.lk == 45815          // 'structured-item' 'case'
       || this.lk == 48719          // 'array' 'collation'
       || this.lk == 48809          // 'json-item' 'collation'
       || this.lk == 48838          // 'object' 'collation'
       || this.lk == 48887          // 'structured-item' 'collation'
       || this.lk == 51279          // 'array' 'contains'
       || this.lk == 51369          // 'json-item' 'contains'
       || this.lk == 51398          // 'object' 'contains'
       || this.lk == 51447          // 'structured-item' 'contains'
       || this.lk == 54351          // 'array' 'count'
       || this.lk == 54441          // 'json-item' 'count'
       || this.lk == 54470          // 'object' 'count'
       || this.lk == 54519          // 'structured-item' 'count'
       || this.lk == 56399          // 'array' 'default'
       || this.lk == 56489          // 'json-item' 'default'
       || this.lk == 56518          // 'object' 'default'
       || this.lk == 56567          // 'structured-item' 'default'
       || this.lk == 58447          // 'array' 'descending'
       || this.lk == 58537          // 'json-item' 'descending'
       || this.lk == 58566          // 'object' 'descending'
       || this.lk == 58615          // 'structured-item' 'descending'
       || this.lk == 61007          // 'array' 'div'
       || this.lk == 61097          // 'json-item' 'div'
       || this.lk == 61126          // 'object' 'div'
       || this.lk == 61175          // 'structured-item' 'div'
       || this.lk == 63055          // 'array' 'else'
       || this.lk == 63145          // 'json-item' 'else'
       || this.lk == 63174          // 'object' 'else'
       || this.lk == 63223          // 'structured-item' 'else'
       || this.lk == 63567          // 'array' 'empty'
       || this.lk == 63657          // 'json-item' 'empty'
       || this.lk == 63686          // 'object' 'empty'
       || this.lk == 63735          // 'structured-item' 'empty'
       || this.lk == 65103          // 'array' 'end'
       || this.lk == 65193          // 'json-item' 'end'
       || this.lk == 65222          // 'object' 'end'
       || this.lk == 65271          // 'structured-item' 'end'
       || this.lk == 66127          // 'array' 'eq'
       || this.lk == 66217          // 'json-item' 'eq'
       || this.lk == 66246          // 'object' 'eq'
       || this.lk == 66295          // 'structured-item' 'eq'
       || this.lk == 67663          // 'array' 'except'
       || this.lk == 67753          // 'json-item' 'except'
       || this.lk == 67782          // 'object' 'except'
       || this.lk == 67831          // 'structured-item' 'except'
       || this.lk == 68687          // 'array' 'external'
       || this.lk == 68777          // 'json-item' 'external'
       || this.lk == 68806          // 'object' 'external'
       || this.lk == 68855          // 'structured-item' 'external'
       || this.lk == 71247          // 'array' 'for'
       || this.lk == 71337          // 'json-item' 'for'
       || this.lk == 71366          // 'object' 'for'
       || this.lk == 71415          // 'structured-item' 'for'
       || this.lk == 75855          // 'array' 'ge'
       || this.lk == 75945          // 'json-item' 'ge'
       || this.lk == 75974          // 'object' 'ge'
       || this.lk == 76023          // 'structured-item' 'ge'
       || this.lk == 76879          // 'array' 'group'
       || this.lk == 76969          // 'json-item' 'group'
       || this.lk == 76998          // 'object' 'group'
       || this.lk == 77047          // 'structured-item' 'group'
       || this.lk == 77903          // 'array' 'gt'
       || this.lk == 77993          // 'json-item' 'gt'
       || this.lk == 78022          // 'object' 'gt'
       || this.lk == 78071          // 'structured-item' 'gt'
       || this.lk == 78415          // 'array' 'idiv'
       || this.lk == 78505          // 'json-item' 'idiv'
       || this.lk == 78534          // 'object' 'idiv'
       || this.lk == 78583          // 'structured-item' 'idiv'
       || this.lk == 79951          // 'array' 'in'
       || this.lk == 80041          // 'json-item' 'in'
       || this.lk == 80070          // 'object' 'in'
       || this.lk == 80119          // 'structured-item' 'in'
       || this.lk == 83023          // 'array' 'instance'
       || this.lk == 83113          // 'json-item' 'instance'
       || this.lk == 83142          // 'object' 'instance'
       || this.lk == 83191          // 'structured-item' 'instance'
       || this.lk == 84047          // 'array' 'intersect'
       || this.lk == 84137          // 'json-item' 'intersect'
       || this.lk == 84166          // 'object' 'intersect'
       || this.lk == 84215          // 'structured-item' 'intersect'
       || this.lk == 84559          // 'array' 'into'
       || this.lk == 84649          // 'json-item' 'into'
       || this.lk == 84678          // 'object' 'into'
       || this.lk == 84727          // 'structured-item' 'into'
       || this.lk == 85071          // 'array' 'is'
       || this.lk == 85161          // 'json-item' 'is'
       || this.lk == 85190          // 'object' 'is'
       || this.lk == 85239          // 'structured-item' 'is'
       || this.lk == 89679          // 'array' 'le'
       || this.lk == 89769          // 'json-item' 'le'
       || this.lk == 89798          // 'object' 'le'
       || this.lk == 89847          // 'structured-item' 'le'
       || this.lk == 90703          // 'array' 'let'
       || this.lk == 90793          // 'json-item' 'let'
       || this.lk == 90822          // 'object' 'let'
       || this.lk == 90871          // 'structured-item' 'let'
       || this.lk == 92751          // 'array' 'lt'
       || this.lk == 92841          // 'json-item' 'lt'
       || this.lk == 92870          // 'object' 'lt'
       || this.lk == 92919          // 'structured-item' 'lt'
       || this.lk == 93775          // 'array' 'mod'
       || this.lk == 93865          // 'json-item' 'mod'
       || this.lk == 93894          // 'object' 'mod'
       || this.lk == 93943          // 'structured-item' 'mod'
       || this.lk == 94287          // 'array' 'modify'
       || this.lk == 94377          // 'json-item' 'modify'
       || this.lk == 94406          // 'object' 'modify'
       || this.lk == 94455          // 'structured-item' 'modify'
       || this.lk == 96847          // 'array' 'ne'
       || this.lk == 96937          // 'json-item' 'ne'
       || this.lk == 96966          // 'object' 'ne'
       || this.lk == 97015          // 'structured-item' 'ne'
       || this.lk == 103503         // 'array' 'only'
       || this.lk == 103593         // 'json-item' 'only'
       || this.lk == 103622         // 'object' 'only'
       || this.lk == 103671         // 'structured-item' 'only'
       || this.lk == 104527         // 'array' 'or'
       || this.lk == 104617         // 'json-item' 'or'
       || this.lk == 104646         // 'object' 'or'
       || this.lk == 104695         // 'structured-item' 'or'
       || this.lk == 105039         // 'array' 'order'
       || this.lk == 105129         // 'json-item' 'order'
       || this.lk == 105158         // 'object' 'order'
       || this.lk == 105207         // 'structured-item' 'order'
       || this.lk == 107087         // 'array' 'paragraphs'
       || this.lk == 107177         // 'json-item' 'paragraphs'
       || this.lk == 107206         // 'object' 'paragraphs'
       || this.lk == 107255         // 'structured-item' 'paragraphs'
       || this.lk == 114767         // 'array' 'return'
       || this.lk == 114857         // 'json-item' 'return'
       || this.lk == 114886         // 'object' 'return'
       || this.lk == 114935         // 'structured-item' 'return'
       || this.lk == 116815         // 'array' 'satisfies'
       || this.lk == 116905         // 'json-item' 'satisfies'
       || this.lk == 116934         // 'object' 'satisfies'
       || this.lk == 116983         // 'structured-item' 'satisfies'
       || this.lk == 118863         // 'array' 'score'
       || this.lk == 118953         // 'json-item' 'score'
       || this.lk == 118982         // 'object' 'score'
       || this.lk == 119031         // 'structured-item' 'score'
       || this.lk == 121423         // 'array' 'sentences'
       || this.lk == 121513         // 'json-item' 'sentences'
       || this.lk == 121542         // 'object' 'sentences'
       || this.lk == 121591         // 'structured-item' 'sentences'
       || this.lk == 123471         // 'array' 'stable'
       || this.lk == 123561         // 'json-item' 'stable'
       || this.lk == 123590         // 'object' 'stable'
       || this.lk == 123639         // 'structured-item' 'stable'
       || this.lk == 123983         // 'array' 'start'
       || this.lk == 124073         // 'json-item' 'start'
       || this.lk == 124102         // 'object' 'start'
       || this.lk == 124151         // 'structured-item' 'start'
       || this.lk == 129103         // 'array' 'times'
       || this.lk == 129193         // 'json-item' 'times'
       || this.lk == 129222         // 'object' 'times'
       || this.lk == 129271         // 'structured-item' 'times'
       || this.lk == 129615         // 'array' 'to'
       || this.lk == 129705         // 'json-item' 'to'
       || this.lk == 129734         // 'object' 'to'
       || this.lk == 129783         // 'structured-item' 'to'
       || this.lk == 133199         // 'array' 'union'
       || this.lk == 133289         // 'json-item' 'union'
       || this.lk == 133318         // 'object' 'union'
       || this.lk == 133367         // 'structured-item' 'union'
       || this.lk == 139343         // 'array' 'where'
       || this.lk == 139433         // 'json-item' 'where'
       || this.lk == 139462         // 'object' 'where'
       || this.lk == 139511         // 'structured-item' 'where'
       || this.lk == 141391         // 'array' 'with'
       || this.lk == 141481         // 'json-item' 'with'
       || this.lk == 141510         // 'object' 'with'
       || this.lk == 141559         // 'structured-item' 'with'
       || this.lk == 142927         // 'array' 'words'
       || this.lk == 143017         // 'json-item' 'words'
       || this.lk == 143046         // 'object' 'words'
       || this.lk == 143095         // 'structured-item' 'words'
       || this.lk == 143951         // 'array' '{'
       || this.lk == 144041         // 'json-item' '{'
       || this.lk == 144070         // 'object' '{'
       || this.lk == 144119         // 'structured-item' '{'
       || this.lk == 145487         // 'array' '|'
       || this.lk == 145577         // 'json-item' '|'
       || this.lk == 145606         // 'object' '|'
       || this.lk == 145655         // 'structured-item' '|'
       || this.lk == 145999         // 'array' '||'
       || this.lk == 146089         // 'json-item' '||'
       || this.lk == 146118         // 'object' '||'
       || this.lk == 146167         // 'structured-item' '||'
       || this.lk == 146511         // 'array' '|}'
       || this.lk == 146601         // 'json-item' '|}'
       || this.lk == 146630         // 'object' '|}'
       || this.lk == 146679         // 'structured-item' '|}'
       || this.lk == 147023         // 'array' '}'
       || this.lk == 147113         // 'json-item' '}'
       || this.lk == 147142         // 'object' '}'
       || this.lk == 147191)        // 'structured-item' '}'
      {
        this.lk = this.memoized(6, this.e0);
        if (this.lk == 0)
        {
          var b0A = this.b0; var e0A = this.e0; var l1A = this.l1;
          var b1A = this.b1; var e1A = this.e1; var l2A = this.l2;
          var b2A = this.b2; var e2A = this.e2;
          try
          {
            this.try_AtomicOrUnionType();
            this.memoize(6, e0A, -4);
            this.lk = -8;
          }
          catch (p4A)
          {
            try
            {
              this.b0 = b0A; this.e0 = e0A; this.l1 = l1A; if (this.l1 == 0) {this.end = e0A;} else {
              this.b1 = b1A; this.e1 = e1A; this.l2 = l2A; if (this.l2 == 0) {this.end = e1A;} else {
              this.b2 = b2A; this.e2 = e2A; this.end = e2A; }}
              this.try_JSONTest();
              this.memoize(6, e0A, -6);
              this.lk = -8;
            }
            catch (p6A)
            {
              this.lk = -7;
              this.b0 = b0A; this.e0 = e0A; this.l1 = l1A; if (this.l1 == 0) {this.end = e0A;} else {
              this.b1 = b1A; this.e1 = e1A; this.l2 = l2A; if (this.l2 == 0) {this.end = e1A;} else {
              this.b2 = b2A; this.e2 = e2A; this.end = e2A; }}
              this.memoize(6, e0A, -7);
            }
          }
        }
      }
      switch (this.lk)
      {
      case 18003:                   // 'attribute' '('
      case 18017:                   // 'comment' '('
      case 18041:                   // 'document-node' '('
      case 18042:                   // 'element' '('
      case 18108:                   // 'namespace-node' '('
      case 18114:                   // 'node' '('
      case 18140:                   // 'processing-instruction' '('
      case 18150:                   // 'schema-attribute' '('
      case 18151:                   // 'schema-element' '('
      case 18169:                   // 'text' '('
        this.try_KindTest();
        break;
      case 18087:                   // 'item' '('
        this.shiftT(167);           // 'item'
        this.lookahead1W(22);       // S^WS | '(' | '(:'
        this.shiftT(35);            // '('
        this.lookahead1W(23);       // S^WS | '(:' | ')'
        this.shiftT(38);            // ')'
        break;
      case 33:                      // '%'
      case 18067:                   // 'function' '('
        this.try_FunctionTest();
        break;
      case 35:                      // '('
        this.try_ParenthesizedItemType();
        break;
      case -6:
      case 17999:                   // 'array' '('
      case 18089:                   // 'json-item' '('
      case 18118:                   // 'object' '('
        this.try_JSONTest();
        break;
      case -7:
      case 18167:                   // 'structured-item' '('
        this.try_StructuredItemTest();
        break;
      case -8:
        break;
      default:
        this.try_AtomicOrUnionType();
      }
    }

    private parse_JSONTest()
    {
      this.eventHandler.startNonterminal("JSONTest", this.e0);
      switch (this.l1)
      {
      case 169:                     // 'json-item'
        this.parse_JSONItemTest();
        break;
      case 198:                     // 'object'
        this.parse_JSONObjectTest();
        break;
      default:
        this.parse_JSONArrayTest();
      }
      this.eventHandler.endNonterminal("JSONTest", this.e0);
    }

    private try_JSONTest()
    {
      switch (this.l1)
      {
      case 169:                     // 'json-item'
        this.try_JSONItemTest();
        break;
      case 198:                     // 'object'
        this.try_JSONObjectTest();
        break;
      default:
        this.try_JSONArrayTest();
      }
    }

    private parse_StructuredItemTest()
    {
      this.eventHandler.startNonterminal("StructuredItemTest", this.e0);
      this.shift(247);              // 'structured-item'
      this.lookahead1W(232);        // S^WS | EOF | '!=' | '(' | '(:' | ')' | '*' | '*' | '+' | ',' | '-' | ':' | ':=' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' |
                                    // 'allowing' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'external' | 'for' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'in' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'score' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'union' | 'where' | 'with' | 'words' | '{' | '|' | '||' | '|}' | '}'
      if (this.l1 == 35)            // '('
      {
        this.shift(35);             // '('
        this.lookahead1W(23);       // S^WS | '(:' | ')'
        this.shift(38);             // ')'
      }
      this.eventHandler.endNonterminal("StructuredItemTest", this.e0);
    }

    private try_StructuredItemTest()
    {
      this.shiftT(247);             // 'structured-item'
      this.lookahead1W(232);        // S^WS | EOF | '!=' | '(' | '(:' | ')' | '*' | '*' | '+' | ',' | '-' | ':' | ':=' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' |
                                    // 'allowing' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'external' | 'for' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'in' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'score' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'union' | 'where' | 'with' | 'words' | '{' | '|' | '||' | '|}' | '}'
      if (this.l1 == 35)            // '('
      {
        this.shiftT(35);            // '('
        this.lookahead1W(23);       // S^WS | '(:' | ')'
        this.shiftT(38);            // ')'
      }
    }

    private parse_JSONItemTest()
    {
      this.eventHandler.startNonterminal("JSONItemTest", this.e0);
      this.shift(169);              // 'json-item'
      this.lookahead1W(232);        // S^WS | EOF | '!=' | '(' | '(:' | ')' | '*' | '*' | '+' | ',' | '-' | ':' | ':=' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' |
                                    // 'allowing' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'external' | 'for' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'in' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'score' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'union' | 'where' | 'with' | 'words' | '{' | '|' | '||' | '|}' | '}'
      if (this.l1 == 35)            // '('
      {
        this.shift(35);             // '('
        this.lookahead1W(23);       // S^WS | '(:' | ')'
        this.shift(38);             // ')'
      }
      this.eventHandler.endNonterminal("JSONItemTest", this.e0);
    }

    private try_JSONItemTest()
    {
      this.shiftT(169);             // 'json-item'
      this.lookahead1W(232);        // S^WS | EOF | '!=' | '(' | '(:' | ')' | '*' | '*' | '+' | ',' | '-' | ':' | ':=' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' |
                                    // 'allowing' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'external' | 'for' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'in' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'score' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'union' | 'where' | 'with' | 'words' | '{' | '|' | '||' | '|}' | '}'
      if (this.l1 == 35)            // '('
      {
        this.shiftT(35);            // '('
        this.lookahead1W(23);       // S^WS | '(:' | ')'
        this.shiftT(38);            // ')'
      }
    }

    private parse_JSONObjectTest()
    {
      this.eventHandler.startNonterminal("JSONObjectTest", this.e0);
      this.shift(198);              // 'object'
      this.lookahead1W(232);        // S^WS | EOF | '!=' | '(' | '(:' | ')' | '*' | '*' | '+' | ',' | '-' | ':' | ':=' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' |
                                    // 'allowing' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'external' | 'for' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'in' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'score' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'union' | 'where' | 'with' | 'words' | '{' | '|' | '||' | '|}' | '}'
      if (this.l1 == 35)            // '('
      {
        this.shift(35);             // '('
        this.lookahead1W(23);       // S^WS | '(:' | ')'
        this.shift(38);             // ')'
      }
      this.eventHandler.endNonterminal("JSONObjectTest", this.e0);
    }

    private try_JSONObjectTest()
    {
      this.shiftT(198);             // 'object'
      this.lookahead1W(232);        // S^WS | EOF | '!=' | '(' | '(:' | ')' | '*' | '*' | '+' | ',' | '-' | ':' | ':=' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' |
                                    // 'allowing' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'external' | 'for' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'in' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'score' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'union' | 'where' | 'with' | 'words' | '{' | '|' | '||' | '|}' | '}'
      if (this.l1 == 35)            // '('
      {
        this.shiftT(35);            // '('
        this.lookahead1W(23);       // S^WS | '(:' | ')'
        this.shiftT(38);            // ')'
      }
    }

    private parse_JSONArrayTest()
    {
      this.eventHandler.startNonterminal("JSONArrayTest", this.e0);
      this.shift(79);               // 'array'
      this.lookahead1W(232);        // S^WS | EOF | '!=' | '(' | '(:' | ')' | '*' | '*' | '+' | ',' | '-' | ':' | ':=' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' |
                                    // 'allowing' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'external' | 'for' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'in' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'score' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'union' | 'where' | 'with' | 'words' | '{' | '|' | '||' | '|}' | '}'
      if (this.l1 == 35)            // '('
      {
        this.shift(35);             // '('
        this.lookahead1W(23);       // S^WS | '(:' | ')'
        this.shift(38);             // ')'
      }
      this.eventHandler.endNonterminal("JSONArrayTest", this.e0);
    }

    private try_JSONArrayTest()
    {
      this.shiftT(79);              // 'array'
      this.lookahead1W(232);        // S^WS | EOF | '!=' | '(' | '(:' | ')' | '*' | '*' | '+' | ',' | '-' | ':' | ':=' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' |
                                    // 'allowing' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'external' | 'for' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'in' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'score' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'union' | 'where' | 'with' | 'words' | '{' | '|' | '||' | '|}' | '}'
      if (this.l1 == 35)            // '('
      {
        this.shiftT(35);            // '('
        this.lookahead1W(23);       // S^WS | '(:' | ')'
        this.shiftT(38);            // ')'
      }
    }

    private parse_AtomicOrUnionType()
    {
      this.eventHandler.startNonterminal("AtomicOrUnionType", this.e0);
      this.parse_EQName();
      this.eventHandler.endNonterminal("AtomicOrUnionType", this.e0);
    }

    private try_AtomicOrUnionType()
    {
      this.try_EQName();
    }

    private parse_KindTest()
    {
      this.eventHandler.startNonterminal("KindTest", this.e0);
      switch (this.l1)
      {
      case 121:                     // 'document-node'
        this.parse_DocumentTest();
        break;
      case 122:                     // 'element'
        this.parse_ElementTest();
        break;
      case 83:                      // 'attribute'
        this.parse_AttributeTest();
        break;
      case 231:                     // 'schema-element'
        this.parse_SchemaElementTest();
        break;
      case 230:                     // 'schema-attribute'
        this.parse_SchemaAttributeTest();
        break;
      case 220:                     // 'processing-instruction'
        this.parse_PITest();
        break;
      case 97:                      // 'comment'
        this.parse_CommentTest();
        break;
      case 249:                     // 'text'
        this.parse_TextTest();
        break;
      case 188:                     // 'namespace-node'
        this.parse_NamespaceNodeTest();
        break;
      default:
        this.parse_AnyKindTest();
      }
      this.eventHandler.endNonterminal("KindTest", this.e0);
    }

    private try_KindTest()
    {
      switch (this.l1)
      {
      case 121:                     // 'document-node'
        this.try_DocumentTest();
        break;
      case 122:                     // 'element'
        this.try_ElementTest();
        break;
      case 83:                      // 'attribute'
        this.try_AttributeTest();
        break;
      case 231:                     // 'schema-element'
        this.try_SchemaElementTest();
        break;
      case 230:                     // 'schema-attribute'
        this.try_SchemaAttributeTest();
        break;
      case 220:                     // 'processing-instruction'
        this.try_PITest();
        break;
      case 97:                      // 'comment'
        this.try_CommentTest();
        break;
      case 249:                     // 'text'
        this.try_TextTest();
        break;
      case 188:                     // 'namespace-node'
        this.try_NamespaceNodeTest();
        break;
      default:
        this.try_AnyKindTest();
      }
    }

    private parse_AnyKindTest()
    {
      this.eventHandler.startNonterminal("AnyKindTest", this.e0);
      this.shift(194);              // 'node'
      this.lookahead1W(22);         // S^WS | '(' | '(:'
      this.shift(35);               // '('
      this.lookahead1W(23);         // S^WS | '(:' | ')'
      this.shift(38);               // ')'
      this.eventHandler.endNonterminal("AnyKindTest", this.e0);
    }

    private try_AnyKindTest()
    {
      this.shiftT(194);             // 'node'
      this.lookahead1W(22);         // S^WS | '(' | '(:'
      this.shiftT(35);              // '('
      this.lookahead1W(23);         // S^WS | '(:' | ')'
      this.shiftT(38);              // ')'
    }

    private parse_DocumentTest()
    {
      this.eventHandler.startNonterminal("DocumentTest", this.e0);
      this.shift(121);              // 'document-node'
      this.lookahead1W(22);         // S^WS | '(' | '(:'
      this.shift(35);               // '('
      this.lookahead1W(154);        // S^WS | '(:' | ')' | 'element' | 'schema-element'
      if (this.l1 != 38)            // ')'
      {
        switch (this.l1)
        {
        case 122:                   // 'element'
          this.whitespace();
          this.parse_ElementTest();
          break;
        default:
          this.whitespace();
          this.parse_SchemaElementTest();
        }
      }
      this.lookahead1W(23);         // S^WS | '(:' | ')'
      this.shift(38);               // ')'
      this.eventHandler.endNonterminal("DocumentTest", this.e0);
    }

    private try_DocumentTest()
    {
      this.shiftT(121);             // 'document-node'
      this.lookahead1W(22);         // S^WS | '(' | '(:'
      this.shiftT(35);              // '('
      this.lookahead1W(154);        // S^WS | '(:' | ')' | 'element' | 'schema-element'
      if (this.l1 != 38)            // ')'
      {
        switch (this.l1)
        {
        case 122:                   // 'element'
          this.try_ElementTest();
          break;
        default:
          this.try_SchemaElementTest();
        }
      }
      this.lookahead1W(23);         // S^WS | '(:' | ')'
      this.shiftT(38);              // ')'
    }

    private parse_TextTest()
    {
      this.eventHandler.startNonterminal("TextTest", this.e0);
      this.shift(249);              // 'text'
      this.lookahead1W(22);         // S^WS | '(' | '(:'
      this.shift(35);               // '('
      this.lookahead1W(23);         // S^WS | '(:' | ')'
      this.shift(38);               // ')'
      this.eventHandler.endNonterminal("TextTest", this.e0);
    }

    private try_TextTest()
    {
      this.shiftT(249);             // 'text'
      this.lookahead1W(22);         // S^WS | '(' | '(:'
      this.shiftT(35);              // '('
      this.lookahead1W(23);         // S^WS | '(:' | ')'
      this.shiftT(38);              // ')'
    }

    private parse_CommentTest()
    {
      this.eventHandler.startNonterminal("CommentTest", this.e0);
      this.shift(97);               // 'comment'
      this.lookahead1W(22);         // S^WS | '(' | '(:'
      this.shift(35);               // '('
      this.lookahead1W(23);         // S^WS | '(:' | ')'
      this.shift(38);               // ')'
      this.eventHandler.endNonterminal("CommentTest", this.e0);
    }

    private try_CommentTest()
    {
      this.shiftT(97);              // 'comment'
      this.lookahead1W(22);         // S^WS | '(' | '(:'
      this.shiftT(35);              // '('
      this.lookahead1W(23);         // S^WS | '(:' | ')'
      this.shiftT(38);              // ')'
    }

    private parse_NamespaceNodeTest()
    {
      this.eventHandler.startNonterminal("NamespaceNodeTest", this.e0);
      this.shift(188);              // 'namespace-node'
      this.lookahead1W(22);         // S^WS | '(' | '(:'
      this.shift(35);               // '('
      this.lookahead1W(23);         // S^WS | '(:' | ')'
      this.shift(38);               // ')'
      this.eventHandler.endNonterminal("NamespaceNodeTest", this.e0);
    }

    private try_NamespaceNodeTest()
    {
      this.shiftT(188);             // 'namespace-node'
      this.lookahead1W(22);         // S^WS | '(' | '(:'
      this.shiftT(35);              // '('
      this.lookahead1W(23);         // S^WS | '(:' | ')'
      this.shiftT(38);              // ')'
    }

    private parse_PITest()
    {
      this.eventHandler.startNonterminal("PITest", this.e0);
      this.shift(220);              // 'processing-instruction'
      this.lookahead1W(22);         // S^WS | '(' | '(:'
      this.shift(35);               // '('
      this.lookahead1W(243);        // StringLiteral | NCName^Token | S^WS | '(:' | ')' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with'
      if (this.l1 != 38)            // ')'
      {
        switch (this.l1)
        {
        case 11:                    // StringLiteral
          this.shift(11);           // StringLiteral
          break;
        default:
          this.whitespace();
          this.parse_NCName();
        }
      }
      this.lookahead1W(23);         // S^WS | '(:' | ')'
      this.shift(38);               // ')'
      this.eventHandler.endNonterminal("PITest", this.e0);
    }

    private try_PITest()
    {
      this.shiftT(220);             // 'processing-instruction'
      this.lookahead1W(22);         // S^WS | '(' | '(:'
      this.shiftT(35);              // '('
      this.lookahead1W(243);        // StringLiteral | NCName^Token | S^WS | '(:' | ')' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with'
      if (this.l1 != 38)            // ')'
      {
        switch (this.l1)
        {
        case 11:                    // StringLiteral
          this.shiftT(11);          // StringLiteral
          break;
        default:
          this.try_NCName();
        }
      }
      this.lookahead1W(23);         // S^WS | '(:' | ')'
      this.shiftT(38);              // ')'
    }

    private parse_AttributeTest()
    {
      this.eventHandler.startNonterminal("AttributeTest", this.e0);
      this.shift(83);               // 'attribute'
      this.lookahead1W(22);         // S^WS | '(' | '(:'
      this.shift(35);               // '('
      this.lookahead1W(254);        // EQName^Token | S^WS | '(:' | ')' | '*' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      if (this.l1 != 38)            // ')'
      {
        this.whitespace();
        this.parse_AttribNameOrWildcard();
        this.lookahead1W(105);      // S^WS | '(:' | ')' | ','
        if (this.l1 == 42)          // ','
        {
          this.shift(42);           // ','
          this.lookahead1W(245);    // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
          this.whitespace();
          this.parse_TypeName();
        }
      }
      this.lookahead1W(23);         // S^WS | '(:' | ')'
      this.shift(38);               // ')'
      this.eventHandler.endNonterminal("AttributeTest", this.e0);
    }

    private try_AttributeTest()
    {
      this.shiftT(83);              // 'attribute'
      this.lookahead1W(22);         // S^WS | '(' | '(:'
      this.shiftT(35);              // '('
      this.lookahead1W(254);        // EQName^Token | S^WS | '(:' | ')' | '*' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      if (this.l1 != 38)            // ')'
      {
        this.try_AttribNameOrWildcard();
        this.lookahead1W(105);      // S^WS | '(:' | ')' | ','
        if (this.l1 == 42)          // ','
        {
          this.shiftT(42);          // ','
          this.lookahead1W(245);    // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
          this.try_TypeName();
        }
      }
      this.lookahead1W(23);         // S^WS | '(:' | ')'
      this.shiftT(38);              // ')'
    }

    private parse_AttribNameOrWildcard()
    {
      this.eventHandler.startNonterminal("AttribNameOrWildcard", this.e0);
      switch (this.l1)
      {
      case 39:                      // '*'
        this.shift(39);             // '*'
        break;
      default:
        this.parse_AttributeName();
      }
      this.eventHandler.endNonterminal("AttribNameOrWildcard", this.e0);
    }

    private try_AttribNameOrWildcard()
    {
      switch (this.l1)
      {
      case 39:                      // '*'
        this.shiftT(39);            // '*'
        break;
      default:
        this.try_AttributeName();
      }
    }

    private parse_SchemaAttributeTest()
    {
      this.eventHandler.startNonterminal("SchemaAttributeTest", this.e0);
      this.shift(230);              // 'schema-attribute'
      this.lookahead1W(22);         // S^WS | '(' | '(:'
      this.shift(35);               // '('
      this.lookahead1W(245);        // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      this.whitespace();
      this.parse_AttributeDeclaration();
      this.lookahead1W(23);         // S^WS | '(:' | ')'
      this.shift(38);               // ')'
      this.eventHandler.endNonterminal("SchemaAttributeTest", this.e0);
    }

    private try_SchemaAttributeTest()
    {
      this.shiftT(230);             // 'schema-attribute'
      this.lookahead1W(22);         // S^WS | '(' | '(:'
      this.shiftT(35);              // '('
      this.lookahead1W(245);        // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      this.try_AttributeDeclaration();
      this.lookahead1W(23);         // S^WS | '(:' | ')'
      this.shiftT(38);              // ')'
    }

    private parse_AttributeDeclaration()
    {
      this.eventHandler.startNonterminal("AttributeDeclaration", this.e0);
      this.parse_AttributeName();
      this.eventHandler.endNonterminal("AttributeDeclaration", this.e0);
    }

    private try_AttributeDeclaration()
    {
      this.try_AttributeName();
    }

    private parse_ElementTest()
    {
      this.eventHandler.startNonterminal("ElementTest", this.e0);
      this.shift(122);              // 'element'
      this.lookahead1W(22);         // S^WS | '(' | '(:'
      this.shift(35);               // '('
      this.lookahead1W(254);        // EQName^Token | S^WS | '(:' | ')' | '*' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      if (this.l1 != 38)            // ')'
      {
        this.whitespace();
        this.parse_ElementNameOrWildcard();
        this.lookahead1W(105);      // S^WS | '(:' | ')' | ','
        if (this.l1 == 42)          // ','
        {
          this.shift(42);           // ','
          this.lookahead1W(245);    // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
          this.whitespace();
          this.parse_TypeName();
          this.lookahead1W(106);    // S^WS | '(:' | ')' | '?'
          if (this.l1 == 65)        // '?'
          {
            this.shift(65);         // '?'
          }
        }
      }
      this.lookahead1W(23);         // S^WS | '(:' | ')'
      this.shift(38);               // ')'
      this.eventHandler.endNonterminal("ElementTest", this.e0);
    }

    private try_ElementTest()
    {
      this.shiftT(122);             // 'element'
      this.lookahead1W(22);         // S^WS | '(' | '(:'
      this.shiftT(35);              // '('
      this.lookahead1W(254);        // EQName^Token | S^WS | '(:' | ')' | '*' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      if (this.l1 != 38)            // ')'
      {
        this.try_ElementNameOrWildcard();
        this.lookahead1W(105);      // S^WS | '(:' | ')' | ','
        if (this.l1 == 42)          // ','
        {
          this.shiftT(42);          // ','
          this.lookahead1W(245);    // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
          this.try_TypeName();
          this.lookahead1W(106);    // S^WS | '(:' | ')' | '?'
          if (this.l1 == 65)        // '?'
          {
            this.shiftT(65);        // '?'
          }
        }
      }
      this.lookahead1W(23);         // S^WS | '(:' | ')'
      this.shiftT(38);              // ')'
    }

    private parse_ElementNameOrWildcard()
    {
      this.eventHandler.startNonterminal("ElementNameOrWildcard", this.e0);
      switch (this.l1)
      {
      case 39:                      // '*'
        this.shift(39);             // '*'
        break;
      default:
        this.parse_ElementName();
      }
      this.eventHandler.endNonterminal("ElementNameOrWildcard", this.e0);
    }

    private try_ElementNameOrWildcard()
    {
      switch (this.l1)
      {
      case 39:                      // '*'
        this.shiftT(39);            // '*'
        break;
      default:
        this.try_ElementName();
      }
    }

    private parse_SchemaElementTest()
    {
      this.eventHandler.startNonterminal("SchemaElementTest", this.e0);
      this.shift(231);              // 'schema-element'
      this.lookahead1W(22);         // S^WS | '(' | '(:'
      this.shift(35);               // '('
      this.lookahead1W(245);        // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      this.whitespace();
      this.parse_ElementDeclaration();
      this.lookahead1W(23);         // S^WS | '(:' | ')'
      this.shift(38);               // ')'
      this.eventHandler.endNonterminal("SchemaElementTest", this.e0);
    }

    private try_SchemaElementTest()
    {
      this.shiftT(231);             // 'schema-element'
      this.lookahead1W(22);         // S^WS | '(' | '(:'
      this.shiftT(35);              // '('
      this.lookahead1W(245);        // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      this.try_ElementDeclaration();
      this.lookahead1W(23);         // S^WS | '(:' | ')'
      this.shiftT(38);              // ')'
    }

    private parse_ElementDeclaration()
    {
      this.eventHandler.startNonterminal("ElementDeclaration", this.e0);
      this.parse_ElementName();
      this.eventHandler.endNonterminal("ElementDeclaration", this.e0);
    }

    private try_ElementDeclaration()
    {
      this.try_ElementName();
    }

    private parse_AttributeName()
    {
      this.eventHandler.startNonterminal("AttributeName", this.e0);
      this.parse_EQName();
      this.eventHandler.endNonterminal("AttributeName", this.e0);
    }

    private try_AttributeName()
    {
      this.try_EQName();
    }

    private parse_ElementName()
    {
      this.eventHandler.startNonterminal("ElementName", this.e0);
      this.parse_EQName();
      this.eventHandler.endNonterminal("ElementName", this.e0);
    }

    private try_ElementName()
    {
      this.try_EQName();
    }

    private parse_SimpleTypeName()
    {
      this.eventHandler.startNonterminal("SimpleTypeName", this.e0);
      this.parse_TypeName();
      this.eventHandler.endNonterminal("SimpleTypeName", this.e0);
    }

    private try_SimpleTypeName()
    {
      this.try_TypeName();
    }

    private parse_TypeName()
    {
      this.eventHandler.startNonterminal("TypeName", this.e0);
      this.parse_EQName();
      this.eventHandler.endNonterminal("TypeName", this.e0);
    }

    private try_TypeName()
    {
      this.try_EQName();
    }

    private parse_FunctionTest()
    {
      this.eventHandler.startNonterminal("FunctionTest", this.e0);
      for (;;)
      {
        this.lookahead1W(101);      // S^WS | '%' | '(:' | 'function'
        if (this.l1 != 33)          // '%'
        {
          break;
        }
        this.whitespace();
        this.parse_Annotation();
      }
      switch (this.l1)
      {
      case 147:                     // 'function'
        this.lookahead2W(22);       // S^WS | '(' | '(:'
        break;
      default:
        this.lk = this.l1;
      }
      this.lk = this.memoized(7, this.e0);
      if (this.lk == 0)
      {
        var b0A = this.b0; var e0A = this.e0; var l1A = this.l1;
        var b1A = this.b1; var e1A = this.e1; var l2A = this.l2;
        var b2A = this.b2; var e2A = this.e2;
        try
        {
          this.try_AnyFunctionTest();
          this.lk = -1;
        }
        catch (p1A)
        {
          this.lk = -2;
        }
        this.b0 = b0A; this.e0 = e0A; this.l1 = l1A; if (this.l1 == 0) {this.end = e0A;} else {
        this.b1 = b1A; this.e1 = e1A; this.l2 = l2A; if (this.l2 == 0) {this.end = e1A;} else {
        this.b2 = b2A; this.e2 = e2A; this.end = e2A; }}
        this.memoize(7, this.e0, this.lk);
      }
      switch (this.lk)
      {
      case -1:
        this.whitespace();
        this.parse_AnyFunctionTest();
        break;
      default:
        this.whitespace();
        this.parse_TypedFunctionTest();
      }
      this.eventHandler.endNonterminal("FunctionTest", this.e0);
    }

    private try_FunctionTest()
    {
      for (;;)
      {
        this.lookahead1W(101);      // S^WS | '%' | '(:' | 'function'
        if (this.l1 != 33)          // '%'
        {
          break;
        }
        this.try_Annotation();
      }
      switch (this.l1)
      {
      case 147:                     // 'function'
        this.lookahead2W(22);       // S^WS | '(' | '(:'
        break;
      default:
        this.lk = this.l1;
      }
      this.lk = this.memoized(7, this.e0);
      if (this.lk == 0)
      {
        var b0A = this.b0; var e0A = this.e0; var l1A = this.l1;
        var b1A = this.b1; var e1A = this.e1; var l2A = this.l2;
        var b2A = this.b2; var e2A = this.e2;
        try
        {
          this.try_AnyFunctionTest();
          this.memoize(7, e0A, -1);
          this.lk = -3;
        }
        catch (p1A)
        {
          this.lk = -2;
          this.b0 = b0A; this.e0 = e0A; this.l1 = l1A; if (this.l1 == 0) {this.end = e0A;} else {
          this.b1 = b1A; this.e1 = e1A; this.l2 = l2A; if (this.l2 == 0) {this.end = e1A;} else {
          this.b2 = b2A; this.e2 = e2A; this.end = e2A; }}
          this.memoize(7, e0A, -2);
        }
      }
      switch (this.lk)
      {
      case -1:
        this.try_AnyFunctionTest();
        break;
      case -3:
        break;
      default:
        this.try_TypedFunctionTest();
      }
    }

    private parse_AnyFunctionTest()
    {
      this.eventHandler.startNonterminal("AnyFunctionTest", this.e0);
      this.shift(147);              // 'function'
      this.lookahead1W(22);         // S^WS | '(' | '(:'
      this.shift(35);               // '('
      this.lookahead1W(24);         // S^WS | '(:' | '*'
      this.shift(39);               // '*'
      this.lookahead1W(23);         // S^WS | '(:' | ')'
      this.shift(38);               // ')'
      this.eventHandler.endNonterminal("AnyFunctionTest", this.e0);
    }

    private try_AnyFunctionTest()
    {
      this.shiftT(147);             // 'function'
      this.lookahead1W(22);         // S^WS | '(' | '(:'
      this.shiftT(35);              // '('
      this.lookahead1W(24);         // S^WS | '(:' | '*'
      this.shiftT(39);              // '*'
      this.lookahead1W(23);         // S^WS | '(:' | ')'
      this.shiftT(38);              // ')'
    }

    private parse_TypedFunctionTest()
    {
      this.eventHandler.startNonterminal("TypedFunctionTest", this.e0);
      this.shift(147);              // 'function'
      this.lookahead1W(22);         // S^WS | '(' | '(:'
      this.shift(35);               // '('
      this.lookahead1W(258);        // EQName^Token | S^WS | '%' | '(' | '(:' | ')' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      if (this.l1 != 38)            // ')'
      {
        this.whitespace();
        this.parse_SequenceType();
        for (;;)
        {
          this.lookahead1W(105);    // S^WS | '(:' | ')' | ','
          if (this.l1 != 42)        // ','
          {
            break;
          }
          this.shift(42);           // ','
          this.lookahead1W(253);    // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
          this.whitespace();
          this.parse_SequenceType();
        }
      }
      this.shift(38);               // ')'
      this.lookahead1W(33);         // S^WS | '(:' | 'as'
      this.shift(80);               // 'as'
      this.lookahead1W(253);        // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      this.whitespace();
      this.parse_SequenceType();
      this.eventHandler.endNonterminal("TypedFunctionTest", this.e0);
    }

    private try_TypedFunctionTest()
    {
      this.shiftT(147);             // 'function'
      this.lookahead1W(22);         // S^WS | '(' | '(:'
      this.shiftT(35);              // '('
      this.lookahead1W(258);        // EQName^Token | S^WS | '%' | '(' | '(:' | ')' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      if (this.l1 != 38)            // ')'
      {
        this.try_SequenceType();
        for (;;)
        {
          this.lookahead1W(105);    // S^WS | '(:' | ')' | ','
          if (this.l1 != 42)        // ','
          {
            break;
          }
          this.shiftT(42);          // ','
          this.lookahead1W(253);    // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
          this.try_SequenceType();
        }
      }
      this.shiftT(38);              // ')'
      this.lookahead1W(33);         // S^WS | '(:' | 'as'
      this.shiftT(80);              // 'as'
      this.lookahead1W(253);        // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      this.try_SequenceType();
    }

    private parse_ParenthesizedItemType()
    {
      this.eventHandler.startNonterminal("ParenthesizedItemType", this.e0);
      this.shift(35);               // '('
      this.lookahead1W(253);        // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      this.whitespace();
      this.parse_ItemType();
      this.lookahead1W(23);         // S^WS | '(:' | ')'
      this.shift(38);               // ')'
      this.eventHandler.endNonterminal("ParenthesizedItemType", this.e0);
    }

    private try_ParenthesizedItemType()
    {
      this.shiftT(35);              // '('
      this.lookahead1W(253);        // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      this.try_ItemType();
      this.lookahead1W(23);         // S^WS | '(:' | ')'
      this.shiftT(38);              // ')'
    }

    private parse_RevalidationDecl()
    {
      this.eventHandler.startNonterminal("RevalidationDecl", this.e0);
      this.shift(109);              // 'declare'
      this.lookahead1W(75);         // S^WS | '(:' | 'revalidation'
      this.shift(226);              // 'revalidation'
      this.lookahead1W(162);        // S^WS | '(:' | 'lax' | 'skip' | 'strict'
      switch (this.l1)
      {
      case 245:                     // 'strict'
        this.shift(245);            // 'strict'
        break;
      case 174:                     // 'lax'
        this.shift(174);            // 'lax'
        break;
      default:
        this.shift(238);            // 'skip'
      }
      this.eventHandler.endNonterminal("RevalidationDecl", this.e0);
    }

    private parse_InsertExprTargetChoice()
    {
      this.eventHandler.startNonterminal("InsertExprTargetChoice", this.e0);
      switch (this.l1)
      {
      case 71:                      // 'after'
        this.shift(71);             // 'after'
        break;
      case 85:                      // 'before'
        this.shift(85);             // 'before'
        break;
      default:
        if (this.l1 == 80)          // 'as'
        {
          this.shift(80);           // 'as'
          this.lookahead1W(123);    // S^WS | '(:' | 'first' | 'last'
          switch (this.l1)
          {
          case 136:                 // 'first'
            this.shift(136);        // 'first'
            break;
          default:
            this.shift(173);        // 'last'
          }
        }
        this.lookahead1W(57);       // S^WS | '(:' | 'into'
        this.shift(165);            // 'into'
      }
      this.eventHandler.endNonterminal("InsertExprTargetChoice", this.e0);
    }

    private try_InsertExprTargetChoice()
    {
      switch (this.l1)
      {
      case 71:                      // 'after'
        this.shiftT(71);            // 'after'
        break;
      case 85:                      // 'before'
        this.shiftT(85);            // 'before'
        break;
      default:
        if (this.l1 == 80)          // 'as'
        {
          this.shiftT(80);          // 'as'
          this.lookahead1W(123);    // S^WS | '(:' | 'first' | 'last'
          switch (this.l1)
          {
          case 136:                 // 'first'
            this.shiftT(136);       // 'first'
            break;
          default:
            this.shiftT(173);       // 'last'
          }
        }
        this.lookahead1W(57);       // S^WS | '(:' | 'into'
        this.shiftT(165);           // 'into'
      }
    }

    private parse_InsertExpr()
    {
      this.eventHandler.startNonterminal("InsertExpr", this.e0);
      this.shift(161);              // 'insert'
      this.lookahead1W(133);        // S^WS | '(:' | 'node' | 'nodes'
      switch (this.l1)
      {
      case 194:                     // 'node'
        this.shift(194);            // 'node'
        break;
      default:
        this.shift(195);            // 'nodes'
      }
      this.lookahead1W(266);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.whitespace();
      this.parse_SourceExpr();
      this.whitespace();
      this.parse_InsertExprTargetChoice();
      this.lookahead1W(266);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.whitespace();
      this.parse_TargetExpr();
      this.eventHandler.endNonterminal("InsertExpr", this.e0);
    }

    private try_InsertExpr()
    {
      this.shiftT(161);             // 'insert'
      this.lookahead1W(133);        // S^WS | '(:' | 'node' | 'nodes'
      switch (this.l1)
      {
      case 194:                     // 'node'
        this.shiftT(194);           // 'node'
        break;
      default:
        this.shiftT(195);           // 'nodes'
      }
      this.lookahead1W(266);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.try_SourceExpr();
      this.try_InsertExprTargetChoice();
      this.lookahead1W(266);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.try_TargetExpr();
    }

    private parse_DeleteExpr()
    {
      this.eventHandler.startNonterminal("DeleteExpr", this.e0);
      this.shift(111);              // 'delete'
      this.lookahead1W(133);        // S^WS | '(:' | 'node' | 'nodes'
      switch (this.l1)
      {
      case 194:                     // 'node'
        this.shift(194);            // 'node'
        break;
      default:
        this.shift(195);            // 'nodes'
      }
      this.lookahead1W(266);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.whitespace();
      this.parse_TargetExpr();
      this.eventHandler.endNonterminal("DeleteExpr", this.e0);
    }

    private try_DeleteExpr()
    {
      this.shiftT(111);             // 'delete'
      this.lookahead1W(133);        // S^WS | '(:' | 'node' | 'nodes'
      switch (this.l1)
      {
      case 194:                     // 'node'
        this.shiftT(194);           // 'node'
        break;
      default:
        this.shiftT(195);           // 'nodes'
      }
      this.lookahead1W(266);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.try_TargetExpr();
    }

    private parse_ReplaceExpr()
    {
      this.eventHandler.startNonterminal("ReplaceExpr", this.e0);
      this.shift(223);              // 'replace'
      this.lookahead1W(134);        // S^WS | '(:' | 'node' | 'value'
      if (this.l1 == 267)           // 'value'
      {
        this.shift(267);            // 'value'
        this.lookahead1W(67);       // S^WS | '(:' | 'of'
        this.shift(200);            // 'of'
      }
      this.lookahead1W(65);         // S^WS | '(:' | 'node'
      this.shift(194);              // 'node'
      this.lookahead1W(266);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.whitespace();
      this.parse_TargetExpr();
      this.shift(276);              // 'with'
      this.lookahead1W(266);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.whitespace();
      this.parse_ExprSingle();
      this.eventHandler.endNonterminal("ReplaceExpr", this.e0);
    }

    private try_ReplaceExpr()
    {
      this.shiftT(223);             // 'replace'
      this.lookahead1W(134);        // S^WS | '(:' | 'node' | 'value'
      if (this.l1 == 267)           // 'value'
      {
        this.shiftT(267);           // 'value'
        this.lookahead1W(67);       // S^WS | '(:' | 'of'
        this.shiftT(200);           // 'of'
      }
      this.lookahead1W(65);         // S^WS | '(:' | 'node'
      this.shiftT(194);             // 'node'
      this.lookahead1W(266);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.try_TargetExpr();
      this.shiftT(276);             // 'with'
      this.lookahead1W(266);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.try_ExprSingle();
    }

    private parse_RenameExpr()
    {
      this.eventHandler.startNonterminal("RenameExpr", this.e0);
      this.shift(222);              // 'rename'
      this.lookahead1W(65);         // S^WS | '(:' | 'node'
      this.shift(194);              // 'node'
      this.lookahead1W(266);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.whitespace();
      this.parse_TargetExpr();
      this.shift(80);               // 'as'
      this.lookahead1W(266);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.whitespace();
      this.parse_NewNameExpr();
      this.eventHandler.endNonterminal("RenameExpr", this.e0);
    }

    private try_RenameExpr()
    {
      this.shiftT(222);             // 'rename'
      this.lookahead1W(65);         // S^WS | '(:' | 'node'
      this.shiftT(194);             // 'node'
      this.lookahead1W(266);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.try_TargetExpr();
      this.shiftT(80);              // 'as'
      this.lookahead1W(266);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.try_NewNameExpr();
    }

    private parse_SourceExpr()
    {
      this.eventHandler.startNonterminal("SourceExpr", this.e0);
      this.parse_ExprSingle();
      this.eventHandler.endNonterminal("SourceExpr", this.e0);
    }

    private try_SourceExpr()
    {
      this.try_ExprSingle();
    }

    private parse_TargetExpr()
    {
      this.eventHandler.startNonterminal("TargetExpr", this.e0);
      this.parse_ExprSingle();
      this.eventHandler.endNonterminal("TargetExpr", this.e0);
    }

    private try_TargetExpr()
    {
      this.try_ExprSingle();
    }

    private parse_NewNameExpr()
    {
      this.eventHandler.startNonterminal("NewNameExpr", this.e0);
      this.parse_ExprSingle();
      this.eventHandler.endNonterminal("NewNameExpr", this.e0);
    }

    private try_NewNameExpr()
    {
      this.try_ExprSingle();
    }

    private parse_TransformExpr()
    {
      this.eventHandler.startNonterminal("TransformExpr", this.e0);
      this.shift(104);              // 'copy'
      this.lookahead1W(21);         // S^WS | '$' | '(:'
      this.whitespace();
      this.parse_TransformSpec();
      for (;;)
      {
        if (this.l1 != 42)          // ','
        {
          break;
        }
        this.shift(42);             // ','
        this.lookahead1W(21);       // S^WS | '$' | '(:'
        this.whitespace();
        this.parse_TransformSpec();
      }
      this.shift(184);              // 'modify'
      this.lookahead1W(266);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.whitespace();
      this.parse_ExprSingle();
      this.shift(224);              // 'return'
      this.lookahead1W(266);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.whitespace();
      this.parse_ExprSingle();
      this.eventHandler.endNonterminal("TransformExpr", this.e0);
    }

    private try_TransformExpr()
    {
      this.shiftT(104);             // 'copy'
      this.lookahead1W(21);         // S^WS | '$' | '(:'
      this.try_TransformSpec();
      for (;;)
      {
        if (this.l1 != 42)          // ','
        {
          break;
        }
        this.shiftT(42);            // ','
        this.lookahead1W(21);       // S^WS | '$' | '(:'
        this.try_TransformSpec();
      }
      this.shiftT(184);             // 'modify'
      this.lookahead1W(266);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.try_ExprSingle();
      this.shiftT(224);             // 'return'
      this.lookahead1W(266);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.try_ExprSingle();
    }

    private parse_TransformSpec()
    {
      this.eventHandler.startNonterminal("TransformSpec", this.e0);
      this.shift(31);               // '$'
      this.lookahead1W(245);        // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      this.whitespace();
      this.parse_VarName();
      this.lookahead1W(28);         // S^WS | '(:' | ':='
      this.shift(53);               // ':='
      this.lookahead1W(266);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.whitespace();
      this.parse_ExprSingle();
      this.eventHandler.endNonterminal("TransformSpec", this.e0);
    }

    private try_TransformSpec()
    {
      this.shiftT(31);              // '$'
      this.lookahead1W(245);        // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      this.try_VarName();
      this.lookahead1W(28);         // S^WS | '(:' | ':='
      this.shiftT(53);              // ':='
      this.lookahead1W(266);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.try_ExprSingle();
    }

    private parse_FTSelection()
    {
      this.eventHandler.startNonterminal("FTSelection", this.e0);
      this.parse_FTOr();
      for (;;)
      {
        this.lookahead1W(211);      // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'modify' | 'ne' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'return' | 'same' | 'satisfies' |
                                    // 'stable' | 'start' | 'where' | 'window' | 'with' | 'without' | '|}' | '}'
        switch (this.l1)
        {
        case 82:                    // 'at'
          this.lookahead2W(161);    // S^WS | '(:' | 'end' | 'position' | 'start'
          break;
        default:
          this.lk = this.l1;
        }
        if (this.lk != 116          // 'different'
         && this.lk != 118          // 'distance'
         && this.lk != 128          // 'entire'
         && this.lk != 206          // 'ordered'
         && this.lk != 227          // 'same'
         && this.lk != 275          // 'window'
         && this.lk != 65106        // 'at' 'end'
         && this.lk != 123986)      // 'at' 'start'
        {
          break;
        }
        this.whitespace();
        this.parse_FTPosFilter();
      }
      this.eventHandler.endNonterminal("FTSelection", this.e0);
    }

    private try_FTSelection()
    {
      this.try_FTOr();
      for (;;)
      {
        this.lookahead1W(211);      // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'modify' | 'ne' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'return' | 'same' | 'satisfies' |
                                    // 'stable' | 'start' | 'where' | 'window' | 'with' | 'without' | '|}' | '}'
        switch (this.l1)
        {
        case 82:                    // 'at'
          this.lookahead2W(161);    // S^WS | '(:' | 'end' | 'position' | 'start'
          break;
        default:
          this.lk = this.l1;
        }
        if (this.lk != 116          // 'different'
         && this.lk != 118          // 'distance'
         && this.lk != 128          // 'entire'
         && this.lk != 206          // 'ordered'
         && this.lk != 227          // 'same'
         && this.lk != 275          // 'window'
         && this.lk != 65106        // 'at' 'end'
         && this.lk != 123986)      // 'at' 'start'
        {
          break;
        }
        this.try_FTPosFilter();
      }
    }

    private parse_FTWeight()
    {
      this.eventHandler.startNonterminal("FTWeight", this.e0);
      this.shift(270);              // 'weight'
      this.lookahead1W(90);         // S^WS | '(:' | '{'
      this.shift(281);              // '{'
      this.lookahead1W(266);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.whitespace();
      this.parse_Expr();
      this.shift(287);              // '}'
      this.eventHandler.endNonterminal("FTWeight", this.e0);
    }

    private try_FTWeight()
    {
      this.shiftT(270);             // 'weight'
      this.lookahead1W(90);         // S^WS | '(:' | '{'
      this.shiftT(281);             // '{'
      this.lookahead1W(266);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.try_Expr();
      this.shiftT(287);             // '}'
    }

    private parse_FTOr()
    {
      this.eventHandler.startNonterminal("FTOr", this.e0);
      this.parse_FTAnd();
      for (;;)
      {
        if (this.l1 != 146)         // 'ftor'
        {
          break;
        }
        this.shift(146);            // 'ftor'
        this.lookahead1W(177);      // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
        this.whitespace();
        this.parse_FTAnd();
      }
      this.eventHandler.endNonterminal("FTOr", this.e0);
    }

    private try_FTOr()
    {
      this.try_FTAnd();
      for (;;)
      {
        if (this.l1 != 146)         // 'ftor'
        {
          break;
        }
        this.shiftT(146);           // 'ftor'
        this.lookahead1W(177);      // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
        this.try_FTAnd();
      }
    }

    private parse_FTAnd()
    {
      this.eventHandler.startNonterminal("FTAnd", this.e0);
      this.parse_FTMildNot();
      for (;;)
      {
        if (this.l1 != 144)         // 'ftand'
        {
          break;
        }
        this.shift(144);            // 'ftand'
        this.lookahead1W(177);      // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
        this.whitespace();
        this.parse_FTMildNot();
      }
      this.eventHandler.endNonterminal("FTAnd", this.e0);
    }

    private try_FTAnd()
    {
      this.try_FTMildNot();
      for (;;)
      {
        if (this.l1 != 144)         // 'ftand'
        {
          break;
        }
        this.shiftT(144);           // 'ftand'
        this.lookahead1W(177);      // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
        this.try_FTMildNot();
      }
    }

    private parse_FTMildNot()
    {
      this.eventHandler.startNonterminal("FTMildNot", this.e0);
      this.parse_FTUnaryNot();
      for (;;)
      {
        this.lookahead1W(212);      // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' | 'ordered' | 'return' |
                                    // 'same' | 'satisfies' | 'stable' | 'start' | 'where' | 'window' | 'with' |
                                    // 'without' | '|}' | '}'
        if (this.l1 != 196)         // 'not'
        {
          break;
        }
        this.shift(196);            // 'not'
        this.lookahead1W(56);       // S^WS | '(:' | 'in'
        this.shift(156);            // 'in'
        this.lookahead1W(177);      // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
        this.whitespace();
        this.parse_FTUnaryNot();
      }
      this.eventHandler.endNonterminal("FTMildNot", this.e0);
    }

    private try_FTMildNot()
    {
      this.try_FTUnaryNot();
      for (;;)
      {
        this.lookahead1W(212);      // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' | 'ordered' | 'return' |
                                    // 'same' | 'satisfies' | 'stable' | 'start' | 'where' | 'window' | 'with' |
                                    // 'without' | '|}' | '}'
        if (this.l1 != 196)         // 'not'
        {
          break;
        }
        this.shiftT(196);           // 'not'
        this.lookahead1W(56);       // S^WS | '(:' | 'in'
        this.shiftT(156);           // 'in'
        this.lookahead1W(177);      // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
        this.try_FTUnaryNot();
      }
    }

    private parse_FTUnaryNot()
    {
      this.eventHandler.startNonterminal("FTUnaryNot", this.e0);
      if (this.l1 == 145)           // 'ftnot'
      {
        this.shift(145);            // 'ftnot'
      }
      this.lookahead1W(164);        // StringLiteral | S^WS | '(' | '(#' | '(:' | '{'
      this.whitespace();
      this.parse_FTPrimaryWithOptions();
      this.eventHandler.endNonterminal("FTUnaryNot", this.e0);
    }

    private try_FTUnaryNot()
    {
      if (this.l1 == 145)           // 'ftnot'
      {
        this.shiftT(145);           // 'ftnot'
      }
      this.lookahead1W(164);        // StringLiteral | S^WS | '(' | '(#' | '(:' | '{'
      this.try_FTPrimaryWithOptions();
    }

    private parse_FTPrimaryWithOptions()
    {
      this.eventHandler.startNonterminal("FTPrimaryWithOptions", this.e0);
      this.parse_FTPrimary();
      this.lookahead1W(213);        // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' | 'ordered' | 'return' |
                                    // 'same' | 'satisfies' | 'stable' | 'start' | 'using' | 'weight' | 'where' |
                                    // 'window' | 'with' | 'without' | '|}' | '}'
      if (this.l1 == 265)           // 'using'
      {
        this.whitespace();
        this.parse_FTMatchOptions();
      }
      if (this.l1 == 270)           // 'weight'
      {
        this.whitespace();
        this.parse_FTWeight();
      }
      this.eventHandler.endNonterminal("FTPrimaryWithOptions", this.e0);
    }

    private try_FTPrimaryWithOptions()
    {
      this.try_FTPrimary();
      this.lookahead1W(213);        // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' | 'ordered' | 'return' |
                                    // 'same' | 'satisfies' | 'stable' | 'start' | 'using' | 'weight' | 'where' |
                                    // 'window' | 'with' | 'without' | '|}' | '}'
      if (this.l1 == 265)           // 'using'
      {
        this.try_FTMatchOptions();
      }
      if (this.l1 == 270)           // 'weight'
      {
        this.try_FTWeight();
      }
    }

    private parse_FTPrimary()
    {
      this.eventHandler.startNonterminal("FTPrimary", this.e0);
      switch (this.l1)
      {
      case 35:                      // '('
        this.shift(35);             // '('
        this.lookahead1W(177);      // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
        this.whitespace();
        this.parse_FTSelection();
        this.shift(38);             // ')'
        break;
      case 36:                      // '(#'
        this.parse_FTExtensionSelection();
        break;
      default:
        this.parse_FTWords();
        this.lookahead1W(214);      // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'using' | 'weight' |
                                    // 'where' | 'window' | 'with' | 'without' | '|}' | '}'
        if (this.l1 == 199)         // 'occurs'
        {
          this.whitespace();
          this.parse_FTTimes();
        }
      }
      this.eventHandler.endNonterminal("FTPrimary", this.e0);
    }

    private try_FTPrimary()
    {
      switch (this.l1)
      {
      case 35:                      // '('
        this.shiftT(35);            // '('
        this.lookahead1W(177);      // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
        this.try_FTSelection();
        this.shiftT(38);            // ')'
        break;
      case 36:                      // '(#'
        this.try_FTExtensionSelection();
        break;
      default:
        this.try_FTWords();
        this.lookahead1W(214);      // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'using' | 'weight' |
                                    // 'where' | 'window' | 'with' | 'without' | '|}' | '}'
        if (this.l1 == 199)         // 'occurs'
        {
          this.try_FTTimes();
        }
      }
    }

    private parse_FTWords()
    {
      this.eventHandler.startNonterminal("FTWords", this.e0);
      this.parse_FTWordsValue();
      this.lookahead1W(220);        // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'all' | 'and' | 'any' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'phrase' | 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'using' |
                                    // 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' | '}'
      if (this.l1 == 72             // 'all'
       || this.l1 == 77             // 'any'
       || this.l1 == 214)           // 'phrase'
      {
        this.whitespace();
        this.parse_FTAnyallOption();
      }
      this.eventHandler.endNonterminal("FTWords", this.e0);
    }

    private try_FTWords()
    {
      this.try_FTWordsValue();
      this.lookahead1W(220);        // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'all' | 'and' | 'any' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'phrase' | 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'using' |
                                    // 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' | '}'
      if (this.l1 == 72             // 'all'
       || this.l1 == 77             // 'any'
       || this.l1 == 214)           // 'phrase'
      {
        this.try_FTAnyallOption();
      }
    }

    private parse_FTWordsValue()
    {
      this.eventHandler.startNonterminal("FTWordsValue", this.e0);
      switch (this.l1)
      {
      case 11:                      // StringLiteral
        this.shift(11);             // StringLiteral
        break;
      default:
        this.shift(281);            // '{'
        this.lookahead1W(266);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
        this.whitespace();
        this.parse_Expr();
        this.shift(287);            // '}'
      }
      this.eventHandler.endNonterminal("FTWordsValue", this.e0);
    }

    private try_FTWordsValue()
    {
      switch (this.l1)
      {
      case 11:                      // StringLiteral
        this.shiftT(11);            // StringLiteral
        break;
      default:
        this.shiftT(281);           // '{'
        this.lookahead1W(266);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
        this.try_Expr();
        this.shiftT(287);           // '}'
      }
    }

    private parse_FTExtensionSelection()
    {
      this.eventHandler.startNonterminal("FTExtensionSelection", this.e0);
      for (;;)
      {
        this.whitespace();
        this.parse_Pragma();
        this.lookahead1W(104);      // S^WS | '(#' | '(:' | '{'
        if (this.l1 != 36)          // '(#'
        {
          break;
        }
      }
      this.shift(281);              // '{'
      this.lookahead1W(184);        // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{' | '}'
      if (this.l1 != 287)           // '}'
      {
        this.whitespace();
        this.parse_FTSelection();
      }
      this.shift(287);              // '}'
      this.eventHandler.endNonterminal("FTExtensionSelection", this.e0);
    }

    private try_FTExtensionSelection()
    {
      for (;;)
      {
        this.try_Pragma();
        this.lookahead1W(104);      // S^WS | '(#' | '(:' | '{'
        if (this.l1 != 36)          // '(#'
        {
          break;
        }
      }
      this.shiftT(281);             // '{'
      this.lookahead1W(184);        // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{' | '}'
      if (this.l1 != 287)           // '}'
      {
        this.try_FTSelection();
      }
      this.shiftT(287);             // '}'
    }

    private parse_FTAnyallOption()
    {
      this.eventHandler.startNonterminal("FTAnyallOption", this.e0);
      switch (this.l1)
      {
      case 77:                      // 'any'
        this.shift(77);             // 'any'
        this.lookahead1W(217);      // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'using' | 'weight' |
                                    // 'where' | 'window' | 'with' | 'without' | 'word' | '|}' | '}'
        if (this.l1 == 278)         // 'word'
        {
          this.shift(278);          // 'word'
        }
        break;
      case 72:                      // 'all'
        this.shift(72);             // 'all'
        this.lookahead1W(218);      // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'using' | 'weight' |
                                    // 'where' | 'window' | 'with' | 'without' | 'words' | '|}' | '}'
        if (this.l1 == 279)         // 'words'
        {
          this.shift(279);          // 'words'
        }
        break;
      default:
        this.shift(214);            // 'phrase'
      }
      this.eventHandler.endNonterminal("FTAnyallOption", this.e0);
    }

    private try_FTAnyallOption()
    {
      switch (this.l1)
      {
      case 77:                      // 'any'
        this.shiftT(77);            // 'any'
        this.lookahead1W(217);      // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'using' | 'weight' |
                                    // 'where' | 'window' | 'with' | 'without' | 'word' | '|}' | '}'
        if (this.l1 == 278)         // 'word'
        {
          this.shiftT(278);         // 'word'
        }
        break;
      case 72:                      // 'all'
        this.shiftT(72);            // 'all'
        this.lookahead1W(218);      // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'using' | 'weight' |
                                    // 'where' | 'window' | 'with' | 'without' | 'words' | '|}' | '}'
        if (this.l1 == 279)         // 'words'
        {
          this.shiftT(279);         // 'words'
        }
        break;
      default:
        this.shiftT(214);           // 'phrase'
      }
    }

    private parse_FTTimes()
    {
      this.eventHandler.startNonterminal("FTTimes", this.e0);
      this.shift(199);              // 'occurs'
      this.lookahead1W(159);        // S^WS | '(:' | 'at' | 'exactly' | 'from'
      this.whitespace();
      this.parse_FTRange();
      this.shift(252);              // 'times'
      this.eventHandler.endNonterminal("FTTimes", this.e0);
    }

    private try_FTTimes()
    {
      this.shiftT(199);             // 'occurs'
      this.lookahead1W(159);        // S^WS | '(:' | 'at' | 'exactly' | 'from'
      this.try_FTRange();
      this.shiftT(252);             // 'times'
    }

    private parse_FTRange()
    {
      this.eventHandler.startNonterminal("FTRange", this.e0);
      switch (this.l1)
      {
      case 131:                     // 'exactly'
        this.shift(131);            // 'exactly'
        this.lookahead1W(265);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'structured-item' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
        this.whitespace();
        this.parse_AdditiveExpr();
        break;
      case 82:                      // 'at'
        this.shift(82);             // 'at'
        this.lookahead1W(129);      // S^WS | '(:' | 'least' | 'most'
        switch (this.l1)
        {
        case 176:                   // 'least'
          this.shift(176);          // 'least'
          this.lookahead1W(265);    // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'structured-item' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
          this.whitespace();
          this.parse_AdditiveExpr();
          break;
        default:
          this.shift(186);          // 'most'
          this.lookahead1W(265);    // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'structured-item' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
          this.whitespace();
          this.parse_AdditiveExpr();
        }
        break;
      default:
        this.shift(142);            // 'from'
        this.lookahead1W(265);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'structured-item' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
        this.whitespace();
        this.parse_AdditiveExpr();
        this.shift(253);            // 'to'
        this.lookahead1W(265);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'structured-item' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
        this.whitespace();
        this.parse_AdditiveExpr();
      }
      this.eventHandler.endNonterminal("FTRange", this.e0);
    }

    private try_FTRange()
    {
      switch (this.l1)
      {
      case 131:                     // 'exactly'
        this.shiftT(131);           // 'exactly'
        this.lookahead1W(265);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'structured-item' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
        this.try_AdditiveExpr();
        break;
      case 82:                      // 'at'
        this.shiftT(82);            // 'at'
        this.lookahead1W(129);      // S^WS | '(:' | 'least' | 'most'
        switch (this.l1)
        {
        case 176:                   // 'least'
          this.shiftT(176);         // 'least'
          this.lookahead1W(265);    // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'structured-item' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
          this.try_AdditiveExpr();
          break;
        default:
          this.shiftT(186);         // 'most'
          this.lookahead1W(265);    // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'structured-item' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
          this.try_AdditiveExpr();
        }
        break;
      default:
        this.shiftT(142);           // 'from'
        this.lookahead1W(265);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'structured-item' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
        this.try_AdditiveExpr();
        this.shiftT(253);           // 'to'
        this.lookahead1W(265);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'structured-item' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
        this.try_AdditiveExpr();
      }
    }

    private parse_FTPosFilter()
    {
      this.eventHandler.startNonterminal("FTPosFilter", this.e0);
      switch (this.l1)
      {
      case 206:                     // 'ordered'
        this.parse_FTOrder();
        break;
      case 275:                     // 'window'
        this.parse_FTWindow();
        break;
      case 118:                     // 'distance'
        this.parse_FTDistance();
        break;
      case 116:                     // 'different'
      case 227:                     // 'same'
        this.parse_FTScope();
        break;
      default:
        this.parse_FTContent();
      }
      this.eventHandler.endNonterminal("FTPosFilter", this.e0);
    }

    private try_FTPosFilter()
    {
      switch (this.l1)
      {
      case 206:                     // 'ordered'
        this.try_FTOrder();
        break;
      case 275:                     // 'window'
        this.try_FTWindow();
        break;
      case 118:                     // 'distance'
        this.try_FTDistance();
        break;
      case 116:                     // 'different'
      case 227:                     // 'same'
        this.try_FTScope();
        break;
      default:
        this.try_FTContent();
      }
    }

    private parse_FTOrder()
    {
      this.eventHandler.startNonterminal("FTOrder", this.e0);
      this.shift(206);              // 'ordered'
      this.eventHandler.endNonterminal("FTOrder", this.e0);
    }

    private try_FTOrder()
    {
      this.shiftT(206);             // 'ordered'
    }

    private parse_FTWindow()
    {
      this.eventHandler.startNonterminal("FTWindow", this.e0);
      this.shift(275);              // 'window'
      this.lookahead1W(265);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'structured-item' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
      this.whitespace();
      this.parse_AdditiveExpr();
      this.whitespace();
      this.parse_FTUnit();
      this.eventHandler.endNonterminal("FTWindow", this.e0);
    }

    private try_FTWindow()
    {
      this.shiftT(275);             // 'window'
      this.lookahead1W(265);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'structured-item' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
      this.try_AdditiveExpr();
      this.try_FTUnit();
    }

    private parse_FTDistance()
    {
      this.eventHandler.startNonterminal("FTDistance", this.e0);
      this.shift(118);              // 'distance'
      this.lookahead1W(159);        // S^WS | '(:' | 'at' | 'exactly' | 'from'
      this.whitespace();
      this.parse_FTRange();
      this.whitespace();
      this.parse_FTUnit();
      this.eventHandler.endNonterminal("FTDistance", this.e0);
    }

    private try_FTDistance()
    {
      this.shiftT(118);             // 'distance'
      this.lookahead1W(159);        // S^WS | '(:' | 'at' | 'exactly' | 'from'
      this.try_FTRange();
      this.try_FTUnit();
    }

    private parse_FTUnit()
    {
      this.eventHandler.startNonterminal("FTUnit", this.e0);
      switch (this.l1)
      {
      case 279:                     // 'words'
        this.shift(279);            // 'words'
        break;
      case 237:                     // 'sentences'
        this.shift(237);            // 'sentences'
        break;
      default:
        this.shift(209);            // 'paragraphs'
      }
      this.eventHandler.endNonterminal("FTUnit", this.e0);
    }

    private try_FTUnit()
    {
      switch (this.l1)
      {
      case 279:                     // 'words'
        this.shiftT(279);           // 'words'
        break;
      case 237:                     // 'sentences'
        this.shiftT(237);           // 'sentences'
        break;
      default:
        this.shiftT(209);           // 'paragraphs'
      }
    }

    private parse_FTScope()
    {
      this.eventHandler.startNonterminal("FTScope", this.e0);
      switch (this.l1)
      {
      case 227:                     // 'same'
        this.shift(227);            // 'same'
        break;
      default:
        this.shift(116);            // 'different'
      }
      this.lookahead1W(136);        // S^WS | '(:' | 'paragraph' | 'sentence'
      this.whitespace();
      this.parse_FTBigUnit();
      this.eventHandler.endNonterminal("FTScope", this.e0);
    }

    private try_FTScope()
    {
      switch (this.l1)
      {
      case 227:                     // 'same'
        this.shiftT(227);           // 'same'
        break;
      default:
        this.shiftT(116);           // 'different'
      }
      this.lookahead1W(136);        // S^WS | '(:' | 'paragraph' | 'sentence'
      this.try_FTBigUnit();
    }

    private parse_FTBigUnit()
    {
      this.eventHandler.startNonterminal("FTBigUnit", this.e0);
      switch (this.l1)
      {
      case 236:                     // 'sentence'
        this.shift(236);            // 'sentence'
        break;
      default:
        this.shift(208);            // 'paragraph'
      }
      this.eventHandler.endNonterminal("FTBigUnit", this.e0);
    }

    private try_FTBigUnit()
    {
      switch (this.l1)
      {
      case 236:                     // 'sentence'
        this.shiftT(236);           // 'sentence'
        break;
      default:
        this.shiftT(208);           // 'paragraph'
      }
    }

    private parse_FTContent()
    {
      this.eventHandler.startNonterminal("FTContent", this.e0);
      switch (this.l1)
      {
      case 82:                      // 'at'
        this.shift(82);             // 'at'
        this.lookahead1W(121);      // S^WS | '(:' | 'end' | 'start'
        switch (this.l1)
        {
        case 242:                   // 'start'
          this.shift(242);          // 'start'
          break;
        default:
          this.shift(127);          // 'end'
        }
        break;
      default:
        this.shift(128);            // 'entire'
        this.lookahead1W(45);       // S^WS | '(:' | 'content'
        this.shift(101);            // 'content'
      }
      this.eventHandler.endNonterminal("FTContent", this.e0);
    }

    private try_FTContent()
    {
      switch (this.l1)
      {
      case 82:                      // 'at'
        this.shiftT(82);            // 'at'
        this.lookahead1W(121);      // S^WS | '(:' | 'end' | 'start'
        switch (this.l1)
        {
        case 242:                   // 'start'
          this.shiftT(242);         // 'start'
          break;
        default:
          this.shiftT(127);         // 'end'
        }
        break;
      default:
        this.shiftT(128);           // 'entire'
        this.lookahead1W(45);       // S^WS | '(:' | 'content'
        this.shiftT(101);           // 'content'
      }
    }

    private parse_FTMatchOptions()
    {
      this.eventHandler.startNonterminal("FTMatchOptions", this.e0);
      for (;;)
      {
        this.shift(265);            // 'using'
        this.lookahead1W(204);      // S^WS | '(:' | 'case' | 'diacritics' | 'language' | 'lowercase' | 'no' |
                                    // 'option' | 'stemming' | 'stop' | 'thesaurus' | 'uppercase' | 'wildcards'
        this.whitespace();
        this.parse_FTMatchOption();
        this.lookahead1W(213);      // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' | 'ordered' | 'return' |
                                    // 'same' | 'satisfies' | 'stable' | 'start' | 'using' | 'weight' | 'where' |
                                    // 'window' | 'with' | 'without' | '|}' | '}'
        if (this.l1 != 265)         // 'using'
        {
          break;
        }
      }
      this.eventHandler.endNonterminal("FTMatchOptions", this.e0);
    }

    private try_FTMatchOptions()
    {
      for (;;)
      {
        this.shiftT(265);           // 'using'
        this.lookahead1W(204);      // S^WS | '(:' | 'case' | 'diacritics' | 'language' | 'lowercase' | 'no' |
                                    // 'option' | 'stemming' | 'stop' | 'thesaurus' | 'uppercase' | 'wildcards'
        this.try_FTMatchOption();
        this.lookahead1W(213);      // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' | 'ordered' | 'return' |
                                    // 'same' | 'satisfies' | 'stable' | 'start' | 'using' | 'weight' | 'where' |
                                    // 'window' | 'with' | 'without' | '|}' | '}'
        if (this.l1 != 265)         // 'using'
        {
          break;
        }
      }
    }

    private parse_FTMatchOption()
    {
      this.eventHandler.startNonterminal("FTMatchOption", this.e0);
      switch (this.l1)
      {
      case 191:                     // 'no'
        this.lookahead2W(176);      // S^WS | '(:' | 'stemming' | 'stop' | 'thesaurus' | 'wildcards'
        break;
      default:
        this.lk = this.l1;
      }
      switch (this.lk)
      {
      case 172:                     // 'language'
        this.parse_FTLanguageOption();
        break;
      case 274:                     // 'wildcards'
      case 140479:                  // 'no' 'wildcards'
        this.parse_FTWildCardOption();
        break;
      case 251:                     // 'thesaurus'
      case 128703:                  // 'no' 'thesaurus'
        this.parse_FTThesaurusOption();
        break;
      case 243:                     // 'stemming'
      case 124607:                  // 'no' 'stemming'
        this.parse_FTStemOption();
        break;
      case 115:                     // 'diacritics'
        this.parse_FTDiacriticsOption();
        break;
      case 244:                     // 'stop'
      case 125119:                  // 'no' 'stop'
        this.parse_FTStopWordOption();
        break;
      case 203:                     // 'option'
        this.parse_FTExtensionOption();
        break;
      default:
        this.parse_FTCaseOption();
      }
      this.eventHandler.endNonterminal("FTMatchOption", this.e0);
    }

    private try_FTMatchOption()
    {
      switch (this.l1)
      {
      case 191:                     // 'no'
        this.lookahead2W(176);      // S^WS | '(:' | 'stemming' | 'stop' | 'thesaurus' | 'wildcards'
        break;
      default:
        this.lk = this.l1;
      }
      switch (this.lk)
      {
      case 172:                     // 'language'
        this.try_FTLanguageOption();
        break;
      case 274:                     // 'wildcards'
      case 140479:                  // 'no' 'wildcards'
        this.try_FTWildCardOption();
        break;
      case 251:                     // 'thesaurus'
      case 128703:                  // 'no' 'thesaurus'
        this.try_FTThesaurusOption();
        break;
      case 243:                     // 'stemming'
      case 124607:                  // 'no' 'stemming'
        this.try_FTStemOption();
        break;
      case 115:                     // 'diacritics'
        this.try_FTDiacriticsOption();
        break;
      case 244:                     // 'stop'
      case 125119:                  // 'no' 'stop'
        this.try_FTStopWordOption();
        break;
      case 203:                     // 'option'
        this.try_FTExtensionOption();
        break;
      default:
        this.try_FTCaseOption();
      }
    }

    private parse_FTCaseOption()
    {
      this.eventHandler.startNonterminal("FTCaseOption", this.e0);
      switch (this.l1)
      {
      case 89:                      // 'case'
        this.shift(89);             // 'case'
        this.lookahead1W(128);      // S^WS | '(:' | 'insensitive' | 'sensitive'
        switch (this.l1)
        {
        case 160:                   // 'insensitive'
          this.shift(160);          // 'insensitive'
          break;
        default:
          this.shift(235);          // 'sensitive'
        }
        break;
      case 180:                     // 'lowercase'
        this.shift(180);            // 'lowercase'
        break;
      default:
        this.shift(264);            // 'uppercase'
      }
      this.eventHandler.endNonterminal("FTCaseOption", this.e0);
    }

    private try_FTCaseOption()
    {
      switch (this.l1)
      {
      case 89:                      // 'case'
        this.shiftT(89);            // 'case'
        this.lookahead1W(128);      // S^WS | '(:' | 'insensitive' | 'sensitive'
        switch (this.l1)
        {
        case 160:                   // 'insensitive'
          this.shiftT(160);         // 'insensitive'
          break;
        default:
          this.shiftT(235);         // 'sensitive'
        }
        break;
      case 180:                     // 'lowercase'
        this.shiftT(180);           // 'lowercase'
        break;
      default:
        this.shiftT(264);           // 'uppercase'
      }
    }

    private parse_FTDiacriticsOption()
    {
      this.eventHandler.startNonterminal("FTDiacriticsOption", this.e0);
      this.shift(115);              // 'diacritics'
      this.lookahead1W(128);        // S^WS | '(:' | 'insensitive' | 'sensitive'
      switch (this.l1)
      {
      case 160:                     // 'insensitive'
        this.shift(160);            // 'insensitive'
        break;
      default:
        this.shift(235);            // 'sensitive'
      }
      this.eventHandler.endNonterminal("FTDiacriticsOption", this.e0);
    }

    private try_FTDiacriticsOption()
    {
      this.shiftT(115);             // 'diacritics'
      this.lookahead1W(128);        // S^WS | '(:' | 'insensitive' | 'sensitive'
      switch (this.l1)
      {
      case 160:                     // 'insensitive'
        this.shiftT(160);           // 'insensitive'
        break;
      default:
        this.shiftT(235);           // 'sensitive'
      }
    }

    private parse_FTStemOption()
    {
      this.eventHandler.startNonterminal("FTStemOption", this.e0);
      switch (this.l1)
      {
      case 243:                     // 'stemming'
        this.shift(243);            // 'stemming'
        break;
      default:
        this.shift(191);            // 'no'
        this.lookahead1W(77);       // S^WS | '(:' | 'stemming'
        this.shift(243);            // 'stemming'
      }
      this.eventHandler.endNonterminal("FTStemOption", this.e0);
    }

    private try_FTStemOption()
    {
      switch (this.l1)
      {
      case 243:                     // 'stemming'
        this.shiftT(243);           // 'stemming'
        break;
      default:
        this.shiftT(191);           // 'no'
        this.lookahead1W(77);       // S^WS | '(:' | 'stemming'
        this.shiftT(243);           // 'stemming'
      }
    }

    private parse_FTThesaurusOption()
    {
      this.eventHandler.startNonterminal("FTThesaurusOption", this.e0);
      switch (this.l1)
      {
      case 251:                     // 'thesaurus'
        this.shift(251);            // 'thesaurus'
        this.lookahead1W(152);      // S^WS | '(' | '(:' | 'at' | 'default'
        switch (this.l1)
        {
        case 82:                    // 'at'
          this.whitespace();
          this.parse_FTThesaurusID();
          break;
        case 110:                   // 'default'
          this.shift(110);          // 'default'
          break;
        default:
          this.shift(35);           // '('
          this.lookahead1W(116);    // S^WS | '(:' | 'at' | 'default'
          switch (this.l1)
          {
          case 82:                  // 'at'
            this.whitespace();
            this.parse_FTThesaurusID();
            break;
          default:
            this.shift(110);        // 'default'
          }
          for (;;)
          {
            this.lookahead1W(105);  // S^WS | '(:' | ')' | ','
            if (this.l1 != 42)      // ','
            {
              break;
            }
            this.shift(42);         // ','
            this.lookahead1W(34);   // S^WS | '(:' | 'at'
            this.whitespace();
            this.parse_FTThesaurusID();
          }
          this.shift(38);           // ')'
        }
        break;
      default:
        this.shift(191);            // 'no'
        this.lookahead1W(81);       // S^WS | '(:' | 'thesaurus'
        this.shift(251);            // 'thesaurus'
      }
      this.eventHandler.endNonterminal("FTThesaurusOption", this.e0);
    }

    private try_FTThesaurusOption()
    {
      switch (this.l1)
      {
      case 251:                     // 'thesaurus'
        this.shiftT(251);           // 'thesaurus'
        this.lookahead1W(152);      // S^WS | '(' | '(:' | 'at' | 'default'
        switch (this.l1)
        {
        case 82:                    // 'at'
          this.try_FTThesaurusID();
          break;
        case 110:                   // 'default'
          this.shiftT(110);         // 'default'
          break;
        default:
          this.shiftT(35);          // '('
          this.lookahead1W(116);    // S^WS | '(:' | 'at' | 'default'
          switch (this.l1)
          {
          case 82:                  // 'at'
            this.try_FTThesaurusID();
            break;
          default:
            this.shiftT(110);       // 'default'
          }
          for (;;)
          {
            this.lookahead1W(105);  // S^WS | '(:' | ')' | ','
            if (this.l1 != 42)      // ','
            {
              break;
            }
            this.shiftT(42);        // ','
            this.lookahead1W(34);   // S^WS | '(:' | 'at'
            this.try_FTThesaurusID();
          }
          this.shiftT(38);          // ')'
        }
        break;
      default:
        this.shiftT(191);           // 'no'
        this.lookahead1W(81);       // S^WS | '(:' | 'thesaurus'
        this.shiftT(251);           // 'thesaurus'
      }
    }

    private parse_FTThesaurusID()
    {
      this.eventHandler.startNonterminal("FTThesaurusID", this.e0);
      this.shift(82);               // 'at'
      this.lookahead1W(15);         // URILiteral | S^WS | '(:'
      this.shift(7);                // URILiteral
      this.lookahead1W(219);        // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' |
                                    // 'exactly' | 'for' | 'from' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'relationship' | 'return' | 'same' | 'satisfies' | 'stable' |
                                    // 'start' | 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' |
                                    // '}'
      if (this.l1 == 221)           // 'relationship'
      {
        this.shift(221);            // 'relationship'
        this.lookahead1W(17);       // StringLiteral | S^WS | '(:'
        this.shift(11);             // StringLiteral
      }
      this.lookahead1W(215);        // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' |
                                    // 'exactly' | 'for' | 'from' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'using' |
                                    // 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' | '}'
      switch (this.l1)
      {
      case 82:                      // 'at'
        this.lookahead2W(183);      // S^WS | '(:' | 'end' | 'least' | 'most' | 'position' | 'start'
        break;
      default:
        this.lk = this.l1;
      }
      if (this.lk == 131            // 'exactly'
       || this.lk == 142            // 'from'
       || this.lk == 90194          // 'at' 'least'
       || this.lk == 95314)         // 'at' 'most'
      {
        this.whitespace();
        this.parse_FTLiteralRange();
        this.lookahead1W(61);       // S^WS | '(:' | 'levels'
        this.shift(178);            // 'levels'
      }
      this.eventHandler.endNonterminal("FTThesaurusID", this.e0);
    }

    private try_FTThesaurusID()
    {
      this.shiftT(82);              // 'at'
      this.lookahead1W(15);         // URILiteral | S^WS | '(:'
      this.shiftT(7);               // URILiteral
      this.lookahead1W(219);        // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' |
                                    // 'exactly' | 'for' | 'from' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'relationship' | 'return' | 'same' | 'satisfies' | 'stable' |
                                    // 'start' | 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' |
                                    // '}'
      if (this.l1 == 221)           // 'relationship'
      {
        this.shiftT(221);           // 'relationship'
        this.lookahead1W(17);       // StringLiteral | S^WS | '(:'
        this.shiftT(11);            // StringLiteral
      }
      this.lookahead1W(215);        // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' |
                                    // 'exactly' | 'for' | 'from' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'using' |
                                    // 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' | '}'
      switch (this.l1)
      {
      case 82:                      // 'at'
        this.lookahead2W(183);      // S^WS | '(:' | 'end' | 'least' | 'most' | 'position' | 'start'
        break;
      default:
        this.lk = this.l1;
      }
      if (this.lk == 131            // 'exactly'
       || this.lk == 142            // 'from'
       || this.lk == 90194          // 'at' 'least'
       || this.lk == 95314)         // 'at' 'most'
      {
        this.try_FTLiteralRange();
        this.lookahead1W(61);       // S^WS | '(:' | 'levels'
        this.shiftT(178);           // 'levels'
      }
    }

    private parse_FTLiteralRange()
    {
      this.eventHandler.startNonterminal("FTLiteralRange", this.e0);
      switch (this.l1)
      {
      case 131:                     // 'exactly'
        this.shift(131);            // 'exactly'
        this.lookahead1W(16);       // IntegerLiteral | S^WS | '(:'
        this.shift(8);              // IntegerLiteral
        break;
      case 82:                      // 'at'
        this.shift(82);             // 'at'
        this.lookahead1W(129);      // S^WS | '(:' | 'least' | 'most'
        switch (this.l1)
        {
        case 176:                   // 'least'
          this.shift(176);          // 'least'
          this.lookahead1W(16);     // IntegerLiteral | S^WS | '(:'
          this.shift(8);            // IntegerLiteral
          break;
        default:
          this.shift(186);          // 'most'
          this.lookahead1W(16);     // IntegerLiteral | S^WS | '(:'
          this.shift(8);            // IntegerLiteral
        }
        break;
      default:
        this.shift(142);            // 'from'
        this.lookahead1W(16);       // IntegerLiteral | S^WS | '(:'
        this.shift(8);              // IntegerLiteral
        this.lookahead1W(82);       // S^WS | '(:' | 'to'
        this.shift(253);            // 'to'
        this.lookahead1W(16);       // IntegerLiteral | S^WS | '(:'
        this.shift(8);              // IntegerLiteral
      }
      this.eventHandler.endNonterminal("FTLiteralRange", this.e0);
    }

    private try_FTLiteralRange()
    {
      switch (this.l1)
      {
      case 131:                     // 'exactly'
        this.shiftT(131);           // 'exactly'
        this.lookahead1W(16);       // IntegerLiteral | S^WS | '(:'
        this.shiftT(8);             // IntegerLiteral
        break;
      case 82:                      // 'at'
        this.shiftT(82);            // 'at'
        this.lookahead1W(129);      // S^WS | '(:' | 'least' | 'most'
        switch (this.l1)
        {
        case 176:                   // 'least'
          this.shiftT(176);         // 'least'
          this.lookahead1W(16);     // IntegerLiteral | S^WS | '(:'
          this.shiftT(8);           // IntegerLiteral
          break;
        default:
          this.shiftT(186);         // 'most'
          this.lookahead1W(16);     // IntegerLiteral | S^WS | '(:'
          this.shiftT(8);           // IntegerLiteral
        }
        break;
      default:
        this.shiftT(142);           // 'from'
        this.lookahead1W(16);       // IntegerLiteral | S^WS | '(:'
        this.shiftT(8);             // IntegerLiteral
        this.lookahead1W(82);       // S^WS | '(:' | 'to'
        this.shiftT(253);           // 'to'
        this.lookahead1W(16);       // IntegerLiteral | S^WS | '(:'
        this.shiftT(8);             // IntegerLiteral
      }
    }

    private parse_FTStopWordOption()
    {
      this.eventHandler.startNonterminal("FTStopWordOption", this.e0);
      switch (this.l1)
      {
      case 244:                     // 'stop'
        this.shift(244);            // 'stop'
        this.lookahead1W(89);       // S^WS | '(:' | 'words'
        this.shift(279);            // 'words'
        this.lookahead1W(152);      // S^WS | '(' | '(:' | 'at' | 'default'
        switch (this.l1)
        {
        case 110:                   // 'default'
          this.shift(110);          // 'default'
          for (;;)
          {
            this.lookahead1W(216);  // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' |
                                    // 'except' | 'for' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'union' |
                                    // 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' | '}'
            if (this.l1 != 132      // 'except'
             && this.l1 != 260)     // 'union'
            {
              break;
            }
            this.whitespace();
            this.parse_FTStopWordsInclExcl();
          }
          break;
        default:
          this.whitespace();
          this.parse_FTStopWords();
          for (;;)
          {
            this.lookahead1W(216);  // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' |
                                    // 'except' | 'for' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'union' |
                                    // 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' | '}'
            if (this.l1 != 132      // 'except'
             && this.l1 != 260)     // 'union'
            {
              break;
            }
            this.whitespace();
            this.parse_FTStopWordsInclExcl();
          }
        }
        break;
      default:
        this.shift(191);            // 'no'
        this.lookahead1W(78);       // S^WS | '(:' | 'stop'
        this.shift(244);            // 'stop'
        this.lookahead1W(89);       // S^WS | '(:' | 'words'
        this.shift(279);            // 'words'
      }
      this.eventHandler.endNonterminal("FTStopWordOption", this.e0);
    }

    private try_FTStopWordOption()
    {
      switch (this.l1)
      {
      case 244:                     // 'stop'
        this.shiftT(244);           // 'stop'
        this.lookahead1W(89);       // S^WS | '(:' | 'words'
        this.shiftT(279);           // 'words'
        this.lookahead1W(152);      // S^WS | '(' | '(:' | 'at' | 'default'
        switch (this.l1)
        {
        case 110:                   // 'default'
          this.shiftT(110);         // 'default'
          for (;;)
          {
            this.lookahead1W(216);  // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' |
                                    // 'except' | 'for' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'union' |
                                    // 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' | '}'
            if (this.l1 != 132      // 'except'
             && this.l1 != 260)     // 'union'
            {
              break;
            }
            this.try_FTStopWordsInclExcl();
          }
          break;
        default:
          this.try_FTStopWords();
          for (;;)
          {
            this.lookahead1W(216);  // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' |
                                    // 'except' | 'for' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'union' |
                                    // 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' | '}'
            if (this.l1 != 132      // 'except'
             && this.l1 != 260)     // 'union'
            {
              break;
            }
            this.try_FTStopWordsInclExcl();
          }
        }
        break;
      default:
        this.shiftT(191);           // 'no'
        this.lookahead1W(78);       // S^WS | '(:' | 'stop'
        this.shiftT(244);           // 'stop'
        this.lookahead1W(89);       // S^WS | '(:' | 'words'
        this.shiftT(279);           // 'words'
      }
    }

    private parse_FTStopWords()
    {
      this.eventHandler.startNonterminal("FTStopWords", this.e0);
      switch (this.l1)
      {
      case 82:                      // 'at'
        this.shift(82);             // 'at'
        this.lookahead1W(15);       // URILiteral | S^WS | '(:'
        this.shift(7);              // URILiteral
        break;
      default:
        this.shift(35);             // '('
        this.lookahead1W(17);       // StringLiteral | S^WS | '(:'
        this.shift(11);             // StringLiteral
        for (;;)
        {
          this.lookahead1W(105);    // S^WS | '(:' | ')' | ','
          if (this.l1 != 42)        // ','
          {
            break;
          }
          this.shift(42);           // ','
          this.lookahead1W(17);     // StringLiteral | S^WS | '(:'
          this.shift(11);           // StringLiteral
        }
        this.shift(38);             // ')'
      }
      this.eventHandler.endNonterminal("FTStopWords", this.e0);
    }

    private try_FTStopWords()
    {
      switch (this.l1)
      {
      case 82:                      // 'at'
        this.shiftT(82);            // 'at'
        this.lookahead1W(15);       // URILiteral | S^WS | '(:'
        this.shiftT(7);             // URILiteral
        break;
      default:
        this.shiftT(35);            // '('
        this.lookahead1W(17);       // StringLiteral | S^WS | '(:'
        this.shiftT(11);            // StringLiteral
        for (;;)
        {
          this.lookahead1W(105);    // S^WS | '(:' | ')' | ','
          if (this.l1 != 42)        // ','
          {
            break;
          }
          this.shiftT(42);          // ','
          this.lookahead1W(17);     // StringLiteral | S^WS | '(:'
          this.shiftT(11);          // StringLiteral
        }
        this.shiftT(38);            // ')'
      }
    }

    private parse_FTStopWordsInclExcl()
    {
      this.eventHandler.startNonterminal("FTStopWordsInclExcl", this.e0);
      switch (this.l1)
      {
      case 260:                     // 'union'
        this.shift(260);            // 'union'
        break;
      default:
        this.shift(132);            // 'except'
      }
      this.lookahead1W(103);        // S^WS | '(' | '(:' | 'at'
      this.whitespace();
      this.parse_FTStopWords();
      this.eventHandler.endNonterminal("FTStopWordsInclExcl", this.e0);
    }

    private try_FTStopWordsInclExcl()
    {
      switch (this.l1)
      {
      case 260:                     // 'union'
        this.shiftT(260);           // 'union'
        break;
      default:
        this.shiftT(132);           // 'except'
      }
      this.lookahead1W(103);        // S^WS | '(' | '(:' | 'at'
      this.try_FTStopWords();
    }

    private parse_FTLanguageOption()
    {
      this.eventHandler.startNonterminal("FTLanguageOption", this.e0);
      this.shift(172);              // 'language'
      this.lookahead1W(17);         // StringLiteral | S^WS | '(:'
      this.shift(11);               // StringLiteral
      this.eventHandler.endNonterminal("FTLanguageOption", this.e0);
    }

    private try_FTLanguageOption()
    {
      this.shiftT(172);             // 'language'
      this.lookahead1W(17);         // StringLiteral | S^WS | '(:'
      this.shiftT(11);              // StringLiteral
    }

    private parse_FTWildCardOption()
    {
      this.eventHandler.startNonterminal("FTWildCardOption", this.e0);
      switch (this.l1)
      {
      case 274:                     // 'wildcards'
        this.shift(274);            // 'wildcards'
        break;
      default:
        this.shift(191);            // 'no'
        this.lookahead1W(87);       // S^WS | '(:' | 'wildcards'
        this.shift(274);            // 'wildcards'
      }
      this.eventHandler.endNonterminal("FTWildCardOption", this.e0);
    }

    private try_FTWildCardOption()
    {
      switch (this.l1)
      {
      case 274:                     // 'wildcards'
        this.shiftT(274);           // 'wildcards'
        break;
      default:
        this.shiftT(191);           // 'no'
        this.lookahead1W(87);       // S^WS | '(:' | 'wildcards'
        this.shiftT(274);           // 'wildcards'
      }
    }

    private parse_FTExtensionOption()
    {
      this.eventHandler.startNonterminal("FTExtensionOption", this.e0);
      this.shift(203);              // 'option'
      this.lookahead1W(245);        // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      this.whitespace();
      this.parse_EQName();
      this.lookahead1W(17);         // StringLiteral | S^WS | '(:'
      this.shift(11);               // StringLiteral
      this.eventHandler.endNonterminal("FTExtensionOption", this.e0);
    }

    private try_FTExtensionOption()
    {
      this.shiftT(203);             // 'option'
      this.lookahead1W(245);        // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      this.try_EQName();
      this.lookahead1W(17);         // StringLiteral | S^WS | '(:'
      this.shiftT(11);              // StringLiteral
    }

    private parse_FTIgnoreOption()
    {
      this.eventHandler.startNonterminal("FTIgnoreOption", this.e0);
      this.shift(277);              // 'without'
      this.lookahead1W(45);         // S^WS | '(:' | 'content'
      this.shift(101);              // 'content'
      this.lookahead1W(265);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'structured-item' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
      this.whitespace();
      this.parse_UnionExpr();
      this.eventHandler.endNonterminal("FTIgnoreOption", this.e0);
    }

    private try_FTIgnoreOption()
    {
      this.shiftT(277);             // 'without'
      this.lookahead1W(45);         // S^WS | '(:' | 'content'
      this.shiftT(101);             // 'content'
      this.lookahead1W(265);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'structured-item' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
      this.try_UnionExpr();
    }

    private parse_CollectionDecl()
    {
      this.eventHandler.startNonterminal("CollectionDecl", this.e0);
      this.shift(96);               // 'collection'
      this.lookahead1W(245);        // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      this.whitespace();
      this.parse_EQName();
      this.lookahead1W(111);        // S^WS | '(:' | ';' | 'as'
      if (this.l1 == 80)            // 'as'
      {
        this.whitespace();
        this.parse_CollectionTypeDecl();
      }
      this.eventHandler.endNonterminal("CollectionDecl", this.e0);
    }

    private parse_CollectionTypeDecl()
    {
      this.eventHandler.startNonterminal("CollectionTypeDecl", this.e0);
      this.shift(80);               // 'as'
      this.lookahead1W(253);        // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      this.whitespace();
      this.parse_ItemType();
      this.lookahead1W(171);        // S^WS | '(:' | '*' | '+' | ';' | '?'
      if (this.l1 != 54)            // ';'
      {
        this.whitespace();
        this.parse_OccurrenceIndicator();
      }
      this.eventHandler.endNonterminal("CollectionTypeDecl", this.e0);
    }

    private parse_IndexName()
    {
      this.eventHandler.startNonterminal("IndexName", this.e0);
      this.parse_EQName();
      this.eventHandler.endNonterminal("IndexName", this.e0);
    }

    private parse_IndexDomainExpr()
    {
      this.eventHandler.startNonterminal("IndexDomainExpr", this.e0);
      this.parse_PathExpr();
      this.eventHandler.endNonterminal("IndexDomainExpr", this.e0);
    }

    private parse_IndexKeySpec()
    {
      this.eventHandler.startNonterminal("IndexKeySpec", this.e0);
      this.parse_IndexKeyExpr();
      if (this.l1 == 80)            // 'as'
      {
        this.whitespace();
        this.parse_IndexKeyTypeDecl();
      }
      this.lookahead1W(156);        // S^WS | '(:' | ',' | ';' | 'collation'
      if (this.l1 == 95)            // 'collation'
      {
        this.whitespace();
        this.parse_IndexKeyCollation();
      }
      this.eventHandler.endNonterminal("IndexKeySpec", this.e0);
    }

    private parse_IndexKeyExpr()
    {
      this.eventHandler.startNonterminal("IndexKeyExpr", this.e0);
      this.parse_PathExpr();
      this.eventHandler.endNonterminal("IndexKeyExpr", this.e0);
    }

    private parse_IndexKeyTypeDecl()
    {
      this.eventHandler.startNonterminal("IndexKeyTypeDecl", this.e0);
      this.shift(80);               // 'as'
      this.lookahead1W(245);        // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      this.whitespace();
      this.parse_AtomicType();
      this.lookahead1W(189);        // S^WS | '(:' | '*' | '+' | ',' | ';' | '?' | 'collation'
      if (this.l1 == 40             // '*'
       || this.l1 == 41             // '+'
       || this.l1 == 65)            // '?'
      {
        this.whitespace();
        this.parse_OccurrenceIndicator();
      }
      this.eventHandler.endNonterminal("IndexKeyTypeDecl", this.e0);
    }

    private parse_AtomicType()
    {
      this.eventHandler.startNonterminal("AtomicType", this.e0);
      this.parse_EQName();
      this.eventHandler.endNonterminal("AtomicType", this.e0);
    }

    private parse_IndexKeyCollation()
    {
      this.eventHandler.startNonterminal("IndexKeyCollation", this.e0);
      this.shift(95);               // 'collation'
      this.lookahead1W(15);         // URILiteral | S^WS | '(:'
      this.shift(7);                // URILiteral
      this.eventHandler.endNonterminal("IndexKeyCollation", this.e0);
    }

    private parse_IndexDecl()
    {
      this.eventHandler.startNonterminal("IndexDecl", this.e0);
      this.shift(157);              // 'index'
      this.lookahead1W(245);        // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      this.whitespace();
      this.parse_IndexName();
      this.lookahead1W(68);         // S^WS | '(:' | 'on'
      this.shift(201);              // 'on'
      this.lookahead1W(66);         // S^WS | '(:' | 'nodes'
      this.shift(195);              // 'nodes'
      this.lookahead1W(262);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(:' | '/' | '//' | '<' | '<!--' | '<?' | '[' |
                                    // 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'jsoniq' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'null' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | '{' | '{|'
      this.whitespace();
      this.parse_IndexDomainExpr();
      this.shift(88);               // 'by'
      this.lookahead1W(262);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(:' | '/' | '//' | '<' | '<!--' | '<?' | '[' |
                                    // 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'jsoniq' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'null' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | '{' | '{|'
      this.whitespace();
      this.parse_IndexKeySpec();
      for (;;)
      {
        this.lookahead1W(107);      // S^WS | '(:' | ',' | ';'
        if (this.l1 != 42)          // ','
        {
          break;
        }
        this.shift(42);             // ','
        this.lookahead1W(262);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(:' | '/' | '//' | '<' | '<!--' | '<?' | '[' |
                                    // 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'jsoniq' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'null' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | '{' | '{|'
        this.whitespace();
        this.parse_IndexKeySpec();
      }
      this.eventHandler.endNonterminal("IndexDecl", this.e0);
    }

    private parse_ICDecl()
    {
      this.eventHandler.startNonterminal("ICDecl", this.e0);
      this.shift(163);              // 'integrity'
      this.lookahead1W(43);         // S^WS | '(:' | 'constraint'
      this.shift(98);               // 'constraint'
      this.lookahead1W(245);        // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      this.whitespace();
      this.parse_EQName();
      this.lookahead1W(124);        // S^WS | '(:' | 'foreign' | 'on'
      switch (this.l1)
      {
      case 201:                     // 'on'
        this.whitespace();
        this.parse_ICCollection();
        break;
      default:
        this.whitespace();
        this.parse_ICForeignKey();
      }
      this.eventHandler.endNonterminal("ICDecl", this.e0);
    }

    private parse_ICCollection()
    {
      this.eventHandler.startNonterminal("ICCollection", this.e0);
      this.shift(201);              // 'on'
      this.lookahead1W(42);         // S^WS | '(:' | 'collection'
      this.shift(96);               // 'collection'
      this.lookahead1W(245);        // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      this.whitespace();
      this.parse_EQName();
      this.lookahead1W(150);        // S^WS | '$' | '(:' | 'foreach' | 'node'
      switch (this.l1)
      {
      case 31:                      // '$'
        this.whitespace();
        this.parse_ICCollSequence();
        break;
      case 194:                     // 'node'
        this.whitespace();
        this.parse_ICCollSequenceUnique();
        break;
      default:
        this.whitespace();
        this.parse_ICCollNode();
      }
      this.eventHandler.endNonterminal("ICCollection", this.e0);
    }

    private parse_ICCollSequence()
    {
      this.eventHandler.startNonterminal("ICCollSequence", this.e0);
      this.parse_VarRef();
      this.lookahead1W(40);         // S^WS | '(:' | 'check'
      this.shift(93);               // 'check'
      this.lookahead1W(266);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.whitespace();
      this.parse_ExprSingle();
      this.eventHandler.endNonterminal("ICCollSequence", this.e0);
    }

    private parse_ICCollSequenceUnique()
    {
      this.eventHandler.startNonterminal("ICCollSequenceUnique", this.e0);
      this.shift(194);              // 'node'
      this.lookahead1W(21);         // S^WS | '$' | '(:'
      this.whitespace();
      this.parse_VarRef();
      this.lookahead1W(40);         // S^WS | '(:' | 'check'
      this.shift(93);               // 'check'
      this.lookahead1W(83);         // S^WS | '(:' | 'unique'
      this.shift(261);              // 'unique'
      this.lookahead1W(60);         // S^WS | '(:' | 'key'
      this.shift(171);              // 'key'
      this.lookahead1W(262);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(:' | '/' | '//' | '<' | '<!--' | '<?' | '[' |
                                    // 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'jsoniq' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'null' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | '{' | '{|'
      this.whitespace();
      this.parse_PathExpr();
      this.eventHandler.endNonterminal("ICCollSequenceUnique", this.e0);
    }

    private parse_ICCollNode()
    {
      this.eventHandler.startNonterminal("ICCollNode", this.e0);
      this.shift(140);              // 'foreach'
      this.lookahead1W(65);         // S^WS | '(:' | 'node'
      this.shift(194);              // 'node'
      this.lookahead1W(21);         // S^WS | '$' | '(:'
      this.whitespace();
      this.parse_VarRef();
      this.lookahead1W(40);         // S^WS | '(:' | 'check'
      this.shift(93);               // 'check'
      this.lookahead1W(266);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.whitespace();
      this.parse_ExprSingle();
      this.eventHandler.endNonterminal("ICCollNode", this.e0);
    }

    private parse_ICForeignKey()
    {
      this.eventHandler.startNonterminal("ICForeignKey", this.e0);
      this.shift(141);              // 'foreign'
      this.lookahead1W(60);         // S^WS | '(:' | 'key'
      this.shift(171);              // 'key'
      this.lookahead1W(54);         // S^WS | '(:' | 'from'
      this.whitespace();
      this.parse_ICForeignKeySource();
      this.whitespace();
      this.parse_ICForeignKeyTarget();
      this.eventHandler.endNonterminal("ICForeignKey", this.e0);
    }

    private parse_ICForeignKeySource()
    {
      this.eventHandler.startNonterminal("ICForeignKeySource", this.e0);
      this.shift(142);              // 'from'
      this.lookahead1W(42);         // S^WS | '(:' | 'collection'
      this.whitespace();
      this.parse_ICForeignKeyValues();
      this.eventHandler.endNonterminal("ICForeignKeySource", this.e0);
    }

    private parse_ICForeignKeyTarget()
    {
      this.eventHandler.startNonterminal("ICForeignKeyTarget", this.e0);
      this.shift(253);              // 'to'
      this.lookahead1W(42);         // S^WS | '(:' | 'collection'
      this.whitespace();
      this.parse_ICForeignKeyValues();
      this.eventHandler.endNonterminal("ICForeignKeyTarget", this.e0);
    }

    private parse_ICForeignKeyValues()
    {
      this.eventHandler.startNonterminal("ICForeignKeyValues", this.e0);
      this.shift(96);               // 'collection'
      this.lookahead1W(245);        // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      this.whitespace();
      this.parse_EQName();
      this.lookahead1W(65);         // S^WS | '(:' | 'node'
      this.shift(194);              // 'node'
      this.lookahead1W(21);         // S^WS | '$' | '(:'
      this.whitespace();
      this.parse_VarRef();
      this.lookahead1W(60);         // S^WS | '(:' | 'key'
      this.shift(171);              // 'key'
      this.lookahead1W(262);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(:' | '/' | '//' | '<' | '<!--' | '<?' | '[' |
                                    // 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'jsoniq' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'null' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | '{' | '{|'
      this.whitespace();
      this.parse_PathExpr();
      this.eventHandler.endNonterminal("ICForeignKeyValues", this.e0);
    }

    private try_Comment()
    {
      this.shiftT(37);              // '(:'
      for (;;)
      {
        this.lookahead1(92);        // CommentContents | '(:' | ':)'
        if (this.l1 == 51)          // ':)'
        {
          break;
        }
        switch (this.l1)
        {
        case 24:                    // CommentContents
          this.shiftT(24);          // CommentContents
          break;
        default:
          this.try_Comment();
        }
      }
      this.shiftT(51);              // ':)'
    }

    private try_Whitespace()
    {
      switch (this.l1)
      {
      case 22:                      // S^WS
        this.shiftT(22);            // S^WS
        break;
      default:
        this.try_Comment();
      }
    }

    private parse_EQName()
    {
      this.eventHandler.startNonterminal("EQName", this.e0);
      this.lookahead1(240);         // EQName^Token | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'jsoniq' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'null' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with'
      switch (this.l1)
      {
      case 83:                      // 'attribute'
        this.shift(83);             // 'attribute'
        break;
      case 97:                      // 'comment'
        this.shift(97);             // 'comment'
        break;
      case 121:                     // 'document-node'
        this.shift(121);            // 'document-node'
        break;
      case 122:                     // 'element'
        this.shift(122);            // 'element'
        break;
      case 125:                     // 'empty-sequence'
        this.shift(125);            // 'empty-sequence'
        break;
      case 147:                     // 'function'
        this.shift(147);            // 'function'
        break;
      case 154:                     // 'if'
        this.shift(154);            // 'if'
        break;
      case 167:                     // 'item'
        this.shift(167);            // 'item'
        break;
      case 188:                     // 'namespace-node'
        this.shift(188);            // 'namespace-node'
        break;
      case 194:                     // 'node'
        this.shift(194);            // 'node'
        break;
      case 220:                     // 'processing-instruction'
        this.shift(220);            // 'processing-instruction'
        break;
      case 230:                     // 'schema-attribute'
        this.shift(230);            // 'schema-attribute'
        break;
      case 231:                     // 'schema-element'
        this.shift(231);            // 'schema-element'
        break;
      case 248:                     // 'switch'
        this.shift(248);            // 'switch'
        break;
      case 249:                     // 'text'
        this.shift(249);            // 'text'
        break;
      case 259:                     // 'typeswitch'
        this.shift(259);            // 'typeswitch'
        break;
      case 79:                      // 'array'
        this.shift(79);             // 'array'
        break;
      case 169:                     // 'json-item'
        this.shift(169);            // 'json-item'
        break;
      case 247:                     // 'structured-item'
        this.shift(247);            // 'structured-item'
        break;
      default:
        this.parse_FunctionName();
      }
      this.eventHandler.endNonterminal("EQName", this.e0);
    }

    private try_EQName()
    {
      this.lookahead1(240);         // EQName^Token | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'jsoniq' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'null' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with'
      switch (this.l1)
      {
      case 83:                      // 'attribute'
        this.shiftT(83);            // 'attribute'
        break;
      case 97:                      // 'comment'
        this.shiftT(97);            // 'comment'
        break;
      case 121:                     // 'document-node'
        this.shiftT(121);           // 'document-node'
        break;
      case 122:                     // 'element'
        this.shiftT(122);           // 'element'
        break;
      case 125:                     // 'empty-sequence'
        this.shiftT(125);           // 'empty-sequence'
        break;
      case 147:                     // 'function'
        this.shiftT(147);           // 'function'
        break;
      case 154:                     // 'if'
        this.shiftT(154);           // 'if'
        break;
      case 167:                     // 'item'
        this.shiftT(167);           // 'item'
        break;
      case 188:                     // 'namespace-node'
        this.shiftT(188);           // 'namespace-node'
        break;
      case 194:                     // 'node'
        this.shiftT(194);           // 'node'
        break;
      case 220:                     // 'processing-instruction'
        this.shiftT(220);           // 'processing-instruction'
        break;
      case 230:                     // 'schema-attribute'
        this.shiftT(230);           // 'schema-attribute'
        break;
      case 231:                     // 'schema-element'
        this.shiftT(231);           // 'schema-element'
        break;
      case 248:                     // 'switch'
        this.shiftT(248);           // 'switch'
        break;
      case 249:                     // 'text'
        this.shiftT(249);           // 'text'
        break;
      case 259:                     // 'typeswitch'
        this.shiftT(259);           // 'typeswitch'
        break;
      case 79:                      // 'array'
        this.shiftT(79);            // 'array'
        break;
      case 169:                     // 'json-item'
        this.shiftT(169);           // 'json-item'
        break;
      case 247:                     // 'structured-item'
        this.shiftT(247);           // 'structured-item'
        break;
      default:
        this.try_FunctionName();
      }
    }

    private parse_FunctionName()
    {
      this.eventHandler.startNonterminal("FunctionName", this.e0);
      switch (this.l1)
      {
      case 6:                       // EQName^Token
        this.shift(6);              // EQName^Token
        break;
      case 71:                      // 'after'
        this.shift(71);             // 'after'
        break;
      case 74:                      // 'ancestor'
        this.shift(74);             // 'ancestor'
        break;
      case 75:                      // 'ancestor-or-self'
        this.shift(75);             // 'ancestor-or-self'
        break;
      case 76:                      // 'and'
        this.shift(76);             // 'and'
        break;
      case 80:                      // 'as'
        this.shift(80);             // 'as'
        break;
      case 81:                      // 'ascending'
        this.shift(81);             // 'ascending'
        break;
      case 85:                      // 'before'
        this.shift(85);             // 'before'
        break;
      case 89:                      // 'case'
        this.shift(89);             // 'case'
        break;
      case 90:                      // 'cast'
        this.shift(90);             // 'cast'
        break;
      case 91:                      // 'castable'
        this.shift(91);             // 'castable'
        break;
      case 94:                      // 'child'
        this.shift(94);             // 'child'
        break;
      case 95:                      // 'collation'
        this.shift(95);             // 'collation'
        break;
      case 104:                     // 'copy'
        this.shift(104);            // 'copy'
        break;
      case 106:                     // 'count'
        this.shift(106);            // 'count'
        break;
      case 109:                     // 'declare'
        this.shift(109);            // 'declare'
        break;
      case 110:                     // 'default'
        this.shift(110);            // 'default'
        break;
      case 111:                     // 'delete'
        this.shift(111);            // 'delete'
        break;
      case 112:                     // 'descendant'
        this.shift(112);            // 'descendant'
        break;
      case 113:                     // 'descendant-or-self'
        this.shift(113);            // 'descendant-or-self'
        break;
      case 114:                     // 'descending'
        this.shift(114);            // 'descending'
        break;
      case 119:                     // 'div'
        this.shift(119);            // 'div'
        break;
      case 120:                     // 'document'
        this.shift(120);            // 'document'
        break;
      case 123:                     // 'else'
        this.shift(123);            // 'else'
        break;
      case 124:                     // 'empty'
        this.shift(124);            // 'empty'
        break;
      case 127:                     // 'end'
        this.shift(127);            // 'end'
        break;
      case 129:                     // 'eq'
        this.shift(129);            // 'eq'
        break;
      case 130:                     // 'every'
        this.shift(130);            // 'every'
        break;
      case 132:                     // 'except'
        this.shift(132);            // 'except'
        break;
      case 136:                     // 'first'
        this.shift(136);            // 'first'
        break;
      case 137:                     // 'following'
        this.shift(137);            // 'following'
        break;
      case 138:                     // 'following-sibling'
        this.shift(138);            // 'following-sibling'
        break;
      case 139:                     // 'for'
        this.shift(139);            // 'for'
        break;
      case 148:                     // 'ge'
        this.shift(148);            // 'ge'
        break;
      case 150:                     // 'group'
        this.shift(150);            // 'group'
        break;
      case 152:                     // 'gt'
        this.shift(152);            // 'gt'
        break;
      case 153:                     // 'idiv'
        this.shift(153);            // 'idiv'
        break;
      case 155:                     // 'import'
        this.shift(155);            // 'import'
        break;
      case 161:                     // 'insert'
        this.shift(161);            // 'insert'
        break;
      case 162:                     // 'instance'
        this.shift(162);            // 'instance'
        break;
      case 164:                     // 'intersect'
        this.shift(164);            // 'intersect'
        break;
      case 165:                     // 'into'
        this.shift(165);            // 'into'
        break;
      case 166:                     // 'is'
        this.shift(166);            // 'is'
        break;
      case 173:                     // 'last'
        this.shift(173);            // 'last'
        break;
      case 175:                     // 'le'
        this.shift(175);            // 'le'
        break;
      case 177:                     // 'let'
        this.shift(177);            // 'let'
        break;
      case 181:                     // 'lt'
        this.shift(181);            // 'lt'
        break;
      case 183:                     // 'mod'
        this.shift(183);            // 'mod'
        break;
      case 184:                     // 'modify'
        this.shift(184);            // 'modify'
        break;
      case 185:                     // 'module'
        this.shift(185);            // 'module'
        break;
      case 187:                     // 'namespace'
        this.shift(187);            // 'namespace'
        break;
      case 189:                     // 'ne'
        this.shift(189);            // 'ne'
        break;
      case 202:                     // 'only'
        this.shift(202);            // 'only'
        break;
      case 204:                     // 'or'
        this.shift(204);            // 'or'
        break;
      case 205:                     // 'order'
        this.shift(205);            // 'order'
        break;
      case 206:                     // 'ordered'
        this.shift(206);            // 'ordered'
        break;
      case 210:                     // 'parent'
        this.shift(210);            // 'parent'
        break;
      case 216:                     // 'preceding'
        this.shift(216);            // 'preceding'
        break;
      case 217:                     // 'preceding-sibling'
        this.shift(217);            // 'preceding-sibling'
        break;
      case 222:                     // 'rename'
        this.shift(222);            // 'rename'
        break;
      case 223:                     // 'replace'
        this.shift(223);            // 'replace'
        break;
      case 224:                     // 'return'
        this.shift(224);            // 'return'
        break;
      case 228:                     // 'satisfies'
        this.shift(228);            // 'satisfies'
        break;
      case 234:                     // 'self'
        this.shift(234);            // 'self'
        break;
      case 240:                     // 'some'
        this.shift(240);            // 'some'
        break;
      case 241:                     // 'stable'
        this.shift(241);            // 'stable'
        break;
      case 242:                     // 'start'
        this.shift(242);            // 'start'
        break;
      case 253:                     // 'to'
        this.shift(253);            // 'to'
        break;
      case 254:                     // 'treat'
        this.shift(254);            // 'treat'
        break;
      case 256:                     // 'try'
        this.shift(256);            // 'try'
        break;
      case 260:                     // 'union'
        this.shift(260);            // 'union'
        break;
      case 262:                     // 'unordered'
        this.shift(262);            // 'unordered'
        break;
      case 266:                     // 'validate'
        this.shift(266);            // 'validate'
        break;
      case 272:                     // 'where'
        this.shift(272);            // 'where'
        break;
      case 276:                     // 'with'
        this.shift(276);            // 'with'
        break;
      case 170:                     // 'jsoniq'
        this.shift(170);            // 'jsoniq'
        break;
      case 73:                      // 'allowing'
        this.shift(73);             // 'allowing'
        break;
      case 82:                      // 'at'
        this.shift(82);             // 'at'
        break;
      case 84:                      // 'base-uri'
        this.shift(84);             // 'base-uri'
        break;
      case 86:                      // 'boundary-space'
        this.shift(86);             // 'boundary-space'
        break;
      case 87:                      // 'break'
        this.shift(87);             // 'break'
        break;
      case 92:                      // 'catch'
        this.shift(92);             // 'catch'
        break;
      case 99:                      // 'construction'
        this.shift(99);             // 'construction'
        break;
      case 102:                     // 'context'
        this.shift(102);            // 'context'
        break;
      case 103:                     // 'continue'
        this.shift(103);            // 'continue'
        break;
      case 105:                     // 'copy-namespaces'
        this.shift(105);            // 'copy-namespaces'
        break;
      case 107:                     // 'decimal-format'
        this.shift(107);            // 'decimal-format'
        break;
      case 126:                     // 'encoding'
        this.shift(126);            // 'encoding'
        break;
      case 133:                     // 'exit'
        this.shift(133);            // 'exit'
        break;
      case 134:                     // 'external'
        this.shift(134);            // 'external'
        break;
      case 143:                     // 'ft-option'
        this.shift(143);            // 'ft-option'
        break;
      case 156:                     // 'in'
        this.shift(156);            // 'in'
        break;
      case 157:                     // 'index'
        this.shift(157);            // 'index'
        break;
      case 163:                     // 'integrity'
        this.shift(163);            // 'integrity'
        break;
      case 174:                     // 'lax'
        this.shift(174);            // 'lax'
        break;
      case 195:                     // 'nodes'
        this.shift(195);            // 'nodes'
        break;
      case 203:                     // 'option'
        this.shift(203);            // 'option'
        break;
      case 207:                     // 'ordering'
        this.shift(207);            // 'ordering'
        break;
      case 226:                     // 'revalidation'
        this.shift(226);            // 'revalidation'
        break;
      case 229:                     // 'schema'
        this.shift(229);            // 'schema'
        break;
      case 232:                     // 'score'
        this.shift(232);            // 'score'
        break;
      case 239:                     // 'sliding'
        this.shift(239);            // 'sliding'
        break;
      case 245:                     // 'strict'
        this.shift(245);            // 'strict'
        break;
      case 257:                     // 'tumbling'
        this.shift(257);            // 'tumbling'
        break;
      case 258:                     // 'type'
        this.shift(258);            // 'type'
        break;
      case 263:                     // 'updating'
        this.shift(263);            // 'updating'
        break;
      case 267:                     // 'value'
        this.shift(267);            // 'value'
        break;
      case 268:                     // 'variable'
        this.shift(268);            // 'variable'
        break;
      case 269:                     // 'version'
        this.shift(269);            // 'version'
        break;
      case 273:                     // 'while'
        this.shift(273);            // 'while'
        break;
      case 98:                      // 'constraint'
        this.shift(98);             // 'constraint'
        break;
      case 179:                     // 'loop'
        this.shift(179);            // 'loop'
        break;
      case 225:                     // 'returning'
        this.shift(225);            // 'returning'
        break;
      case 78:                      // 'append'
        this.shift(78);             // 'append'
        break;
      case 135:                     // 'false'
        this.shift(135);            // 'false'
        break;
      case 142:                     // 'from'
        this.shift(142);            // 'from'
        break;
      case 197:                     // 'null'
        this.shift(197);            // 'null'
        break;
      case 168:                     // 'json'
        this.shift(168);            // 'json'
        break;
      case 198:                     // 'object'
        this.shift(198);            // 'object'
        break;
      case 233:                     // 'select'
        this.shift(233);            // 'select'
        break;
      default:
        this.shift(255);            // 'true'
      }
      this.eventHandler.endNonterminal("FunctionName", this.e0);
    }

    private try_FunctionName()
    {
      switch (this.l1)
      {
      case 6:                       // EQName^Token
        this.shiftT(6);             // EQName^Token
        break;
      case 71:                      // 'after'
        this.shiftT(71);            // 'after'
        break;
      case 74:                      // 'ancestor'
        this.shiftT(74);            // 'ancestor'
        break;
      case 75:                      // 'ancestor-or-self'
        this.shiftT(75);            // 'ancestor-or-self'
        break;
      case 76:                      // 'and'
        this.shiftT(76);            // 'and'
        break;
      case 80:                      // 'as'
        this.shiftT(80);            // 'as'
        break;
      case 81:                      // 'ascending'
        this.shiftT(81);            // 'ascending'
        break;
      case 85:                      // 'before'
        this.shiftT(85);            // 'before'
        break;
      case 89:                      // 'case'
        this.shiftT(89);            // 'case'
        break;
      case 90:                      // 'cast'
        this.shiftT(90);            // 'cast'
        break;
      case 91:                      // 'castable'
        this.shiftT(91);            // 'castable'
        break;
      case 94:                      // 'child'
        this.shiftT(94);            // 'child'
        break;
      case 95:                      // 'collation'
        this.shiftT(95);            // 'collation'
        break;
      case 104:                     // 'copy'
        this.shiftT(104);           // 'copy'
        break;
      case 106:                     // 'count'
        this.shiftT(106);           // 'count'
        break;
      case 109:                     // 'declare'
        this.shiftT(109);           // 'declare'
        break;
      case 110:                     // 'default'
        this.shiftT(110);           // 'default'
        break;
      case 111:                     // 'delete'
        this.shiftT(111);           // 'delete'
        break;
      case 112:                     // 'descendant'
        this.shiftT(112);           // 'descendant'
        break;
      case 113:                     // 'descendant-or-self'
        this.shiftT(113);           // 'descendant-or-self'
        break;
      case 114:                     // 'descending'
        this.shiftT(114);           // 'descending'
        break;
      case 119:                     // 'div'
        this.shiftT(119);           // 'div'
        break;
      case 120:                     // 'document'
        this.shiftT(120);           // 'document'
        break;
      case 123:                     // 'else'
        this.shiftT(123);           // 'else'
        break;
      case 124:                     // 'empty'
        this.shiftT(124);           // 'empty'
        break;
      case 127:                     // 'end'
        this.shiftT(127);           // 'end'
        break;
      case 129:                     // 'eq'
        this.shiftT(129);           // 'eq'
        break;
      case 130:                     // 'every'
        this.shiftT(130);           // 'every'
        break;
      case 132:                     // 'except'
        this.shiftT(132);           // 'except'
        break;
      case 136:                     // 'first'
        this.shiftT(136);           // 'first'
        break;
      case 137:                     // 'following'
        this.shiftT(137);           // 'following'
        break;
      case 138:                     // 'following-sibling'
        this.shiftT(138);           // 'following-sibling'
        break;
      case 139:                     // 'for'
        this.shiftT(139);           // 'for'
        break;
      case 148:                     // 'ge'
        this.shiftT(148);           // 'ge'
        break;
      case 150:                     // 'group'
        this.shiftT(150);           // 'group'
        break;
      case 152:                     // 'gt'
        this.shiftT(152);           // 'gt'
        break;
      case 153:                     // 'idiv'
        this.shiftT(153);           // 'idiv'
        break;
      case 155:                     // 'import'
        this.shiftT(155);           // 'import'
        break;
      case 161:                     // 'insert'
        this.shiftT(161);           // 'insert'
        break;
      case 162:                     // 'instance'
        this.shiftT(162);           // 'instance'
        break;
      case 164:                     // 'intersect'
        this.shiftT(164);           // 'intersect'
        break;
      case 165:                     // 'into'
        this.shiftT(165);           // 'into'
        break;
      case 166:                     // 'is'
        this.shiftT(166);           // 'is'
        break;
      case 173:                     // 'last'
        this.shiftT(173);           // 'last'
        break;
      case 175:                     // 'le'
        this.shiftT(175);           // 'le'
        break;
      case 177:                     // 'let'
        this.shiftT(177);           // 'let'
        break;
      case 181:                     // 'lt'
        this.shiftT(181);           // 'lt'
        break;
      case 183:                     // 'mod'
        this.shiftT(183);           // 'mod'
        break;
      case 184:                     // 'modify'
        this.shiftT(184);           // 'modify'
        break;
      case 185:                     // 'module'
        this.shiftT(185);           // 'module'
        break;
      case 187:                     // 'namespace'
        this.shiftT(187);           // 'namespace'
        break;
      case 189:                     // 'ne'
        this.shiftT(189);           // 'ne'
        break;
      case 202:                     // 'only'
        this.shiftT(202);           // 'only'
        break;
      case 204:                     // 'or'
        this.shiftT(204);           // 'or'
        break;
      case 205:                     // 'order'
        this.shiftT(205);           // 'order'
        break;
      case 206:                     // 'ordered'
        this.shiftT(206);           // 'ordered'
        break;
      case 210:                     // 'parent'
        this.shiftT(210);           // 'parent'
        break;
      case 216:                     // 'preceding'
        this.shiftT(216);           // 'preceding'
        break;
      case 217:                     // 'preceding-sibling'
        this.shiftT(217);           // 'preceding-sibling'
        break;
      case 222:                     // 'rename'
        this.shiftT(222);           // 'rename'
        break;
      case 223:                     // 'replace'
        this.shiftT(223);           // 'replace'
        break;
      case 224:                     // 'return'
        this.shiftT(224);           // 'return'
        break;
      case 228:                     // 'satisfies'
        this.shiftT(228);           // 'satisfies'
        break;
      case 234:                     // 'self'
        this.shiftT(234);           // 'self'
        break;
      case 240:                     // 'some'
        this.shiftT(240);           // 'some'
        break;
      case 241:                     // 'stable'
        this.shiftT(241);           // 'stable'
        break;
      case 242:                     // 'start'
        this.shiftT(242);           // 'start'
        break;
      case 253:                     // 'to'
        this.shiftT(253);           // 'to'
        break;
      case 254:                     // 'treat'
        this.shiftT(254);           // 'treat'
        break;
      case 256:                     // 'try'
        this.shiftT(256);           // 'try'
        break;
      case 260:                     // 'union'
        this.shiftT(260);           // 'union'
        break;
      case 262:                     // 'unordered'
        this.shiftT(262);           // 'unordered'
        break;
      case 266:                     // 'validate'
        this.shiftT(266);           // 'validate'
        break;
      case 272:                     // 'where'
        this.shiftT(272);           // 'where'
        break;
      case 276:                     // 'with'
        this.shiftT(276);           // 'with'
        break;
      case 170:                     // 'jsoniq'
        this.shiftT(170);           // 'jsoniq'
        break;
      case 73:                      // 'allowing'
        this.shiftT(73);            // 'allowing'
        break;
      case 82:                      // 'at'
        this.shiftT(82);            // 'at'
        break;
      case 84:                      // 'base-uri'
        this.shiftT(84);            // 'base-uri'
        break;
      case 86:                      // 'boundary-space'
        this.shiftT(86);            // 'boundary-space'
        break;
      case 87:                      // 'break'
        this.shiftT(87);            // 'break'
        break;
      case 92:                      // 'catch'
        this.shiftT(92);            // 'catch'
        break;
      case 99:                      // 'construction'
        this.shiftT(99);            // 'construction'
        break;
      case 102:                     // 'context'
        this.shiftT(102);           // 'context'
        break;
      case 103:                     // 'continue'
        this.shiftT(103);           // 'continue'
        break;
      case 105:                     // 'copy-namespaces'
        this.shiftT(105);           // 'copy-namespaces'
        break;
      case 107:                     // 'decimal-format'
        this.shiftT(107);           // 'decimal-format'
        break;
      case 126:                     // 'encoding'
        this.shiftT(126);           // 'encoding'
        break;
      case 133:                     // 'exit'
        this.shiftT(133);           // 'exit'
        break;
      case 134:                     // 'external'
        this.shiftT(134);           // 'external'
        break;
      case 143:                     // 'ft-option'
        this.shiftT(143);           // 'ft-option'
        break;
      case 156:                     // 'in'
        this.shiftT(156);           // 'in'
        break;
      case 157:                     // 'index'
        this.shiftT(157);           // 'index'
        break;
      case 163:                     // 'integrity'
        this.shiftT(163);           // 'integrity'
        break;
      case 174:                     // 'lax'
        this.shiftT(174);           // 'lax'
        break;
      case 195:                     // 'nodes'
        this.shiftT(195);           // 'nodes'
        break;
      case 203:                     // 'option'
        this.shiftT(203);           // 'option'
        break;
      case 207:                     // 'ordering'
        this.shiftT(207);           // 'ordering'
        break;
      case 226:                     // 'revalidation'
        this.shiftT(226);           // 'revalidation'
        break;
      case 229:                     // 'schema'
        this.shiftT(229);           // 'schema'
        break;
      case 232:                     // 'score'
        this.shiftT(232);           // 'score'
        break;
      case 239:                     // 'sliding'
        this.shiftT(239);           // 'sliding'
        break;
      case 245:                     // 'strict'
        this.shiftT(245);           // 'strict'
        break;
      case 257:                     // 'tumbling'
        this.shiftT(257);           // 'tumbling'
        break;
      case 258:                     // 'type'
        this.shiftT(258);           // 'type'
        break;
      case 263:                     // 'updating'
        this.shiftT(263);           // 'updating'
        break;
      case 267:                     // 'value'
        this.shiftT(267);           // 'value'
        break;
      case 268:                     // 'variable'
        this.shiftT(268);           // 'variable'
        break;
      case 269:                     // 'version'
        this.shiftT(269);           // 'version'
        break;
      case 273:                     // 'while'
        this.shiftT(273);           // 'while'
        break;
      case 98:                      // 'constraint'
        this.shiftT(98);            // 'constraint'
        break;
      case 179:                     // 'loop'
        this.shiftT(179);           // 'loop'
        break;
      case 225:                     // 'returning'
        this.shiftT(225);           // 'returning'
        break;
      case 78:                      // 'append'
        this.shiftT(78);            // 'append'
        break;
      case 135:                     // 'false'
        this.shiftT(135);           // 'false'
        break;
      case 142:                     // 'from'
        this.shiftT(142);           // 'from'
        break;
      case 197:                     // 'null'
        this.shiftT(197);           // 'null'
        break;
      case 168:                     // 'json'
        this.shiftT(168);           // 'json'
        break;
      case 198:                     // 'object'
        this.shiftT(198);           // 'object'
        break;
      case 233:                     // 'select'
        this.shiftT(233);           // 'select'
        break;
      default:
        this.shiftT(255);           // 'true'
      }
    }

    private parse_NCName()
    {
      this.eventHandler.startNonterminal("NCName", this.e0);
      switch (this.l1)
      {
      case 19:                      // NCName^Token
        this.shift(19);             // NCName^Token
        break;
      case 71:                      // 'after'
        this.shift(71);             // 'after'
        break;
      case 76:                      // 'and'
        this.shift(76);             // 'and'
        break;
      case 80:                      // 'as'
        this.shift(80);             // 'as'
        break;
      case 81:                      // 'ascending'
        this.shift(81);             // 'ascending'
        break;
      case 85:                      // 'before'
        this.shift(85);             // 'before'
        break;
      case 89:                      // 'case'
        this.shift(89);             // 'case'
        break;
      case 90:                      // 'cast'
        this.shift(90);             // 'cast'
        break;
      case 91:                      // 'castable'
        this.shift(91);             // 'castable'
        break;
      case 95:                      // 'collation'
        this.shift(95);             // 'collation'
        break;
      case 106:                     // 'count'
        this.shift(106);            // 'count'
        break;
      case 110:                     // 'default'
        this.shift(110);            // 'default'
        break;
      case 114:                     // 'descending'
        this.shift(114);            // 'descending'
        break;
      case 119:                     // 'div'
        this.shift(119);            // 'div'
        break;
      case 123:                     // 'else'
        this.shift(123);            // 'else'
        break;
      case 124:                     // 'empty'
        this.shift(124);            // 'empty'
        break;
      case 127:                     // 'end'
        this.shift(127);            // 'end'
        break;
      case 129:                     // 'eq'
        this.shift(129);            // 'eq'
        break;
      case 132:                     // 'except'
        this.shift(132);            // 'except'
        break;
      case 139:                     // 'for'
        this.shift(139);            // 'for'
        break;
      case 148:                     // 'ge'
        this.shift(148);            // 'ge'
        break;
      case 150:                     // 'group'
        this.shift(150);            // 'group'
        break;
      case 152:                     // 'gt'
        this.shift(152);            // 'gt'
        break;
      case 153:                     // 'idiv'
        this.shift(153);            // 'idiv'
        break;
      case 162:                     // 'instance'
        this.shift(162);            // 'instance'
        break;
      case 164:                     // 'intersect'
        this.shift(164);            // 'intersect'
        break;
      case 165:                     // 'into'
        this.shift(165);            // 'into'
        break;
      case 166:                     // 'is'
        this.shift(166);            // 'is'
        break;
      case 175:                     // 'le'
        this.shift(175);            // 'le'
        break;
      case 177:                     // 'let'
        this.shift(177);            // 'let'
        break;
      case 181:                     // 'lt'
        this.shift(181);            // 'lt'
        break;
      case 183:                     // 'mod'
        this.shift(183);            // 'mod'
        break;
      case 184:                     // 'modify'
        this.shift(184);            // 'modify'
        break;
      case 189:                     // 'ne'
        this.shift(189);            // 'ne'
        break;
      case 202:                     // 'only'
        this.shift(202);            // 'only'
        break;
      case 204:                     // 'or'
        this.shift(204);            // 'or'
        break;
      case 205:                     // 'order'
        this.shift(205);            // 'order'
        break;
      case 224:                     // 'return'
        this.shift(224);            // 'return'
        break;
      case 228:                     // 'satisfies'
        this.shift(228);            // 'satisfies'
        break;
      case 241:                     // 'stable'
        this.shift(241);            // 'stable'
        break;
      case 242:                     // 'start'
        this.shift(242);            // 'start'
        break;
      case 253:                     // 'to'
        this.shift(253);            // 'to'
        break;
      case 254:                     // 'treat'
        this.shift(254);            // 'treat'
        break;
      case 260:                     // 'union'
        this.shift(260);            // 'union'
        break;
      case 272:                     // 'where'
        this.shift(272);            // 'where'
        break;
      case 276:                     // 'with'
        this.shift(276);            // 'with'
        break;
      case 74:                      // 'ancestor'
        this.shift(74);             // 'ancestor'
        break;
      case 75:                      // 'ancestor-or-self'
        this.shift(75);             // 'ancestor-or-self'
        break;
      case 83:                      // 'attribute'
        this.shift(83);             // 'attribute'
        break;
      case 94:                      // 'child'
        this.shift(94);             // 'child'
        break;
      case 97:                      // 'comment'
        this.shift(97);             // 'comment'
        break;
      case 104:                     // 'copy'
        this.shift(104);            // 'copy'
        break;
      case 109:                     // 'declare'
        this.shift(109);            // 'declare'
        break;
      case 111:                     // 'delete'
        this.shift(111);            // 'delete'
        break;
      case 112:                     // 'descendant'
        this.shift(112);            // 'descendant'
        break;
      case 113:                     // 'descendant-or-self'
        this.shift(113);            // 'descendant-or-self'
        break;
      case 120:                     // 'document'
        this.shift(120);            // 'document'
        break;
      case 121:                     // 'document-node'
        this.shift(121);            // 'document-node'
        break;
      case 122:                     // 'element'
        this.shift(122);            // 'element'
        break;
      case 125:                     // 'empty-sequence'
        this.shift(125);            // 'empty-sequence'
        break;
      case 130:                     // 'every'
        this.shift(130);            // 'every'
        break;
      case 136:                     // 'first'
        this.shift(136);            // 'first'
        break;
      case 137:                     // 'following'
        this.shift(137);            // 'following'
        break;
      case 138:                     // 'following-sibling'
        this.shift(138);            // 'following-sibling'
        break;
      case 147:                     // 'function'
        this.shift(147);            // 'function'
        break;
      case 154:                     // 'if'
        this.shift(154);            // 'if'
        break;
      case 155:                     // 'import'
        this.shift(155);            // 'import'
        break;
      case 161:                     // 'insert'
        this.shift(161);            // 'insert'
        break;
      case 167:                     // 'item'
        this.shift(167);            // 'item'
        break;
      case 173:                     // 'last'
        this.shift(173);            // 'last'
        break;
      case 185:                     // 'module'
        this.shift(185);            // 'module'
        break;
      case 187:                     // 'namespace'
        this.shift(187);            // 'namespace'
        break;
      case 188:                     // 'namespace-node'
        this.shift(188);            // 'namespace-node'
        break;
      case 194:                     // 'node'
        this.shift(194);            // 'node'
        break;
      case 206:                     // 'ordered'
        this.shift(206);            // 'ordered'
        break;
      case 210:                     // 'parent'
        this.shift(210);            // 'parent'
        break;
      case 216:                     // 'preceding'
        this.shift(216);            // 'preceding'
        break;
      case 217:                     // 'preceding-sibling'
        this.shift(217);            // 'preceding-sibling'
        break;
      case 220:                     // 'processing-instruction'
        this.shift(220);            // 'processing-instruction'
        break;
      case 222:                     // 'rename'
        this.shift(222);            // 'rename'
        break;
      case 223:                     // 'replace'
        this.shift(223);            // 'replace'
        break;
      case 230:                     // 'schema-attribute'
        this.shift(230);            // 'schema-attribute'
        break;
      case 231:                     // 'schema-element'
        this.shift(231);            // 'schema-element'
        break;
      case 234:                     // 'self'
        this.shift(234);            // 'self'
        break;
      case 240:                     // 'some'
        this.shift(240);            // 'some'
        break;
      case 248:                     // 'switch'
        this.shift(248);            // 'switch'
        break;
      case 249:                     // 'text'
        this.shift(249);            // 'text'
        break;
      case 256:                     // 'try'
        this.shift(256);            // 'try'
        break;
      case 259:                     // 'typeswitch'
        this.shift(259);            // 'typeswitch'
        break;
      case 262:                     // 'unordered'
        this.shift(262);            // 'unordered'
        break;
      case 266:                     // 'validate'
        this.shift(266);            // 'validate'
        break;
      case 268:                     // 'variable'
        this.shift(268);            // 'variable'
        break;
      case 170:                     // 'jsoniq'
        this.shift(170);            // 'jsoniq'
        break;
      case 73:                      // 'allowing'
        this.shift(73);             // 'allowing'
        break;
      case 82:                      // 'at'
        this.shift(82);             // 'at'
        break;
      case 84:                      // 'base-uri'
        this.shift(84);             // 'base-uri'
        break;
      case 86:                      // 'boundary-space'
        this.shift(86);             // 'boundary-space'
        break;
      case 87:                      // 'break'
        this.shift(87);             // 'break'
        break;
      case 92:                      // 'catch'
        this.shift(92);             // 'catch'
        break;
      case 99:                      // 'construction'
        this.shift(99);             // 'construction'
        break;
      case 102:                     // 'context'
        this.shift(102);            // 'context'
        break;
      case 103:                     // 'continue'
        this.shift(103);            // 'continue'
        break;
      case 105:                     // 'copy-namespaces'
        this.shift(105);            // 'copy-namespaces'
        break;
      case 107:                     // 'decimal-format'
        this.shift(107);            // 'decimal-format'
        break;
      case 126:                     // 'encoding'
        this.shift(126);            // 'encoding'
        break;
      case 133:                     // 'exit'
        this.shift(133);            // 'exit'
        break;
      case 134:                     // 'external'
        this.shift(134);            // 'external'
        break;
      case 143:                     // 'ft-option'
        this.shift(143);            // 'ft-option'
        break;
      case 156:                     // 'in'
        this.shift(156);            // 'in'
        break;
      case 157:                     // 'index'
        this.shift(157);            // 'index'
        break;
      case 163:                     // 'integrity'
        this.shift(163);            // 'integrity'
        break;
      case 174:                     // 'lax'
        this.shift(174);            // 'lax'
        break;
      case 195:                     // 'nodes'
        this.shift(195);            // 'nodes'
        break;
      case 203:                     // 'option'
        this.shift(203);            // 'option'
        break;
      case 207:                     // 'ordering'
        this.shift(207);            // 'ordering'
        break;
      case 226:                     // 'revalidation'
        this.shift(226);            // 'revalidation'
        break;
      case 229:                     // 'schema'
        this.shift(229);            // 'schema'
        break;
      case 232:                     // 'score'
        this.shift(232);            // 'score'
        break;
      case 239:                     // 'sliding'
        this.shift(239);            // 'sliding'
        break;
      case 245:                     // 'strict'
        this.shift(245);            // 'strict'
        break;
      case 257:                     // 'tumbling'
        this.shift(257);            // 'tumbling'
        break;
      case 258:                     // 'type'
        this.shift(258);            // 'type'
        break;
      case 263:                     // 'updating'
        this.shift(263);            // 'updating'
        break;
      case 267:                     // 'value'
        this.shift(267);            // 'value'
        break;
      case 269:                     // 'version'
        this.shift(269);            // 'version'
        break;
      case 273:                     // 'while'
        this.shift(273);            // 'while'
        break;
      case 98:                      // 'constraint'
        this.shift(98);             // 'constraint'
        break;
      case 179:                     // 'loop'
        this.shift(179);            // 'loop'
        break;
      case 225:                     // 'returning'
        this.shift(225);            // 'returning'
        break;
      case 78:                      // 'append'
        this.shift(78);             // 'append'
        break;
      case 135:                     // 'false'
        this.shift(135);            // 'false'
        break;
      case 142:                     // 'from'
        this.shift(142);            // 'from'
        break;
      case 197:                     // 'null'
        this.shift(197);            // 'null'
        break;
      case 168:                     // 'json'
        this.shift(168);            // 'json'
        break;
      case 198:                     // 'object'
        this.shift(198);            // 'object'
        break;
      case 233:                     // 'select'
        this.shift(233);            // 'select'
        break;
      default:
        this.shift(255);            // 'true'
      }
      this.eventHandler.endNonterminal("NCName", this.e0);
    }

    private try_NCName()
    {
      switch (this.l1)
      {
      case 19:                      // NCName^Token
        this.shiftT(19);            // NCName^Token
        break;
      case 71:                      // 'after'
        this.shiftT(71);            // 'after'
        break;
      case 76:                      // 'and'
        this.shiftT(76);            // 'and'
        break;
      case 80:                      // 'as'
        this.shiftT(80);            // 'as'
        break;
      case 81:                      // 'ascending'
        this.shiftT(81);            // 'ascending'
        break;
      case 85:                      // 'before'
        this.shiftT(85);            // 'before'
        break;
      case 89:                      // 'case'
        this.shiftT(89);            // 'case'
        break;
      case 90:                      // 'cast'
        this.shiftT(90);            // 'cast'
        break;
      case 91:                      // 'castable'
        this.shiftT(91);            // 'castable'
        break;
      case 95:                      // 'collation'
        this.shiftT(95);            // 'collation'
        break;
      case 106:                     // 'count'
        this.shiftT(106);           // 'count'
        break;
      case 110:                     // 'default'
        this.shiftT(110);           // 'default'
        break;
      case 114:                     // 'descending'
        this.shiftT(114);           // 'descending'
        break;
      case 119:                     // 'div'
        this.shiftT(119);           // 'div'
        break;
      case 123:                     // 'else'
        this.shiftT(123);           // 'else'
        break;
      case 124:                     // 'empty'
        this.shiftT(124);           // 'empty'
        break;
      case 127:                     // 'end'
        this.shiftT(127);           // 'end'
        break;
      case 129:                     // 'eq'
        this.shiftT(129);           // 'eq'
        break;
      case 132:                     // 'except'
        this.shiftT(132);           // 'except'
        break;
      case 139:                     // 'for'
        this.shiftT(139);           // 'for'
        break;
      case 148:                     // 'ge'
        this.shiftT(148);           // 'ge'
        break;
      case 150:                     // 'group'
        this.shiftT(150);           // 'group'
        break;
      case 152:                     // 'gt'
        this.shiftT(152);           // 'gt'
        break;
      case 153:                     // 'idiv'
        this.shiftT(153);           // 'idiv'
        break;
      case 162:                     // 'instance'
        this.shiftT(162);           // 'instance'
        break;
      case 164:                     // 'intersect'
        this.shiftT(164);           // 'intersect'
        break;
      case 165:                     // 'into'
        this.shiftT(165);           // 'into'
        break;
      case 166:                     // 'is'
        this.shiftT(166);           // 'is'
        break;
      case 175:                     // 'le'
        this.shiftT(175);           // 'le'
        break;
      case 177:                     // 'let'
        this.shiftT(177);           // 'let'
        break;
      case 181:                     // 'lt'
        this.shiftT(181);           // 'lt'
        break;
      case 183:                     // 'mod'
        this.shiftT(183);           // 'mod'
        break;
      case 184:                     // 'modify'
        this.shiftT(184);           // 'modify'
        break;
      case 189:                     // 'ne'
        this.shiftT(189);           // 'ne'
        break;
      case 202:                     // 'only'
        this.shiftT(202);           // 'only'
        break;
      case 204:                     // 'or'
        this.shiftT(204);           // 'or'
        break;
      case 205:                     // 'order'
        this.shiftT(205);           // 'order'
        break;
      case 224:                     // 'return'
        this.shiftT(224);           // 'return'
        break;
      case 228:                     // 'satisfies'
        this.shiftT(228);           // 'satisfies'
        break;
      case 241:                     // 'stable'
        this.shiftT(241);           // 'stable'
        break;
      case 242:                     // 'start'
        this.shiftT(242);           // 'start'
        break;
      case 253:                     // 'to'
        this.shiftT(253);           // 'to'
        break;
      case 254:                     // 'treat'
        this.shiftT(254);           // 'treat'
        break;
      case 260:                     // 'union'
        this.shiftT(260);           // 'union'
        break;
      case 272:                     // 'where'
        this.shiftT(272);           // 'where'
        break;
      case 276:                     // 'with'
        this.shiftT(276);           // 'with'
        break;
      case 74:                      // 'ancestor'
        this.shiftT(74);            // 'ancestor'
        break;
      case 75:                      // 'ancestor-or-self'
        this.shiftT(75);            // 'ancestor-or-self'
        break;
      case 83:                      // 'attribute'
        this.shiftT(83);            // 'attribute'
        break;
      case 94:                      // 'child'
        this.shiftT(94);            // 'child'
        break;
      case 97:                      // 'comment'
        this.shiftT(97);            // 'comment'
        break;
      case 104:                     // 'copy'
        this.shiftT(104);           // 'copy'
        break;
      case 109:                     // 'declare'
        this.shiftT(109);           // 'declare'
        break;
      case 111:                     // 'delete'
        this.shiftT(111);           // 'delete'
        break;
      case 112:                     // 'descendant'
        this.shiftT(112);           // 'descendant'
        break;
      case 113:                     // 'descendant-or-self'
        this.shiftT(113);           // 'descendant-or-self'
        break;
      case 120:                     // 'document'
        this.shiftT(120);           // 'document'
        break;
      case 121:                     // 'document-node'
        this.shiftT(121);           // 'document-node'
        break;
      case 122:                     // 'element'
        this.shiftT(122);           // 'element'
        break;
      case 125:                     // 'empty-sequence'
        this.shiftT(125);           // 'empty-sequence'
        break;
      case 130:                     // 'every'
        this.shiftT(130);           // 'every'
        break;
      case 136:                     // 'first'
        this.shiftT(136);           // 'first'
        break;
      case 137:                     // 'following'
        this.shiftT(137);           // 'following'
        break;
      case 138:                     // 'following-sibling'
        this.shiftT(138);           // 'following-sibling'
        break;
      case 147:                     // 'function'
        this.shiftT(147);           // 'function'
        break;
      case 154:                     // 'if'
        this.shiftT(154);           // 'if'
        break;
      case 155:                     // 'import'
        this.shiftT(155);           // 'import'
        break;
      case 161:                     // 'insert'
        this.shiftT(161);           // 'insert'
        break;
      case 167:                     // 'item'
        this.shiftT(167);           // 'item'
        break;
      case 173:                     // 'last'
        this.shiftT(173);           // 'last'
        break;
      case 185:                     // 'module'
        this.shiftT(185);           // 'module'
        break;
      case 187:                     // 'namespace'
        this.shiftT(187);           // 'namespace'
        break;
      case 188:                     // 'namespace-node'
        this.shiftT(188);           // 'namespace-node'
        break;
      case 194:                     // 'node'
        this.shiftT(194);           // 'node'
        break;
      case 206:                     // 'ordered'
        this.shiftT(206);           // 'ordered'
        break;
      case 210:                     // 'parent'
        this.shiftT(210);           // 'parent'
        break;
      case 216:                     // 'preceding'
        this.shiftT(216);           // 'preceding'
        break;
      case 217:                     // 'preceding-sibling'
        this.shiftT(217);           // 'preceding-sibling'
        break;
      case 220:                     // 'processing-instruction'
        this.shiftT(220);           // 'processing-instruction'
        break;
      case 222:                     // 'rename'
        this.shiftT(222);           // 'rename'
        break;
      case 223:                     // 'replace'
        this.shiftT(223);           // 'replace'
        break;
      case 230:                     // 'schema-attribute'
        this.shiftT(230);           // 'schema-attribute'
        break;
      case 231:                     // 'schema-element'
        this.shiftT(231);           // 'schema-element'
        break;
      case 234:                     // 'self'
        this.shiftT(234);           // 'self'
        break;
      case 240:                     // 'some'
        this.shiftT(240);           // 'some'
        break;
      case 248:                     // 'switch'
        this.shiftT(248);           // 'switch'
        break;
      case 249:                     // 'text'
        this.shiftT(249);           // 'text'
        break;
      case 256:                     // 'try'
        this.shiftT(256);           // 'try'
        break;
      case 259:                     // 'typeswitch'
        this.shiftT(259);           // 'typeswitch'
        break;
      case 262:                     // 'unordered'
        this.shiftT(262);           // 'unordered'
        break;
      case 266:                     // 'validate'
        this.shiftT(266);           // 'validate'
        break;
      case 268:                     // 'variable'
        this.shiftT(268);           // 'variable'
        break;
      case 170:                     // 'jsoniq'
        this.shiftT(170);           // 'jsoniq'
        break;
      case 73:                      // 'allowing'
        this.shiftT(73);            // 'allowing'
        break;
      case 82:                      // 'at'
        this.shiftT(82);            // 'at'
        break;
      case 84:                      // 'base-uri'
        this.shiftT(84);            // 'base-uri'
        break;
      case 86:                      // 'boundary-space'
        this.shiftT(86);            // 'boundary-space'
        break;
      case 87:                      // 'break'
        this.shiftT(87);            // 'break'
        break;
      case 92:                      // 'catch'
        this.shiftT(92);            // 'catch'
        break;
      case 99:                      // 'construction'
        this.shiftT(99);            // 'construction'
        break;
      case 102:                     // 'context'
        this.shiftT(102);           // 'context'
        break;
      case 103:                     // 'continue'
        this.shiftT(103);           // 'continue'
        break;
      case 105:                     // 'copy-namespaces'
        this.shiftT(105);           // 'copy-namespaces'
        break;
      case 107:                     // 'decimal-format'
        this.shiftT(107);           // 'decimal-format'
        break;
      case 126:                     // 'encoding'
        this.shiftT(126);           // 'encoding'
        break;
      case 133:                     // 'exit'
        this.shiftT(133);           // 'exit'
        break;
      case 134:                     // 'external'
        this.shiftT(134);           // 'external'
        break;
      case 143:                     // 'ft-option'
        this.shiftT(143);           // 'ft-option'
        break;
      case 156:                     // 'in'
        this.shiftT(156);           // 'in'
        break;
      case 157:                     // 'index'
        this.shiftT(157);           // 'index'
        break;
      case 163:                     // 'integrity'
        this.shiftT(163);           // 'integrity'
        break;
      case 174:                     // 'lax'
        this.shiftT(174);           // 'lax'
        break;
      case 195:                     // 'nodes'
        this.shiftT(195);           // 'nodes'
        break;
      case 203:                     // 'option'
        this.shiftT(203);           // 'option'
        break;
      case 207:                     // 'ordering'
        this.shiftT(207);           // 'ordering'
        break;
      case 226:                     // 'revalidation'
        this.shiftT(226);           // 'revalidation'
        break;
      case 229:                     // 'schema'
        this.shiftT(229);           // 'schema'
        break;
      case 232:                     // 'score'
        this.shiftT(232);           // 'score'
        break;
      case 239:                     // 'sliding'
        this.shiftT(239);           // 'sliding'
        break;
      case 245:                     // 'strict'
        this.shiftT(245);           // 'strict'
        break;
      case 257:                     // 'tumbling'
        this.shiftT(257);           // 'tumbling'
        break;
      case 258:                     // 'type'
        this.shiftT(258);           // 'type'
        break;
      case 263:                     // 'updating'
        this.shiftT(263);           // 'updating'
        break;
      case 267:                     // 'value'
        this.shiftT(267);           // 'value'
        break;
      case 269:                     // 'version'
        this.shiftT(269);           // 'version'
        break;
      case 273:                     // 'while'
        this.shiftT(273);           // 'while'
        break;
      case 98:                      // 'constraint'
        this.shiftT(98);            // 'constraint'
        break;
      case 179:                     // 'loop'
        this.shiftT(179);           // 'loop'
        break;
      case 225:                     // 'returning'
        this.shiftT(225);           // 'returning'
        break;
      case 78:                      // 'append'
        this.shiftT(78);            // 'append'
        break;
      case 135:                     // 'false'
        this.shiftT(135);           // 'false'
        break;
      case 142:                     // 'from'
        this.shiftT(142);           // 'from'
        break;
      case 197:                     // 'null'
        this.shiftT(197);           // 'null'
        break;
      case 168:                     // 'json'
        this.shiftT(168);           // 'json'
        break;
      case 198:                     // 'object'
        this.shiftT(198);           // 'object'
        break;
      case 233:                     // 'select'
        this.shiftT(233);           // 'select'
        break;
      default:
        this.shiftT(255);           // 'true'
      }
    }

    private parse_MainModule()
    {
      this.eventHandler.startNonterminal("MainModule", this.e0);
      this.parse_Prolog();
      this.whitespace();
      this.parse_Program();
      this.eventHandler.endNonterminal("MainModule", this.e0);
    }

    private parse_Program()
    {
      this.eventHandler.startNonterminal("Program", this.e0);
      this.parse_StatementsAndOptionalExpr();
      this.eventHandler.endNonterminal("Program", this.e0);
    }

    private parse_Statements()
    {
      this.eventHandler.startNonterminal("Statements", this.e0);
      for (;;)
      {
        this.lookahead1W(283);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | EOF | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' |
                                    // ';' | '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|' | '}'
        switch (this.l1)
        {
        case 35:                    // '('
          this.lookahead2W(269);    // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | ')' | '+' | '-' | '/' | '//' |
                                    // '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
          break;
        case 36:                    // '(#'
          this.lookahead2(242);     // EQName^Token | S | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'structured-item' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with'
          break;
        case 47:                    // '/'
          this.lookahead2W(285);    // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | EOF | '!' | '!=' | '$' | '$$' | '%' | '(' | '(:' | '*' | '+' | ',' | '-' |
                                    // ';' | '<' | '<!--' | '<<' | '<=' | '<?' | '=' | '>' | '>=' | '>>' | '[' |
                                    // 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'contains' |
                                    // 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'structured-item' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|' | '|' | '||' |
                                    // '}'
          break;
        case 48:                    // '//'
          this.lookahead2W(259);    // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(:' | '<' | '<!--' | '<?' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'jsoniq' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'null' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | '{' | '{|'
          break;
        case 55:                    // '<'
          this.lookahead2(4);       // QName
          break;
        case 56:                    // '<!--'
          this.lookahead2(1);       // DirCommentContents
          break;
        case 60:                    // '<?'
          this.lookahead2(3);       // PITarget
          break;
        case 69:                    // '['
          this.lookahead2W(272);    // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | ']' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
          break;
        case 78:                    // 'append'
          this.lookahead2W(268);    // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '#' | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' |
                                    // '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
          break;
        case 133:                   // 'exit'
          this.lookahead2W(147);    // S^WS | '#' | '(' | '(:' | 'returning'
          break;
        case 139:                   // 'for'
          this.lookahead2W(179);    // S^WS | '#' | '$' | '(' | '(:' | 'sliding' | 'tumbling'
          break;
        case 161:                   // 'insert'
          this.lookahead2W(275);    // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // NCName^Token | S^WS | '#' | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
          break;
        case 177:                   // 'let'
          this.lookahead2W(166);    // S^WS | '#' | '$' | '(' | '(:' | 'score'
          break;
        case 187:                   // 'namespace'
          this.lookahead2W(246);    // NCName^Token | S^WS | '#' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'null' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | '{'
          break;
        case 220:                   // 'processing-instruction'
          this.lookahead2W(244);    // NCName^Token | S^WS | '#' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'null' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | '{'
          break;
        case 223:                   // 'replace'
          this.lookahead2W(170);    // S^WS | '#' | '(' | '(:' | 'node' | 'value'
          break;
        case 266:                   // 'validate'
          this.lookahead2W(188);    // S^WS | '#' | '(' | '(:' | 'lax' | 'strict' | 'type' | '{'
          break;
        case 281:                   // '{'
          this.lookahead2W(282);    // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // NCName^Token | S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' |
                                    // '//' | ';' | '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|' | '}'
          break;
        case 283:                   // '{|'
          this.lookahead2W(273);    // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|' | '|}'
          break;
        case 31:                    // '$'
        case 33:                    // '%'
          this.lookahead2W(245);    // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
          break;
        case 83:                    // 'attribute'
        case 122:                   // 'element'
          this.lookahead2W(252);    // EQName^Token | S^WS | '#' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | '{'
          break;
        case 87:                    // 'break'
        case 103:                   // 'continue'
          this.lookahead2W(145);    // S^WS | '#' | '(' | '(:' | 'loop'
          break;
        case 97:                    // 'comment'
        case 249:                   // 'text'
          this.lookahead2W(97);     // S^WS | '#' | '(:' | '{'
          break;
        case 111:                   // 'delete'
        case 222:                   // 'rename'
          this.lookahead2W(260);    // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '#' | '$' | '$$' | '%' | '(' | '(:' | '<' | '<!--' | '<?' | '[' |
                                    // 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'jsoniq' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'null' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | '{' | '{|'
          break;
        case 41:                    // '+'
        case 43:                    // '-'
        case 196:                   // 'not'
          this.lookahead2W(265);    // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'structured-item' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
          break;
        case 135:                   // 'false'
        case 197:                   // 'null'
        case 255:                   // 'true'
          this.lookahead2W(210);    // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '.' | '/' |
                                    // '//' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' |
                                    // 'treat' | 'union' | '|' | '||' | '}'
          break;
        case 104:                   // 'copy'
        case 130:                   // 'every'
        case 240:                   // 'some'
        case 268:                   // 'variable'
          this.lookahead2W(143);    // S^WS | '#' | '$' | '(' | '(:'
          break;
        case 120:                   // 'document'
        case 206:                   // 'ordered'
        case 256:                   // 'try'
        case 262:                   // 'unordered'
          this.lookahead2W(148);    // S^WS | '#' | '(' | '(:' | '{'
          break;
        case 8:                     // IntegerLiteral
        case 9:                     // DecimalLiteral
        case 10:                    // DoubleLiteral
        case 11:                    // StringLiteral
        case 32:                    // '$$'
          this.lookahead2W(209);    // S^WS | EOF | '!' | '!=' | '(' | '(:' | '*' | '+' | ',' | '-' | '.' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' |
                                    // 'treat' | 'union' | '|' | '||' | '}'
          break;
        case 79:                    // 'array'
        case 121:                   // 'document-node'
        case 125:                   // 'empty-sequence'
        case 167:                   // 'item'
        case 169:                   // 'json-item'
        case 188:                   // 'namespace-node'
        case 194:                   // 'node'
        case 230:                   // 'schema-attribute'
        case 231:                   // 'schema-element'
        case 247:                   // 'structured-item'
          this.lookahead2W(20);     // S^WS | '#' | '(:'
          break;
        case 6:                     // EQName^Token
        case 71:                    // 'after'
        case 73:                    // 'allowing'
        case 74:                    // 'ancestor'
        case 75:                    // 'ancestor-or-self'
        case 76:                    // 'and'
        case 80:                    // 'as'
        case 81:                    // 'ascending'
        case 82:                    // 'at'
        case 84:                    // 'base-uri'
        case 85:                    // 'before'
        case 86:                    // 'boundary-space'
        case 89:                    // 'case'
        case 90:                    // 'cast'
        case 91:                    // 'castable'
        case 92:                    // 'catch'
        case 94:                    // 'child'
        case 95:                    // 'collation'
        case 98:                    // 'constraint'
        case 99:                    // 'construction'
        case 102:                   // 'context'
        case 105:                   // 'copy-namespaces'
        case 106:                   // 'count'
        case 107:                   // 'decimal-format'
        case 109:                   // 'declare'
        case 110:                   // 'default'
        case 112:                   // 'descendant'
        case 113:                   // 'descendant-or-self'
        case 114:                   // 'descending'
        case 119:                   // 'div'
        case 123:                   // 'else'
        case 124:                   // 'empty'
        case 126:                   // 'encoding'
        case 127:                   // 'end'
        case 129:                   // 'eq'
        case 132:                   // 'except'
        case 134:                   // 'external'
        case 136:                   // 'first'
        case 137:                   // 'following'
        case 138:                   // 'following-sibling'
        case 142:                   // 'from'
        case 143:                   // 'ft-option'
        case 147:                   // 'function'
        case 148:                   // 'ge'
        case 150:                   // 'group'
        case 152:                   // 'gt'
        case 153:                   // 'idiv'
        case 154:                   // 'if'
        case 155:                   // 'import'
        case 156:                   // 'in'
        case 157:                   // 'index'
        case 162:                   // 'instance'
        case 163:                   // 'integrity'
        case 164:                   // 'intersect'
        case 165:                   // 'into'
        case 166:                   // 'is'
        case 168:                   // 'json'
        case 170:                   // 'jsoniq'
        case 173:                   // 'last'
        case 174:                   // 'lax'
        case 175:                   // 'le'
        case 179:                   // 'loop'
        case 181:                   // 'lt'
        case 183:                   // 'mod'
        case 184:                   // 'modify'
        case 185:                   // 'module'
        case 189:                   // 'ne'
        case 195:                   // 'nodes'
        case 198:                   // 'object'
        case 202:                   // 'only'
        case 203:                   // 'option'
        case 204:                   // 'or'
        case 205:                   // 'order'
        case 207:                   // 'ordering'
        case 210:                   // 'parent'
        case 216:                   // 'preceding'
        case 217:                   // 'preceding-sibling'
        case 224:                   // 'return'
        case 225:                   // 'returning'
        case 226:                   // 'revalidation'
        case 228:                   // 'satisfies'
        case 229:                   // 'schema'
        case 232:                   // 'score'
        case 233:                   // 'select'
        case 234:                   // 'self'
        case 239:                   // 'sliding'
        case 241:                   // 'stable'
        case 242:                   // 'start'
        case 245:                   // 'strict'
        case 248:                   // 'switch'
        case 253:                   // 'to'
        case 254:                   // 'treat'
        case 257:                   // 'tumbling'
        case 258:                   // 'type'
        case 259:                   // 'typeswitch'
        case 260:                   // 'union'
        case 263:                   // 'updating'
        case 267:                   // 'value'
        case 269:                   // 'version'
        case 272:                   // 'where'
        case 273:                   // 'while'
        case 276:                   // 'with'
          this.lookahead2W(95);     // S^WS | '#' | '(' | '(:'
          break;
        default:
          this.lk = this.l1;
        }
        if (this.lk != 25           // EOF
         && this.lk != 54           // ';'
         && this.lk != 287          // '}'
         && this.lk != 12808        // IntegerLiteral EOF
         && this.lk != 12809        // DecimalLiteral EOF
         && this.lk != 12810        // DoubleLiteral EOF
         && this.lk != 12811        // StringLiteral EOF
         && this.lk != 12832        // '$$' EOF
         && this.lk != 12847        // '/' EOF
         && this.lk != 12935        // 'false' EOF
         && this.lk != 12997        // 'null' EOF
         && this.lk != 13055        // 'true' EOF
         && this.lk != 16140        // 'variable' '$'
         && this.lk != 21512        // IntegerLiteral ','
         && this.lk != 21513        // DecimalLiteral ','
         && this.lk != 21514        // DoubleLiteral ','
         && this.lk != 21515        // StringLiteral ','
         && this.lk != 21536        // '$$' ','
         && this.lk != 21551        // '/' ','
         && this.lk != 21639        // 'false' ','
         && this.lk != 21701        // 'null' ','
         && this.lk != 21759        // 'true' ','
         && this.lk != 27656        // IntegerLiteral ';'
         && this.lk != 27657        // DecimalLiteral ';'
         && this.lk != 27658        // DoubleLiteral ';'
         && this.lk != 27659        // StringLiteral ';'
         && this.lk != 27680        // '$$' ';'
         && this.lk != 27695        // '/' ';'
         && this.lk != 27783        // 'false' ';'
         && this.lk != 27845        // 'null' ';'
         && this.lk != 27903        // 'true' ';'
         && this.lk != 91735        // 'break' 'loop'
         && this.lk != 91751        // 'continue' 'loop'
         && this.lk != 115333       // 'exit' 'returning'
         && this.lk != 146952       // IntegerLiteral '}'
         && this.lk != 146953       // DecimalLiteral '}'
         && this.lk != 146954       // DoubleLiteral '}'
         && this.lk != 146955       // StringLiteral '}'
         && this.lk != 146976       // '$$' '}'
         && this.lk != 146991       // '/' '}'
         && this.lk != 147079       // 'false' '}'
         && this.lk != 147141       // 'null' '}'
         && this.lk != 147199)      // 'true' '}'
        {
          this.lk = this.memoized(8, this.e0);
          if (this.lk == 0)
          {
            var b0A = this.b0; var e0A = this.e0; var l1A = this.l1;
            var b1A = this.b1; var e1A = this.e1; var l2A = this.l2;
            var b2A = this.b2; var e2A = this.e2;
            try
            {
              this.try_Statement();
              this.lk = -1;
            }
            catch (p1A)
            {
              this.lk = -2;
            }
            this.b0 = b0A; this.e0 = e0A; this.l1 = l1A; if (this.l1 == 0) {this.end = e0A;} else {
            this.b1 = b1A; this.e1 = e1A; this.l2 = l2A; if (this.l2 == 0) {this.end = e1A;} else {
            this.b2 = b2A; this.e2 = e2A; this.end = e2A; }}
            this.memoize(8, this.e0, this.lk);
          }
        }
        if (this.lk != -1
         && this.lk != 54           // ';'
         && this.lk != 16140        // 'variable' '$'
         && this.lk != 27656        // IntegerLiteral ';'
         && this.lk != 27657        // DecimalLiteral ';'
         && this.lk != 27658        // DoubleLiteral ';'
         && this.lk != 27659        // StringLiteral ';'
         && this.lk != 27680        // '$$' ';'
         && this.lk != 27695        // '/' ';'
         && this.lk != 27783        // 'false' ';'
         && this.lk != 27845        // 'null' ';'
         && this.lk != 27903        // 'true' ';'
         && this.lk != 91735        // 'break' 'loop'
         && this.lk != 91751        // 'continue' 'loop'
         && this.lk != 115333)      // 'exit' 'returning'
        {
          break;
        }
        this.whitespace();
        this.parse_Statement();
      }
      this.eventHandler.endNonterminal("Statements", this.e0);
    }

    private try_Statements()
    {
      for (;;)
      {
        this.lookahead1W(283);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | EOF | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' |
                                    // ';' | '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|' | '}'
        switch (this.l1)
        {
        case 35:                    // '('
          this.lookahead2W(269);    // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | ')' | '+' | '-' | '/' | '//' |
                                    // '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
          break;
        case 36:                    // '(#'
          this.lookahead2(242);     // EQName^Token | S | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'structured-item' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with'
          break;
        case 47:                    // '/'
          this.lookahead2W(285);    // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | EOF | '!' | '!=' | '$' | '$$' | '%' | '(' | '(:' | '*' | '+' | ',' | '-' |
                                    // ';' | '<' | '<!--' | '<<' | '<=' | '<?' | '=' | '>' | '>=' | '>>' | '[' |
                                    // 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'contains' |
                                    // 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'structured-item' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|' | '|' | '||' |
                                    // '}'
          break;
        case 48:                    // '//'
          this.lookahead2W(259);    // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(:' | '<' | '<!--' | '<?' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'jsoniq' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'null' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | '{' | '{|'
          break;
        case 55:                    // '<'
          this.lookahead2(4);       // QName
          break;
        case 56:                    // '<!--'
          this.lookahead2(1);       // DirCommentContents
          break;
        case 60:                    // '<?'
          this.lookahead2(3);       // PITarget
          break;
        case 69:                    // '['
          this.lookahead2W(272);    // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | ']' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
          break;
        case 78:                    // 'append'
          this.lookahead2W(268);    // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '#' | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' |
                                    // '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
          break;
        case 133:                   // 'exit'
          this.lookahead2W(147);    // S^WS | '#' | '(' | '(:' | 'returning'
          break;
        case 139:                   // 'for'
          this.lookahead2W(179);    // S^WS | '#' | '$' | '(' | '(:' | 'sliding' | 'tumbling'
          break;
        case 161:                   // 'insert'
          this.lookahead2W(275);    // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // NCName^Token | S^WS | '#' | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
          break;
        case 177:                   // 'let'
          this.lookahead2W(166);    // S^WS | '#' | '$' | '(' | '(:' | 'score'
          break;
        case 187:                   // 'namespace'
          this.lookahead2W(246);    // NCName^Token | S^WS | '#' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'null' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | '{'
          break;
        case 220:                   // 'processing-instruction'
          this.lookahead2W(244);    // NCName^Token | S^WS | '#' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'null' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | '{'
          break;
        case 223:                   // 'replace'
          this.lookahead2W(170);    // S^WS | '#' | '(' | '(:' | 'node' | 'value'
          break;
        case 266:                   // 'validate'
          this.lookahead2W(188);    // S^WS | '#' | '(' | '(:' | 'lax' | 'strict' | 'type' | '{'
          break;
        case 281:                   // '{'
          this.lookahead2W(282);    // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // NCName^Token | S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' |
                                    // '//' | ';' | '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|' | '}'
          break;
        case 283:                   // '{|'
          this.lookahead2W(273);    // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|' | '|}'
          break;
        case 31:                    // '$'
        case 33:                    // '%'
          this.lookahead2W(245);    // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
          break;
        case 83:                    // 'attribute'
        case 122:                   // 'element'
          this.lookahead2W(252);    // EQName^Token | S^WS | '#' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | '{'
          break;
        case 87:                    // 'break'
        case 103:                   // 'continue'
          this.lookahead2W(145);    // S^WS | '#' | '(' | '(:' | 'loop'
          break;
        case 97:                    // 'comment'
        case 249:                   // 'text'
          this.lookahead2W(97);     // S^WS | '#' | '(:' | '{'
          break;
        case 111:                   // 'delete'
        case 222:                   // 'rename'
          this.lookahead2W(260);    // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '#' | '$' | '$$' | '%' | '(' | '(:' | '<' | '<!--' | '<?' | '[' |
                                    // 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'jsoniq' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'null' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | '{' | '{|'
          break;
        case 41:                    // '+'
        case 43:                    // '-'
        case 196:                   // 'not'
          this.lookahead2W(265);    // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'structured-item' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
          break;
        case 135:                   // 'false'
        case 197:                   // 'null'
        case 255:                   // 'true'
          this.lookahead2W(210);    // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '.' | '/' |
                                    // '//' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' |
                                    // 'treat' | 'union' | '|' | '||' | '}'
          break;
        case 104:                   // 'copy'
        case 130:                   // 'every'
        case 240:                   // 'some'
        case 268:                   // 'variable'
          this.lookahead2W(143);    // S^WS | '#' | '$' | '(' | '(:'
          break;
        case 120:                   // 'document'
        case 206:                   // 'ordered'
        case 256:                   // 'try'
        case 262:                   // 'unordered'
          this.lookahead2W(148);    // S^WS | '#' | '(' | '(:' | '{'
          break;
        case 8:                     // IntegerLiteral
        case 9:                     // DecimalLiteral
        case 10:                    // DoubleLiteral
        case 11:                    // StringLiteral
        case 32:                    // '$$'
          this.lookahead2W(209);    // S^WS | EOF | '!' | '!=' | '(' | '(:' | '*' | '+' | ',' | '-' | '.' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' |
                                    // 'treat' | 'union' | '|' | '||' | '}'
          break;
        case 79:                    // 'array'
        case 121:                   // 'document-node'
        case 125:                   // 'empty-sequence'
        case 167:                   // 'item'
        case 169:                   // 'json-item'
        case 188:                   // 'namespace-node'
        case 194:                   // 'node'
        case 230:                   // 'schema-attribute'
        case 231:                   // 'schema-element'
        case 247:                   // 'structured-item'
          this.lookahead2W(20);     // S^WS | '#' | '(:'
          break;
        case 6:                     // EQName^Token
        case 71:                    // 'after'
        case 73:                    // 'allowing'
        case 74:                    // 'ancestor'
        case 75:                    // 'ancestor-or-self'
        case 76:                    // 'and'
        case 80:                    // 'as'
        case 81:                    // 'ascending'
        case 82:                    // 'at'
        case 84:                    // 'base-uri'
        case 85:                    // 'before'
        case 86:                    // 'boundary-space'
        case 89:                    // 'case'
        case 90:                    // 'cast'
        case 91:                    // 'castable'
        case 92:                    // 'catch'
        case 94:                    // 'child'
        case 95:                    // 'collation'
        case 98:                    // 'constraint'
        case 99:                    // 'construction'
        case 102:                   // 'context'
        case 105:                   // 'copy-namespaces'
        case 106:                   // 'count'
        case 107:                   // 'decimal-format'
        case 109:                   // 'declare'
        case 110:                   // 'default'
        case 112:                   // 'descendant'
        case 113:                   // 'descendant-or-self'
        case 114:                   // 'descending'
        case 119:                   // 'div'
        case 123:                   // 'else'
        case 124:                   // 'empty'
        case 126:                   // 'encoding'
        case 127:                   // 'end'
        case 129:                   // 'eq'
        case 132:                   // 'except'
        case 134:                   // 'external'
        case 136:                   // 'first'
        case 137:                   // 'following'
        case 138:                   // 'following-sibling'
        case 142:                   // 'from'
        case 143:                   // 'ft-option'
        case 147:                   // 'function'
        case 148:                   // 'ge'
        case 150:                   // 'group'
        case 152:                   // 'gt'
        case 153:                   // 'idiv'
        case 154:                   // 'if'
        case 155:                   // 'import'
        case 156:                   // 'in'
        case 157:                   // 'index'
        case 162:                   // 'instance'
        case 163:                   // 'integrity'
        case 164:                   // 'intersect'
        case 165:                   // 'into'
        case 166:                   // 'is'
        case 168:                   // 'json'
        case 170:                   // 'jsoniq'
        case 173:                   // 'last'
        case 174:                   // 'lax'
        case 175:                   // 'le'
        case 179:                   // 'loop'
        case 181:                   // 'lt'
        case 183:                   // 'mod'
        case 184:                   // 'modify'
        case 185:                   // 'module'
        case 189:                   // 'ne'
        case 195:                   // 'nodes'
        case 198:                   // 'object'
        case 202:                   // 'only'
        case 203:                   // 'option'
        case 204:                   // 'or'
        case 205:                   // 'order'
        case 207:                   // 'ordering'
        case 210:                   // 'parent'
        case 216:                   // 'preceding'
        case 217:                   // 'preceding-sibling'
        case 224:                   // 'return'
        case 225:                   // 'returning'
        case 226:                   // 'revalidation'
        case 228:                   // 'satisfies'
        case 229:                   // 'schema'
        case 232:                   // 'score'
        case 233:                   // 'select'
        case 234:                   // 'self'
        case 239:                   // 'sliding'
        case 241:                   // 'stable'
        case 242:                   // 'start'
        case 245:                   // 'strict'
        case 248:                   // 'switch'
        case 253:                   // 'to'
        case 254:                   // 'treat'
        case 257:                   // 'tumbling'
        case 258:                   // 'type'
        case 259:                   // 'typeswitch'
        case 260:                   // 'union'
        case 263:                   // 'updating'
        case 267:                   // 'value'
        case 269:                   // 'version'
        case 272:                   // 'where'
        case 273:                   // 'while'
        case 276:                   // 'with'
          this.lookahead2W(95);     // S^WS | '#' | '(' | '(:'
          break;
        default:
          this.lk = this.l1;
        }
        if (this.lk != 25           // EOF
         && this.lk != 54           // ';'
         && this.lk != 287          // '}'
         && this.lk != 12808        // IntegerLiteral EOF
         && this.lk != 12809        // DecimalLiteral EOF
         && this.lk != 12810        // DoubleLiteral EOF
         && this.lk != 12811        // StringLiteral EOF
         && this.lk != 12832        // '$$' EOF
         && this.lk != 12847        // '/' EOF
         && this.lk != 12935        // 'false' EOF
         && this.lk != 12997        // 'null' EOF
         && this.lk != 13055        // 'true' EOF
         && this.lk != 16140        // 'variable' '$'
         && this.lk != 21512        // IntegerLiteral ','
         && this.lk != 21513        // DecimalLiteral ','
         && this.lk != 21514        // DoubleLiteral ','
         && this.lk != 21515        // StringLiteral ','
         && this.lk != 21536        // '$$' ','
         && this.lk != 21551        // '/' ','
         && this.lk != 21639        // 'false' ','
         && this.lk != 21701        // 'null' ','
         && this.lk != 21759        // 'true' ','
         && this.lk != 27656        // IntegerLiteral ';'
         && this.lk != 27657        // DecimalLiteral ';'
         && this.lk != 27658        // DoubleLiteral ';'
         && this.lk != 27659        // StringLiteral ';'
         && this.lk != 27680        // '$$' ';'
         && this.lk != 27695        // '/' ';'
         && this.lk != 27783        // 'false' ';'
         && this.lk != 27845        // 'null' ';'
         && this.lk != 27903        // 'true' ';'
         && this.lk != 91735        // 'break' 'loop'
         && this.lk != 91751        // 'continue' 'loop'
         && this.lk != 115333       // 'exit' 'returning'
         && this.lk != 146952       // IntegerLiteral '}'
         && this.lk != 146953       // DecimalLiteral '}'
         && this.lk != 146954       // DoubleLiteral '}'
         && this.lk != 146955       // StringLiteral '}'
         && this.lk != 146976       // '$$' '}'
         && this.lk != 146991       // '/' '}'
         && this.lk != 147079       // 'false' '}'
         && this.lk != 147141       // 'null' '}'
         && this.lk != 147199)      // 'true' '}'
        {
          this.lk = this.memoized(8, this.e0);
          if (this.lk == 0)
          {
            var b0A = this.b0; var e0A = this.e0; var l1A = this.l1;
            var b1A = this.b1; var e1A = this.e1; var l2A = this.l2;
            var b2A = this.b2; var e2A = this.e2;
            try
            {
              this.try_Statement();
              this.memoize(8, e0A, -1);
              continue;
            }
            catch (p1A)
            {
              this.b0 = b0A; this.e0 = e0A; this.l1 = l1A; if (this.l1 == 0) {this.end = e0A;} else {
              this.b1 = b1A; this.e1 = e1A; this.l2 = l2A; if (this.l2 == 0) {this.end = e1A;} else {
              this.b2 = b2A; this.e2 = e2A; this.end = e2A; }}
              this.memoize(8, e0A, -2);
              break;
            }
          }
        }
        if (this.lk != -1
         && this.lk != 54           // ';'
         && this.lk != 16140        // 'variable' '$'
         && this.lk != 27656        // IntegerLiteral ';'
         && this.lk != 27657        // DecimalLiteral ';'
         && this.lk != 27658        // DoubleLiteral ';'
         && this.lk != 27659        // StringLiteral ';'
         && this.lk != 27680        // '$$' ';'
         && this.lk != 27695        // '/' ';'
         && this.lk != 27783        // 'false' ';'
         && this.lk != 27845        // 'null' ';'
         && this.lk != 27903        // 'true' ';'
         && this.lk != 91735        // 'break' 'loop'
         && this.lk != 91751        // 'continue' 'loop'
         && this.lk != 115333)      // 'exit' 'returning'
        {
          break;
        }
        this.try_Statement();
      }
    }

    private parse_StatementsAndExpr()
    {
      this.eventHandler.startNonterminal("StatementsAndExpr", this.e0);
      this.parse_Statements();
      this.whitespace();
      this.parse_Expr();
      this.eventHandler.endNonterminal("StatementsAndExpr", this.e0);
    }

    private try_StatementsAndExpr()
    {
      this.try_Statements();
      this.try_Expr();
    }

    private parse_StatementsAndOptionalExpr()
    {
      this.eventHandler.startNonterminal("StatementsAndOptionalExpr", this.e0);
      this.parse_Statements();
      if (this.l1 != 25             // EOF
       && this.l1 != 287)           // '}'
      {
        this.whitespace();
        this.parse_Expr();
      }
      this.eventHandler.endNonterminal("StatementsAndOptionalExpr", this.e0);
    }

    private try_StatementsAndOptionalExpr()
    {
      this.try_Statements();
      if (this.l1 != 25             // EOF
       && this.l1 != 287)           // '}'
      {
        this.try_Expr();
      }
    }

    private parse_Statement()
    {
      this.eventHandler.startNonterminal("Statement", this.e0);
      switch (this.l1)
      {
      case 133:                     // 'exit'
        this.lookahead2W(147);      // S^WS | '#' | '(' | '(:' | 'returning'
        break;
      case 139:                     // 'for'
        this.lookahead2W(179);      // S^WS | '#' | '$' | '(' | '(:' | 'sliding' | 'tumbling'
        break;
      case 177:                     // 'let'
        this.lookahead2W(166);      // S^WS | '#' | '$' | '(' | '(:' | 'score'
        break;
      case 256:                     // 'try'
        this.lookahead2W(148);      // S^WS | '#' | '(' | '(:' | '{'
        break;
      case 268:                     // 'variable'
        this.lookahead2W(143);      // S^WS | '#' | '$' | '(' | '(:'
        break;
      case 281:                     // '{'
        this.lookahead2W(282);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // NCName^Token | S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' |
                                    // '//' | ';' | '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|' | '}'
        break;
      case 31:                      // '$'
      case 33:                      // '%'
        this.lookahead2W(245);      // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
        break;
      case 87:                      // 'break'
      case 103:                     // 'continue'
        this.lookahead2W(145);      // S^WS | '#' | '(' | '(:' | 'loop'
        break;
      case 154:                     // 'if'
      case 248:                     // 'switch'
      case 259:                     // 'typeswitch'
      case 273:                     // 'while'
        this.lookahead2W(95);       // S^WS | '#' | '(' | '(:'
        break;
      default:
        this.lk = this.l1;
      }
      if (this.lk != 6              // EQName^Token
       && this.lk != 8              // IntegerLiteral
       && this.lk != 9              // DecimalLiteral
       && this.lk != 10             // DoubleLiteral
       && this.lk != 11             // StringLiteral
       && this.lk != 32             // '$$'
       && this.lk != 35             // '('
       && this.lk != 36             // '(#'
       && this.lk != 41             // '+'
       && this.lk != 43             // '-'
       && this.lk != 47             // '/'
       && this.lk != 48             // '//'
       && this.lk != 54             // ';'
       && this.lk != 55             // '<'
       && this.lk != 56             // '<!--'
       && this.lk != 60             // '<?'
       && this.lk != 69             // '['
       && this.lk != 71             // 'after'
       && this.lk != 73             // 'allowing'
       && this.lk != 74             // 'ancestor'
       && this.lk != 75             // 'ancestor-or-self'
       && this.lk != 76             // 'and'
       && this.lk != 78             // 'append'
       && this.lk != 79             // 'array'
       && this.lk != 80             // 'as'
       && this.lk != 81             // 'ascending'
       && this.lk != 82             // 'at'
       && this.lk != 83             // 'attribute'
       && this.lk != 84             // 'base-uri'
       && this.lk != 85             // 'before'
       && this.lk != 86             // 'boundary-space'
       && this.lk != 89             // 'case'
       && this.lk != 90             // 'cast'
       && this.lk != 91             // 'castable'
       && this.lk != 92             // 'catch'
       && this.lk != 94             // 'child'
       && this.lk != 95             // 'collation'
       && this.lk != 97             // 'comment'
       && this.lk != 98             // 'constraint'
       && this.lk != 99             // 'construction'
       && this.lk != 102            // 'context'
       && this.lk != 104            // 'copy'
       && this.lk != 105            // 'copy-namespaces'
       && this.lk != 106            // 'count'
       && this.lk != 107            // 'decimal-format'
       && this.lk != 109            // 'declare'
       && this.lk != 110            // 'default'
       && this.lk != 111            // 'delete'
       && this.lk != 112            // 'descendant'
       && this.lk != 113            // 'descendant-or-self'
       && this.lk != 114            // 'descending'
       && this.lk != 119            // 'div'
       && this.lk != 120            // 'document'
       && this.lk != 121            // 'document-node'
       && this.lk != 122            // 'element'
       && this.lk != 123            // 'else'
       && this.lk != 124            // 'empty'
       && this.lk != 125            // 'empty-sequence'
       && this.lk != 126            // 'encoding'
       && this.lk != 127            // 'end'
       && this.lk != 129            // 'eq'
       && this.lk != 130            // 'every'
       && this.lk != 132            // 'except'
       && this.lk != 134            // 'external'
       && this.lk != 135            // 'false'
       && this.lk != 136            // 'first'
       && this.lk != 137            // 'following'
       && this.lk != 138            // 'following-sibling'
       && this.lk != 142            // 'from'
       && this.lk != 143            // 'ft-option'
       && this.lk != 147            // 'function'
       && this.lk != 148            // 'ge'
       && this.lk != 150            // 'group'
       && this.lk != 152            // 'gt'
       && this.lk != 153            // 'idiv'
       && this.lk != 155            // 'import'
       && this.lk != 156            // 'in'
       && this.lk != 157            // 'index'
       && this.lk != 161            // 'insert'
       && this.lk != 162            // 'instance'
       && this.lk != 163            // 'integrity'
       && this.lk != 164            // 'intersect'
       && this.lk != 165            // 'into'
       && this.lk != 166            // 'is'
       && this.lk != 167            // 'item'
       && this.lk != 168            // 'json'
       && this.lk != 169            // 'json-item'
       && this.lk != 170            // 'jsoniq'
       && this.lk != 173            // 'last'
       && this.lk != 174            // 'lax'
       && this.lk != 175            // 'le'
       && this.lk != 179            // 'loop'
       && this.lk != 181            // 'lt'
       && this.lk != 183            // 'mod'
       && this.lk != 184            // 'modify'
       && this.lk != 185            // 'module'
       && this.lk != 187            // 'namespace'
       && this.lk != 188            // 'namespace-node'
       && this.lk != 189            // 'ne'
       && this.lk != 194            // 'node'
       && this.lk != 195            // 'nodes'
       && this.lk != 196            // 'not'
       && this.lk != 197            // 'null'
       && this.lk != 198            // 'object'
       && this.lk != 202            // 'only'
       && this.lk != 203            // 'option'
       && this.lk != 204            // 'or'
       && this.lk != 205            // 'order'
       && this.lk != 206            // 'ordered'
       && this.lk != 207            // 'ordering'
       && this.lk != 210            // 'parent'
       && this.lk != 216            // 'preceding'
       && this.lk != 217            // 'preceding-sibling'
       && this.lk != 220            // 'processing-instruction'
       && this.lk != 222            // 'rename'
       && this.lk != 223            // 'replace'
       && this.lk != 224            // 'return'
       && this.lk != 225            // 'returning'
       && this.lk != 226            // 'revalidation'
       && this.lk != 228            // 'satisfies'
       && this.lk != 229            // 'schema'
       && this.lk != 230            // 'schema-attribute'
       && this.lk != 231            // 'schema-element'
       && this.lk != 232            // 'score'
       && this.lk != 233            // 'select'
       && this.lk != 234            // 'self'
       && this.lk != 239            // 'sliding'
       && this.lk != 240            // 'some'
       && this.lk != 241            // 'stable'
       && this.lk != 242            // 'start'
       && this.lk != 245            // 'strict'
       && this.lk != 247            // 'structured-item'
       && this.lk != 249            // 'text'
       && this.lk != 253            // 'to'
       && this.lk != 254            // 'treat'
       && this.lk != 255            // 'true'
       && this.lk != 257            // 'tumbling'
       && this.lk != 258            // 'type'
       && this.lk != 260            // 'union'
       && this.lk != 262            // 'unordered'
       && this.lk != 263            // 'updating'
       && this.lk != 266            // 'validate'
       && this.lk != 267            // 'value'
       && this.lk != 269            // 'version'
       && this.lk != 272            // 'where'
       && this.lk != 276            // 'with'
       && this.lk != 283            // '{|'
       && this.lk != 10009          // '{' NCName^Token
       && this.lk != 14935          // 'break' '#'
       && this.lk != 14951          // 'continue' '#'
       && this.lk != 14981          // 'exit' '#'
       && this.lk != 14987          // 'for' '#'
       && this.lk != 15002          // 'if' '#'
       && this.lk != 15025          // 'let' '#'
       && this.lk != 15096          // 'switch' '#'
       && this.lk != 15104          // 'try' '#'
       && this.lk != 15107          // 'typeswitch' '#'
       && this.lk != 15116          // 'variable' '#'
       && this.lk != 15121          // 'while' '#'
       && this.lk != 16011          // 'for' '$'
       && this.lk != 16049          // 'let' '$'
       && this.lk != 16140          // 'variable' '$'
       && this.lk != 18007          // 'break' '('
       && this.lk != 18023          // 'continue' '('
       && this.lk != 18053          // 'exit' '('
       && this.lk != 18059          // 'for' '('
       && this.lk != 18074          // 'if' '('
       && this.lk != 18097          // 'let' '('
       && this.lk != 18168          // 'switch' '('
       && this.lk != 18176          // 'try' '('
       && this.lk != 18179          // 'typeswitch' '('
       && this.lk != 18188          // 'variable' '('
       && this.lk != 91735          // 'break' 'loop'
       && this.lk != 91751          // 'continue' 'loop'
       && this.lk != 115333         // 'exit' 'returning'
       && this.lk != 118961         // 'let' 'score'
       && this.lk != 122507         // 'for' 'sliding'
       && this.lk != 131723         // 'for' 'tumbling'
       && this.lk != 144128         // 'try' '{'
       && this.lk != 147225)        // '{' '}'
      {
        this.lk = this.memoized(9, this.e0);
        if (this.lk == 0)
        {
          var b0A = this.b0; var e0A = this.e0; var l1A = this.l1;
          var b1A = this.b1; var e1A = this.e1; var l2A = this.l2;
          var b2A = this.b2; var e2A = this.e2;
          try
          {
            this.try_ApplyStatement();
            this.lk = -1;
          }
          catch (p1A)
          {
            try
            {
              this.b0 = b0A; this.e0 = e0A; this.l1 = l1A; if (this.l1 == 0) {this.end = e0A;} else {
              this.b1 = b1A; this.e1 = e1A; this.l2 = l2A; if (this.l2 == 0) {this.end = e1A;} else {
              this.b2 = b2A; this.e2 = e2A; this.end = e2A; }}
              this.try_AssignStatement();
              this.lk = -2;
            }
            catch (p2A)
            {
              try
              {
                this.b0 = b0A; this.e0 = e0A; this.l1 = l1A; if (this.l1 == 0) {this.end = e0A;} else {
                this.b1 = b1A; this.e1 = e1A; this.l2 = l2A; if (this.l2 == 0) {this.end = e1A;} else {
                this.b2 = b2A; this.e2 = e2A; this.end = e2A; }}
                this.try_BlockStatement();
                this.lk = -3;
              }
              catch (p3A)
              {
                try
                {
                  this.b0 = b0A; this.e0 = e0A; this.l1 = l1A; if (this.l1 == 0) {this.end = e0A;} else {
                  this.b1 = b1A; this.e1 = e1A; this.l2 = l2A; if (this.l2 == 0) {this.end = e1A;} else {
                  this.b2 = b2A; this.e2 = e2A; this.end = e2A; }}
                  this.try_VarDeclStatement();
                  this.lk = -12;
                }
                catch (p12A)
                {
                  this.lk = -13;
                }
              }
            }
          }
          this.b0 = b0A; this.e0 = e0A; this.l1 = l1A; if (this.l1 == 0) {this.end = e0A;} else {
          this.b1 = b1A; this.e1 = e1A; this.l2 = l2A; if (this.l2 == 0) {this.end = e1A;} else {
          this.b2 = b2A; this.e2 = e2A; this.end = e2A; }}
          this.memoize(9, this.e0, this.lk);
        }
      }
      switch (this.lk)
      {
      case -2:
        this.parse_AssignStatement();
        break;
      case -3:
        this.parse_BlockStatement();
        break;
      case 91735:                   // 'break' 'loop'
        this.parse_BreakStatement();
        break;
      case 91751:                   // 'continue' 'loop'
        this.parse_ContinueStatement();
        break;
      case 115333:                  // 'exit' 'returning'
        this.parse_ExitStatement();
        break;
      case 16011:                   // 'for' '$'
      case 16049:                   // 'let' '$'
      case 118961:                  // 'let' 'score'
      case 122507:                  // 'for' 'sliding'
      case 131723:                  // 'for' 'tumbling'
        this.parse_FLWORStatement();
        break;
      case 18074:                   // 'if' '('
        this.parse_IfStatement();
        break;
      case 18168:                   // 'switch' '('
        this.parse_SwitchStatement();
        break;
      case 144128:                  // 'try' '{'
        this.parse_TryCatchStatement();
        break;
      case 18179:                   // 'typeswitch' '('
        this.parse_TypeswitchStatement();
        break;
      case -12:
      case 16140:                   // 'variable' '$'
        this.parse_VarDeclStatement();
        break;
      case -13:
        this.parse_WhileStatement();
        break;
      case 54:                      // ';'
        this.parse_VoidStatement();
        break;
      default:
        this.parse_ApplyStatement();
      }
      this.eventHandler.endNonterminal("Statement", this.e0);
    }

    private try_Statement()
    {
      switch (this.l1)
      {
      case 133:                     // 'exit'
        this.lookahead2W(147);      // S^WS | '#' | '(' | '(:' | 'returning'
        break;
      case 139:                     // 'for'
        this.lookahead2W(179);      // S^WS | '#' | '$' | '(' | '(:' | 'sliding' | 'tumbling'
        break;
      case 177:                     // 'let'
        this.lookahead2W(166);      // S^WS | '#' | '$' | '(' | '(:' | 'score'
        break;
      case 256:                     // 'try'
        this.lookahead2W(148);      // S^WS | '#' | '(' | '(:' | '{'
        break;
      case 268:                     // 'variable'
        this.lookahead2W(143);      // S^WS | '#' | '$' | '(' | '(:'
        break;
      case 281:                     // '{'
        this.lookahead2W(282);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // NCName^Token | S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' |
                                    // '//' | ';' | '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|' | '}'
        break;
      case 31:                      // '$'
      case 33:                      // '%'
        this.lookahead2W(245);      // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
        break;
      case 87:                      // 'break'
      case 103:                     // 'continue'
        this.lookahead2W(145);      // S^WS | '#' | '(' | '(:' | 'loop'
        break;
      case 154:                     // 'if'
      case 248:                     // 'switch'
      case 259:                     // 'typeswitch'
      case 273:                     // 'while'
        this.lookahead2W(95);       // S^WS | '#' | '(' | '(:'
        break;
      default:
        this.lk = this.l1;
      }
      if (this.lk != 6              // EQName^Token
       && this.lk != 8              // IntegerLiteral
       && this.lk != 9              // DecimalLiteral
       && this.lk != 10             // DoubleLiteral
       && this.lk != 11             // StringLiteral
       && this.lk != 32             // '$$'
       && this.lk != 35             // '('
       && this.lk != 36             // '(#'
       && this.lk != 41             // '+'
       && this.lk != 43             // '-'
       && this.lk != 47             // '/'
       && this.lk != 48             // '//'
       && this.lk != 54             // ';'
       && this.lk != 55             // '<'
       && this.lk != 56             // '<!--'
       && this.lk != 60             // '<?'
       && this.lk != 69             // '['
       && this.lk != 71             // 'after'
       && this.lk != 73             // 'allowing'
       && this.lk != 74             // 'ancestor'
       && this.lk != 75             // 'ancestor-or-self'
       && this.lk != 76             // 'and'
       && this.lk != 78             // 'append'
       && this.lk != 79             // 'array'
       && this.lk != 80             // 'as'
       && this.lk != 81             // 'ascending'
       && this.lk != 82             // 'at'
       && this.lk != 83             // 'attribute'
       && this.lk != 84             // 'base-uri'
       && this.lk != 85             // 'before'
       && this.lk != 86             // 'boundary-space'
       && this.lk != 89             // 'case'
       && this.lk != 90             // 'cast'
       && this.lk != 91             // 'castable'
       && this.lk != 92             // 'catch'
       && this.lk != 94             // 'child'
       && this.lk != 95             // 'collation'
       && this.lk != 97             // 'comment'
       && this.lk != 98             // 'constraint'
       && this.lk != 99             // 'construction'
       && this.lk != 102            // 'context'
       && this.lk != 104            // 'copy'
       && this.lk != 105            // 'copy-namespaces'
       && this.lk != 106            // 'count'
       && this.lk != 107            // 'decimal-format'
       && this.lk != 109            // 'declare'
       && this.lk != 110            // 'default'
       && this.lk != 111            // 'delete'
       && this.lk != 112            // 'descendant'
       && this.lk != 113            // 'descendant-or-self'
       && this.lk != 114            // 'descending'
       && this.lk != 119            // 'div'
       && this.lk != 120            // 'document'
       && this.lk != 121            // 'document-node'
       && this.lk != 122            // 'element'
       && this.lk != 123            // 'else'
       && this.lk != 124            // 'empty'
       && this.lk != 125            // 'empty-sequence'
       && this.lk != 126            // 'encoding'
       && this.lk != 127            // 'end'
       && this.lk != 129            // 'eq'
       && this.lk != 130            // 'every'
       && this.lk != 132            // 'except'
       && this.lk != 134            // 'external'
       && this.lk != 135            // 'false'
       && this.lk != 136            // 'first'
       && this.lk != 137            // 'following'
       && this.lk != 138            // 'following-sibling'
       && this.lk != 142            // 'from'
       && this.lk != 143            // 'ft-option'
       && this.lk != 147            // 'function'
       && this.lk != 148            // 'ge'
       && this.lk != 150            // 'group'
       && this.lk != 152            // 'gt'
       && this.lk != 153            // 'idiv'
       && this.lk != 155            // 'import'
       && this.lk != 156            // 'in'
       && this.lk != 157            // 'index'
       && this.lk != 161            // 'insert'
       && this.lk != 162            // 'instance'
       && this.lk != 163            // 'integrity'
       && this.lk != 164            // 'intersect'
       && this.lk != 165            // 'into'
       && this.lk != 166            // 'is'
       && this.lk != 167            // 'item'
       && this.lk != 168            // 'json'
       && this.lk != 169            // 'json-item'
       && this.lk != 170            // 'jsoniq'
       && this.lk != 173            // 'last'
       && this.lk != 174            // 'lax'
       && this.lk != 175            // 'le'
       && this.lk != 179            // 'loop'
       && this.lk != 181            // 'lt'
       && this.lk != 183            // 'mod'
       && this.lk != 184            // 'modify'
       && this.lk != 185            // 'module'
       && this.lk != 187            // 'namespace'
       && this.lk != 188            // 'namespace-node'
       && this.lk != 189            // 'ne'
       && this.lk != 194            // 'node'
       && this.lk != 195            // 'nodes'
       && this.lk != 196            // 'not'
       && this.lk != 197            // 'null'
       && this.lk != 198            // 'object'
       && this.lk != 202            // 'only'
       && this.lk != 203            // 'option'
       && this.lk != 204            // 'or'
       && this.lk != 205            // 'order'
       && this.lk != 206            // 'ordered'
       && this.lk != 207            // 'ordering'
       && this.lk != 210            // 'parent'
       && this.lk != 216            // 'preceding'
       && this.lk != 217            // 'preceding-sibling'
       && this.lk != 220            // 'processing-instruction'
       && this.lk != 222            // 'rename'
       && this.lk != 223            // 'replace'
       && this.lk != 224            // 'return'
       && this.lk != 225            // 'returning'
       && this.lk != 226            // 'revalidation'
       && this.lk != 228            // 'satisfies'
       && this.lk != 229            // 'schema'
       && this.lk != 230            // 'schema-attribute'
       && this.lk != 231            // 'schema-element'
       && this.lk != 232            // 'score'
       && this.lk != 233            // 'select'
       && this.lk != 234            // 'self'
       && this.lk != 239            // 'sliding'
       && this.lk != 240            // 'some'
       && this.lk != 241            // 'stable'
       && this.lk != 242            // 'start'
       && this.lk != 245            // 'strict'
       && this.lk != 247            // 'structured-item'
       && this.lk != 249            // 'text'
       && this.lk != 253            // 'to'
       && this.lk != 254            // 'treat'
       && this.lk != 255            // 'true'
       && this.lk != 257            // 'tumbling'
       && this.lk != 258            // 'type'
       && this.lk != 260            // 'union'
       && this.lk != 262            // 'unordered'
       && this.lk != 263            // 'updating'
       && this.lk != 266            // 'validate'
       && this.lk != 267            // 'value'
       && this.lk != 269            // 'version'
       && this.lk != 272            // 'where'
       && this.lk != 276            // 'with'
       && this.lk != 283            // '{|'
       && this.lk != 10009          // '{' NCName^Token
       && this.lk != 14935          // 'break' '#'
       && this.lk != 14951          // 'continue' '#'
       && this.lk != 14981          // 'exit' '#'
       && this.lk != 14987          // 'for' '#'
       && this.lk != 15002          // 'if' '#'
       && this.lk != 15025          // 'let' '#'
       && this.lk != 15096          // 'switch' '#'
       && this.lk != 15104          // 'try' '#'
       && this.lk != 15107          // 'typeswitch' '#'
       && this.lk != 15116          // 'variable' '#'
       && this.lk != 15121          // 'while' '#'
       && this.lk != 16011          // 'for' '$'
       && this.lk != 16049          // 'let' '$'
       && this.lk != 16140          // 'variable' '$'
       && this.lk != 18007          // 'break' '('
       && this.lk != 18023          // 'continue' '('
       && this.lk != 18053          // 'exit' '('
       && this.lk != 18059          // 'for' '('
       && this.lk != 18074          // 'if' '('
       && this.lk != 18097          // 'let' '('
       && this.lk != 18168          // 'switch' '('
       && this.lk != 18176          // 'try' '('
       && this.lk != 18179          // 'typeswitch' '('
       && this.lk != 18188          // 'variable' '('
       && this.lk != 91735          // 'break' 'loop'
       && this.lk != 91751          // 'continue' 'loop'
       && this.lk != 115333         // 'exit' 'returning'
       && this.lk != 118961         // 'let' 'score'
       && this.lk != 122507         // 'for' 'sliding'
       && this.lk != 131723         // 'for' 'tumbling'
       && this.lk != 144128         // 'try' '{'
       && this.lk != 147225)        // '{' '}'
      {
        this.lk = this.memoized(9, this.e0);
        if (this.lk == 0)
        {
          var b0A = this.b0; var e0A = this.e0; var l1A = this.l1;
          var b1A = this.b1; var e1A = this.e1; var l2A = this.l2;
          var b2A = this.b2; var e2A = this.e2;
          try
          {
            this.try_ApplyStatement();
            this.memoize(9, e0A, -1);
            this.lk = -15;
          }
          catch (p1A)
          {
            try
            {
              this.b0 = b0A; this.e0 = e0A; this.l1 = l1A; if (this.l1 == 0) {this.end = e0A;} else {
              this.b1 = b1A; this.e1 = e1A; this.l2 = l2A; if (this.l2 == 0) {this.end = e1A;} else {
              this.b2 = b2A; this.e2 = e2A; this.end = e2A; }}
              this.try_AssignStatement();
              this.memoize(9, e0A, -2);
              this.lk = -15;
            }
            catch (p2A)
            {
              try
              {
                this.b0 = b0A; this.e0 = e0A; this.l1 = l1A; if (this.l1 == 0) {this.end = e0A;} else {
                this.b1 = b1A; this.e1 = e1A; this.l2 = l2A; if (this.l2 == 0) {this.end = e1A;} else {
                this.b2 = b2A; this.e2 = e2A; this.end = e2A; }}
                this.try_BlockStatement();
                this.memoize(9, e0A, -3);
                this.lk = -15;
              }
              catch (p3A)
              {
                try
                {
                  this.b0 = b0A; this.e0 = e0A; this.l1 = l1A; if (this.l1 == 0) {this.end = e0A;} else {
                  this.b1 = b1A; this.e1 = e1A; this.l2 = l2A; if (this.l2 == 0) {this.end = e1A;} else {
                  this.b2 = b2A; this.e2 = e2A; this.end = e2A; }}
                  this.try_VarDeclStatement();
                  this.memoize(9, e0A, -12);
                  this.lk = -15;
                }
                catch (p12A)
                {
                  this.lk = -13;
                  this.b0 = b0A; this.e0 = e0A; this.l1 = l1A; if (this.l1 == 0) {this.end = e0A;} else {
                  this.b1 = b1A; this.e1 = e1A; this.l2 = l2A; if (this.l2 == 0) {this.end = e1A;} else {
                  this.b2 = b2A; this.e2 = e2A; this.end = e2A; }}
                  this.memoize(9, e0A, -13);
                }
              }
            }
          }
        }
      }
      switch (this.lk)
      {
      case -2:
        this.try_AssignStatement();
        break;
      case -3:
        this.try_BlockStatement();
        break;
      case 91735:                   // 'break' 'loop'
        this.try_BreakStatement();
        break;
      case 91751:                   // 'continue' 'loop'
        this.try_ContinueStatement();
        break;
      case 115333:                  // 'exit' 'returning'
        this.try_ExitStatement();
        break;
      case 16011:                   // 'for' '$'
      case 16049:                   // 'let' '$'
      case 118961:                  // 'let' 'score'
      case 122507:                  // 'for' 'sliding'
      case 131723:                  // 'for' 'tumbling'
        this.try_FLWORStatement();
        break;
      case 18074:                   // 'if' '('
        this.try_IfStatement();
        break;
      case 18168:                   // 'switch' '('
        this.try_SwitchStatement();
        break;
      case 144128:                  // 'try' '{'
        this.try_TryCatchStatement();
        break;
      case 18179:                   // 'typeswitch' '('
        this.try_TypeswitchStatement();
        break;
      case -12:
      case 16140:                   // 'variable' '$'
        this.try_VarDeclStatement();
        break;
      case -13:
        this.try_WhileStatement();
        break;
      case 54:                      // ';'
        this.try_VoidStatement();
        break;
      case -15:
        break;
      default:
        this.try_ApplyStatement();
      }
    }

    private parse_ApplyStatement()
    {
      this.eventHandler.startNonterminal("ApplyStatement", this.e0);
      this.parse_ExprSimple();
      this.shift(54);               // ';'
      this.eventHandler.endNonterminal("ApplyStatement", this.e0);
    }

    private try_ApplyStatement()
    {
      this.try_ExprSimple();
      this.shiftT(54);              // ';'
    }

    private parse_AssignStatement()
    {
      this.eventHandler.startNonterminal("AssignStatement", this.e0);
      this.shift(31);               // '$'
      this.lookahead1W(245);        // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      this.whitespace();
      this.parse_VarName();
      this.lookahead1W(28);         // S^WS | '(:' | ':='
      this.shift(53);               // ':='
      this.lookahead1W(266);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.whitespace();
      this.parse_ExprSingle();
      this.shift(54);               // ';'
      this.eventHandler.endNonterminal("AssignStatement", this.e0);
    }

    private try_AssignStatement()
    {
      this.shiftT(31);              // '$'
      this.lookahead1W(245);        // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      this.try_VarName();
      this.lookahead1W(28);         // S^WS | '(:' | ':='
      this.shiftT(53);              // ':='
      this.lookahead1W(266);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.try_ExprSingle();
      this.shiftT(54);              // ';'
    }

    private parse_BlockStatement()
    {
      this.eventHandler.startNonterminal("BlockStatement", this.e0);
      this.shift(281);              // '{'
      this.lookahead1W(270);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | ';' |
                                    // '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.whitespace();
      this.parse_Statement();
      this.lookahead1W(280);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | ';' |
                                    // '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|' | '}'
      this.whitespace();
      this.parse_Statements();
      this.shift(287);              // '}'
      this.eventHandler.endNonterminal("BlockStatement", this.e0);
    }

    private try_BlockStatement()
    {
      this.shiftT(281);             // '{'
      this.lookahead1W(270);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | ';' |
                                    // '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.try_Statement();
      this.lookahead1W(280);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | ';' |
                                    // '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|' | '}'
      this.try_Statements();
      this.shiftT(287);             // '}'
    }

    private parse_BreakStatement()
    {
      this.eventHandler.startNonterminal("BreakStatement", this.e0);
      this.shift(87);               // 'break'
      this.lookahead1W(62);         // S^WS | '(:' | 'loop'
      this.shift(179);              // 'loop'
      this.lookahead1W(29);         // S^WS | '(:' | ';'
      this.shift(54);               // ';'
      this.eventHandler.endNonterminal("BreakStatement", this.e0);
    }

    private try_BreakStatement()
    {
      this.shiftT(87);              // 'break'
      this.lookahead1W(62);         // S^WS | '(:' | 'loop'
      this.shiftT(179);             // 'loop'
      this.lookahead1W(29);         // S^WS | '(:' | ';'
      this.shiftT(54);              // ';'
    }

    private parse_ContinueStatement()
    {
      this.eventHandler.startNonterminal("ContinueStatement", this.e0);
      this.shift(103);              // 'continue'
      this.lookahead1W(62);         // S^WS | '(:' | 'loop'
      this.shift(179);              // 'loop'
      this.lookahead1W(29);         // S^WS | '(:' | ';'
      this.shift(54);               // ';'
      this.eventHandler.endNonterminal("ContinueStatement", this.e0);
    }

    private try_ContinueStatement()
    {
      this.shiftT(103);             // 'continue'
      this.lookahead1W(62);         // S^WS | '(:' | 'loop'
      this.shiftT(179);             // 'loop'
      this.lookahead1W(29);         // S^WS | '(:' | ';'
      this.shiftT(54);              // ';'
    }

    private parse_ExitStatement()
    {
      this.eventHandler.startNonterminal("ExitStatement", this.e0);
      this.shift(133);              // 'exit'
      this.lookahead1W(74);         // S^WS | '(:' | 'returning'
      this.shift(225);              // 'returning'
      this.lookahead1W(266);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.whitespace();
      this.parse_ExprSingle();
      this.shift(54);               // ';'
      this.eventHandler.endNonterminal("ExitStatement", this.e0);
    }

    private try_ExitStatement()
    {
      this.shiftT(133);             // 'exit'
      this.lookahead1W(74);         // S^WS | '(:' | 'returning'
      this.shiftT(225);             // 'returning'
      this.lookahead1W(266);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.try_ExprSingle();
      this.shiftT(54);              // ';'
    }

    private parse_FLWORStatement()
    {
      this.eventHandler.startNonterminal("FLWORStatement", this.e0);
      this.parse_InitialClause();
      for (;;)
      {
        this.lookahead1W(195);      // S^WS | '(:' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' | 'stable' |
                                    // 'where'
        if (this.l1 == 224)         // 'return'
        {
          break;
        }
        this.whitespace();
        this.parse_IntermediateClause();
      }
      this.whitespace();
      this.parse_ReturnStatement();
      this.eventHandler.endNonterminal("FLWORStatement", this.e0);
    }

    private try_FLWORStatement()
    {
      this.try_InitialClause();
      for (;;)
      {
        this.lookahead1W(195);      // S^WS | '(:' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' | 'stable' |
                                    // 'where'
        if (this.l1 == 224)         // 'return'
        {
          break;
        }
        this.try_IntermediateClause();
      }
      this.try_ReturnStatement();
    }

    private parse_ReturnStatement()
    {
      this.eventHandler.startNonterminal("ReturnStatement", this.e0);
      this.shift(224);              // 'return'
      this.lookahead1W(270);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | ';' |
                                    // '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.whitespace();
      this.parse_Statement();
      this.eventHandler.endNonterminal("ReturnStatement", this.e0);
    }

    private try_ReturnStatement()
    {
      this.shiftT(224);             // 'return'
      this.lookahead1W(270);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | ';' |
                                    // '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.try_Statement();
    }

    private parse_IfStatement()
    {
      this.eventHandler.startNonterminal("IfStatement", this.e0);
      this.shift(154);              // 'if'
      this.lookahead1W(22);         // S^WS | '(' | '(:'
      this.shift(35);               // '('
      this.lookahead1W(266);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.whitespace();
      this.parse_Expr();
      this.shift(38);               // ')'
      this.lookahead1W(80);         // S^WS | '(:' | 'then'
      this.shift(250);              // 'then'
      this.lookahead1W(270);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | ';' |
                                    // '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.whitespace();
      this.parse_Statement();
      this.lookahead1W(51);         // S^WS | '(:' | 'else'
      this.shift(123);              // 'else'
      this.lookahead1W(270);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | ';' |
                                    // '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.whitespace();
      this.parse_Statement();
      this.eventHandler.endNonterminal("IfStatement", this.e0);
    }

    private try_IfStatement()
    {
      this.shiftT(154);             // 'if'
      this.lookahead1W(22);         // S^WS | '(' | '(:'
      this.shiftT(35);              // '('
      this.lookahead1W(266);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.try_Expr();
      this.shiftT(38);              // ')'
      this.lookahead1W(80);         // S^WS | '(:' | 'then'
      this.shiftT(250);             // 'then'
      this.lookahead1W(270);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | ';' |
                                    // '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.try_Statement();
      this.lookahead1W(51);         // S^WS | '(:' | 'else'
      this.shiftT(123);             // 'else'
      this.lookahead1W(270);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | ';' |
                                    // '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.try_Statement();
    }

    private parse_SwitchStatement()
    {
      this.eventHandler.startNonterminal("SwitchStatement", this.e0);
      this.shift(248);              // 'switch'
      this.lookahead1W(22);         // S^WS | '(' | '(:'
      this.shift(35);               // '('
      this.lookahead1W(266);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.whitespace();
      this.parse_Expr();
      this.shift(38);               // ')'
      for (;;)
      {
        this.lookahead1W(38);       // S^WS | '(:' | 'case'
        this.whitespace();
        this.parse_SwitchCaseStatement();
        this.lookahead1W(117);      // S^WS | '(:' | 'case' | 'default'
        if (this.l1 != 89)          // 'case'
        {
          break;
        }
      }
      this.shift(110);              // 'default'
      this.lookahead1W(73);         // S^WS | '(:' | 'return'
      this.shift(224);              // 'return'
      this.lookahead1W(270);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | ';' |
                                    // '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.whitespace();
      this.parse_Statement();
      this.eventHandler.endNonterminal("SwitchStatement", this.e0);
    }

    private try_SwitchStatement()
    {
      this.shiftT(248);             // 'switch'
      this.lookahead1W(22);         // S^WS | '(' | '(:'
      this.shiftT(35);              // '('
      this.lookahead1W(266);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.try_Expr();
      this.shiftT(38);              // ')'
      for (;;)
      {
        this.lookahead1W(38);       // S^WS | '(:' | 'case'
        this.try_SwitchCaseStatement();
        this.lookahead1W(117);      // S^WS | '(:' | 'case' | 'default'
        if (this.l1 != 89)          // 'case'
        {
          break;
        }
      }
      this.shiftT(110);             // 'default'
      this.lookahead1W(73);         // S^WS | '(:' | 'return'
      this.shiftT(224);             // 'return'
      this.lookahead1W(270);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | ';' |
                                    // '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.try_Statement();
    }

    private parse_SwitchCaseStatement()
    {
      this.eventHandler.startNonterminal("SwitchCaseStatement", this.e0);
      for (;;)
      {
        this.shift(89);             // 'case'
        this.lookahead1W(266);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
        this.whitespace();
        this.parse_SwitchCaseOperand();
        if (this.l1 != 89)          // 'case'
        {
          break;
        }
      }
      this.shift(224);              // 'return'
      this.lookahead1W(270);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | ';' |
                                    // '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.whitespace();
      this.parse_Statement();
      this.eventHandler.endNonterminal("SwitchCaseStatement", this.e0);
    }

    private try_SwitchCaseStatement()
    {
      for (;;)
      {
        this.shiftT(89);            // 'case'
        this.lookahead1W(266);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
        this.try_SwitchCaseOperand();
        if (this.l1 != 89)          // 'case'
        {
          break;
        }
      }
      this.shiftT(224);             // 'return'
      this.lookahead1W(270);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | ';' |
                                    // '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.try_Statement();
    }

    private parse_TryCatchStatement()
    {
      this.eventHandler.startNonterminal("TryCatchStatement", this.e0);
      this.shift(256);              // 'try'
      this.lookahead1W(90);         // S^WS | '(:' | '{'
      this.whitespace();
      this.parse_BlockStatement();
      for (;;)
      {
        this.lookahead1W(39);       // S^WS | '(:' | 'catch'
        this.shift(92);             // 'catch'
        this.lookahead1W(248);      // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
        this.whitespace();
        this.parse_CatchErrorList();
        this.whitespace();
        this.parse_BlockStatement();
        this.lookahead1W(283);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | EOF | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' |
                                    // ';' | '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|' | '}'
        switch (this.l1)
        {
        case 92:                    // 'catch'
          this.lookahead2W(255);    // Wildcard | EQName^Token | S^WS | '#' | '(' | '(:' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
          break;
        default:
          this.lk = this.l1;
        }
        if (this.lk != 2652         // 'catch' Wildcard
         && this.lk != 3164         // 'catch' EQName^Token
         && this.lk != 36444        // 'catch' 'after'
         && this.lk != 37468        // 'catch' 'allowing'
         && this.lk != 37980        // 'catch' 'ancestor'
         && this.lk != 38492        // 'catch' 'ancestor-or-self'
         && this.lk != 39004        // 'catch' 'and'
         && this.lk != 40028        // 'catch' 'append'
         && this.lk != 40540        // 'catch' 'array'
         && this.lk != 41052        // 'catch' 'as'
         && this.lk != 41564        // 'catch' 'ascending'
         && this.lk != 42076        // 'catch' 'at'
         && this.lk != 42588        // 'catch' 'attribute'
         && this.lk != 43100        // 'catch' 'base-uri'
         && this.lk != 43612        // 'catch' 'before'
         && this.lk != 44124        // 'catch' 'boundary-space'
         && this.lk != 44636        // 'catch' 'break'
         && this.lk != 45660        // 'catch' 'case'
         && this.lk != 46172        // 'catch' 'cast'
         && this.lk != 46684        // 'catch' 'castable'
         && this.lk != 47196        // 'catch' 'catch'
         && this.lk != 48220        // 'catch' 'child'
         && this.lk != 48732        // 'catch' 'collation'
         && this.lk != 49756        // 'catch' 'comment'
         && this.lk != 50268        // 'catch' 'constraint'
         && this.lk != 50780        // 'catch' 'construction'
         && this.lk != 52316        // 'catch' 'context'
         && this.lk != 52828        // 'catch' 'continue'
         && this.lk != 53340        // 'catch' 'copy'
         && this.lk != 53852        // 'catch' 'copy-namespaces'
         && this.lk != 54364        // 'catch' 'count'
         && this.lk != 54876        // 'catch' 'decimal-format'
         && this.lk != 55900        // 'catch' 'declare'
         && this.lk != 56412        // 'catch' 'default'
         && this.lk != 56924        // 'catch' 'delete'
         && this.lk != 57436        // 'catch' 'descendant'
         && this.lk != 57948        // 'catch' 'descendant-or-self'
         && this.lk != 58460        // 'catch' 'descending'
         && this.lk != 61020        // 'catch' 'div'
         && this.lk != 61532        // 'catch' 'document'
         && this.lk != 62044        // 'catch' 'document-node'
         && this.lk != 62556        // 'catch' 'element'
         && this.lk != 63068        // 'catch' 'else'
         && this.lk != 63580        // 'catch' 'empty'
         && this.lk != 64092        // 'catch' 'empty-sequence'
         && this.lk != 64604        // 'catch' 'encoding'
         && this.lk != 65116        // 'catch' 'end'
         && this.lk != 66140        // 'catch' 'eq'
         && this.lk != 66652        // 'catch' 'every'
         && this.lk != 67676        // 'catch' 'except'
         && this.lk != 68188        // 'catch' 'exit'
         && this.lk != 68700        // 'catch' 'external'
         && this.lk != 69212        // 'catch' 'false'
         && this.lk != 69724        // 'catch' 'first'
         && this.lk != 70236        // 'catch' 'following'
         && this.lk != 70748        // 'catch' 'following-sibling'
         && this.lk != 71260        // 'catch' 'for'
         && this.lk != 72796        // 'catch' 'from'
         && this.lk != 73308        // 'catch' 'ft-option'
         && this.lk != 75356        // 'catch' 'function'
         && this.lk != 75868        // 'catch' 'ge'
         && this.lk != 76892        // 'catch' 'group'
         && this.lk != 77916        // 'catch' 'gt'
         && this.lk != 78428        // 'catch' 'idiv'
         && this.lk != 78940        // 'catch' 'if'
         && this.lk != 79452        // 'catch' 'import'
         && this.lk != 79964        // 'catch' 'in'
         && this.lk != 80476        // 'catch' 'index'
         && this.lk != 82524        // 'catch' 'insert'
         && this.lk != 83036        // 'catch' 'instance'
         && this.lk != 83548        // 'catch' 'integrity'
         && this.lk != 84060        // 'catch' 'intersect'
         && this.lk != 84572        // 'catch' 'into'
         && this.lk != 85084        // 'catch' 'is'
         && this.lk != 85596        // 'catch' 'item'
         && this.lk != 86108        // 'catch' 'json'
         && this.lk != 86620        // 'catch' 'json-item'
         && this.lk != 87132        // 'catch' 'jsoniq'
         && this.lk != 88668        // 'catch' 'last'
         && this.lk != 89180        // 'catch' 'lax'
         && this.lk != 89692        // 'catch' 'le'
         && this.lk != 90716        // 'catch' 'let'
         && this.lk != 91740        // 'catch' 'loop'
         && this.lk != 92764        // 'catch' 'lt'
         && this.lk != 93788        // 'catch' 'mod'
         && this.lk != 94300        // 'catch' 'modify'
         && this.lk != 94812        // 'catch' 'module'
         && this.lk != 95836        // 'catch' 'namespace'
         && this.lk != 96348        // 'catch' 'namespace-node'
         && this.lk != 96860        // 'catch' 'ne'
         && this.lk != 99420        // 'catch' 'node'
         && this.lk != 99932        // 'catch' 'nodes'
         && this.lk != 100956       // 'catch' 'null'
         && this.lk != 101468       // 'catch' 'object'
         && this.lk != 103516       // 'catch' 'only'
         && this.lk != 104028       // 'catch' 'option'
         && this.lk != 104540       // 'catch' 'or'
         && this.lk != 105052       // 'catch' 'order'
         && this.lk != 105564       // 'catch' 'ordered'
         && this.lk != 106076       // 'catch' 'ordering'
         && this.lk != 107612       // 'catch' 'parent'
         && this.lk != 110684       // 'catch' 'preceding'
         && this.lk != 111196       // 'catch' 'preceding-sibling'
         && this.lk != 112732       // 'catch' 'processing-instruction'
         && this.lk != 113756       // 'catch' 'rename'
         && this.lk != 114268       // 'catch' 'replace'
         && this.lk != 114780       // 'catch' 'return'
         && this.lk != 115292       // 'catch' 'returning'
         && this.lk != 115804       // 'catch' 'revalidation'
         && this.lk != 116828       // 'catch' 'satisfies'
         && this.lk != 117340       // 'catch' 'schema'
         && this.lk != 117852       // 'catch' 'schema-attribute'
         && this.lk != 118364       // 'catch' 'schema-element'
         && this.lk != 118876       // 'catch' 'score'
         && this.lk != 119388       // 'catch' 'select'
         && this.lk != 119900       // 'catch' 'self'
         && this.lk != 122460       // 'catch' 'sliding'
         && this.lk != 122972       // 'catch' 'some'
         && this.lk != 123484       // 'catch' 'stable'
         && this.lk != 123996       // 'catch' 'start'
         && this.lk != 125532       // 'catch' 'strict'
         && this.lk != 126556       // 'catch' 'structured-item'
         && this.lk != 127068       // 'catch' 'switch'
         && this.lk != 127580       // 'catch' 'text'
         && this.lk != 129628       // 'catch' 'to'
         && this.lk != 130140       // 'catch' 'treat'
         && this.lk != 130652       // 'catch' 'true'
         && this.lk != 131164       // 'catch' 'try'
         && this.lk != 131676       // 'catch' 'tumbling'
         && this.lk != 132188       // 'catch' 'type'
         && this.lk != 132700       // 'catch' 'typeswitch'
         && this.lk != 133212       // 'catch' 'union'
         && this.lk != 134236       // 'catch' 'unordered'
         && this.lk != 134748       // 'catch' 'updating'
         && this.lk != 136284       // 'catch' 'validate'
         && this.lk != 136796       // 'catch' 'value'
         && this.lk != 137308       // 'catch' 'variable'
         && this.lk != 137820       // 'catch' 'version'
         && this.lk != 139356       // 'catch' 'where'
         && this.lk != 139868       // 'catch' 'while'
         && this.lk != 141404)      // 'catch' 'with'
        {
          break;
        }
      }
      this.eventHandler.endNonterminal("TryCatchStatement", this.e0);
    }

    private try_TryCatchStatement()
    {
      this.shiftT(256);             // 'try'
      this.lookahead1W(90);         // S^WS | '(:' | '{'
      this.try_BlockStatement();
      for (;;)
      {
        this.lookahead1W(39);       // S^WS | '(:' | 'catch'
        this.shiftT(92);            // 'catch'
        this.lookahead1W(248);      // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
        this.try_CatchErrorList();
        this.try_BlockStatement();
        this.lookahead1W(283);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | EOF | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' |
                                    // ';' | '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|' | '}'
        switch (this.l1)
        {
        case 92:                    // 'catch'
          this.lookahead2W(255);    // Wildcard | EQName^Token | S^WS | '#' | '(' | '(:' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
          break;
        default:
          this.lk = this.l1;
        }
        if (this.lk != 2652         // 'catch' Wildcard
         && this.lk != 3164         // 'catch' EQName^Token
         && this.lk != 36444        // 'catch' 'after'
         && this.lk != 37468        // 'catch' 'allowing'
         && this.lk != 37980        // 'catch' 'ancestor'
         && this.lk != 38492        // 'catch' 'ancestor-or-self'
         && this.lk != 39004        // 'catch' 'and'
         && this.lk != 40028        // 'catch' 'append'
         && this.lk != 40540        // 'catch' 'array'
         && this.lk != 41052        // 'catch' 'as'
         && this.lk != 41564        // 'catch' 'ascending'
         && this.lk != 42076        // 'catch' 'at'
         && this.lk != 42588        // 'catch' 'attribute'
         && this.lk != 43100        // 'catch' 'base-uri'
         && this.lk != 43612        // 'catch' 'before'
         && this.lk != 44124        // 'catch' 'boundary-space'
         && this.lk != 44636        // 'catch' 'break'
         && this.lk != 45660        // 'catch' 'case'
         && this.lk != 46172        // 'catch' 'cast'
         && this.lk != 46684        // 'catch' 'castable'
         && this.lk != 47196        // 'catch' 'catch'
         && this.lk != 48220        // 'catch' 'child'
         && this.lk != 48732        // 'catch' 'collation'
         && this.lk != 49756        // 'catch' 'comment'
         && this.lk != 50268        // 'catch' 'constraint'
         && this.lk != 50780        // 'catch' 'construction'
         && this.lk != 52316        // 'catch' 'context'
         && this.lk != 52828        // 'catch' 'continue'
         && this.lk != 53340        // 'catch' 'copy'
         && this.lk != 53852        // 'catch' 'copy-namespaces'
         && this.lk != 54364        // 'catch' 'count'
         && this.lk != 54876        // 'catch' 'decimal-format'
         && this.lk != 55900        // 'catch' 'declare'
         && this.lk != 56412        // 'catch' 'default'
         && this.lk != 56924        // 'catch' 'delete'
         && this.lk != 57436        // 'catch' 'descendant'
         && this.lk != 57948        // 'catch' 'descendant-or-self'
         && this.lk != 58460        // 'catch' 'descending'
         && this.lk != 61020        // 'catch' 'div'
         && this.lk != 61532        // 'catch' 'document'
         && this.lk != 62044        // 'catch' 'document-node'
         && this.lk != 62556        // 'catch' 'element'
         && this.lk != 63068        // 'catch' 'else'
         && this.lk != 63580        // 'catch' 'empty'
         && this.lk != 64092        // 'catch' 'empty-sequence'
         && this.lk != 64604        // 'catch' 'encoding'
         && this.lk != 65116        // 'catch' 'end'
         && this.lk != 66140        // 'catch' 'eq'
         && this.lk != 66652        // 'catch' 'every'
         && this.lk != 67676        // 'catch' 'except'
         && this.lk != 68188        // 'catch' 'exit'
         && this.lk != 68700        // 'catch' 'external'
         && this.lk != 69212        // 'catch' 'false'
         && this.lk != 69724        // 'catch' 'first'
         && this.lk != 70236        // 'catch' 'following'
         && this.lk != 70748        // 'catch' 'following-sibling'
         && this.lk != 71260        // 'catch' 'for'
         && this.lk != 72796        // 'catch' 'from'
         && this.lk != 73308        // 'catch' 'ft-option'
         && this.lk != 75356        // 'catch' 'function'
         && this.lk != 75868        // 'catch' 'ge'
         && this.lk != 76892        // 'catch' 'group'
         && this.lk != 77916        // 'catch' 'gt'
         && this.lk != 78428        // 'catch' 'idiv'
         && this.lk != 78940        // 'catch' 'if'
         && this.lk != 79452        // 'catch' 'import'
         && this.lk != 79964        // 'catch' 'in'
         && this.lk != 80476        // 'catch' 'index'
         && this.lk != 82524        // 'catch' 'insert'
         && this.lk != 83036        // 'catch' 'instance'
         && this.lk != 83548        // 'catch' 'integrity'
         && this.lk != 84060        // 'catch' 'intersect'
         && this.lk != 84572        // 'catch' 'into'
         && this.lk != 85084        // 'catch' 'is'
         && this.lk != 85596        // 'catch' 'item'
         && this.lk != 86108        // 'catch' 'json'
         && this.lk != 86620        // 'catch' 'json-item'
         && this.lk != 87132        // 'catch' 'jsoniq'
         && this.lk != 88668        // 'catch' 'last'
         && this.lk != 89180        // 'catch' 'lax'
         && this.lk != 89692        // 'catch' 'le'
         && this.lk != 90716        // 'catch' 'let'
         && this.lk != 91740        // 'catch' 'loop'
         && this.lk != 92764        // 'catch' 'lt'
         && this.lk != 93788        // 'catch' 'mod'
         && this.lk != 94300        // 'catch' 'modify'
         && this.lk != 94812        // 'catch' 'module'
         && this.lk != 95836        // 'catch' 'namespace'
         && this.lk != 96348        // 'catch' 'namespace-node'
         && this.lk != 96860        // 'catch' 'ne'
         && this.lk != 99420        // 'catch' 'node'
         && this.lk != 99932        // 'catch' 'nodes'
         && this.lk != 100956       // 'catch' 'null'
         && this.lk != 101468       // 'catch' 'object'
         && this.lk != 103516       // 'catch' 'only'
         && this.lk != 104028       // 'catch' 'option'
         && this.lk != 104540       // 'catch' 'or'
         && this.lk != 105052       // 'catch' 'order'
         && this.lk != 105564       // 'catch' 'ordered'
         && this.lk != 106076       // 'catch' 'ordering'
         && this.lk != 107612       // 'catch' 'parent'
         && this.lk != 110684       // 'catch' 'preceding'
         && this.lk != 111196       // 'catch' 'preceding-sibling'
         && this.lk != 112732       // 'catch' 'processing-instruction'
         && this.lk != 113756       // 'catch' 'rename'
         && this.lk != 114268       // 'catch' 'replace'
         && this.lk != 114780       // 'catch' 'return'
         && this.lk != 115292       // 'catch' 'returning'
         && this.lk != 115804       // 'catch' 'revalidation'
         && this.lk != 116828       // 'catch' 'satisfies'
         && this.lk != 117340       // 'catch' 'schema'
         && this.lk != 117852       // 'catch' 'schema-attribute'
         && this.lk != 118364       // 'catch' 'schema-element'
         && this.lk != 118876       // 'catch' 'score'
         && this.lk != 119388       // 'catch' 'select'
         && this.lk != 119900       // 'catch' 'self'
         && this.lk != 122460       // 'catch' 'sliding'
         && this.lk != 122972       // 'catch' 'some'
         && this.lk != 123484       // 'catch' 'stable'
         && this.lk != 123996       // 'catch' 'start'
         && this.lk != 125532       // 'catch' 'strict'
         && this.lk != 126556       // 'catch' 'structured-item'
         && this.lk != 127068       // 'catch' 'switch'
         && this.lk != 127580       // 'catch' 'text'
         && this.lk != 129628       // 'catch' 'to'
         && this.lk != 130140       // 'catch' 'treat'
         && this.lk != 130652       // 'catch' 'true'
         && this.lk != 131164       // 'catch' 'try'
         && this.lk != 131676       // 'catch' 'tumbling'
         && this.lk != 132188       // 'catch' 'type'
         && this.lk != 132700       // 'catch' 'typeswitch'
         && this.lk != 133212       // 'catch' 'union'
         && this.lk != 134236       // 'catch' 'unordered'
         && this.lk != 134748       // 'catch' 'updating'
         && this.lk != 136284       // 'catch' 'validate'
         && this.lk != 136796       // 'catch' 'value'
         && this.lk != 137308       // 'catch' 'variable'
         && this.lk != 137820       // 'catch' 'version'
         && this.lk != 139356       // 'catch' 'where'
         && this.lk != 139868       // 'catch' 'while'
         && this.lk != 141404)      // 'catch' 'with'
        {
          break;
        }
      }
    }

    private parse_TypeswitchStatement()
    {
      this.eventHandler.startNonterminal("TypeswitchStatement", this.e0);
      this.shift(259);              // 'typeswitch'
      this.lookahead1W(22);         // S^WS | '(' | '(:'
      this.shift(35);               // '('
      this.lookahead1W(266);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.whitespace();
      this.parse_Expr();
      this.shift(38);               // ')'
      for (;;)
      {
        this.lookahead1W(38);       // S^WS | '(:' | 'case'
        this.whitespace();
        this.parse_CaseStatement();
        this.lookahead1W(117);      // S^WS | '(:' | 'case' | 'default'
        if (this.l1 != 89)          // 'case'
        {
          break;
        }
      }
      this.shift(110);              // 'default'
      this.lookahead1W(99);         // S^WS | '$' | '(:' | 'return'
      if (this.l1 == 31)            // '$'
      {
        this.shift(31);             // '$'
        this.lookahead1W(245);      // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
        this.whitespace();
        this.parse_VarName();
      }
      this.lookahead1W(73);         // S^WS | '(:' | 'return'
      this.shift(224);              // 'return'
      this.lookahead1W(270);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | ';' |
                                    // '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.whitespace();
      this.parse_Statement();
      this.eventHandler.endNonterminal("TypeswitchStatement", this.e0);
    }

    private try_TypeswitchStatement()
    {
      this.shiftT(259);             // 'typeswitch'
      this.lookahead1W(22);         // S^WS | '(' | '(:'
      this.shiftT(35);              // '('
      this.lookahead1W(266);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.try_Expr();
      this.shiftT(38);              // ')'
      for (;;)
      {
        this.lookahead1W(38);       // S^WS | '(:' | 'case'
        this.try_CaseStatement();
        this.lookahead1W(117);      // S^WS | '(:' | 'case' | 'default'
        if (this.l1 != 89)          // 'case'
        {
          break;
        }
      }
      this.shiftT(110);             // 'default'
      this.lookahead1W(99);         // S^WS | '$' | '(:' | 'return'
      if (this.l1 == 31)            // '$'
      {
        this.shiftT(31);            // '$'
        this.lookahead1W(245);      // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
        this.try_VarName();
      }
      this.lookahead1W(73);         // S^WS | '(:' | 'return'
      this.shiftT(224);             // 'return'
      this.lookahead1W(270);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | ';' |
                                    // '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.try_Statement();
    }

    private parse_CaseStatement()
    {
      this.eventHandler.startNonterminal("CaseStatement", this.e0);
      this.shift(89);               // 'case'
      this.lookahead1W(257);        // EQName^Token | S^WS | '$' | '%' | '(' | '(:' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      if (this.l1 == 31)            // '$'
      {
        this.shift(31);             // '$'
        this.lookahead1W(245);      // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
        this.whitespace();
        this.parse_VarName();
        this.lookahead1W(33);       // S^WS | '(:' | 'as'
        this.shift(80);             // 'as'
      }
      this.lookahead1W(253);        // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      this.whitespace();
      this.parse_SequenceType();
      this.lookahead1W(73);         // S^WS | '(:' | 'return'
      this.shift(224);              // 'return'
      this.lookahead1W(270);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | ';' |
                                    // '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.whitespace();
      this.parse_Statement();
      this.eventHandler.endNonterminal("CaseStatement", this.e0);
    }

    private try_CaseStatement()
    {
      this.shiftT(89);              // 'case'
      this.lookahead1W(257);        // EQName^Token | S^WS | '$' | '%' | '(' | '(:' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      if (this.l1 == 31)            // '$'
      {
        this.shiftT(31);            // '$'
        this.lookahead1W(245);      // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
        this.try_VarName();
        this.lookahead1W(33);       // S^WS | '(:' | 'as'
        this.shiftT(80);            // 'as'
      }
      this.lookahead1W(253);        // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      this.try_SequenceType();
      this.lookahead1W(73);         // S^WS | '(:' | 'return'
      this.shiftT(224);             // 'return'
      this.lookahead1W(270);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | ';' |
                                    // '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.try_Statement();
    }

    private parse_VarDeclStatement()
    {
      this.eventHandler.startNonterminal("VarDeclStatement", this.e0);
      for (;;)
      {
        this.lookahead1W(102);      // S^WS | '%' | '(:' | 'variable'
        if (this.l1 != 33)          // '%'
        {
          break;
        }
        this.whitespace();
        this.parse_Annotation();
      }
      this.shift(268);              // 'variable'
      this.lookahead1W(21);         // S^WS | '$' | '(:'
      this.shift(31);               // '$'
      this.lookahead1W(245);        // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      this.whitespace();
      this.parse_VarName();
      this.lookahead1W(172);        // S^WS | '(:' | ',' | ':=' | ';' | 'as'
      if (this.l1 == 80)            // 'as'
      {
        this.whitespace();
        this.parse_TypeDeclaration();
      }
      this.lookahead1W(155);        // S^WS | '(:' | ',' | ':=' | ';'
      if (this.l1 == 53)            // ':='
      {
        this.shift(53);             // ':='
        this.lookahead1W(266);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
        this.whitespace();
        this.parse_ExprSingle();
      }
      for (;;)
      {
        if (this.l1 != 42)          // ','
        {
          break;
        }
        this.shift(42);             // ','
        this.lookahead1W(21);       // S^WS | '$' | '(:'
        this.shift(31);             // '$'
        this.lookahead1W(245);      // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
        this.whitespace();
        this.parse_VarName();
        this.lookahead1W(172);      // S^WS | '(:' | ',' | ':=' | ';' | 'as'
        if (this.l1 == 80)          // 'as'
        {
          this.whitespace();
          this.parse_TypeDeclaration();
        }
        this.lookahead1W(155);      // S^WS | '(:' | ',' | ':=' | ';'
        if (this.l1 == 53)          // ':='
        {
          this.shift(53);           // ':='
          this.lookahead1W(266);    // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
          this.whitespace();
          this.parse_ExprSingle();
        }
      }
      this.shift(54);               // ';'
      this.eventHandler.endNonterminal("VarDeclStatement", this.e0);
    }

    private try_VarDeclStatement()
    {
      for (;;)
      {
        this.lookahead1W(102);      // S^WS | '%' | '(:' | 'variable'
        if (this.l1 != 33)          // '%'
        {
          break;
        }
        this.try_Annotation();
      }
      this.shiftT(268);             // 'variable'
      this.lookahead1W(21);         // S^WS | '$' | '(:'
      this.shiftT(31);              // '$'
      this.lookahead1W(245);        // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      this.try_VarName();
      this.lookahead1W(172);        // S^WS | '(:' | ',' | ':=' | ';' | 'as'
      if (this.l1 == 80)            // 'as'
      {
        this.try_TypeDeclaration();
      }
      this.lookahead1W(155);        // S^WS | '(:' | ',' | ':=' | ';'
      if (this.l1 == 53)            // ':='
      {
        this.shiftT(53);            // ':='
        this.lookahead1W(266);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
        this.try_ExprSingle();
      }
      for (;;)
      {
        if (this.l1 != 42)          // ','
        {
          break;
        }
        this.shiftT(42);            // ','
        this.lookahead1W(21);       // S^WS | '$' | '(:'
        this.shiftT(31);            // '$'
        this.lookahead1W(245);      // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
        this.try_VarName();
        this.lookahead1W(172);      // S^WS | '(:' | ',' | ':=' | ';' | 'as'
        if (this.l1 == 80)          // 'as'
        {
          this.try_TypeDeclaration();
        }
        this.lookahead1W(155);      // S^WS | '(:' | ',' | ':=' | ';'
        if (this.l1 == 53)          // ':='
        {
          this.shiftT(53);          // ':='
          this.lookahead1W(266);    // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
          this.try_ExprSingle();
        }
      }
      this.shiftT(54);              // ';'
    }

    private parse_WhileStatement()
    {
      this.eventHandler.startNonterminal("WhileStatement", this.e0);
      this.shift(273);              // 'while'
      this.lookahead1W(22);         // S^WS | '(' | '(:'
      this.shift(35);               // '('
      this.lookahead1W(266);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.whitespace();
      this.parse_Expr();
      this.shift(38);               // ')'
      this.lookahead1W(270);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | ';' |
                                    // '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.whitespace();
      this.parse_Statement();
      this.eventHandler.endNonterminal("WhileStatement", this.e0);
    }

    private try_WhileStatement()
    {
      this.shiftT(273);             // 'while'
      this.lookahead1W(22);         // S^WS | '(' | '(:'
      this.shiftT(35);              // '('
      this.lookahead1W(266);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.try_Expr();
      this.shiftT(38);              // ')'
      this.lookahead1W(270);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | ';' |
                                    // '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.try_Statement();
    }

    private parse_VoidStatement()
    {
      this.eventHandler.startNonterminal("VoidStatement", this.e0);
      this.shift(54);               // ';'
      this.eventHandler.endNonterminal("VoidStatement", this.e0);
    }

    private try_VoidStatement()
    {
      this.shiftT(54);              // ';'
    }

    private parse_ExprSingle()
    {
      this.eventHandler.startNonterminal("ExprSingle", this.e0);
      switch (this.l1)
      {
      case 139:                     // 'for'
        this.lookahead2W(179);      // S^WS | '#' | '$' | '(' | '(:' | 'sliding' | 'tumbling'
        break;
      case 177:                     // 'let'
        this.lookahead2W(166);      // S^WS | '#' | '$' | '(' | '(:' | 'score'
        break;
      case 256:                     // 'try'
        this.lookahead2W(148);      // S^WS | '#' | '(' | '(:' | '{'
        break;
      case 154:                     // 'if'
      case 248:                     // 'switch'
      case 259:                     // 'typeswitch'
        this.lookahead2W(95);       // S^WS | '#' | '(' | '(:'
        break;
      default:
        this.lk = this.l1;
      }
      switch (this.lk)
      {
      case 16011:                   // 'for' '$'
      case 16049:                   // 'let' '$'
      case 118961:                  // 'let' 'score'
      case 122507:                  // 'for' 'sliding'
      case 131723:                  // 'for' 'tumbling'
        this.parse_FLWORExpr();
        break;
      case 18074:                   // 'if' '('
        this.parse_IfExpr();
        break;
      case 18168:                   // 'switch' '('
        this.parse_SwitchExpr();
        break;
      case 144128:                  // 'try' '{'
        this.parse_TryCatchExpr();
        break;
      case 18179:                   // 'typeswitch' '('
        this.parse_TypeswitchExpr();
        break;
      default:
        this.parse_ExprSimple();
      }
      this.eventHandler.endNonterminal("ExprSingle", this.e0);
    }

    private try_ExprSingle()
    {
      switch (this.l1)
      {
      case 139:                     // 'for'
        this.lookahead2W(179);      // S^WS | '#' | '$' | '(' | '(:' | 'sliding' | 'tumbling'
        break;
      case 177:                     // 'let'
        this.lookahead2W(166);      // S^WS | '#' | '$' | '(' | '(:' | 'score'
        break;
      case 256:                     // 'try'
        this.lookahead2W(148);      // S^WS | '#' | '(' | '(:' | '{'
        break;
      case 154:                     // 'if'
      case 248:                     // 'switch'
      case 259:                     // 'typeswitch'
        this.lookahead2W(95);       // S^WS | '#' | '(' | '(:'
        break;
      default:
        this.lk = this.l1;
      }
      switch (this.lk)
      {
      case 16011:                   // 'for' '$'
      case 16049:                   // 'let' '$'
      case 118961:                  // 'let' 'score'
      case 122507:                  // 'for' 'sliding'
      case 131723:                  // 'for' 'tumbling'
        this.try_FLWORExpr();
        break;
      case 18074:                   // 'if' '('
        this.try_IfExpr();
        break;
      case 18168:                   // 'switch' '('
        this.try_SwitchExpr();
        break;
      case 144128:                  // 'try' '{'
        this.try_TryCatchExpr();
        break;
      case 18179:                   // 'typeswitch' '('
        this.try_TypeswitchExpr();
        break;
      default:
        this.try_ExprSimple();
      }
    }

    private parse_ExprSimple()
    {
      this.eventHandler.startNonterminal("ExprSimple", this.e0);
      switch (this.l1)
      {
      case 78:                      // 'append'
        this.lookahead2W(268);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '#' | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' |
                                    // '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
        break;
      case 161:                     // 'insert'
        this.lookahead2W(275);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // NCName^Token | S^WS | '#' | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
        break;
      case 223:                     // 'replace'
        this.lookahead2W(170);      // S^WS | '#' | '(' | '(:' | 'node' | 'value'
        break;
      case 111:                     // 'delete'
      case 222:                     // 'rename'
        this.lookahead2W(260);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '#' | '$' | '$$' | '%' | '(' | '(:' | '<' | '<!--' | '<?' | '[' |
                                    // 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'jsoniq' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'null' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | '{' | '{|'
        break;
      case 104:                     // 'copy'
      case 130:                     // 'every'
      case 240:                     // 'some'
        this.lookahead2W(143);      // S^WS | '#' | '$' | '(' | '(:'
        break;
      default:
        this.lk = this.l1;
      }
      if (this.lk == 17998          // 'append' '('
       || this.lk == 18031          // 'delete' '('
       || this.lk == 18081          // 'insert' '('
       || this.lk == 18142          // 'rename' '('
       || this.lk == 99439          // 'delete' 'node'
       || this.lk == 99489          // 'insert' 'node'
       || this.lk == 99550          // 'rename' 'node'
       || this.lk == 99951          // 'delete' 'nodes'
       || this.lk == 100001         // 'insert' 'nodes'
       || this.lk == 136927)        // 'replace' 'value'
      {
        this.lk = this.memoized(10, this.e0);
        if (this.lk == 0)
        {
          var b0A = this.b0; var e0A = this.e0; var l1A = this.l1;
          var b1A = this.b1; var e1A = this.e1; var l2A = this.l2;
          var b2A = this.b2; var e2A = this.e2;
          try
          {
            this.try_OrExpr();
            this.lk = -2;
          }
          catch (p2A)
          {
            try
            {
              this.b0 = b0A; this.e0 = e0A; this.l1 = l1A; if (this.l1 == 0) {this.end = e0A;} else {
              this.b1 = b1A; this.e1 = e1A; this.l2 = l2A; if (this.l2 == 0) {this.end = e1A;} else {
              this.b2 = b2A; this.e2 = e2A; this.end = e2A; }}
              this.try_InsertExpr();
              this.lk = -3;
            }
            catch (p3A)
            {
              try
              {
                this.b0 = b0A; this.e0 = e0A; this.l1 = l1A; if (this.l1 == 0) {this.end = e0A;} else {
                this.b1 = b1A; this.e1 = e1A; this.l2 = l2A; if (this.l2 == 0) {this.end = e1A;} else {
                this.b2 = b2A; this.e2 = e2A; this.end = e2A; }}
                this.try_DeleteExpr();
                this.lk = -4;
              }
              catch (p4A)
              {
                try
                {
                  this.b0 = b0A; this.e0 = e0A; this.l1 = l1A; if (this.l1 == 0) {this.end = e0A;} else {
                  this.b1 = b1A; this.e1 = e1A; this.l2 = l2A; if (this.l2 == 0) {this.end = e1A;} else {
                  this.b2 = b2A; this.e2 = e2A; this.end = e2A; }}
                  this.try_RenameExpr();
                  this.lk = -5;
                }
                catch (p5A)
                {
                  try
                  {
                    this.b0 = b0A; this.e0 = e0A; this.l1 = l1A; if (this.l1 == 0) {this.end = e0A;} else {
                    this.b1 = b1A; this.e1 = e1A; this.l2 = l2A; if (this.l2 == 0) {this.end = e1A;} else {
                    this.b2 = b2A; this.e2 = e2A; this.end = e2A; }}
                    this.try_ReplaceExpr();
                    this.lk = -6;
                  }
                  catch (p6A)
                  {
                    try
                    {
                      this.b0 = b0A; this.e0 = e0A; this.l1 = l1A; if (this.l1 == 0) {this.end = e0A;} else {
                      this.b1 = b1A; this.e1 = e1A; this.l2 = l2A; if (this.l2 == 0) {this.end = e1A;} else {
                      this.b2 = b2A; this.e2 = e2A; this.end = e2A; }}
                      this.try_JSONDeleteExpr();
                      this.lk = -8;
                    }
                    catch (p8A)
                    {
                      try
                      {
                        this.b0 = b0A; this.e0 = e0A; this.l1 = l1A; if (this.l1 == 0) {this.end = e0A;} else {
                        this.b1 = b1A; this.e1 = e1A; this.l2 = l2A; if (this.l2 == 0) {this.end = e1A;} else {
                        this.b2 = b2A; this.e2 = e2A; this.end = e2A; }}
                        this.try_JSONInsertExpr();
                        this.lk = -9;
                      }
                      catch (p9A)
                      {
                        try
                        {
                          this.b0 = b0A; this.e0 = e0A; this.l1 = l1A; if (this.l1 == 0) {this.end = e0A;} else {
                          this.b1 = b1A; this.e1 = e1A; this.l2 = l2A; if (this.l2 == 0) {this.end = e1A;} else {
                          this.b2 = b2A; this.e2 = e2A; this.end = e2A; }}
                          this.try_JSONRenameExpr();
                          this.lk = -10;
                        }
                        catch (p10A)
                        {
                          try
                          {
                            this.b0 = b0A; this.e0 = e0A; this.l1 = l1A; if (this.l1 == 0) {this.end = e0A;} else {
                            this.b1 = b1A; this.e1 = e1A; this.l2 = l2A; if (this.l2 == 0) {this.end = e1A;} else {
                            this.b2 = b2A; this.e2 = e2A; this.end = e2A; }}
                            this.try_JSONReplaceExpr();
                            this.lk = -11;
                          }
                          catch (p11A)
                          {
                            this.lk = -12;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          this.b0 = b0A; this.e0 = e0A; this.l1 = l1A; if (this.l1 == 0) {this.end = e0A;} else {
          this.b1 = b1A; this.e1 = e1A; this.l2 = l2A; if (this.l2 == 0) {this.end = e1A;} else {
          this.b2 = b2A; this.e2 = e2A; this.end = e2A; }}
          this.memoize(10, this.e0, this.lk);
        }
      }
      switch (this.lk)
      {
      case 16002:                   // 'every' '$'
      case 16112:                   // 'some' '$'
        this.parse_QuantifiedExpr();
        break;
      case -3:
        this.parse_InsertExpr();
        break;
      case -4:
        this.parse_DeleteExpr();
        break;
      case -5:
        this.parse_RenameExpr();
        break;
      case -6:
      case 99551:                   // 'replace' 'node'
        this.parse_ReplaceExpr();
        break;
      case 15976:                   // 'copy' '$'
        this.parse_TransformExpr();
        break;
      case -8:
      case 3183:                    // 'delete' EQName^Token
      case 4207:                    // 'delete' IntegerLiteral
      case 4719:                    // 'delete' DecimalLiteral
      case 5231:                    // 'delete' DoubleLiteral
      case 5743:                    // 'delete' StringLiteral
      case 15983:                   // 'delete' '$'
      case 16495:                   // 'delete' '$$'
      case 17007:                   // 'delete' '%'
      case 28271:                   // 'delete' '<'
      case 28783:                   // 'delete' '<!--'
      case 30831:                   // 'delete' '<?'
      case 35439:                   // 'delete' '['
      case 36463:                   // 'delete' 'after'
      case 37487:                   // 'delete' 'allowing'
      case 37999:                   // 'delete' 'ancestor'
      case 38511:                   // 'delete' 'ancestor-or-self'
      case 39023:                   // 'delete' 'and'
      case 40047:                   // 'delete' 'append'
      case 40559:                   // 'delete' 'array'
      case 41071:                   // 'delete' 'as'
      case 41583:                   // 'delete' 'ascending'
      case 42095:                   // 'delete' 'at'
      case 42607:                   // 'delete' 'attribute'
      case 43119:                   // 'delete' 'base-uri'
      case 43631:                   // 'delete' 'before'
      case 44143:                   // 'delete' 'boundary-space'
      case 44655:                   // 'delete' 'break'
      case 45679:                   // 'delete' 'case'
      case 46191:                   // 'delete' 'cast'
      case 46703:                   // 'delete' 'castable'
      case 47215:                   // 'delete' 'catch'
      case 48239:                   // 'delete' 'child'
      case 48751:                   // 'delete' 'collation'
      case 49775:                   // 'delete' 'comment'
      case 50287:                   // 'delete' 'constraint'
      case 50799:                   // 'delete' 'construction'
      case 52335:                   // 'delete' 'context'
      case 52847:                   // 'delete' 'continue'
      case 53359:                   // 'delete' 'copy'
      case 53871:                   // 'delete' 'copy-namespaces'
      case 54383:                   // 'delete' 'count'
      case 54895:                   // 'delete' 'decimal-format'
      case 55919:                   // 'delete' 'declare'
      case 56431:                   // 'delete' 'default'
      case 56943:                   // 'delete' 'delete'
      case 57455:                   // 'delete' 'descendant'
      case 57967:                   // 'delete' 'descendant-or-self'
      case 58479:                   // 'delete' 'descending'
      case 61039:                   // 'delete' 'div'
      case 61551:                   // 'delete' 'document'
      case 62063:                   // 'delete' 'document-node'
      case 62575:                   // 'delete' 'element'
      case 63087:                   // 'delete' 'else'
      case 63599:                   // 'delete' 'empty'
      case 64111:                   // 'delete' 'empty-sequence'
      case 64623:                   // 'delete' 'encoding'
      case 65135:                   // 'delete' 'end'
      case 66159:                   // 'delete' 'eq'
      case 66671:                   // 'delete' 'every'
      case 67695:                   // 'delete' 'except'
      case 68207:                   // 'delete' 'exit'
      case 68719:                   // 'delete' 'external'
      case 69231:                   // 'delete' 'false'
      case 69743:                   // 'delete' 'first'
      case 70255:                   // 'delete' 'following'
      case 70767:                   // 'delete' 'following-sibling'
      case 71279:                   // 'delete' 'for'
      case 72815:                   // 'delete' 'from'
      case 73327:                   // 'delete' 'ft-option'
      case 75375:                   // 'delete' 'function'
      case 75887:                   // 'delete' 'ge'
      case 76911:                   // 'delete' 'group'
      case 77935:                   // 'delete' 'gt'
      case 78447:                   // 'delete' 'idiv'
      case 78959:                   // 'delete' 'if'
      case 79471:                   // 'delete' 'import'
      case 79983:                   // 'delete' 'in'
      case 80495:                   // 'delete' 'index'
      case 82543:                   // 'delete' 'insert'
      case 83055:                   // 'delete' 'instance'
      case 83567:                   // 'delete' 'integrity'
      case 84079:                   // 'delete' 'intersect'
      case 84591:                   // 'delete' 'into'
      case 85103:                   // 'delete' 'is'
      case 85615:                   // 'delete' 'item'
      case 86127:                   // 'delete' 'json'
      case 86639:                   // 'delete' 'json-item'
      case 87151:                   // 'delete' 'jsoniq'
      case 88687:                   // 'delete' 'last'
      case 89199:                   // 'delete' 'lax'
      case 89711:                   // 'delete' 'le'
      case 90735:                   // 'delete' 'let'
      case 91759:                   // 'delete' 'loop'
      case 92783:                   // 'delete' 'lt'
      case 93807:                   // 'delete' 'mod'
      case 94319:                   // 'delete' 'modify'
      case 94831:                   // 'delete' 'module'
      case 95855:                   // 'delete' 'namespace'
      case 96367:                   // 'delete' 'namespace-node'
      case 96879:                   // 'delete' 'ne'
      case 100975:                  // 'delete' 'null'
      case 101487:                  // 'delete' 'object'
      case 103535:                  // 'delete' 'only'
      case 104047:                  // 'delete' 'option'
      case 104559:                  // 'delete' 'or'
      case 105071:                  // 'delete' 'order'
      case 105583:                  // 'delete' 'ordered'
      case 106095:                  // 'delete' 'ordering'
      case 107631:                  // 'delete' 'parent'
      case 110703:                  // 'delete' 'preceding'
      case 111215:                  // 'delete' 'preceding-sibling'
      case 112751:                  // 'delete' 'processing-instruction'
      case 113775:                  // 'delete' 'rename'
      case 114287:                  // 'delete' 'replace'
      case 114799:                  // 'delete' 'return'
      case 115311:                  // 'delete' 'returning'
      case 115823:                  // 'delete' 'revalidation'
      case 116847:                  // 'delete' 'satisfies'
      case 117359:                  // 'delete' 'schema'
      case 117871:                  // 'delete' 'schema-attribute'
      case 118383:                  // 'delete' 'schema-element'
      case 118895:                  // 'delete' 'score'
      case 119407:                  // 'delete' 'select'
      case 119919:                  // 'delete' 'self'
      case 122479:                  // 'delete' 'sliding'
      case 122991:                  // 'delete' 'some'
      case 123503:                  // 'delete' 'stable'
      case 124015:                  // 'delete' 'start'
      case 125551:                  // 'delete' 'strict'
      case 126575:                  // 'delete' 'structured-item'
      case 127087:                  // 'delete' 'switch'
      case 127599:                  // 'delete' 'text'
      case 129647:                  // 'delete' 'to'
      case 130159:                  // 'delete' 'treat'
      case 130671:                  // 'delete' 'true'
      case 131183:                  // 'delete' 'try'
      case 131695:                  // 'delete' 'tumbling'
      case 132207:                  // 'delete' 'type'
      case 132719:                  // 'delete' 'typeswitch'
      case 133231:                  // 'delete' 'union'
      case 134255:                  // 'delete' 'unordered'
      case 134767:                  // 'delete' 'updating'
      case 136303:                  // 'delete' 'validate'
      case 136815:                  // 'delete' 'value'
      case 137327:                  // 'delete' 'variable'
      case 137839:                  // 'delete' 'version'
      case 139375:                  // 'delete' 'where'
      case 139887:                  // 'delete' 'while'
      case 141423:                  // 'delete' 'with'
      case 143983:                  // 'delete' '{'
      case 145007:                  // 'delete' '{|'
        this.parse_JSONDeleteExpr();
        break;
      case -9:
      case 3233:                    // 'insert' EQName^Token
      case 4257:                    // 'insert' IntegerLiteral
      case 4769:                    // 'insert' DecimalLiteral
      case 5281:                    // 'insert' DoubleLiteral
      case 5793:                    // 'insert' StringLiteral
      case 9889:                    // 'insert' NCName^Token
      case 16033:                   // 'insert' '$'
      case 16545:                   // 'insert' '$$'
      case 17057:                   // 'insert' '%'
      case 18593:                   // 'insert' '(#'
      case 21153:                   // 'insert' '+'
      case 22177:                   // 'insert' '-'
      case 24225:                   // 'insert' '/'
      case 24737:                   // 'insert' '//'
      case 28321:                   // 'insert' '<'
      case 28833:                   // 'insert' '<!--'
      case 30881:                   // 'insert' '<?'
      case 35489:                   // 'insert' '['
      case 36513:                   // 'insert' 'after'
      case 37537:                   // 'insert' 'allowing'
      case 38049:                   // 'insert' 'ancestor'
      case 38561:                   // 'insert' 'ancestor-or-self'
      case 39073:                   // 'insert' 'and'
      case 40097:                   // 'insert' 'append'
      case 40609:                   // 'insert' 'array'
      case 41121:                   // 'insert' 'as'
      case 41633:                   // 'insert' 'ascending'
      case 42145:                   // 'insert' 'at'
      case 42657:                   // 'insert' 'attribute'
      case 43169:                   // 'insert' 'base-uri'
      case 43681:                   // 'insert' 'before'
      case 44193:                   // 'insert' 'boundary-space'
      case 44705:                   // 'insert' 'break'
      case 45729:                   // 'insert' 'case'
      case 46241:                   // 'insert' 'cast'
      case 46753:                   // 'insert' 'castable'
      case 47265:                   // 'insert' 'catch'
      case 48289:                   // 'insert' 'child'
      case 48801:                   // 'insert' 'collation'
      case 49825:                   // 'insert' 'comment'
      case 50337:                   // 'insert' 'constraint'
      case 50849:                   // 'insert' 'construction'
      case 52385:                   // 'insert' 'context'
      case 52897:                   // 'insert' 'continue'
      case 53409:                   // 'insert' 'copy'
      case 53921:                   // 'insert' 'copy-namespaces'
      case 54433:                   // 'insert' 'count'
      case 54945:                   // 'insert' 'decimal-format'
      case 55969:                   // 'insert' 'declare'
      case 56481:                   // 'insert' 'default'
      case 56993:                   // 'insert' 'delete'
      case 57505:                   // 'insert' 'descendant'
      case 58017:                   // 'insert' 'descendant-or-self'
      case 58529:                   // 'insert' 'descending'
      case 61089:                   // 'insert' 'div'
      case 61601:                   // 'insert' 'document'
      case 62113:                   // 'insert' 'document-node'
      case 62625:                   // 'insert' 'element'
      case 63137:                   // 'insert' 'else'
      case 63649:                   // 'insert' 'empty'
      case 64161:                   // 'insert' 'empty-sequence'
      case 64673:                   // 'insert' 'encoding'
      case 65185:                   // 'insert' 'end'
      case 66209:                   // 'insert' 'eq'
      case 66721:                   // 'insert' 'every'
      case 67745:                   // 'insert' 'except'
      case 68257:                   // 'insert' 'exit'
      case 68769:                   // 'insert' 'external'
      case 69281:                   // 'insert' 'false'
      case 69793:                   // 'insert' 'first'
      case 70305:                   // 'insert' 'following'
      case 70817:                   // 'insert' 'following-sibling'
      case 71329:                   // 'insert' 'for'
      case 72865:                   // 'insert' 'from'
      case 73377:                   // 'insert' 'ft-option'
      case 75425:                   // 'insert' 'function'
      case 75937:                   // 'insert' 'ge'
      case 76961:                   // 'insert' 'group'
      case 77985:                   // 'insert' 'gt'
      case 78497:                   // 'insert' 'idiv'
      case 79009:                   // 'insert' 'if'
      case 79521:                   // 'insert' 'import'
      case 80033:                   // 'insert' 'in'
      case 80545:                   // 'insert' 'index'
      case 82593:                   // 'insert' 'insert'
      case 83105:                   // 'insert' 'instance'
      case 83617:                   // 'insert' 'integrity'
      case 84129:                   // 'insert' 'intersect'
      case 84641:                   // 'insert' 'into'
      case 85153:                   // 'insert' 'is'
      case 85665:                   // 'insert' 'item'
      case 86177:                   // 'insert' 'json'
      case 86689:                   // 'insert' 'json-item'
      case 87201:                   // 'insert' 'jsoniq'
      case 88737:                   // 'insert' 'last'
      case 89249:                   // 'insert' 'lax'
      case 89761:                   // 'insert' 'le'
      case 90785:                   // 'insert' 'let'
      case 91809:                   // 'insert' 'loop'
      case 92833:                   // 'insert' 'lt'
      case 93857:                   // 'insert' 'mod'
      case 94369:                   // 'insert' 'modify'
      case 94881:                   // 'insert' 'module'
      case 95905:                   // 'insert' 'namespace'
      case 96417:                   // 'insert' 'namespace-node'
      case 96929:                   // 'insert' 'ne'
      case 100513:                  // 'insert' 'not'
      case 101025:                  // 'insert' 'null'
      case 101537:                  // 'insert' 'object'
      case 103585:                  // 'insert' 'only'
      case 104097:                  // 'insert' 'option'
      case 104609:                  // 'insert' 'or'
      case 105121:                  // 'insert' 'order'
      case 105633:                  // 'insert' 'ordered'
      case 106145:                  // 'insert' 'ordering'
      case 107681:                  // 'insert' 'parent'
      case 110753:                  // 'insert' 'preceding'
      case 111265:                  // 'insert' 'preceding-sibling'
      case 112801:                  // 'insert' 'processing-instruction'
      case 113825:                  // 'insert' 'rename'
      case 114337:                  // 'insert' 'replace'
      case 114849:                  // 'insert' 'return'
      case 115361:                  // 'insert' 'returning'
      case 115873:                  // 'insert' 'revalidation'
      case 116897:                  // 'insert' 'satisfies'
      case 117409:                  // 'insert' 'schema'
      case 117921:                  // 'insert' 'schema-attribute'
      case 118433:                  // 'insert' 'schema-element'
      case 118945:                  // 'insert' 'score'
      case 119457:                  // 'insert' 'select'
      case 119969:                  // 'insert' 'self'
      case 122529:                  // 'insert' 'sliding'
      case 123041:                  // 'insert' 'some'
      case 123553:                  // 'insert' 'stable'
      case 124065:                  // 'insert' 'start'
      case 125601:                  // 'insert' 'strict'
      case 126625:                  // 'insert' 'structured-item'
      case 127137:                  // 'insert' 'switch'
      case 127649:                  // 'insert' 'text'
      case 129697:                  // 'insert' 'to'
      case 130209:                  // 'insert' 'treat'
      case 130721:                  // 'insert' 'true'
      case 131233:                  // 'insert' 'try'
      case 131745:                  // 'insert' 'tumbling'
      case 132257:                  // 'insert' 'type'
      case 132769:                  // 'insert' 'typeswitch'
      case 133281:                  // 'insert' 'union'
      case 134305:                  // 'insert' 'unordered'
      case 134817:                  // 'insert' 'updating'
      case 136353:                  // 'insert' 'validate'
      case 136865:                  // 'insert' 'value'
      case 137377:                  // 'insert' 'variable'
      case 137889:                  // 'insert' 'version'
      case 139425:                  // 'insert' 'where'
      case 139937:                  // 'insert' 'while'
      case 141473:                  // 'insert' 'with'
      case 144033:                  // 'insert' '{'
      case 145057:                  // 'insert' '{|'
        this.parse_JSONInsertExpr();
        break;
      case -10:
      case 3294:                    // 'rename' EQName^Token
      case 4318:                    // 'rename' IntegerLiteral
      case 4830:                    // 'rename' DecimalLiteral
      case 5342:                    // 'rename' DoubleLiteral
      case 5854:                    // 'rename' StringLiteral
      case 16094:                   // 'rename' '$'
      case 16606:                   // 'rename' '$$'
      case 17118:                   // 'rename' '%'
      case 28382:                   // 'rename' '<'
      case 28894:                   // 'rename' '<!--'
      case 30942:                   // 'rename' '<?'
      case 35550:                   // 'rename' '['
      case 36574:                   // 'rename' 'after'
      case 37598:                   // 'rename' 'allowing'
      case 38110:                   // 'rename' 'ancestor'
      case 38622:                   // 'rename' 'ancestor-or-self'
      case 39134:                   // 'rename' 'and'
      case 40158:                   // 'rename' 'append'
      case 40670:                   // 'rename' 'array'
      case 41182:                   // 'rename' 'as'
      case 41694:                   // 'rename' 'ascending'
      case 42206:                   // 'rename' 'at'
      case 42718:                   // 'rename' 'attribute'
      case 43230:                   // 'rename' 'base-uri'
      case 43742:                   // 'rename' 'before'
      case 44254:                   // 'rename' 'boundary-space'
      case 44766:                   // 'rename' 'break'
      case 45790:                   // 'rename' 'case'
      case 46302:                   // 'rename' 'cast'
      case 46814:                   // 'rename' 'castable'
      case 47326:                   // 'rename' 'catch'
      case 48350:                   // 'rename' 'child'
      case 48862:                   // 'rename' 'collation'
      case 49886:                   // 'rename' 'comment'
      case 50398:                   // 'rename' 'constraint'
      case 50910:                   // 'rename' 'construction'
      case 52446:                   // 'rename' 'context'
      case 52958:                   // 'rename' 'continue'
      case 53470:                   // 'rename' 'copy'
      case 53982:                   // 'rename' 'copy-namespaces'
      case 54494:                   // 'rename' 'count'
      case 55006:                   // 'rename' 'decimal-format'
      case 56030:                   // 'rename' 'declare'
      case 56542:                   // 'rename' 'default'
      case 57054:                   // 'rename' 'delete'
      case 57566:                   // 'rename' 'descendant'
      case 58078:                   // 'rename' 'descendant-or-self'
      case 58590:                   // 'rename' 'descending'
      case 61150:                   // 'rename' 'div'
      case 61662:                   // 'rename' 'document'
      case 62174:                   // 'rename' 'document-node'
      case 62686:                   // 'rename' 'element'
      case 63198:                   // 'rename' 'else'
      case 63710:                   // 'rename' 'empty'
      case 64222:                   // 'rename' 'empty-sequence'
      case 64734:                   // 'rename' 'encoding'
      case 65246:                   // 'rename' 'end'
      case 66270:                   // 'rename' 'eq'
      case 66782:                   // 'rename' 'every'
      case 67806:                   // 'rename' 'except'
      case 68318:                   // 'rename' 'exit'
      case 68830:                   // 'rename' 'external'
      case 69342:                   // 'rename' 'false'
      case 69854:                   // 'rename' 'first'
      case 70366:                   // 'rename' 'following'
      case 70878:                   // 'rename' 'following-sibling'
      case 71390:                   // 'rename' 'for'
      case 72926:                   // 'rename' 'from'
      case 73438:                   // 'rename' 'ft-option'
      case 75486:                   // 'rename' 'function'
      case 75998:                   // 'rename' 'ge'
      case 77022:                   // 'rename' 'group'
      case 78046:                   // 'rename' 'gt'
      case 78558:                   // 'rename' 'idiv'
      case 79070:                   // 'rename' 'if'
      case 79582:                   // 'rename' 'import'
      case 80094:                   // 'rename' 'in'
      case 80606:                   // 'rename' 'index'
      case 82654:                   // 'rename' 'insert'
      case 83166:                   // 'rename' 'instance'
      case 83678:                   // 'rename' 'integrity'
      case 84190:                   // 'rename' 'intersect'
      case 84702:                   // 'rename' 'into'
      case 85214:                   // 'rename' 'is'
      case 85726:                   // 'rename' 'item'
      case 86238:                   // 'rename' 'json'
      case 86750:                   // 'rename' 'json-item'
      case 87262:                   // 'rename' 'jsoniq'
      case 88798:                   // 'rename' 'last'
      case 89310:                   // 'rename' 'lax'
      case 89822:                   // 'rename' 'le'
      case 90846:                   // 'rename' 'let'
      case 91870:                   // 'rename' 'loop'
      case 92894:                   // 'rename' 'lt'
      case 93918:                   // 'rename' 'mod'
      case 94430:                   // 'rename' 'modify'
      case 94942:                   // 'rename' 'module'
      case 95966:                   // 'rename' 'namespace'
      case 96478:                   // 'rename' 'namespace-node'
      case 96990:                   // 'rename' 'ne'
      case 100062:                  // 'rename' 'nodes'
      case 101086:                  // 'rename' 'null'
      case 101598:                  // 'rename' 'object'
      case 103646:                  // 'rename' 'only'
      case 104158:                  // 'rename' 'option'
      case 104670:                  // 'rename' 'or'
      case 105182:                  // 'rename' 'order'
      case 105694:                  // 'rename' 'ordered'
      case 106206:                  // 'rename' 'ordering'
      case 107742:                  // 'rename' 'parent'
      case 110814:                  // 'rename' 'preceding'
      case 111326:                  // 'rename' 'preceding-sibling'
      case 112862:                  // 'rename' 'processing-instruction'
      case 113886:                  // 'rename' 'rename'
      case 114398:                  // 'rename' 'replace'
      case 114910:                  // 'rename' 'return'
      case 115422:                  // 'rename' 'returning'
      case 115934:                  // 'rename' 'revalidation'
      case 116958:                  // 'rename' 'satisfies'
      case 117470:                  // 'rename' 'schema'
      case 117982:                  // 'rename' 'schema-attribute'
      case 118494:                  // 'rename' 'schema-element'
      case 119006:                  // 'rename' 'score'
      case 119518:                  // 'rename' 'select'
      case 120030:                  // 'rename' 'self'
      case 122590:                  // 'rename' 'sliding'
      case 123102:                  // 'rename' 'some'
      case 123614:                  // 'rename' 'stable'
      case 124126:                  // 'rename' 'start'
      case 125662:                  // 'rename' 'strict'
      case 126686:                  // 'rename' 'structured-item'
      case 127198:                  // 'rename' 'switch'
      case 127710:                  // 'rename' 'text'
      case 129758:                  // 'rename' 'to'
      case 130270:                  // 'rename' 'treat'
      case 130782:                  // 'rename' 'true'
      case 131294:                  // 'rename' 'try'
      case 131806:                  // 'rename' 'tumbling'
      case 132318:                  // 'rename' 'type'
      case 132830:                  // 'rename' 'typeswitch'
      case 133342:                  // 'rename' 'union'
      case 134366:                  // 'rename' 'unordered'
      case 134878:                  // 'rename' 'updating'
      case 136414:                  // 'rename' 'validate'
      case 136926:                  // 'rename' 'value'
      case 137438:                  // 'rename' 'variable'
      case 137950:                  // 'rename' 'version'
      case 139486:                  // 'rename' 'where'
      case 139998:                  // 'rename' 'while'
      case 141534:                  // 'rename' 'with'
      case 144094:                  // 'rename' '{'
      case 145118:                  // 'rename' '{|'
        this.parse_JSONRenameExpr();
        break;
      case -11:
        this.parse_JSONReplaceExpr();
        break;
      case -12:
      case 3150:                    // 'append' EQName^Token
      case 4174:                    // 'append' IntegerLiteral
      case 4686:                    // 'append' DecimalLiteral
      case 5198:                    // 'append' DoubleLiteral
      case 5710:                    // 'append' StringLiteral
      case 15950:                   // 'append' '$'
      case 16462:                   // 'append' '$$'
      case 16974:                   // 'append' '%'
      case 18510:                   // 'append' '(#'
      case 21070:                   // 'append' '+'
      case 22094:                   // 'append' '-'
      case 24142:                   // 'append' '/'
      case 24654:                   // 'append' '//'
      case 28238:                   // 'append' '<'
      case 28750:                   // 'append' '<!--'
      case 30798:                   // 'append' '<?'
      case 35406:                   // 'append' '['
      case 36430:                   // 'append' 'after'
      case 37454:                   // 'append' 'allowing'
      case 37966:                   // 'append' 'ancestor'
      case 38478:                   // 'append' 'ancestor-or-self'
      case 38990:                   // 'append' 'and'
      case 40014:                   // 'append' 'append'
      case 40526:                   // 'append' 'array'
      case 41038:                   // 'append' 'as'
      case 41550:                   // 'append' 'ascending'
      case 42062:                   // 'append' 'at'
      case 42574:                   // 'append' 'attribute'
      case 43086:                   // 'append' 'base-uri'
      case 43598:                   // 'append' 'before'
      case 44110:                   // 'append' 'boundary-space'
      case 44622:                   // 'append' 'break'
      case 45646:                   // 'append' 'case'
      case 46158:                   // 'append' 'cast'
      case 46670:                   // 'append' 'castable'
      case 47182:                   // 'append' 'catch'
      case 48206:                   // 'append' 'child'
      case 48718:                   // 'append' 'collation'
      case 49742:                   // 'append' 'comment'
      case 50254:                   // 'append' 'constraint'
      case 50766:                   // 'append' 'construction'
      case 52302:                   // 'append' 'context'
      case 52814:                   // 'append' 'continue'
      case 53326:                   // 'append' 'copy'
      case 53838:                   // 'append' 'copy-namespaces'
      case 54350:                   // 'append' 'count'
      case 54862:                   // 'append' 'decimal-format'
      case 55886:                   // 'append' 'declare'
      case 56398:                   // 'append' 'default'
      case 56910:                   // 'append' 'delete'
      case 57422:                   // 'append' 'descendant'
      case 57934:                   // 'append' 'descendant-or-self'
      case 58446:                   // 'append' 'descending'
      case 61006:                   // 'append' 'div'
      case 61518:                   // 'append' 'document'
      case 62030:                   // 'append' 'document-node'
      case 62542:                   // 'append' 'element'
      case 63054:                   // 'append' 'else'
      case 63566:                   // 'append' 'empty'
      case 64078:                   // 'append' 'empty-sequence'
      case 64590:                   // 'append' 'encoding'
      case 65102:                   // 'append' 'end'
      case 66126:                   // 'append' 'eq'
      case 66638:                   // 'append' 'every'
      case 67662:                   // 'append' 'except'
      case 68174:                   // 'append' 'exit'
      case 68686:                   // 'append' 'external'
      case 69198:                   // 'append' 'false'
      case 69710:                   // 'append' 'first'
      case 70222:                   // 'append' 'following'
      case 70734:                   // 'append' 'following-sibling'
      case 71246:                   // 'append' 'for'
      case 72782:                   // 'append' 'from'
      case 73294:                   // 'append' 'ft-option'
      case 75342:                   // 'append' 'function'
      case 75854:                   // 'append' 'ge'
      case 76878:                   // 'append' 'group'
      case 77902:                   // 'append' 'gt'
      case 78414:                   // 'append' 'idiv'
      case 78926:                   // 'append' 'if'
      case 79438:                   // 'append' 'import'
      case 79950:                   // 'append' 'in'
      case 80462:                   // 'append' 'index'
      case 82510:                   // 'append' 'insert'
      case 83022:                   // 'append' 'instance'
      case 83534:                   // 'append' 'integrity'
      case 84046:                   // 'append' 'intersect'
      case 84558:                   // 'append' 'into'
      case 85070:                   // 'append' 'is'
      case 85582:                   // 'append' 'item'
      case 86094:                   // 'append' 'json'
      case 86606:                   // 'append' 'json-item'
      case 87118:                   // 'append' 'jsoniq'
      case 88654:                   // 'append' 'last'
      case 89166:                   // 'append' 'lax'
      case 89678:                   // 'append' 'le'
      case 90702:                   // 'append' 'let'
      case 91726:                   // 'append' 'loop'
      case 92750:                   // 'append' 'lt'
      case 93774:                   // 'append' 'mod'
      case 94286:                   // 'append' 'modify'
      case 94798:                   // 'append' 'module'
      case 95822:                   // 'append' 'namespace'
      case 96334:                   // 'append' 'namespace-node'
      case 96846:                   // 'append' 'ne'
      case 99406:                   // 'append' 'node'
      case 99918:                   // 'append' 'nodes'
      case 100430:                  // 'append' 'not'
      case 100942:                  // 'append' 'null'
      case 101454:                  // 'append' 'object'
      case 103502:                  // 'append' 'only'
      case 104014:                  // 'append' 'option'
      case 104526:                  // 'append' 'or'
      case 105038:                  // 'append' 'order'
      case 105550:                  // 'append' 'ordered'
      case 106062:                  // 'append' 'ordering'
      case 107598:                  // 'append' 'parent'
      case 110670:                  // 'append' 'preceding'
      case 111182:                  // 'append' 'preceding-sibling'
      case 112718:                  // 'append' 'processing-instruction'
      case 113742:                  // 'append' 'rename'
      case 114254:                  // 'append' 'replace'
      case 114766:                  // 'append' 'return'
      case 115278:                  // 'append' 'returning'
      case 115790:                  // 'append' 'revalidation'
      case 116814:                  // 'append' 'satisfies'
      case 117326:                  // 'append' 'schema'
      case 117838:                  // 'append' 'schema-attribute'
      case 118350:                  // 'append' 'schema-element'
      case 118862:                  // 'append' 'score'
      case 119374:                  // 'append' 'select'
      case 119886:                  // 'append' 'self'
      case 122446:                  // 'append' 'sliding'
      case 122958:                  // 'append' 'some'
      case 123470:                  // 'append' 'stable'
      case 123982:                  // 'append' 'start'
      case 125518:                  // 'append' 'strict'
      case 126542:                  // 'append' 'structured-item'
      case 127054:                  // 'append' 'switch'
      case 127566:                  // 'append' 'text'
      case 129614:                  // 'append' 'to'
      case 130126:                  // 'append' 'treat'
      case 130638:                  // 'append' 'true'
      case 131150:                  // 'append' 'try'
      case 131662:                  // 'append' 'tumbling'
      case 132174:                  // 'append' 'type'
      case 132686:                  // 'append' 'typeswitch'
      case 133198:                  // 'append' 'union'
      case 134222:                  // 'append' 'unordered'
      case 134734:                  // 'append' 'updating'
      case 136270:                  // 'append' 'validate'
      case 136782:                  // 'append' 'value'
      case 137294:                  // 'append' 'variable'
      case 137806:                  // 'append' 'version'
      case 139342:                  // 'append' 'where'
      case 139854:                  // 'append' 'while'
      case 141390:                  // 'append' 'with'
      case 143950:                  // 'append' '{'
      case 144974:                  // 'append' '{|'
        this.parse_JSONAppendExpr();
        break;
      default:
        this.parse_OrExpr();
      }
      this.eventHandler.endNonterminal("ExprSimple", this.e0);
    }

    private try_ExprSimple()
    {
      switch (this.l1)
      {
      case 78:                      // 'append'
        this.lookahead2W(268);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '#' | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' |
                                    // '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
        break;
      case 161:                     // 'insert'
        this.lookahead2W(275);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // NCName^Token | S^WS | '#' | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
        break;
      case 223:                     // 'replace'
        this.lookahead2W(170);      // S^WS | '#' | '(' | '(:' | 'node' | 'value'
        break;
      case 111:                     // 'delete'
      case 222:                     // 'rename'
        this.lookahead2W(260);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '#' | '$' | '$$' | '%' | '(' | '(:' | '<' | '<!--' | '<?' | '[' |
                                    // 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'jsoniq' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'null' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | '{' | '{|'
        break;
      case 104:                     // 'copy'
      case 130:                     // 'every'
      case 240:                     // 'some'
        this.lookahead2W(143);      // S^WS | '#' | '$' | '(' | '(:'
        break;
      default:
        this.lk = this.l1;
      }
      if (this.lk == 17998          // 'append' '('
       || this.lk == 18031          // 'delete' '('
       || this.lk == 18081          // 'insert' '('
       || this.lk == 18142          // 'rename' '('
       || this.lk == 99439          // 'delete' 'node'
       || this.lk == 99489          // 'insert' 'node'
       || this.lk == 99550          // 'rename' 'node'
       || this.lk == 99951          // 'delete' 'nodes'
       || this.lk == 100001         // 'insert' 'nodes'
       || this.lk == 136927)        // 'replace' 'value'
      {
        this.lk = this.memoized(10, this.e0);
        if (this.lk == 0)
        {
          var b0A = this.b0; var e0A = this.e0; var l1A = this.l1;
          var b1A = this.b1; var e1A = this.e1; var l2A = this.l2;
          var b2A = this.b2; var e2A = this.e2;
          try
          {
            this.try_OrExpr();
            this.memoize(10, e0A, -2);
            this.lk = -13;
          }
          catch (p2A)
          {
            try
            {
              this.b0 = b0A; this.e0 = e0A; this.l1 = l1A; if (this.l1 == 0) {this.end = e0A;} else {
              this.b1 = b1A; this.e1 = e1A; this.l2 = l2A; if (this.l2 == 0) {this.end = e1A;} else {
              this.b2 = b2A; this.e2 = e2A; this.end = e2A; }}
              this.try_InsertExpr();
              this.memoize(10, e0A, -3);
              this.lk = -13;
            }
            catch (p3A)
            {
              try
              {
                this.b0 = b0A; this.e0 = e0A; this.l1 = l1A; if (this.l1 == 0) {this.end = e0A;} else {
                this.b1 = b1A; this.e1 = e1A; this.l2 = l2A; if (this.l2 == 0) {this.end = e1A;} else {
                this.b2 = b2A; this.e2 = e2A; this.end = e2A; }}
                this.try_DeleteExpr();
                this.memoize(10, e0A, -4);
                this.lk = -13;
              }
              catch (p4A)
              {
                try
                {
                  this.b0 = b0A; this.e0 = e0A; this.l1 = l1A; if (this.l1 == 0) {this.end = e0A;} else {
                  this.b1 = b1A; this.e1 = e1A; this.l2 = l2A; if (this.l2 == 0) {this.end = e1A;} else {
                  this.b2 = b2A; this.e2 = e2A; this.end = e2A; }}
                  this.try_RenameExpr();
                  this.memoize(10, e0A, -5);
                  this.lk = -13;
                }
                catch (p5A)
                {
                  try
                  {
                    this.b0 = b0A; this.e0 = e0A; this.l1 = l1A; if (this.l1 == 0) {this.end = e0A;} else {
                    this.b1 = b1A; this.e1 = e1A; this.l2 = l2A; if (this.l2 == 0) {this.end = e1A;} else {
                    this.b2 = b2A; this.e2 = e2A; this.end = e2A; }}
                    this.try_ReplaceExpr();
                    this.memoize(10, e0A, -6);
                    this.lk = -13;
                  }
                  catch (p6A)
                  {
                    try
                    {
                      this.b0 = b0A; this.e0 = e0A; this.l1 = l1A; if (this.l1 == 0) {this.end = e0A;} else {
                      this.b1 = b1A; this.e1 = e1A; this.l2 = l2A; if (this.l2 == 0) {this.end = e1A;} else {
                      this.b2 = b2A; this.e2 = e2A; this.end = e2A; }}
                      this.try_JSONDeleteExpr();
                      this.memoize(10, e0A, -8);
                      this.lk = -13;
                    }
                    catch (p8A)
                    {
                      try
                      {
                        this.b0 = b0A; this.e0 = e0A; this.l1 = l1A; if (this.l1 == 0) {this.end = e0A;} else {
                        this.b1 = b1A; this.e1 = e1A; this.l2 = l2A; if (this.l2 == 0) {this.end = e1A;} else {
                        this.b2 = b2A; this.e2 = e2A; this.end = e2A; }}
                        this.try_JSONInsertExpr();
                        this.memoize(10, e0A, -9);
                        this.lk = -13;
                      }
                      catch (p9A)
                      {
                        try
                        {
                          this.b0 = b0A; this.e0 = e0A; this.l1 = l1A; if (this.l1 == 0) {this.end = e0A;} else {
                          this.b1 = b1A; this.e1 = e1A; this.l2 = l2A; if (this.l2 == 0) {this.end = e1A;} else {
                          this.b2 = b2A; this.e2 = e2A; this.end = e2A; }}
                          this.try_JSONRenameExpr();
                          this.memoize(10, e0A, -10);
                          this.lk = -13;
                        }
                        catch (p10A)
                        {
                          try
                          {
                            this.b0 = b0A; this.e0 = e0A; this.l1 = l1A; if (this.l1 == 0) {this.end = e0A;} else {
                            this.b1 = b1A; this.e1 = e1A; this.l2 = l2A; if (this.l2 == 0) {this.end = e1A;} else {
                            this.b2 = b2A; this.e2 = e2A; this.end = e2A; }}
                            this.try_JSONReplaceExpr();
                            this.memoize(10, e0A, -11);
                            this.lk = -13;
                          }
                          catch (p11A)
                          {
                            this.lk = -12;
                            this.b0 = b0A; this.e0 = e0A; this.l1 = l1A; if (this.l1 == 0) {this.end = e0A;} else {
                            this.b1 = b1A; this.e1 = e1A; this.l2 = l2A; if (this.l2 == 0) {this.end = e1A;} else {
                            this.b2 = b2A; this.e2 = e2A; this.end = e2A; }}
                            this.memoize(10, e0A, -12);
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      switch (this.lk)
      {
      case 16002:                   // 'every' '$'
      case 16112:                   // 'some' '$'
        this.try_QuantifiedExpr();
        break;
      case -3:
        this.try_InsertExpr();
        break;
      case -4:
        this.try_DeleteExpr();
        break;
      case -5:
        this.try_RenameExpr();
        break;
      case -6:
      case 99551:                   // 'replace' 'node'
        this.try_ReplaceExpr();
        break;
      case 15976:                   // 'copy' '$'
        this.try_TransformExpr();
        break;
      case -8:
      case 3183:                    // 'delete' EQName^Token
      case 4207:                    // 'delete' IntegerLiteral
      case 4719:                    // 'delete' DecimalLiteral
      case 5231:                    // 'delete' DoubleLiteral
      case 5743:                    // 'delete' StringLiteral
      case 15983:                   // 'delete' '$'
      case 16495:                   // 'delete' '$$'
      case 17007:                   // 'delete' '%'
      case 28271:                   // 'delete' '<'
      case 28783:                   // 'delete' '<!--'
      case 30831:                   // 'delete' '<?'
      case 35439:                   // 'delete' '['
      case 36463:                   // 'delete' 'after'
      case 37487:                   // 'delete' 'allowing'
      case 37999:                   // 'delete' 'ancestor'
      case 38511:                   // 'delete' 'ancestor-or-self'
      case 39023:                   // 'delete' 'and'
      case 40047:                   // 'delete' 'append'
      case 40559:                   // 'delete' 'array'
      case 41071:                   // 'delete' 'as'
      case 41583:                   // 'delete' 'ascending'
      case 42095:                   // 'delete' 'at'
      case 42607:                   // 'delete' 'attribute'
      case 43119:                   // 'delete' 'base-uri'
      case 43631:                   // 'delete' 'before'
      case 44143:                   // 'delete' 'boundary-space'
      case 44655:                   // 'delete' 'break'
      case 45679:                   // 'delete' 'case'
      case 46191:                   // 'delete' 'cast'
      case 46703:                   // 'delete' 'castable'
      case 47215:                   // 'delete' 'catch'
      case 48239:                   // 'delete' 'child'
      case 48751:                   // 'delete' 'collation'
      case 49775:                   // 'delete' 'comment'
      case 50287:                   // 'delete' 'constraint'
      case 50799:                   // 'delete' 'construction'
      case 52335:                   // 'delete' 'context'
      case 52847:                   // 'delete' 'continue'
      case 53359:                   // 'delete' 'copy'
      case 53871:                   // 'delete' 'copy-namespaces'
      case 54383:                   // 'delete' 'count'
      case 54895:                   // 'delete' 'decimal-format'
      case 55919:                   // 'delete' 'declare'
      case 56431:                   // 'delete' 'default'
      case 56943:                   // 'delete' 'delete'
      case 57455:                   // 'delete' 'descendant'
      case 57967:                   // 'delete' 'descendant-or-self'
      case 58479:                   // 'delete' 'descending'
      case 61039:                   // 'delete' 'div'
      case 61551:                   // 'delete' 'document'
      case 62063:                   // 'delete' 'document-node'
      case 62575:                   // 'delete' 'element'
      case 63087:                   // 'delete' 'else'
      case 63599:                   // 'delete' 'empty'
      case 64111:                   // 'delete' 'empty-sequence'
      case 64623:                   // 'delete' 'encoding'
      case 65135:                   // 'delete' 'end'
      case 66159:                   // 'delete' 'eq'
      case 66671:                   // 'delete' 'every'
      case 67695:                   // 'delete' 'except'
      case 68207:                   // 'delete' 'exit'
      case 68719:                   // 'delete' 'external'
      case 69231:                   // 'delete' 'false'
      case 69743:                   // 'delete' 'first'
      case 70255:                   // 'delete' 'following'
      case 70767:                   // 'delete' 'following-sibling'
      case 71279:                   // 'delete' 'for'
      case 72815:                   // 'delete' 'from'
      case 73327:                   // 'delete' 'ft-option'
      case 75375:                   // 'delete' 'function'
      case 75887:                   // 'delete' 'ge'
      case 76911:                   // 'delete' 'group'
      case 77935:                   // 'delete' 'gt'
      case 78447:                   // 'delete' 'idiv'
      case 78959:                   // 'delete' 'if'
      case 79471:                   // 'delete' 'import'
      case 79983:                   // 'delete' 'in'
      case 80495:                   // 'delete' 'index'
      case 82543:                   // 'delete' 'insert'
      case 83055:                   // 'delete' 'instance'
      case 83567:                   // 'delete' 'integrity'
      case 84079:                   // 'delete' 'intersect'
      case 84591:                   // 'delete' 'into'
      case 85103:                   // 'delete' 'is'
      case 85615:                   // 'delete' 'item'
      case 86127:                   // 'delete' 'json'
      case 86639:                   // 'delete' 'json-item'
      case 87151:                   // 'delete' 'jsoniq'
      case 88687:                   // 'delete' 'last'
      case 89199:                   // 'delete' 'lax'
      case 89711:                   // 'delete' 'le'
      case 90735:                   // 'delete' 'let'
      case 91759:                   // 'delete' 'loop'
      case 92783:                   // 'delete' 'lt'
      case 93807:                   // 'delete' 'mod'
      case 94319:                   // 'delete' 'modify'
      case 94831:                   // 'delete' 'module'
      case 95855:                   // 'delete' 'namespace'
      case 96367:                   // 'delete' 'namespace-node'
      case 96879:                   // 'delete' 'ne'
      case 100975:                  // 'delete' 'null'
      case 101487:                  // 'delete' 'object'
      case 103535:                  // 'delete' 'only'
      case 104047:                  // 'delete' 'option'
      case 104559:                  // 'delete' 'or'
      case 105071:                  // 'delete' 'order'
      case 105583:                  // 'delete' 'ordered'
      case 106095:                  // 'delete' 'ordering'
      case 107631:                  // 'delete' 'parent'
      case 110703:                  // 'delete' 'preceding'
      case 111215:                  // 'delete' 'preceding-sibling'
      case 112751:                  // 'delete' 'processing-instruction'
      case 113775:                  // 'delete' 'rename'
      case 114287:                  // 'delete' 'replace'
      case 114799:                  // 'delete' 'return'
      case 115311:                  // 'delete' 'returning'
      case 115823:                  // 'delete' 'revalidation'
      case 116847:                  // 'delete' 'satisfies'
      case 117359:                  // 'delete' 'schema'
      case 117871:                  // 'delete' 'schema-attribute'
      case 118383:                  // 'delete' 'schema-element'
      case 118895:                  // 'delete' 'score'
      case 119407:                  // 'delete' 'select'
      case 119919:                  // 'delete' 'self'
      case 122479:                  // 'delete' 'sliding'
      case 122991:                  // 'delete' 'some'
      case 123503:                  // 'delete' 'stable'
      case 124015:                  // 'delete' 'start'
      case 125551:                  // 'delete' 'strict'
      case 126575:                  // 'delete' 'structured-item'
      case 127087:                  // 'delete' 'switch'
      case 127599:                  // 'delete' 'text'
      case 129647:                  // 'delete' 'to'
      case 130159:                  // 'delete' 'treat'
      case 130671:                  // 'delete' 'true'
      case 131183:                  // 'delete' 'try'
      case 131695:                  // 'delete' 'tumbling'
      case 132207:                  // 'delete' 'type'
      case 132719:                  // 'delete' 'typeswitch'
      case 133231:                  // 'delete' 'union'
      case 134255:                  // 'delete' 'unordered'
      case 134767:                  // 'delete' 'updating'
      case 136303:                  // 'delete' 'validate'
      case 136815:                  // 'delete' 'value'
      case 137327:                  // 'delete' 'variable'
      case 137839:                  // 'delete' 'version'
      case 139375:                  // 'delete' 'where'
      case 139887:                  // 'delete' 'while'
      case 141423:                  // 'delete' 'with'
      case 143983:                  // 'delete' '{'
      case 145007:                  // 'delete' '{|'
        this.try_JSONDeleteExpr();
        break;
      case -9:
      case 3233:                    // 'insert' EQName^Token
      case 4257:                    // 'insert' IntegerLiteral
      case 4769:                    // 'insert' DecimalLiteral
      case 5281:                    // 'insert' DoubleLiteral
      case 5793:                    // 'insert' StringLiteral
      case 9889:                    // 'insert' NCName^Token
      case 16033:                   // 'insert' '$'
      case 16545:                   // 'insert' '$$'
      case 17057:                   // 'insert' '%'
      case 18593:                   // 'insert' '(#'
      case 21153:                   // 'insert' '+'
      case 22177:                   // 'insert' '-'
      case 24225:                   // 'insert' '/'
      case 24737:                   // 'insert' '//'
      case 28321:                   // 'insert' '<'
      case 28833:                   // 'insert' '<!--'
      case 30881:                   // 'insert' '<?'
      case 35489:                   // 'insert' '['
      case 36513:                   // 'insert' 'after'
      case 37537:                   // 'insert' 'allowing'
      case 38049:                   // 'insert' 'ancestor'
      case 38561:                   // 'insert' 'ancestor-or-self'
      case 39073:                   // 'insert' 'and'
      case 40097:                   // 'insert' 'append'
      case 40609:                   // 'insert' 'array'
      case 41121:                   // 'insert' 'as'
      case 41633:                   // 'insert' 'ascending'
      case 42145:                   // 'insert' 'at'
      case 42657:                   // 'insert' 'attribute'
      case 43169:                   // 'insert' 'base-uri'
      case 43681:                   // 'insert' 'before'
      case 44193:                   // 'insert' 'boundary-space'
      case 44705:                   // 'insert' 'break'
      case 45729:                   // 'insert' 'case'
      case 46241:                   // 'insert' 'cast'
      case 46753:                   // 'insert' 'castable'
      case 47265:                   // 'insert' 'catch'
      case 48289:                   // 'insert' 'child'
      case 48801:                   // 'insert' 'collation'
      case 49825:                   // 'insert' 'comment'
      case 50337:                   // 'insert' 'constraint'
      case 50849:                   // 'insert' 'construction'
      case 52385:                   // 'insert' 'context'
      case 52897:                   // 'insert' 'continue'
      case 53409:                   // 'insert' 'copy'
      case 53921:                   // 'insert' 'copy-namespaces'
      case 54433:                   // 'insert' 'count'
      case 54945:                   // 'insert' 'decimal-format'
      case 55969:                   // 'insert' 'declare'
      case 56481:                   // 'insert' 'default'
      case 56993:                   // 'insert' 'delete'
      case 57505:                   // 'insert' 'descendant'
      case 58017:                   // 'insert' 'descendant-or-self'
      case 58529:                   // 'insert' 'descending'
      case 61089:                   // 'insert' 'div'
      case 61601:                   // 'insert' 'document'
      case 62113:                   // 'insert' 'document-node'
      case 62625:                   // 'insert' 'element'
      case 63137:                   // 'insert' 'else'
      case 63649:                   // 'insert' 'empty'
      case 64161:                   // 'insert' 'empty-sequence'
      case 64673:                   // 'insert' 'encoding'
      case 65185:                   // 'insert' 'end'
      case 66209:                   // 'insert' 'eq'
      case 66721:                   // 'insert' 'every'
      case 67745:                   // 'insert' 'except'
      case 68257:                   // 'insert' 'exit'
      case 68769:                   // 'insert' 'external'
      case 69281:                   // 'insert' 'false'
      case 69793:                   // 'insert' 'first'
      case 70305:                   // 'insert' 'following'
      case 70817:                   // 'insert' 'following-sibling'
      case 71329:                   // 'insert' 'for'
      case 72865:                   // 'insert' 'from'
      case 73377:                   // 'insert' 'ft-option'
      case 75425:                   // 'insert' 'function'
      case 75937:                   // 'insert' 'ge'
      case 76961:                   // 'insert' 'group'
      case 77985:                   // 'insert' 'gt'
      case 78497:                   // 'insert' 'idiv'
      case 79009:                   // 'insert' 'if'
      case 79521:                   // 'insert' 'import'
      case 80033:                   // 'insert' 'in'
      case 80545:                   // 'insert' 'index'
      case 82593:                   // 'insert' 'insert'
      case 83105:                   // 'insert' 'instance'
      case 83617:                   // 'insert' 'integrity'
      case 84129:                   // 'insert' 'intersect'
      case 84641:                   // 'insert' 'into'
      case 85153:                   // 'insert' 'is'
      case 85665:                   // 'insert' 'item'
      case 86177:                   // 'insert' 'json'
      case 86689:                   // 'insert' 'json-item'
      case 87201:                   // 'insert' 'jsoniq'
      case 88737:                   // 'insert' 'last'
      case 89249:                   // 'insert' 'lax'
      case 89761:                   // 'insert' 'le'
      case 90785:                   // 'insert' 'let'
      case 91809:                   // 'insert' 'loop'
      case 92833:                   // 'insert' 'lt'
      case 93857:                   // 'insert' 'mod'
      case 94369:                   // 'insert' 'modify'
      case 94881:                   // 'insert' 'module'
      case 95905:                   // 'insert' 'namespace'
      case 96417:                   // 'insert' 'namespace-node'
      case 96929:                   // 'insert' 'ne'
      case 100513:                  // 'insert' 'not'
      case 101025:                  // 'insert' 'null'
      case 101537:                  // 'insert' 'object'
      case 103585:                  // 'insert' 'only'
      case 104097:                  // 'insert' 'option'
      case 104609:                  // 'insert' 'or'
      case 105121:                  // 'insert' 'order'
      case 105633:                  // 'insert' 'ordered'
      case 106145:                  // 'insert' 'ordering'
      case 107681:                  // 'insert' 'parent'
      case 110753:                  // 'insert' 'preceding'
      case 111265:                  // 'insert' 'preceding-sibling'
      case 112801:                  // 'insert' 'processing-instruction'
      case 113825:                  // 'insert' 'rename'
      case 114337:                  // 'insert' 'replace'
      case 114849:                  // 'insert' 'return'
      case 115361:                  // 'insert' 'returning'
      case 115873:                  // 'insert' 'revalidation'
      case 116897:                  // 'insert' 'satisfies'
      case 117409:                  // 'insert' 'schema'
      case 117921:                  // 'insert' 'schema-attribute'
      case 118433:                  // 'insert' 'schema-element'
      case 118945:                  // 'insert' 'score'
      case 119457:                  // 'insert' 'select'
      case 119969:                  // 'insert' 'self'
      case 122529:                  // 'insert' 'sliding'
      case 123041:                  // 'insert' 'some'
      case 123553:                  // 'insert' 'stable'
      case 124065:                  // 'insert' 'start'
      case 125601:                  // 'insert' 'strict'
      case 126625:                  // 'insert' 'structured-item'
      case 127137:                  // 'insert' 'switch'
      case 127649:                  // 'insert' 'text'
      case 129697:                  // 'insert' 'to'
      case 130209:                  // 'insert' 'treat'
      case 130721:                  // 'insert' 'true'
      case 131233:                  // 'insert' 'try'
      case 131745:                  // 'insert' 'tumbling'
      case 132257:                  // 'insert' 'type'
      case 132769:                  // 'insert' 'typeswitch'
      case 133281:                  // 'insert' 'union'
      case 134305:                  // 'insert' 'unordered'
      case 134817:                  // 'insert' 'updating'
      case 136353:                  // 'insert' 'validate'
      case 136865:                  // 'insert' 'value'
      case 137377:                  // 'insert' 'variable'
      case 137889:                  // 'insert' 'version'
      case 139425:                  // 'insert' 'where'
      case 139937:                  // 'insert' 'while'
      case 141473:                  // 'insert' 'with'
      case 144033:                  // 'insert' '{'
      case 145057:                  // 'insert' '{|'
        this.try_JSONInsertExpr();
        break;
      case -10:
      case 3294:                    // 'rename' EQName^Token
      case 4318:                    // 'rename' IntegerLiteral
      case 4830:                    // 'rename' DecimalLiteral
      case 5342:                    // 'rename' DoubleLiteral
      case 5854:                    // 'rename' StringLiteral
      case 16094:                   // 'rename' '$'
      case 16606:                   // 'rename' '$$'
      case 17118:                   // 'rename' '%'
      case 28382:                   // 'rename' '<'
      case 28894:                   // 'rename' '<!--'
      case 30942:                   // 'rename' '<?'
      case 35550:                   // 'rename' '['
      case 36574:                   // 'rename' 'after'
      case 37598:                   // 'rename' 'allowing'
      case 38110:                   // 'rename' 'ancestor'
      case 38622:                   // 'rename' 'ancestor-or-self'
      case 39134:                   // 'rename' 'and'
      case 40158:                   // 'rename' 'append'
      case 40670:                   // 'rename' 'array'
      case 41182:                   // 'rename' 'as'
      case 41694:                   // 'rename' 'ascending'
      case 42206:                   // 'rename' 'at'
      case 42718:                   // 'rename' 'attribute'
      case 43230:                   // 'rename' 'base-uri'
      case 43742:                   // 'rename' 'before'
      case 44254:                   // 'rename' 'boundary-space'
      case 44766:                   // 'rename' 'break'
      case 45790:                   // 'rename' 'case'
      case 46302:                   // 'rename' 'cast'
      case 46814:                   // 'rename' 'castable'
      case 47326:                   // 'rename' 'catch'
      case 48350:                   // 'rename' 'child'
      case 48862:                   // 'rename' 'collation'
      case 49886:                   // 'rename' 'comment'
      case 50398:                   // 'rename' 'constraint'
      case 50910:                   // 'rename' 'construction'
      case 52446:                   // 'rename' 'context'
      case 52958:                   // 'rename' 'continue'
      case 53470:                   // 'rename' 'copy'
      case 53982:                   // 'rename' 'copy-namespaces'
      case 54494:                   // 'rename' 'count'
      case 55006:                   // 'rename' 'decimal-format'
      case 56030:                   // 'rename' 'declare'
      case 56542:                   // 'rename' 'default'
      case 57054:                   // 'rename' 'delete'
      case 57566:                   // 'rename' 'descendant'
      case 58078:                   // 'rename' 'descendant-or-self'
      case 58590:                   // 'rename' 'descending'
      case 61150:                   // 'rename' 'div'
      case 61662:                   // 'rename' 'document'
      case 62174:                   // 'rename' 'document-node'
      case 62686:                   // 'rename' 'element'
      case 63198:                   // 'rename' 'else'
      case 63710:                   // 'rename' 'empty'
      case 64222:                   // 'rename' 'empty-sequence'
      case 64734:                   // 'rename' 'encoding'
      case 65246:                   // 'rename' 'end'
      case 66270:                   // 'rename' 'eq'
      case 66782:                   // 'rename' 'every'
      case 67806:                   // 'rename' 'except'
      case 68318:                   // 'rename' 'exit'
      case 68830:                   // 'rename' 'external'
      case 69342:                   // 'rename' 'false'
      case 69854:                   // 'rename' 'first'
      case 70366:                   // 'rename' 'following'
      case 70878:                   // 'rename' 'following-sibling'
      case 71390:                   // 'rename' 'for'
      case 72926:                   // 'rename' 'from'
      case 73438:                   // 'rename' 'ft-option'
      case 75486:                   // 'rename' 'function'
      case 75998:                   // 'rename' 'ge'
      case 77022:                   // 'rename' 'group'
      case 78046:                   // 'rename' 'gt'
      case 78558:                   // 'rename' 'idiv'
      case 79070:                   // 'rename' 'if'
      case 79582:                   // 'rename' 'import'
      case 80094:                   // 'rename' 'in'
      case 80606:                   // 'rename' 'index'
      case 82654:                   // 'rename' 'insert'
      case 83166:                   // 'rename' 'instance'
      case 83678:                   // 'rename' 'integrity'
      case 84190:                   // 'rename' 'intersect'
      case 84702:                   // 'rename' 'into'
      case 85214:                   // 'rename' 'is'
      case 85726:                   // 'rename' 'item'
      case 86238:                   // 'rename' 'json'
      case 86750:                   // 'rename' 'json-item'
      case 87262:                   // 'rename' 'jsoniq'
      case 88798:                   // 'rename' 'last'
      case 89310:                   // 'rename' 'lax'
      case 89822:                   // 'rename' 'le'
      case 90846:                   // 'rename' 'let'
      case 91870:                   // 'rename' 'loop'
      case 92894:                   // 'rename' 'lt'
      case 93918:                   // 'rename' 'mod'
      case 94430:                   // 'rename' 'modify'
      case 94942:                   // 'rename' 'module'
      case 95966:                   // 'rename' 'namespace'
      case 96478:                   // 'rename' 'namespace-node'
      case 96990:                   // 'rename' 'ne'
      case 100062:                  // 'rename' 'nodes'
      case 101086:                  // 'rename' 'null'
      case 101598:                  // 'rename' 'object'
      case 103646:                  // 'rename' 'only'
      case 104158:                  // 'rename' 'option'
      case 104670:                  // 'rename' 'or'
      case 105182:                  // 'rename' 'order'
      case 105694:                  // 'rename' 'ordered'
      case 106206:                  // 'rename' 'ordering'
      case 107742:                  // 'rename' 'parent'
      case 110814:                  // 'rename' 'preceding'
      case 111326:                  // 'rename' 'preceding-sibling'
      case 112862:                  // 'rename' 'processing-instruction'
      case 113886:                  // 'rename' 'rename'
      case 114398:                  // 'rename' 'replace'
      case 114910:                  // 'rename' 'return'
      case 115422:                  // 'rename' 'returning'
      case 115934:                  // 'rename' 'revalidation'
      case 116958:                  // 'rename' 'satisfies'
      case 117470:                  // 'rename' 'schema'
      case 117982:                  // 'rename' 'schema-attribute'
      case 118494:                  // 'rename' 'schema-element'
      case 119006:                  // 'rename' 'score'
      case 119518:                  // 'rename' 'select'
      case 120030:                  // 'rename' 'self'
      case 122590:                  // 'rename' 'sliding'
      case 123102:                  // 'rename' 'some'
      case 123614:                  // 'rename' 'stable'
      case 124126:                  // 'rename' 'start'
      case 125662:                  // 'rename' 'strict'
      case 126686:                  // 'rename' 'structured-item'
      case 127198:                  // 'rename' 'switch'
      case 127710:                  // 'rename' 'text'
      case 129758:                  // 'rename' 'to'
      case 130270:                  // 'rename' 'treat'
      case 130782:                  // 'rename' 'true'
      case 131294:                  // 'rename' 'try'
      case 131806:                  // 'rename' 'tumbling'
      case 132318:                  // 'rename' 'type'
      case 132830:                  // 'rename' 'typeswitch'
      case 133342:                  // 'rename' 'union'
      case 134366:                  // 'rename' 'unordered'
      case 134878:                  // 'rename' 'updating'
      case 136414:                  // 'rename' 'validate'
      case 136926:                  // 'rename' 'value'
      case 137438:                  // 'rename' 'variable'
      case 137950:                  // 'rename' 'version'
      case 139486:                  // 'rename' 'where'
      case 139998:                  // 'rename' 'while'
      case 141534:                  // 'rename' 'with'
      case 144094:                  // 'rename' '{'
      case 145118:                  // 'rename' '{|'
        this.try_JSONRenameExpr();
        break;
      case -11:
        this.try_JSONReplaceExpr();
        break;
      case -12:
      case 3150:                    // 'append' EQName^Token
      case 4174:                    // 'append' IntegerLiteral
      case 4686:                    // 'append' DecimalLiteral
      case 5198:                    // 'append' DoubleLiteral
      case 5710:                    // 'append' StringLiteral
      case 15950:                   // 'append' '$'
      case 16462:                   // 'append' '$$'
      case 16974:                   // 'append' '%'
      case 18510:                   // 'append' '(#'
      case 21070:                   // 'append' '+'
      case 22094:                   // 'append' '-'
      case 24142:                   // 'append' '/'
      case 24654:                   // 'append' '//'
      case 28238:                   // 'append' '<'
      case 28750:                   // 'append' '<!--'
      case 30798:                   // 'append' '<?'
      case 35406:                   // 'append' '['
      case 36430:                   // 'append' 'after'
      case 37454:                   // 'append' 'allowing'
      case 37966:                   // 'append' 'ancestor'
      case 38478:                   // 'append' 'ancestor-or-self'
      case 38990:                   // 'append' 'and'
      case 40014:                   // 'append' 'append'
      case 40526:                   // 'append' 'array'
      case 41038:                   // 'append' 'as'
      case 41550:                   // 'append' 'ascending'
      case 42062:                   // 'append' 'at'
      case 42574:                   // 'append' 'attribute'
      case 43086:                   // 'append' 'base-uri'
      case 43598:                   // 'append' 'before'
      case 44110:                   // 'append' 'boundary-space'
      case 44622:                   // 'append' 'break'
      case 45646:                   // 'append' 'case'
      case 46158:                   // 'append' 'cast'
      case 46670:                   // 'append' 'castable'
      case 47182:                   // 'append' 'catch'
      case 48206:                   // 'append' 'child'
      case 48718:                   // 'append' 'collation'
      case 49742:                   // 'append' 'comment'
      case 50254:                   // 'append' 'constraint'
      case 50766:                   // 'append' 'construction'
      case 52302:                   // 'append' 'context'
      case 52814:                   // 'append' 'continue'
      case 53326:                   // 'append' 'copy'
      case 53838:                   // 'append' 'copy-namespaces'
      case 54350:                   // 'append' 'count'
      case 54862:                   // 'append' 'decimal-format'
      case 55886:                   // 'append' 'declare'
      case 56398:                   // 'append' 'default'
      case 56910:                   // 'append' 'delete'
      case 57422:                   // 'append' 'descendant'
      case 57934:                   // 'append' 'descendant-or-self'
      case 58446:                   // 'append' 'descending'
      case 61006:                   // 'append' 'div'
      case 61518:                   // 'append' 'document'
      case 62030:                   // 'append' 'document-node'
      case 62542:                   // 'append' 'element'
      case 63054:                   // 'append' 'else'
      case 63566:                   // 'append' 'empty'
      case 64078:                   // 'append' 'empty-sequence'
      case 64590:                   // 'append' 'encoding'
      case 65102:                   // 'append' 'end'
      case 66126:                   // 'append' 'eq'
      case 66638:                   // 'append' 'every'
      case 67662:                   // 'append' 'except'
      case 68174:                   // 'append' 'exit'
      case 68686:                   // 'append' 'external'
      case 69198:                   // 'append' 'false'
      case 69710:                   // 'append' 'first'
      case 70222:                   // 'append' 'following'
      case 70734:                   // 'append' 'following-sibling'
      case 71246:                   // 'append' 'for'
      case 72782:                   // 'append' 'from'
      case 73294:                   // 'append' 'ft-option'
      case 75342:                   // 'append' 'function'
      case 75854:                   // 'append' 'ge'
      case 76878:                   // 'append' 'group'
      case 77902:                   // 'append' 'gt'
      case 78414:                   // 'append' 'idiv'
      case 78926:                   // 'append' 'if'
      case 79438:                   // 'append' 'import'
      case 79950:                   // 'append' 'in'
      case 80462:                   // 'append' 'index'
      case 82510:                   // 'append' 'insert'
      case 83022:                   // 'append' 'instance'
      case 83534:                   // 'append' 'integrity'
      case 84046:                   // 'append' 'intersect'
      case 84558:                   // 'append' 'into'
      case 85070:                   // 'append' 'is'
      case 85582:                   // 'append' 'item'
      case 86094:                   // 'append' 'json'
      case 86606:                   // 'append' 'json-item'
      case 87118:                   // 'append' 'jsoniq'
      case 88654:                   // 'append' 'last'
      case 89166:                   // 'append' 'lax'
      case 89678:                   // 'append' 'le'
      case 90702:                   // 'append' 'let'
      case 91726:                   // 'append' 'loop'
      case 92750:                   // 'append' 'lt'
      case 93774:                   // 'append' 'mod'
      case 94286:                   // 'append' 'modify'
      case 94798:                   // 'append' 'module'
      case 95822:                   // 'append' 'namespace'
      case 96334:                   // 'append' 'namespace-node'
      case 96846:                   // 'append' 'ne'
      case 99406:                   // 'append' 'node'
      case 99918:                   // 'append' 'nodes'
      case 100430:                  // 'append' 'not'
      case 100942:                  // 'append' 'null'
      case 101454:                  // 'append' 'object'
      case 103502:                  // 'append' 'only'
      case 104014:                  // 'append' 'option'
      case 104526:                  // 'append' 'or'
      case 105038:                  // 'append' 'order'
      case 105550:                  // 'append' 'ordered'
      case 106062:                  // 'append' 'ordering'
      case 107598:                  // 'append' 'parent'
      case 110670:                  // 'append' 'preceding'
      case 111182:                  // 'append' 'preceding-sibling'
      case 112718:                  // 'append' 'processing-instruction'
      case 113742:                  // 'append' 'rename'
      case 114254:                  // 'append' 'replace'
      case 114766:                  // 'append' 'return'
      case 115278:                  // 'append' 'returning'
      case 115790:                  // 'append' 'revalidation'
      case 116814:                  // 'append' 'satisfies'
      case 117326:                  // 'append' 'schema'
      case 117838:                  // 'append' 'schema-attribute'
      case 118350:                  // 'append' 'schema-element'
      case 118862:                  // 'append' 'score'
      case 119374:                  // 'append' 'select'
      case 119886:                  // 'append' 'self'
      case 122446:                  // 'append' 'sliding'
      case 122958:                  // 'append' 'some'
      case 123470:                  // 'append' 'stable'
      case 123982:                  // 'append' 'start'
      case 125518:                  // 'append' 'strict'
      case 126542:                  // 'append' 'structured-item'
      case 127054:                  // 'append' 'switch'
      case 127566:                  // 'append' 'text'
      case 129614:                  // 'append' 'to'
      case 130126:                  // 'append' 'treat'
      case 130638:                  // 'append' 'true'
      case 131150:                  // 'append' 'try'
      case 131662:                  // 'append' 'tumbling'
      case 132174:                  // 'append' 'type'
      case 132686:                  // 'append' 'typeswitch'
      case 133198:                  // 'append' 'union'
      case 134222:                  // 'append' 'unordered'
      case 134734:                  // 'append' 'updating'
      case 136270:                  // 'append' 'validate'
      case 136782:                  // 'append' 'value'
      case 137294:                  // 'append' 'variable'
      case 137806:                  // 'append' 'version'
      case 139342:                  // 'append' 'where'
      case 139854:                  // 'append' 'while'
      case 141390:                  // 'append' 'with'
      case 143950:                  // 'append' '{'
      case 144974:                  // 'append' '{|'
        this.try_JSONAppendExpr();
        break;
      case -13:
        break;
      default:
        this.try_OrExpr();
      }
    }

    private parse_JSONDeleteExpr()
    {
      this.eventHandler.startNonterminal("JSONDeleteExpr", this.e0);
      this.shift(111);              // 'delete'
      this.lookahead1W(259);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(:' | '<' | '<!--' | '<?' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'jsoniq' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'null' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | '{' | '{|'
      switch (this.l1)
      {
      case 168:                     // 'json'
        this.lookahead2W(260);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '#' | '$' | '$$' | '%' | '(' | '(:' | '<' | '<!--' | '<?' | '[' |
                                    // 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'jsoniq' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'null' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | '{' | '{|'
        break;
      default:
        this.lk = this.l1;
      }
      if (this.lk == 18088)         // 'json' '('
      {
        this.lk = this.memoized(11, this.e0);
        if (this.lk == 0)
        {
          var b0A = this.b0; var e0A = this.e0; var l1A = this.l1;
          var b1A = this.b1; var e1A = this.e1; var l2A = this.l2;
          var b2A = this.b2; var e2A = this.e2;
          try
          {
            this.shiftT(168);       // 'json'
            this.lk = -1;
          }
          catch (p1A)
          {
            this.lk = -2;
          }
          this.b0 = b0A; this.e0 = e0A; this.l1 = l1A; if (this.l1 == 0) {this.end = e0A;} else {
          this.b1 = b1A; this.e1 = e1A; this.l2 = l2A; if (this.l2 == 0) {this.end = e1A;} else {
          this.b2 = b2A; this.e2 = e2A; this.end = e2A; }}
          this.memoize(11, this.e0, this.lk);
        }
      }
      if (this.lk == -1
       || this.lk == 3240           // 'json' EQName^Token
       || this.lk == 4264           // 'json' IntegerLiteral
       || this.lk == 4776           // 'json' DecimalLiteral
       || this.lk == 5288           // 'json' DoubleLiteral
       || this.lk == 5800           // 'json' StringLiteral
       || this.lk == 16040          // 'json' '$'
       || this.lk == 16552          // 'json' '$$'
       || this.lk == 17064          // 'json' '%'
       || this.lk == 28328          // 'json' '<'
       || this.lk == 28840          // 'json' '<!--'
       || this.lk == 30888          // 'json' '<?'
       || this.lk == 35496          // 'json' '['
       || this.lk == 36520          // 'json' 'after'
       || this.lk == 37544          // 'json' 'allowing'
       || this.lk == 38056          // 'json' 'ancestor'
       || this.lk == 38568          // 'json' 'ancestor-or-self'
       || this.lk == 39080          // 'json' 'and'
       || this.lk == 40104          // 'json' 'append'
       || this.lk == 40616          // 'json' 'array'
       || this.lk == 41128          // 'json' 'as'
       || this.lk == 41640          // 'json' 'ascending'
       || this.lk == 42152          // 'json' 'at'
       || this.lk == 42664          // 'json' 'attribute'
       || this.lk == 43176          // 'json' 'base-uri'
       || this.lk == 43688          // 'json' 'before'
       || this.lk == 44200          // 'json' 'boundary-space'
       || this.lk == 44712          // 'json' 'break'
       || this.lk == 45736          // 'json' 'case'
       || this.lk == 46248          // 'json' 'cast'
       || this.lk == 46760          // 'json' 'castable'
       || this.lk == 47272          // 'json' 'catch'
       || this.lk == 48296          // 'json' 'child'
       || this.lk == 48808          // 'json' 'collation'
       || this.lk == 49832          // 'json' 'comment'
       || this.lk == 50344          // 'json' 'constraint'
       || this.lk == 50856          // 'json' 'construction'
       || this.lk == 52392          // 'json' 'context'
       || this.lk == 52904          // 'json' 'continue'
       || this.lk == 53416          // 'json' 'copy'
       || this.lk == 53928          // 'json' 'copy-namespaces'
       || this.lk == 54440          // 'json' 'count'
       || this.lk == 54952          // 'json' 'decimal-format'
       || this.lk == 55976          // 'json' 'declare'
       || this.lk == 56488          // 'json' 'default'
       || this.lk == 57000          // 'json' 'delete'
       || this.lk == 57512          // 'json' 'descendant'
       || this.lk == 58024          // 'json' 'descendant-or-self'
       || this.lk == 58536          // 'json' 'descending'
       || this.lk == 61096          // 'json' 'div'
       || this.lk == 61608          // 'json' 'document'
       || this.lk == 62120          // 'json' 'document-node'
       || this.lk == 62632          // 'json' 'element'
       || this.lk == 63144          // 'json' 'else'
       || this.lk == 63656          // 'json' 'empty'
       || this.lk == 64168          // 'json' 'empty-sequence'
       || this.lk == 64680          // 'json' 'encoding'
       || this.lk == 65192          // 'json' 'end'
       || this.lk == 66216          // 'json' 'eq'
       || this.lk == 66728          // 'json' 'every'
       || this.lk == 67752          // 'json' 'except'
       || this.lk == 68264          // 'json' 'exit'
       || this.lk == 68776          // 'json' 'external'
       || this.lk == 69288          // 'json' 'false'
       || this.lk == 69800          // 'json' 'first'
       || this.lk == 70312          // 'json' 'following'
       || this.lk == 70824          // 'json' 'following-sibling'
       || this.lk == 71336          // 'json' 'for'
       || this.lk == 72872          // 'json' 'from'
       || this.lk == 73384          // 'json' 'ft-option'
       || this.lk == 75432          // 'json' 'function'
       || this.lk == 75944          // 'json' 'ge'
       || this.lk == 76968          // 'json' 'group'
       || this.lk == 77992          // 'json' 'gt'
       || this.lk == 78504          // 'json' 'idiv'
       || this.lk == 79016          // 'json' 'if'
       || this.lk == 79528          // 'json' 'import'
       || this.lk == 80040          // 'json' 'in'
       || this.lk == 80552          // 'json' 'index'
       || this.lk == 82600          // 'json' 'insert'
       || this.lk == 83112          // 'json' 'instance'
       || this.lk == 83624          // 'json' 'integrity'
       || this.lk == 84136          // 'json' 'intersect'
       || this.lk == 84648          // 'json' 'into'
       || this.lk == 85160          // 'json' 'is'
       || this.lk == 85672          // 'json' 'item'
       || this.lk == 86184          // 'json' 'json'
       || this.lk == 86696          // 'json' 'json-item'
       || this.lk == 87208          // 'json' 'jsoniq'
       || this.lk == 88744          // 'json' 'last'
       || this.lk == 89256          // 'json' 'lax'
       || this.lk == 89768          // 'json' 'le'
       || this.lk == 90792          // 'json' 'let'
       || this.lk == 91816          // 'json' 'loop'
       || this.lk == 92840          // 'json' 'lt'
       || this.lk == 93864          // 'json' 'mod'
       || this.lk == 94376          // 'json' 'modify'
       || this.lk == 94888          // 'json' 'module'
       || this.lk == 95912          // 'json' 'namespace'
       || this.lk == 96424          // 'json' 'namespace-node'
       || this.lk == 96936          // 'json' 'ne'
       || this.lk == 99496          // 'json' 'node'
       || this.lk == 100008         // 'json' 'nodes'
       || this.lk == 101032         // 'json' 'null'
       || this.lk == 101544         // 'json' 'object'
       || this.lk == 103592         // 'json' 'only'
       || this.lk == 104104         // 'json' 'option'
       || this.lk == 104616         // 'json' 'or'
       || this.lk == 105128         // 'json' 'order'
       || this.lk == 105640         // 'json' 'ordered'
       || this.lk == 106152         // 'json' 'ordering'
       || this.lk == 107688         // 'json' 'parent'
       || this.lk == 110760         // 'json' 'preceding'
       || this.lk == 111272         // 'json' 'preceding-sibling'
       || this.lk == 112808         // 'json' 'processing-instruction'
       || this.lk == 113832         // 'json' 'rename'
       || this.lk == 114344         // 'json' 'replace'
       || this.lk == 114856         // 'json' 'return'
       || this.lk == 115368         // 'json' 'returning'
       || this.lk == 115880         // 'json' 'revalidation'
       || this.lk == 116904         // 'json' 'satisfies'
       || this.lk == 117416         // 'json' 'schema'
       || this.lk == 117928         // 'json' 'schema-attribute'
       || this.lk == 118440         // 'json' 'schema-element'
       || this.lk == 118952         // 'json' 'score'
       || this.lk == 119464         // 'json' 'select'
       || this.lk == 119976         // 'json' 'self'
       || this.lk == 122536         // 'json' 'sliding'
       || this.lk == 123048         // 'json' 'some'
       || this.lk == 123560         // 'json' 'stable'
       || this.lk == 124072         // 'json' 'start'
       || this.lk == 125608         // 'json' 'strict'
       || this.lk == 126632         // 'json' 'structured-item'
       || this.lk == 127144         // 'json' 'switch'
       || this.lk == 127656         // 'json' 'text'
       || this.lk == 129704         // 'json' 'to'
       || this.lk == 130216         // 'json' 'treat'
       || this.lk == 130728         // 'json' 'true'
       || this.lk == 131240         // 'json' 'try'
       || this.lk == 131752         // 'json' 'tumbling'
       || this.lk == 132264         // 'json' 'type'
       || this.lk == 132776         // 'json' 'typeswitch'
       || this.lk == 133288         // 'json' 'union'
       || this.lk == 134312         // 'json' 'unordered'
       || this.lk == 134824         // 'json' 'updating'
       || this.lk == 136360         // 'json' 'validate'
       || this.lk == 136872         // 'json' 'value'
       || this.lk == 137384         // 'json' 'variable'
       || this.lk == 137896         // 'json' 'version'
       || this.lk == 139432         // 'json' 'where'
       || this.lk == 139944         // 'json' 'while'
       || this.lk == 141480         // 'json' 'with'
       || this.lk == 144040         // 'json' '{'
       || this.lk == 145064)        // 'json' '{|'
      {
        this.shift(168);            // 'json'
      }
      this.lookahead1W(259);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(:' | '<' | '<!--' | '<?' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'jsoniq' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'null' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | '{' | '{|'
      this.whitespace();
      this.parse_PostfixExpr();
      this.eventHandler.endNonterminal("JSONDeleteExpr", this.e0);
    }

    private try_JSONDeleteExpr()
    {
      this.shiftT(111);             // 'delete'
      this.lookahead1W(259);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(:' | '<' | '<!--' | '<?' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'jsoniq' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'null' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | '{' | '{|'
      switch (this.l1)
      {
      case 168:                     // 'json'
        this.lookahead2W(260);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '#' | '$' | '$$' | '%' | '(' | '(:' | '<' | '<!--' | '<?' | '[' |
                                    // 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'jsoniq' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'null' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | '{' | '{|'
        break;
      default:
        this.lk = this.l1;
      }
      if (this.lk == 18088)         // 'json' '('
      {
        this.lk = this.memoized(11, this.e0);
        if (this.lk == 0)
        {
          var b0A = this.b0; var e0A = this.e0; var l1A = this.l1;
          var b1A = this.b1; var e1A = this.e1; var l2A = this.l2;
          var b2A = this.b2; var e2A = this.e2;
          try
          {
            this.shiftT(168);       // 'json'
            this.memoize(11, e0A, -1);
          }
          catch (p1A)
          {
            this.b0 = b0A; this.e0 = e0A; this.l1 = l1A; if (this.l1 == 0) {this.end = e0A;} else {
            this.b1 = b1A; this.e1 = e1A; this.l2 = l2A; if (this.l2 == 0) {this.end = e1A;} else {
            this.b2 = b2A; this.e2 = e2A; this.end = e2A; }}
            this.memoize(11, e0A, -2);
          }
          this.lk = -2;
        }
      }
      if (this.lk == -1
       || this.lk == 3240           // 'json' EQName^Token
       || this.lk == 4264           // 'json' IntegerLiteral
       || this.lk == 4776           // 'json' DecimalLiteral
       || this.lk == 5288           // 'json' DoubleLiteral
       || this.lk == 5800           // 'json' StringLiteral
       || this.lk == 16040          // 'json' '$'
       || this.lk == 16552          // 'json' '$$'
       || this.lk == 17064          // 'json' '%'
       || this.lk == 28328          // 'json' '<'
       || this.lk == 28840          // 'json' '<!--'
       || this.lk == 30888          // 'json' '<?'
       || this.lk == 35496          // 'json' '['
       || this.lk == 36520          // 'json' 'after'
       || this.lk == 37544          // 'json' 'allowing'
       || this.lk == 38056          // 'json' 'ancestor'
       || this.lk == 38568          // 'json' 'ancestor-or-self'
       || this.lk == 39080          // 'json' 'and'
       || this.lk == 40104          // 'json' 'append'
       || this.lk == 40616          // 'json' 'array'
       || this.lk == 41128          // 'json' 'as'
       || this.lk == 41640          // 'json' 'ascending'
       || this.lk == 42152          // 'json' 'at'
       || this.lk == 42664          // 'json' 'attribute'
       || this.lk == 43176          // 'json' 'base-uri'
       || this.lk == 43688          // 'json' 'before'
       || this.lk == 44200          // 'json' 'boundary-space'
       || this.lk == 44712          // 'json' 'break'
       || this.lk == 45736          // 'json' 'case'
       || this.lk == 46248          // 'json' 'cast'
       || this.lk == 46760          // 'json' 'castable'
       || this.lk == 47272          // 'json' 'catch'
       || this.lk == 48296          // 'json' 'child'
       || this.lk == 48808          // 'json' 'collation'
       || this.lk == 49832          // 'json' 'comment'
       || this.lk == 50344          // 'json' 'constraint'
       || this.lk == 50856          // 'json' 'construction'
       || this.lk == 52392          // 'json' 'context'
       || this.lk == 52904          // 'json' 'continue'
       || this.lk == 53416          // 'json' 'copy'
       || this.lk == 53928          // 'json' 'copy-namespaces'
       || this.lk == 54440          // 'json' 'count'
       || this.lk == 54952          // 'json' 'decimal-format'
       || this.lk == 55976          // 'json' 'declare'
       || this.lk == 56488          // 'json' 'default'
       || this.lk == 57000          // 'json' 'delete'
       || this.lk == 57512          // 'json' 'descendant'
       || this.lk == 58024          // 'json' 'descendant-or-self'
       || this.lk == 58536          // 'json' 'descending'
       || this.lk == 61096          // 'json' 'div'
       || this.lk == 61608          // 'json' 'document'
       || this.lk == 62120          // 'json' 'document-node'
       || this.lk == 62632          // 'json' 'element'
       || this.lk == 63144          // 'json' 'else'
       || this.lk == 63656          // 'json' 'empty'
       || this.lk == 64168          // 'json' 'empty-sequence'
       || this.lk == 64680          // 'json' 'encoding'
       || this.lk == 65192          // 'json' 'end'
       || this.lk == 66216          // 'json' 'eq'
       || this.lk == 66728          // 'json' 'every'
       || this.lk == 67752          // 'json' 'except'
       || this.lk == 68264          // 'json' 'exit'
       || this.lk == 68776          // 'json' 'external'
       || this.lk == 69288          // 'json' 'false'
       || this.lk == 69800          // 'json' 'first'
       || this.lk == 70312          // 'json' 'following'
       || this.lk == 70824          // 'json' 'following-sibling'
       || this.lk == 71336          // 'json' 'for'
       || this.lk == 72872          // 'json' 'from'
       || this.lk == 73384          // 'json' 'ft-option'
       || this.lk == 75432          // 'json' 'function'
       || this.lk == 75944          // 'json' 'ge'
       || this.lk == 76968          // 'json' 'group'
       || this.lk == 77992          // 'json' 'gt'
       || this.lk == 78504          // 'json' 'idiv'
       || this.lk == 79016          // 'json' 'if'
       || this.lk == 79528          // 'json' 'import'
       || this.lk == 80040          // 'json' 'in'
       || this.lk == 80552          // 'json' 'index'
       || this.lk == 82600          // 'json' 'insert'
       || this.lk == 83112          // 'json' 'instance'
       || this.lk == 83624          // 'json' 'integrity'
       || this.lk == 84136          // 'json' 'intersect'
       || this.lk == 84648          // 'json' 'into'
       || this.lk == 85160          // 'json' 'is'
       || this.lk == 85672          // 'json' 'item'
       || this.lk == 86184          // 'json' 'json'
       || this.lk == 86696          // 'json' 'json-item'
       || this.lk == 87208          // 'json' 'jsoniq'
       || this.lk == 88744          // 'json' 'last'
       || this.lk == 89256          // 'json' 'lax'
       || this.lk == 89768          // 'json' 'le'
       || this.lk == 90792          // 'json' 'let'
       || this.lk == 91816          // 'json' 'loop'
       || this.lk == 92840          // 'json' 'lt'
       || this.lk == 93864          // 'json' 'mod'
       || this.lk == 94376          // 'json' 'modify'
       || this.lk == 94888          // 'json' 'module'
       || this.lk == 95912          // 'json' 'namespace'
       || this.lk == 96424          // 'json' 'namespace-node'
       || this.lk == 96936          // 'json' 'ne'
       || this.lk == 99496          // 'json' 'node'
       || this.lk == 100008         // 'json' 'nodes'
       || this.lk == 101032         // 'json' 'null'
       || this.lk == 101544         // 'json' 'object'
       || this.lk == 103592         // 'json' 'only'
       || this.lk == 104104         // 'json' 'option'
       || this.lk == 104616         // 'json' 'or'
       || this.lk == 105128         // 'json' 'order'
       || this.lk == 105640         // 'json' 'ordered'
       || this.lk == 106152         // 'json' 'ordering'
       || this.lk == 107688         // 'json' 'parent'
       || this.lk == 110760         // 'json' 'preceding'
       || this.lk == 111272         // 'json' 'preceding-sibling'
       || this.lk == 112808         // 'json' 'processing-instruction'
       || this.lk == 113832         // 'json' 'rename'
       || this.lk == 114344         // 'json' 'replace'
       || this.lk == 114856         // 'json' 'return'
       || this.lk == 115368         // 'json' 'returning'
       || this.lk == 115880         // 'json' 'revalidation'
       || this.lk == 116904         // 'json' 'satisfies'
       || this.lk == 117416         // 'json' 'schema'
       || this.lk == 117928         // 'json' 'schema-attribute'
       || this.lk == 118440         // 'json' 'schema-element'
       || this.lk == 118952         // 'json' 'score'
       || this.lk == 119464         // 'json' 'select'
       || this.lk == 119976         // 'json' 'self'
       || this.lk == 122536         // 'json' 'sliding'
       || this.lk == 123048         // 'json' 'some'
       || this.lk == 123560         // 'json' 'stable'
       || this.lk == 124072         // 'json' 'start'
       || this.lk == 125608         // 'json' 'strict'
       || this.lk == 126632         // 'json' 'structured-item'
       || this.lk == 127144         // 'json' 'switch'
       || this.lk == 127656         // 'json' 'text'
       || this.lk == 129704         // 'json' 'to'
       || this.lk == 130216         // 'json' 'treat'
       || this.lk == 130728         // 'json' 'true'
       || this.lk == 131240         // 'json' 'try'
       || this.lk == 131752         // 'json' 'tumbling'
       || this.lk == 132264         // 'json' 'type'
       || this.lk == 132776         // 'json' 'typeswitch'
       || this.lk == 133288         // 'json' 'union'
       || this.lk == 134312         // 'json' 'unordered'
       || this.lk == 134824         // 'json' 'updating'
       || this.lk == 136360         // 'json' 'validate'
       || this.lk == 136872         // 'json' 'value'
       || this.lk == 137384         // 'json' 'variable'
       || this.lk == 137896         // 'json' 'version'
       || this.lk == 139432         // 'json' 'where'
       || this.lk == 139944         // 'json' 'while'
       || this.lk == 141480         // 'json' 'with'
       || this.lk == 144040         // 'json' '{'
       || this.lk == 145064)        // 'json' '{|'
      {
        this.shiftT(168);           // 'json'
      }
      this.lookahead1W(259);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(:' | '<' | '<!--' | '<?' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'jsoniq' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'null' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | '{' | '{|'
      this.try_PostfixExpr();
    }

    private parse_JSONInsertExpr()
    {
      this.eventHandler.startNonterminal("JSONInsertExpr", this.e0);
      switch (this.l1)
      {
      case 161:                     // 'insert'
        this.lookahead2W(267);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // NCName^Token | S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' |
                                    // '//' | '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
        break;
      default:
        this.lk = this.l1;
      }
      if (this.lk != 9889)          // 'insert' NCName^Token
      {
        this.lk = this.memoized(12, this.e0);
        if (this.lk == 0)
        {
          var b0A = this.b0; var e0A = this.e0; var l1A = this.l1;
          var b1A = this.b1; var e1A = this.e1; var l2A = this.l2;
          var b2A = this.b2; var e2A = this.e2;
          try
          {
            this.shiftT(161);       // 'insert'
            this.lookahead1W(266);  // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
            switch (this.l1)
            {
            case 168:               // 'json'
              this.lookahead2W(268); // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                     // S^WS | '#' | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' |
                                     // '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                     // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                     // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                     // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                     // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                     // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                     // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                     // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                     // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                     // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                     // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                     // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                     // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                     // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                     // 'node' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' |
                                     // 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                     // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                     // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                     // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                     // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'structured-item' |
                                     // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                     // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                     // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
              break;
            default:
              this.lk = this.l1;
            }
            if (this.lk == 18088)   // 'json' '('
            {
              this.lk = this.memoized(13, this.e0);
              if (this.lk == 0)
              {
                var b0B = this.b0; var e0B = this.e0; var l1B = this.l1;
                var b1B = this.b1; var e1B = this.e1; var l2B = this.l2;
                var b2B = this.b2; var e2B = this.e2;
                try
                {
                  this.shiftT(168); // 'json'
                  this.memoize(13, e0B, -1);
                }
                catch (p1B)
                {
                  this.b0 = b0B; this.e0 = e0B; this.l1 = l1B; if (this.l1 == 0) {this.end = e0B;} else {
                  this.b1 = b1B; this.e1 = e1B; this.l2 = l2B; if (this.l2 == 0) {this.end = e1B;} else {
                  this.b2 = b2B; this.e2 = e2B; this.end = e2B; }}
                  this.memoize(13, e0B, -2);
                }
                this.lk = -2;
              }
            }
            if (this.lk == -1
             || this.lk == 3240     // 'json' EQName^Token
             || this.lk == 4264     // 'json' IntegerLiteral
             || this.lk == 4776     // 'json' DecimalLiteral
             || this.lk == 5288     // 'json' DoubleLiteral
             || this.lk == 5800     // 'json' StringLiteral
             || this.lk == 16040    // 'json' '$'
             || this.lk == 16552    // 'json' '$$'
             || this.lk == 17064    // 'json' '%'
             || this.lk == 18600    // 'json' '(#'
             || this.lk == 21160    // 'json' '+'
             || this.lk == 22184    // 'json' '-'
             || this.lk == 24232    // 'json' '/'
             || this.lk == 24744    // 'json' '//'
             || this.lk == 28328    // 'json' '<'
             || this.lk == 28840    // 'json' '<!--'
             || this.lk == 30888    // 'json' '<?'
             || this.lk == 35496    // 'json' '['
             || this.lk == 36520    // 'json' 'after'
             || this.lk == 37544    // 'json' 'allowing'
             || this.lk == 38056    // 'json' 'ancestor'
             || this.lk == 38568    // 'json' 'ancestor-or-self'
             || this.lk == 39080    // 'json' 'and'
             || this.lk == 40104    // 'json' 'append'
             || this.lk == 40616    // 'json' 'array'
             || this.lk == 41128    // 'json' 'as'
             || this.lk == 41640    // 'json' 'ascending'
             || this.lk == 42152    // 'json' 'at'
             || this.lk == 42664    // 'json' 'attribute'
             || this.lk == 43176    // 'json' 'base-uri'
             || this.lk == 43688    // 'json' 'before'
             || this.lk == 44200    // 'json' 'boundary-space'
             || this.lk == 44712    // 'json' 'break'
             || this.lk == 45736    // 'json' 'case'
             || this.lk == 46248    // 'json' 'cast'
             || this.lk == 46760    // 'json' 'castable'
             || this.lk == 47272    // 'json' 'catch'
             || this.lk == 48296    // 'json' 'child'
             || this.lk == 48808    // 'json' 'collation'
             || this.lk == 49832    // 'json' 'comment'
             || this.lk == 50344    // 'json' 'constraint'
             || this.lk == 50856    // 'json' 'construction'
             || this.lk == 52392    // 'json' 'context'
             || this.lk == 52904    // 'json' 'continue'
             || this.lk == 53416    // 'json' 'copy'
             || this.lk == 53928    // 'json' 'copy-namespaces'
             || this.lk == 54440    // 'json' 'count'
             || this.lk == 54952    // 'json' 'decimal-format'
             || this.lk == 55976    // 'json' 'declare'
             || this.lk == 56488    // 'json' 'default'
             || this.lk == 57000    // 'json' 'delete'
             || this.lk == 57512    // 'json' 'descendant'
             || this.lk == 58024    // 'json' 'descendant-or-self'
             || this.lk == 58536    // 'json' 'descending'
             || this.lk == 61096    // 'json' 'div'
             || this.lk == 61608    // 'json' 'document'
             || this.lk == 62120    // 'json' 'document-node'
             || this.lk == 62632    // 'json' 'element'
             || this.lk == 63144    // 'json' 'else'
             || this.lk == 63656    // 'json' 'empty'
             || this.lk == 64168    // 'json' 'empty-sequence'
             || this.lk == 64680    // 'json' 'encoding'
             || this.lk == 65192    // 'json' 'end'
             || this.lk == 66216    // 'json' 'eq'
             || this.lk == 66728    // 'json' 'every'
             || this.lk == 67752    // 'json' 'except'
             || this.lk == 68264    // 'json' 'exit'
             || this.lk == 68776    // 'json' 'external'
             || this.lk == 69288    // 'json' 'false'
             || this.lk == 69800    // 'json' 'first'
             || this.lk == 70312    // 'json' 'following'
             || this.lk == 70824    // 'json' 'following-sibling'
             || this.lk == 71336    // 'json' 'for'
             || this.lk == 72872    // 'json' 'from'
             || this.lk == 73384    // 'json' 'ft-option'
             || this.lk == 75432    // 'json' 'function'
             || this.lk == 75944    // 'json' 'ge'
             || this.lk == 76968    // 'json' 'group'
             || this.lk == 77992    // 'json' 'gt'
             || this.lk == 78504    // 'json' 'idiv'
             || this.lk == 79016    // 'json' 'if'
             || this.lk == 79528    // 'json' 'import'
             || this.lk == 80040    // 'json' 'in'
             || this.lk == 80552    // 'json' 'index'
             || this.lk == 82600    // 'json' 'insert'
             || this.lk == 83112    // 'json' 'instance'
             || this.lk == 83624    // 'json' 'integrity'
             || this.lk == 84136    // 'json' 'intersect'
             || this.lk == 84648    // 'json' 'into'
             || this.lk == 85160    // 'json' 'is'
             || this.lk == 85672    // 'json' 'item'
             || this.lk == 86184    // 'json' 'json'
             || this.lk == 86696    // 'json' 'json-item'
             || this.lk == 87208    // 'json' 'jsoniq'
             || this.lk == 88744    // 'json' 'last'
             || this.lk == 89256    // 'json' 'lax'
             || this.lk == 89768    // 'json' 'le'
             || this.lk == 90792    // 'json' 'let'
             || this.lk == 91816    // 'json' 'loop'
             || this.lk == 92840    // 'json' 'lt'
             || this.lk == 93864    // 'json' 'mod'
             || this.lk == 94376    // 'json' 'modify'
             || this.lk == 94888    // 'json' 'module'
             || this.lk == 95912    // 'json' 'namespace'
             || this.lk == 96424    // 'json' 'namespace-node'
             || this.lk == 96936    // 'json' 'ne'
             || this.lk == 99496    // 'json' 'node'
             || this.lk == 100008   // 'json' 'nodes'
             || this.lk == 100520   // 'json' 'not'
             || this.lk == 101032   // 'json' 'null'
             || this.lk == 101544   // 'json' 'object'
             || this.lk == 103592   // 'json' 'only'
             || this.lk == 104104   // 'json' 'option'
             || this.lk == 104616   // 'json' 'or'
             || this.lk == 105128   // 'json' 'order'
             || this.lk == 105640   // 'json' 'ordered'
             || this.lk == 106152   // 'json' 'ordering'
             || this.lk == 107688   // 'json' 'parent'
             || this.lk == 110760   // 'json' 'preceding'
             || this.lk == 111272   // 'json' 'preceding-sibling'
             || this.lk == 112808   // 'json' 'processing-instruction'
             || this.lk == 113832   // 'json' 'rename'
             || this.lk == 114344   // 'json' 'replace'
             || this.lk == 114856   // 'json' 'return'
             || this.lk == 115368   // 'json' 'returning'
             || this.lk == 115880   // 'json' 'revalidation'
             || this.lk == 116904   // 'json' 'satisfies'
             || this.lk == 117416   // 'json' 'schema'
             || this.lk == 117928   // 'json' 'schema-attribute'
             || this.lk == 118440   // 'json' 'schema-element'
             || this.lk == 118952   // 'json' 'score'
             || this.lk == 119464   // 'json' 'select'
             || this.lk == 119976   // 'json' 'self'
             || this.lk == 122536   // 'json' 'sliding'
             || this.lk == 123048   // 'json' 'some'
             || this.lk == 123560   // 'json' 'stable'
             || this.lk == 124072   // 'json' 'start'
             || this.lk == 125608   // 'json' 'strict'
             || this.lk == 126632   // 'json' 'structured-item'
             || this.lk == 127144   // 'json' 'switch'
             || this.lk == 127656   // 'json' 'text'
             || this.lk == 129704   // 'json' 'to'
             || this.lk == 130216   // 'json' 'treat'
             || this.lk == 130728   // 'json' 'true'
             || this.lk == 131240   // 'json' 'try'
             || this.lk == 131752   // 'json' 'tumbling'
             || this.lk == 132264   // 'json' 'type'
             || this.lk == 132776   // 'json' 'typeswitch'
             || this.lk == 133288   // 'json' 'union'
             || this.lk == 134312   // 'json' 'unordered'
             || this.lk == 134824   // 'json' 'updating'
             || this.lk == 136360   // 'json' 'validate'
             || this.lk == 136872   // 'json' 'value'
             || this.lk == 137384   // 'json' 'variable'
             || this.lk == 137896   // 'json' 'version'
             || this.lk == 139432   // 'json' 'where'
             || this.lk == 139944   // 'json' 'while'
             || this.lk == 141480   // 'json' 'with'
             || this.lk == 144040   // 'json' '{'
             || this.lk == 145064)  // 'json' '{|'
            {
              this.shiftT(168);     // 'json'
            }
            this.lookahead1W(266);  // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
            this.try_ExprSingle();
            this.shiftT(165);       // 'into'
            this.lookahead1W(266);  // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
            this.try_ExprSingle();
            switch (this.l1)
            {
            case 82:                // 'at'
              this.lookahead2W(72); // S^WS | '(:' | 'position'
              break;
            default:
              this.lk = this.l1;
            }
            if (this.lk == 110162)  // 'at' 'position'
            {
              this.lk = this.memoized(14, this.e0);
              if (this.lk == 0)
              {
                var b0B = this.b0; var e0B = this.e0; var l1B = this.l1;
                var b1B = this.b1; var e1B = this.e1; var l2B = this.l2;
                var b2B = this.b2; var e2B = this.e2;
                try
                {
                  this.shiftT(82);  // 'at'
                  this.lookahead1W(72); // S^WS | '(:' | 'position'
                  this.shiftT(215); // 'position'
                  this.lookahead1W(266); // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                         // StringLiteral | S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' |
                                         // '/' | '//' | '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                         // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' |
                                         // 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' |
                                         // 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                         // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                         // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                         // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                         // 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                         // 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' |
                                         // 'external' | 'false' | 'first' | 'following' | 'following-sibling' | 'for' |
                                         // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                         // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                         // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'jsoniq' |
                                         // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                         // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                         // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                         // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                         // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                         // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' |
                                         // 'schema-element' | 'score' | 'select' | 'self' | 'sliding' | 'some' |
                                         // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                         // 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                         // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                         // 'version' | 'where' | 'while' | 'with' | '{' | '{|'
                  this.try_ExprSingle();
                  this.memoize(14, e0B, -1);
                }
                catch (p1B)
                {
                  this.b0 = b0B; this.e0 = e0B; this.l1 = l1B; if (this.l1 == 0) {this.end = e0B;} else {
                  this.b1 = b1B; this.e1 = e1B; this.l2 = l2B; if (this.l2 == 0) {this.end = e1B;} else {
                  this.b2 = b2B; this.e2 = e2B; this.end = e2B; }}
                  this.memoize(14, e0B, -2);
                }
                this.lk = -2;
              }
            }
            if (this.lk == -1)
            {
              this.shiftT(82);      // 'at'
              this.lookahead1W(72); // S^WS | '(:' | 'position'
              this.shiftT(215);     // 'position'
              this.lookahead1W(266); // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                     // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                     // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                     // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                     // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                     // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                     // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                     // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                     // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                     // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                     // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                     // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                     // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                     // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                     // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                     // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                     // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                     // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                     // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                     // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' |
                                     // 'schema-element' | 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' |
                                     // 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' |
                                     // 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                     // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                     // 'with' | '{' | '{|'
              this.try_ExprSingle();
            }
            this.lk = -1;
          }
          catch (p1A)
          {
            this.lk = -2;
          }
          this.b0 = b0A; this.e0 = e0A; this.l1 = l1A; if (this.l1 == 0) {this.end = e0A;} else {
          this.b1 = b1A; this.e1 = e1A; this.l2 = l2A; if (this.l2 == 0) {this.end = e1A;} else {
          this.b2 = b2A; this.e2 = e2A; this.end = e2A; }}
          this.memoize(12, this.e0, this.lk);
        }
      }
      switch (this.lk)
      {
      case -1:
        this.shift(161);            // 'insert'
        this.lookahead1W(266);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
        switch (this.l1)
        {
        case 168:                   // 'json'
          this.lookahead2W(268);    // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '#' | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' |
                                    // '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
          break;
        default:
          this.lk = this.l1;
        }
        if (this.lk == 18088)       // 'json' '('
        {
          this.lk = this.memoized(13, this.e0);
          if (this.lk == 0)
          {
            var b0B = this.b0; var e0B = this.e0; var l1B = this.l1;
            var b1B = this.b1; var e1B = this.e1; var l2B = this.l2;
            var b2B = this.b2; var e2B = this.e2;
            try
            {
              this.shiftT(168);     // 'json'
              this.lk = -1;
            }
            catch (p1B)
            {
              this.lk = -2;
            }
            this.b0 = b0B; this.e0 = e0B; this.l1 = l1B; if (this.l1 == 0) {this.end = e0B;} else {
            this.b1 = b1B; this.e1 = e1B; this.l2 = l2B; if (this.l2 == 0) {this.end = e1B;} else {
            this.b2 = b2B; this.e2 = e2B; this.end = e2B; }}
            this.memoize(13, this.e0, this.lk);
          }
        }
        if (this.lk == -1
         || this.lk == 3240         // 'json' EQName^Token
         || this.lk == 4264         // 'json' IntegerLiteral
         || this.lk == 4776         // 'json' DecimalLiteral
         || this.lk == 5288         // 'json' DoubleLiteral
         || this.lk == 5800         // 'json' StringLiteral
         || this.lk == 16040        // 'json' '$'
         || this.lk == 16552        // 'json' '$$'
         || this.lk == 17064        // 'json' '%'
         || this.lk == 18600        // 'json' '(#'
         || this.lk == 21160        // 'json' '+'
         || this.lk == 22184        // 'json' '-'
         || this.lk == 24232        // 'json' '/'
         || this.lk == 24744        // 'json' '//'
         || this.lk == 28328        // 'json' '<'
         || this.lk == 28840        // 'json' '<!--'
         || this.lk == 30888        // 'json' '<?'
         || this.lk == 35496        // 'json' '['
         || this.lk == 36520        // 'json' 'after'
         || this.lk == 37544        // 'json' 'allowing'
         || this.lk == 38056        // 'json' 'ancestor'
         || this.lk == 38568        // 'json' 'ancestor-or-self'
         || this.lk == 39080        // 'json' 'and'
         || this.lk == 40104        // 'json' 'append'
         || this.lk == 40616        // 'json' 'array'
         || this.lk == 41128        // 'json' 'as'
         || this.lk == 41640        // 'json' 'ascending'
         || this.lk == 42152        // 'json' 'at'
         || this.lk == 42664        // 'json' 'attribute'
         || this.lk == 43176        // 'json' 'base-uri'
         || this.lk == 43688        // 'json' 'before'
         || this.lk == 44200        // 'json' 'boundary-space'
         || this.lk == 44712        // 'json' 'break'
         || this.lk == 45736        // 'json' 'case'
         || this.lk == 46248        // 'json' 'cast'
         || this.lk == 46760        // 'json' 'castable'
         || this.lk == 47272        // 'json' 'catch'
         || this.lk == 48296        // 'json' 'child'
         || this.lk == 48808        // 'json' 'collation'
         || this.lk == 49832        // 'json' 'comment'
         || this.lk == 50344        // 'json' 'constraint'
         || this.lk == 50856        // 'json' 'construction'
         || this.lk == 52392        // 'json' 'context'
         || this.lk == 52904        // 'json' 'continue'
         || this.lk == 53416        // 'json' 'copy'
         || this.lk == 53928        // 'json' 'copy-namespaces'
         || this.lk == 54440        // 'json' 'count'
         || this.lk == 54952        // 'json' 'decimal-format'
         || this.lk == 55976        // 'json' 'declare'
         || this.lk == 56488        // 'json' 'default'
         || this.lk == 57000        // 'json' 'delete'
         || this.lk == 57512        // 'json' 'descendant'
         || this.lk == 58024        // 'json' 'descendant-or-self'
         || this.lk == 58536        // 'json' 'descending'
         || this.lk == 61096        // 'json' 'div'
         || this.lk == 61608        // 'json' 'document'
         || this.lk == 62120        // 'json' 'document-node'
         || this.lk == 62632        // 'json' 'element'
         || this.lk == 63144        // 'json' 'else'
         || this.lk == 63656        // 'json' 'empty'
         || this.lk == 64168        // 'json' 'empty-sequence'
         || this.lk == 64680        // 'json' 'encoding'
         || this.lk == 65192        // 'json' 'end'
         || this.lk == 66216        // 'json' 'eq'
         || this.lk == 66728        // 'json' 'every'
         || this.lk == 67752        // 'json' 'except'
         || this.lk == 68264        // 'json' 'exit'
         || this.lk == 68776        // 'json' 'external'
         || this.lk == 69288        // 'json' 'false'
         || this.lk == 69800        // 'json' 'first'
         || this.lk == 70312        // 'json' 'following'
         || this.lk == 70824        // 'json' 'following-sibling'
         || this.lk == 71336        // 'json' 'for'
         || this.lk == 72872        // 'json' 'from'
         || this.lk == 73384        // 'json' 'ft-option'
         || this.lk == 75432        // 'json' 'function'
         || this.lk == 75944        // 'json' 'ge'
         || this.lk == 76968        // 'json' 'group'
         || this.lk == 77992        // 'json' 'gt'
         || this.lk == 78504        // 'json' 'idiv'
         || this.lk == 79016        // 'json' 'if'
         || this.lk == 79528        // 'json' 'import'
         || this.lk == 80040        // 'json' 'in'
         || this.lk == 80552        // 'json' 'index'
         || this.lk == 82600        // 'json' 'insert'
         || this.lk == 83112        // 'json' 'instance'
         || this.lk == 83624        // 'json' 'integrity'
         || this.lk == 84136        // 'json' 'intersect'
         || this.lk == 84648        // 'json' 'into'
         || this.lk == 85160        // 'json' 'is'
         || this.lk == 85672        // 'json' 'item'
         || this.lk == 86184        // 'json' 'json'
         || this.lk == 86696        // 'json' 'json-item'
         || this.lk == 87208        // 'json' 'jsoniq'
         || this.lk == 88744        // 'json' 'last'
         || this.lk == 89256        // 'json' 'lax'
         || this.lk == 89768        // 'json' 'le'
         || this.lk == 90792        // 'json' 'let'
         || this.lk == 91816        // 'json' 'loop'
         || this.lk == 92840        // 'json' 'lt'
         || this.lk == 93864        // 'json' 'mod'
         || this.lk == 94376        // 'json' 'modify'
         || this.lk == 94888        // 'json' 'module'
         || this.lk == 95912        // 'json' 'namespace'
         || this.lk == 96424        // 'json' 'namespace-node'
         || this.lk == 96936        // 'json' 'ne'
         || this.lk == 99496        // 'json' 'node'
         || this.lk == 100008       // 'json' 'nodes'
         || this.lk == 100520       // 'json' 'not'
         || this.lk == 101032       // 'json' 'null'
         || this.lk == 101544       // 'json' 'object'
         || this.lk == 103592       // 'json' 'only'
         || this.lk == 104104       // 'json' 'option'
         || this.lk == 104616       // 'json' 'or'
         || this.lk == 105128       // 'json' 'order'
         || this.lk == 105640       // 'json' 'ordered'
         || this.lk == 106152       // 'json' 'ordering'
         || this.lk == 107688       // 'json' 'parent'
         || this.lk == 110760       // 'json' 'preceding'
         || this.lk == 111272       // 'json' 'preceding-sibling'
         || this.lk == 112808       // 'json' 'processing-instruction'
         || this.lk == 113832       // 'json' 'rename'
         || this.lk == 114344       // 'json' 'replace'
         || this.lk == 114856       // 'json' 'return'
         || this.lk == 115368       // 'json' 'returning'
         || this.lk == 115880       // 'json' 'revalidation'
         || this.lk == 116904       // 'json' 'satisfies'
         || this.lk == 117416       // 'json' 'schema'
         || this.lk == 117928       // 'json' 'schema-attribute'
         || this.lk == 118440       // 'json' 'schema-element'
         || this.lk == 118952       // 'json' 'score'
         || this.lk == 119464       // 'json' 'select'
         || this.lk == 119976       // 'json' 'self'
         || this.lk == 122536       // 'json' 'sliding'
         || this.lk == 123048       // 'json' 'some'
         || this.lk == 123560       // 'json' 'stable'
         || this.lk == 124072       // 'json' 'start'
         || this.lk == 125608       // 'json' 'strict'
         || this.lk == 126632       // 'json' 'structured-item'
         || this.lk == 127144       // 'json' 'switch'
         || this.lk == 127656       // 'json' 'text'
         || this.lk == 129704       // 'json' 'to'
         || this.lk == 130216       // 'json' 'treat'
         || this.lk == 130728       // 'json' 'true'
         || this.lk == 131240       // 'json' 'try'
         || this.lk == 131752       // 'json' 'tumbling'
         || this.lk == 132264       // 'json' 'type'
         || this.lk == 132776       // 'json' 'typeswitch'
         || this.lk == 133288       // 'json' 'union'
         || this.lk == 134312       // 'json' 'unordered'
         || this.lk == 134824       // 'json' 'updating'
         || this.lk == 136360       // 'json' 'validate'
         || this.lk == 136872       // 'json' 'value'
         || this.lk == 137384       // 'json' 'variable'
         || this.lk == 137896       // 'json' 'version'
         || this.lk == 139432       // 'json' 'where'
         || this.lk == 139944       // 'json' 'while'
         || this.lk == 141480       // 'json' 'with'
         || this.lk == 144040       // 'json' '{'
         || this.lk == 145064)      // 'json' '{|'
        {
          this.shift(168);          // 'json'
        }
        this.lookahead1W(266);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
        this.whitespace();
        this.parse_ExprSingle();
        this.shift(165);            // 'into'
        this.lookahead1W(266);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
        this.whitespace();
        this.parse_ExprSingle();
        switch (this.l1)
        {
        case 82:                    // 'at'
          this.lookahead2W(72);     // S^WS | '(:' | 'position'
          break;
        default:
          this.lk = this.l1;
        }
        if (this.lk == 110162)      // 'at' 'position'
        {
          this.lk = this.memoized(14, this.e0);
          if (this.lk == 0)
          {
            var b0B = this.b0; var e0B = this.e0; var l1B = this.l1;
            var b1B = this.b1; var e1B = this.e1; var l2B = this.l2;
            var b2B = this.b2; var e2B = this.e2;
            try
            {
              this.shiftT(82);      // 'at'
              this.lookahead1W(72); // S^WS | '(:' | 'position'
              this.shiftT(215);     // 'position'
              this.lookahead1W(266); // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                     // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                     // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                     // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                     // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                     // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                     // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                     // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                     // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                     // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                     // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                     // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                     // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                     // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                     // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                     // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                     // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                     // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                     // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                     // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' |
                                     // 'schema-element' | 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' |
                                     // 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' |
                                     // 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                     // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                     // 'with' | '{' | '{|'
              this.try_ExprSingle();
              this.lk = -1;
            }
            catch (p1B)
            {
              this.lk = -2;
            }
            this.b0 = b0B; this.e0 = e0B; this.l1 = l1B; if (this.l1 == 0) {this.end = e0B;} else {
            this.b1 = b1B; this.e1 = e1B; this.l2 = l2B; if (this.l2 == 0) {this.end = e1B;} else {
            this.b2 = b2B; this.e2 = e2B; this.end = e2B; }}
            this.memoize(14, this.e0, this.lk);
          }
        }
        if (this.lk == -1)
        {
          this.shift(82);           // 'at'
          this.lookahead1W(72);     // S^WS | '(:' | 'position'
          this.shift(215);          // 'position'
          this.lookahead1W(266);    // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
          this.whitespace();
          this.parse_ExprSingle();
        }
        break;
      default:
        this.shift(161);            // 'insert'
        this.lookahead1W(267);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // NCName^Token | S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' |
                                    // '//' | '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
        switch (this.l1)
        {
        case 168:                   // 'json'
          this.lookahead2W(281);    // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // NCName^Token | S^WS | '#' | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' |
                                    // '/' | '//' | ':' | '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
          break;
        default:
          this.lk = this.l1;
        }
        if (this.lk == 18088)       // 'json' '('
        {
          this.lk = this.memoized(15, this.e0);
          if (this.lk == 0)
          {
            var b0B = this.b0; var e0B = this.e0; var l1B = this.l1;
            var b1B = this.b1; var e1B = this.e1; var l2B = this.l2;
            var b2B = this.b2; var e2B = this.e2;
            try
            {
              this.shiftT(168);     // 'json'
              this.lk = -1;
            }
            catch (p1B)
            {
              this.lk = -2;
            }
            this.b0 = b0B; this.e0 = e0B; this.l1 = l1B; if (this.l1 == 0) {this.end = e0B;} else {
            this.b1 = b1B; this.e1 = e1B; this.l2 = l2B; if (this.l2 == 0) {this.end = e1B;} else {
            this.b2 = b2B; this.e2 = e2B; this.end = e2B; }}
            this.memoize(15, this.e0, this.lk);
          }
        }
        if (this.lk == -1
         || this.lk == 3240         // 'json' EQName^Token
         || this.lk == 4264         // 'json' IntegerLiteral
         || this.lk == 4776         // 'json' DecimalLiteral
         || this.lk == 5288         // 'json' DoubleLiteral
         || this.lk == 5800         // 'json' StringLiteral
         || this.lk == 9896         // 'json' NCName^Token
         || this.lk == 16040        // 'json' '$'
         || this.lk == 16552        // 'json' '$$'
         || this.lk == 17064        // 'json' '%'
         || this.lk == 18600        // 'json' '(#'
         || this.lk == 21160        // 'json' '+'
         || this.lk == 22184        // 'json' '-'
         || this.lk == 24232        // 'json' '/'
         || this.lk == 24744        // 'json' '//'
         || this.lk == 28328        // 'json' '<'
         || this.lk == 28840        // 'json' '<!--'
         || this.lk == 30888        // 'json' '<?'
         || this.lk == 35496        // 'json' '['
         || this.lk == 36520        // 'json' 'after'
         || this.lk == 37544        // 'json' 'allowing'
         || this.lk == 38056        // 'json' 'ancestor'
         || this.lk == 38568        // 'json' 'ancestor-or-self'
         || this.lk == 39080        // 'json' 'and'
         || this.lk == 40104        // 'json' 'append'
         || this.lk == 40616        // 'json' 'array'
         || this.lk == 41128        // 'json' 'as'
         || this.lk == 41640        // 'json' 'ascending'
         || this.lk == 42152        // 'json' 'at'
         || this.lk == 42664        // 'json' 'attribute'
         || this.lk == 43176        // 'json' 'base-uri'
         || this.lk == 43688        // 'json' 'before'
         || this.lk == 44200        // 'json' 'boundary-space'
         || this.lk == 44712        // 'json' 'break'
         || this.lk == 45736        // 'json' 'case'
         || this.lk == 46248        // 'json' 'cast'
         || this.lk == 46760        // 'json' 'castable'
         || this.lk == 47272        // 'json' 'catch'
         || this.lk == 48296        // 'json' 'child'
         || this.lk == 48808        // 'json' 'collation'
         || this.lk == 49832        // 'json' 'comment'
         || this.lk == 50344        // 'json' 'constraint'
         || this.lk == 50856        // 'json' 'construction'
         || this.lk == 52392        // 'json' 'context'
         || this.lk == 52904        // 'json' 'continue'
         || this.lk == 53416        // 'json' 'copy'
         || this.lk == 53928        // 'json' 'copy-namespaces'
         || this.lk == 54440        // 'json' 'count'
         || this.lk == 54952        // 'json' 'decimal-format'
         || this.lk == 55976        // 'json' 'declare'
         || this.lk == 56488        // 'json' 'default'
         || this.lk == 57000        // 'json' 'delete'
         || this.lk == 57512        // 'json' 'descendant'
         || this.lk == 58024        // 'json' 'descendant-or-self'
         || this.lk == 58536        // 'json' 'descending'
         || this.lk == 61096        // 'json' 'div'
         || this.lk == 61608        // 'json' 'document'
         || this.lk == 62120        // 'json' 'document-node'
         || this.lk == 62632        // 'json' 'element'
         || this.lk == 63144        // 'json' 'else'
         || this.lk == 63656        // 'json' 'empty'
         || this.lk == 64168        // 'json' 'empty-sequence'
         || this.lk == 64680        // 'json' 'encoding'
         || this.lk == 65192        // 'json' 'end'
         || this.lk == 66216        // 'json' 'eq'
         || this.lk == 66728        // 'json' 'every'
         || this.lk == 67752        // 'json' 'except'
         || this.lk == 68264        // 'json' 'exit'
         || this.lk == 68776        // 'json' 'external'
         || this.lk == 69288        // 'json' 'false'
         || this.lk == 69800        // 'json' 'first'
         || this.lk == 70312        // 'json' 'following'
         || this.lk == 70824        // 'json' 'following-sibling'
         || this.lk == 71336        // 'json' 'for'
         || this.lk == 72872        // 'json' 'from'
         || this.lk == 73384        // 'json' 'ft-option'
         || this.lk == 75432        // 'json' 'function'
         || this.lk == 75944        // 'json' 'ge'
         || this.lk == 76968        // 'json' 'group'
         || this.lk == 77992        // 'json' 'gt'
         || this.lk == 78504        // 'json' 'idiv'
         || this.lk == 79016        // 'json' 'if'
         || this.lk == 79528        // 'json' 'import'
         || this.lk == 80040        // 'json' 'in'
         || this.lk == 80552        // 'json' 'index'
         || this.lk == 82600        // 'json' 'insert'
         || this.lk == 83112        // 'json' 'instance'
         || this.lk == 83624        // 'json' 'integrity'
         || this.lk == 84136        // 'json' 'intersect'
         || this.lk == 84648        // 'json' 'into'
         || this.lk == 85160        // 'json' 'is'
         || this.lk == 85672        // 'json' 'item'
         || this.lk == 86184        // 'json' 'json'
         || this.lk == 86696        // 'json' 'json-item'
         || this.lk == 87208        // 'json' 'jsoniq'
         || this.lk == 88744        // 'json' 'last'
         || this.lk == 89256        // 'json' 'lax'
         || this.lk == 89768        // 'json' 'le'
         || this.lk == 90792        // 'json' 'let'
         || this.lk == 91816        // 'json' 'loop'
         || this.lk == 92840        // 'json' 'lt'
         || this.lk == 93864        // 'json' 'mod'
         || this.lk == 94376        // 'json' 'modify'
         || this.lk == 94888        // 'json' 'module'
         || this.lk == 95912        // 'json' 'namespace'
         || this.lk == 96424        // 'json' 'namespace-node'
         || this.lk == 96936        // 'json' 'ne'
         || this.lk == 99496        // 'json' 'node'
         || this.lk == 100008       // 'json' 'nodes'
         || this.lk == 100520       // 'json' 'not'
         || this.lk == 101032       // 'json' 'null'
         || this.lk == 101544       // 'json' 'object'
         || this.lk == 103592       // 'json' 'only'
         || this.lk == 104104       // 'json' 'option'
         || this.lk == 104616       // 'json' 'or'
         || this.lk == 105128       // 'json' 'order'
         || this.lk == 105640       // 'json' 'ordered'
         || this.lk == 106152       // 'json' 'ordering'
         || this.lk == 107688       // 'json' 'parent'
         || this.lk == 110760       // 'json' 'preceding'
         || this.lk == 111272       // 'json' 'preceding-sibling'
         || this.lk == 112808       // 'json' 'processing-instruction'
         || this.lk == 113832       // 'json' 'rename'
         || this.lk == 114344       // 'json' 'replace'
         || this.lk == 114856       // 'json' 'return'
         || this.lk == 115368       // 'json' 'returning'
         || this.lk == 115880       // 'json' 'revalidation'
         || this.lk == 116904       // 'json' 'satisfies'
         || this.lk == 117416       // 'json' 'schema'
         || this.lk == 117928       // 'json' 'schema-attribute'
         || this.lk == 118440       // 'json' 'schema-element'
         || this.lk == 118952       // 'json' 'score'
         || this.lk == 119464       // 'json' 'select'
         || this.lk == 119976       // 'json' 'self'
         || this.lk == 122536       // 'json' 'sliding'
         || this.lk == 123048       // 'json' 'some'
         || this.lk == 123560       // 'json' 'stable'
         || this.lk == 124072       // 'json' 'start'
         || this.lk == 125608       // 'json' 'strict'
         || this.lk == 126632       // 'json' 'structured-item'
         || this.lk == 127144       // 'json' 'switch'
         || this.lk == 127656       // 'json' 'text'
         || this.lk == 129704       // 'json' 'to'
         || this.lk == 130216       // 'json' 'treat'
         || this.lk == 130728       // 'json' 'true'
         || this.lk == 131240       // 'json' 'try'
         || this.lk == 131752       // 'json' 'tumbling'
         || this.lk == 132264       // 'json' 'type'
         || this.lk == 132776       // 'json' 'typeswitch'
         || this.lk == 133288       // 'json' 'union'
         || this.lk == 134312       // 'json' 'unordered'
         || this.lk == 134824       // 'json' 'updating'
         || this.lk == 136360       // 'json' 'validate'
         || this.lk == 136872       // 'json' 'value'
         || this.lk == 137384       // 'json' 'variable'
         || this.lk == 137896       // 'json' 'version'
         || this.lk == 139432       // 'json' 'where'
         || this.lk == 139944       // 'json' 'while'
         || this.lk == 141480       // 'json' 'with'
         || this.lk == 144040       // 'json' '{'
         || this.lk == 145064)      // 'json' '{|'
        {
          this.shift(168);          // 'json'
        }
        this.lookahead1W(267);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // NCName^Token | S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' |
                                    // '//' | '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
        this.whitespace();
        this.parse_PairConstructorList();
        this.shift(165);            // 'into'
        this.lookahead1W(266);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
        this.whitespace();
        this.parse_ExprSingle();
      }
      this.eventHandler.endNonterminal("JSONInsertExpr", this.e0);
    }

    private try_JSONInsertExpr()
    {
      switch (this.l1)
      {
      case 161:                     // 'insert'
        this.lookahead2W(267);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // NCName^Token | S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' |
                                    // '//' | '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
        break;
      default:
        this.lk = this.l1;
      }
      if (this.lk != 9889)          // 'insert' NCName^Token
      {
        this.lk = this.memoized(12, this.e0);
        if (this.lk == 0)
        {
          var b0A = this.b0; var e0A = this.e0; var l1A = this.l1;
          var b1A = this.b1; var e1A = this.e1; var l2A = this.l2;
          var b2A = this.b2; var e2A = this.e2;
          try
          {
            this.shiftT(161);       // 'insert'
            this.lookahead1W(266);  // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
            switch (this.l1)
            {
            case 168:               // 'json'
              this.lookahead2W(268); // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                     // S^WS | '#' | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' |
                                     // '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                     // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                     // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                     // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                     // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                     // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                     // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                     // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                     // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                     // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                     // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                     // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                     // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                     // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                     // 'node' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' |
                                     // 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                     // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                     // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                     // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                     // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'structured-item' |
                                     // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                     // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                     // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
              break;
            default:
              this.lk = this.l1;
            }
            if (this.lk == 18088)   // 'json' '('
            {
              this.lk = this.memoized(13, this.e0);
              if (this.lk == 0)
              {
                var b0B = this.b0; var e0B = this.e0; var l1B = this.l1;
                var b1B = this.b1; var e1B = this.e1; var l2B = this.l2;
                var b2B = this.b2; var e2B = this.e2;
                try
                {
                  this.shiftT(168); // 'json'
                  this.memoize(13, e0B, -1);
                }
                catch (p1B)
                {
                  this.b0 = b0B; this.e0 = e0B; this.l1 = l1B; if (this.l1 == 0) {this.end = e0B;} else {
                  this.b1 = b1B; this.e1 = e1B; this.l2 = l2B; if (this.l2 == 0) {this.end = e1B;} else {
                  this.b2 = b2B; this.e2 = e2B; this.end = e2B; }}
                  this.memoize(13, e0B, -2);
                }
                this.lk = -2;
              }
            }
            if (this.lk == -1
             || this.lk == 3240     // 'json' EQName^Token
             || this.lk == 4264     // 'json' IntegerLiteral
             || this.lk == 4776     // 'json' DecimalLiteral
             || this.lk == 5288     // 'json' DoubleLiteral
             || this.lk == 5800     // 'json' StringLiteral
             || this.lk == 16040    // 'json' '$'
             || this.lk == 16552    // 'json' '$$'
             || this.lk == 17064    // 'json' '%'
             || this.lk == 18600    // 'json' '(#'
             || this.lk == 21160    // 'json' '+'
             || this.lk == 22184    // 'json' '-'
             || this.lk == 24232    // 'json' '/'
             || this.lk == 24744    // 'json' '//'
             || this.lk == 28328    // 'json' '<'
             || this.lk == 28840    // 'json' '<!--'
             || this.lk == 30888    // 'json' '<?'
             || this.lk == 35496    // 'json' '['
             || this.lk == 36520    // 'json' 'after'
             || this.lk == 37544    // 'json' 'allowing'
             || this.lk == 38056    // 'json' 'ancestor'
             || this.lk == 38568    // 'json' 'ancestor-or-self'
             || this.lk == 39080    // 'json' 'and'
             || this.lk == 40104    // 'json' 'append'
             || this.lk == 40616    // 'json' 'array'
             || this.lk == 41128    // 'json' 'as'
             || this.lk == 41640    // 'json' 'ascending'
             || this.lk == 42152    // 'json' 'at'
             || this.lk == 42664    // 'json' 'attribute'
             || this.lk == 43176    // 'json' 'base-uri'
             || this.lk == 43688    // 'json' 'before'
             || this.lk == 44200    // 'json' 'boundary-space'
             || this.lk == 44712    // 'json' 'break'
             || this.lk == 45736    // 'json' 'case'
             || this.lk == 46248    // 'json' 'cast'
             || this.lk == 46760    // 'json' 'castable'
             || this.lk == 47272    // 'json' 'catch'
             || this.lk == 48296    // 'json' 'child'
             || this.lk == 48808    // 'json' 'collation'
             || this.lk == 49832    // 'json' 'comment'
             || this.lk == 50344    // 'json' 'constraint'
             || this.lk == 50856    // 'json' 'construction'
             || this.lk == 52392    // 'json' 'context'
             || this.lk == 52904    // 'json' 'continue'
             || this.lk == 53416    // 'json' 'copy'
             || this.lk == 53928    // 'json' 'copy-namespaces'
             || this.lk == 54440    // 'json' 'count'
             || this.lk == 54952    // 'json' 'decimal-format'
             || this.lk == 55976    // 'json' 'declare'
             || this.lk == 56488    // 'json' 'default'
             || this.lk == 57000    // 'json' 'delete'
             || this.lk == 57512    // 'json' 'descendant'
             || this.lk == 58024    // 'json' 'descendant-or-self'
             || this.lk == 58536    // 'json' 'descending'
             || this.lk == 61096    // 'json' 'div'
             || this.lk == 61608    // 'json' 'document'
             || this.lk == 62120    // 'json' 'document-node'
             || this.lk == 62632    // 'json' 'element'
             || this.lk == 63144    // 'json' 'else'
             || this.lk == 63656    // 'json' 'empty'
             || this.lk == 64168    // 'json' 'empty-sequence'
             || this.lk == 64680    // 'json' 'encoding'
             || this.lk == 65192    // 'json' 'end'
             || this.lk == 66216    // 'json' 'eq'
             || this.lk == 66728    // 'json' 'every'
             || this.lk == 67752    // 'json' 'except'
             || this.lk == 68264    // 'json' 'exit'
             || this.lk == 68776    // 'json' 'external'
             || this.lk == 69288    // 'json' 'false'
             || this.lk == 69800    // 'json' 'first'
             || this.lk == 70312    // 'json' 'following'
             || this.lk == 70824    // 'json' 'following-sibling'
             || this.lk == 71336    // 'json' 'for'
             || this.lk == 72872    // 'json' 'from'
             || this.lk == 73384    // 'json' 'ft-option'
             || this.lk == 75432    // 'json' 'function'
             || this.lk == 75944    // 'json' 'ge'
             || this.lk == 76968    // 'json' 'group'
             || this.lk == 77992    // 'json' 'gt'
             || this.lk == 78504    // 'json' 'idiv'
             || this.lk == 79016    // 'json' 'if'
             || this.lk == 79528    // 'json' 'import'
             || this.lk == 80040    // 'json' 'in'
             || this.lk == 80552    // 'json' 'index'
             || this.lk == 82600    // 'json' 'insert'
             || this.lk == 83112    // 'json' 'instance'
             || this.lk == 83624    // 'json' 'integrity'
             || this.lk == 84136    // 'json' 'intersect'
             || this.lk == 84648    // 'json' 'into'
             || this.lk == 85160    // 'json' 'is'
             || this.lk == 85672    // 'json' 'item'
             || this.lk == 86184    // 'json' 'json'
             || this.lk == 86696    // 'json' 'json-item'
             || this.lk == 87208    // 'json' 'jsoniq'
             || this.lk == 88744    // 'json' 'last'
             || this.lk == 89256    // 'json' 'lax'
             || this.lk == 89768    // 'json' 'le'
             || this.lk == 90792    // 'json' 'let'
             || this.lk == 91816    // 'json' 'loop'
             || this.lk == 92840    // 'json' 'lt'
             || this.lk == 93864    // 'json' 'mod'
             || this.lk == 94376    // 'json' 'modify'
             || this.lk == 94888    // 'json' 'module'
             || this.lk == 95912    // 'json' 'namespace'
             || this.lk == 96424    // 'json' 'namespace-node'
             || this.lk == 96936    // 'json' 'ne'
             || this.lk == 99496    // 'json' 'node'
             || this.lk == 100008   // 'json' 'nodes'
             || this.lk == 100520   // 'json' 'not'
             || this.lk == 101032   // 'json' 'null'
             || this.lk == 101544   // 'json' 'object'
             || this.lk == 103592   // 'json' 'only'
             || this.lk == 104104   // 'json' 'option'
             || this.lk == 104616   // 'json' 'or'
             || this.lk == 105128   // 'json' 'order'
             || this.lk == 105640   // 'json' 'ordered'
             || this.lk == 106152   // 'json' 'ordering'
             || this.lk == 107688   // 'json' 'parent'
             || this.lk == 110760   // 'json' 'preceding'
             || this.lk == 111272   // 'json' 'preceding-sibling'
             || this.lk == 112808   // 'json' 'processing-instruction'
             || this.lk == 113832   // 'json' 'rename'
             || this.lk == 114344   // 'json' 'replace'
             || this.lk == 114856   // 'json' 'return'
             || this.lk == 115368   // 'json' 'returning'
             || this.lk == 115880   // 'json' 'revalidation'
             || this.lk == 116904   // 'json' 'satisfies'
             || this.lk == 117416   // 'json' 'schema'
             || this.lk == 117928   // 'json' 'schema-attribute'
             || this.lk == 118440   // 'json' 'schema-element'
             || this.lk == 118952   // 'json' 'score'
             || this.lk == 119464   // 'json' 'select'
             || this.lk == 119976   // 'json' 'self'
             || this.lk == 122536   // 'json' 'sliding'
             || this.lk == 123048   // 'json' 'some'
             || this.lk == 123560   // 'json' 'stable'
             || this.lk == 124072   // 'json' 'start'
             || this.lk == 125608   // 'json' 'strict'
             || this.lk == 126632   // 'json' 'structured-item'
             || this.lk == 127144   // 'json' 'switch'
             || this.lk == 127656   // 'json' 'text'
             || this.lk == 129704   // 'json' 'to'
             || this.lk == 130216   // 'json' 'treat'
             || this.lk == 130728   // 'json' 'true'
             || this.lk == 131240   // 'json' 'try'
             || this.lk == 131752   // 'json' 'tumbling'
             || this.lk == 132264   // 'json' 'type'
             || this.lk == 132776   // 'json' 'typeswitch'
             || this.lk == 133288   // 'json' 'union'
             || this.lk == 134312   // 'json' 'unordered'
             || this.lk == 134824   // 'json' 'updating'
             || this.lk == 136360   // 'json' 'validate'
             || this.lk == 136872   // 'json' 'value'
             || this.lk == 137384   // 'json' 'variable'
             || this.lk == 137896   // 'json' 'version'
             || this.lk == 139432   // 'json' 'where'
             || this.lk == 139944   // 'json' 'while'
             || this.lk == 141480   // 'json' 'with'
             || this.lk == 144040   // 'json' '{'
             || this.lk == 145064)  // 'json' '{|'
            {
              this.shiftT(168);     // 'json'
            }
            this.lookahead1W(266);  // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
            this.try_ExprSingle();
            this.shiftT(165);       // 'into'
            this.lookahead1W(266);  // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
            this.try_ExprSingle();
            switch (this.l1)
            {
            case 82:                // 'at'
              this.lookahead2W(72); // S^WS | '(:' | 'position'
              break;
            default:
              this.lk = this.l1;
            }
            if (this.lk == 110162)  // 'at' 'position'
            {
              this.lk = this.memoized(14, this.e0);
              if (this.lk == 0)
              {
                var b0B = this.b0; var e0B = this.e0; var l1B = this.l1;
                var b1B = this.b1; var e1B = this.e1; var l2B = this.l2;
                var b2B = this.b2; var e2B = this.e2;
                try
                {
                  this.shiftT(82);  // 'at'
                  this.lookahead1W(72); // S^WS | '(:' | 'position'
                  this.shiftT(215); // 'position'
                  this.lookahead1W(266); // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                         // StringLiteral | S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' |
                                         // '/' | '//' | '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                         // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' |
                                         // 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' |
                                         // 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                         // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                         // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                         // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                         // 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                         // 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' |
                                         // 'external' | 'false' | 'first' | 'following' | 'following-sibling' | 'for' |
                                         // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                         // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                         // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'jsoniq' |
                                         // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                         // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                         // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                         // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                         // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                         // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' |
                                         // 'schema-element' | 'score' | 'select' | 'self' | 'sliding' | 'some' |
                                         // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                         // 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                         // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                         // 'version' | 'where' | 'while' | 'with' | '{' | '{|'
                  this.try_ExprSingle();
                  this.memoize(14, e0B, -1);
                }
                catch (p1B)
                {
                  this.b0 = b0B; this.e0 = e0B; this.l1 = l1B; if (this.l1 == 0) {this.end = e0B;} else {
                  this.b1 = b1B; this.e1 = e1B; this.l2 = l2B; if (this.l2 == 0) {this.end = e1B;} else {
                  this.b2 = b2B; this.e2 = e2B; this.end = e2B; }}
                  this.memoize(14, e0B, -2);
                }
                this.lk = -2;
              }
            }
            if (this.lk == -1)
            {
              this.shiftT(82);      // 'at'
              this.lookahead1W(72); // S^WS | '(:' | 'position'
              this.shiftT(215);     // 'position'
              this.lookahead1W(266); // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                     // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                     // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                     // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                     // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                     // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                     // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                     // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                     // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                     // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                     // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                     // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                     // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                     // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                     // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                     // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                     // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                     // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                     // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                     // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' |
                                     // 'schema-element' | 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' |
                                     // 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' |
                                     // 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                     // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                     // 'with' | '{' | '{|'
              this.try_ExprSingle();
            }
            this.memoize(12, e0A, -1);
            this.lk = -3;
          }
          catch (p1A)
          {
            this.lk = -2;
            this.b0 = b0A; this.e0 = e0A; this.l1 = l1A; if (this.l1 == 0) {this.end = e0A;} else {
            this.b1 = b1A; this.e1 = e1A; this.l2 = l2A; if (this.l2 == 0) {this.end = e1A;} else {
            this.b2 = b2A; this.e2 = e2A; this.end = e2A; }}
            this.memoize(12, e0A, -2);
          }
        }
      }
      switch (this.lk)
      {
      case -1:
        this.shiftT(161);           // 'insert'
        this.lookahead1W(266);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
        switch (this.l1)
        {
        case 168:                   // 'json'
          this.lookahead2W(268);    // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '#' | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' |
                                    // '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
          break;
        default:
          this.lk = this.l1;
        }
        if (this.lk == 18088)       // 'json' '('
        {
          this.lk = this.memoized(13, this.e0);
          if (this.lk == 0)
          {
            var b0B = this.b0; var e0B = this.e0; var l1B = this.l1;
            var b1B = this.b1; var e1B = this.e1; var l2B = this.l2;
            var b2B = this.b2; var e2B = this.e2;
            try
            {
              this.shiftT(168);     // 'json'
              this.memoize(13, e0B, -1);
            }
            catch (p1B)
            {
              this.b0 = b0B; this.e0 = e0B; this.l1 = l1B; if (this.l1 == 0) {this.end = e0B;} else {
              this.b1 = b1B; this.e1 = e1B; this.l2 = l2B; if (this.l2 == 0) {this.end = e1B;} else {
              this.b2 = b2B; this.e2 = e2B; this.end = e2B; }}
              this.memoize(13, e0B, -2);
            }
            this.lk = -2;
          }
        }
        if (this.lk == -1
         || this.lk == 3240         // 'json' EQName^Token
         || this.lk == 4264         // 'json' IntegerLiteral
         || this.lk == 4776         // 'json' DecimalLiteral
         || this.lk == 5288         // 'json' DoubleLiteral
         || this.lk == 5800         // 'json' StringLiteral
         || this.lk == 16040        // 'json' '$'
         || this.lk == 16552        // 'json' '$$'
         || this.lk == 17064        // 'json' '%'
         || this.lk == 18600        // 'json' '(#'
         || this.lk == 21160        // 'json' '+'
         || this.lk == 22184        // 'json' '-'
         || this.lk == 24232        // 'json' '/'
         || this.lk == 24744        // 'json' '//'
         || this.lk == 28328        // 'json' '<'
         || this.lk == 28840        // 'json' '<!--'
         || this.lk == 30888        // 'json' '<?'
         || this.lk == 35496        // 'json' '['
         || this.lk == 36520        // 'json' 'after'
         || this.lk == 37544        // 'json' 'allowing'
         || this.lk == 38056        // 'json' 'ancestor'
         || this.lk == 38568        // 'json' 'ancestor-or-self'
         || this.lk == 39080        // 'json' 'and'
         || this.lk == 40104        // 'json' 'append'
         || this.lk == 40616        // 'json' 'array'
         || this.lk == 41128        // 'json' 'as'
         || this.lk == 41640        // 'json' 'ascending'
         || this.lk == 42152        // 'json' 'at'
         || this.lk == 42664        // 'json' 'attribute'
         || this.lk == 43176        // 'json' 'base-uri'
         || this.lk == 43688        // 'json' 'before'
         || this.lk == 44200        // 'json' 'boundary-space'
         || this.lk == 44712        // 'json' 'break'
         || this.lk == 45736        // 'json' 'case'
         || this.lk == 46248        // 'json' 'cast'
         || this.lk == 46760        // 'json' 'castable'
         || this.lk == 47272        // 'json' 'catch'
         || this.lk == 48296        // 'json' 'child'
         || this.lk == 48808        // 'json' 'collation'
         || this.lk == 49832        // 'json' 'comment'
         || this.lk == 50344        // 'json' 'constraint'
         || this.lk == 50856        // 'json' 'construction'
         || this.lk == 52392        // 'json' 'context'
         || this.lk == 52904        // 'json' 'continue'
         || this.lk == 53416        // 'json' 'copy'
         || this.lk == 53928        // 'json' 'copy-namespaces'
         || this.lk == 54440        // 'json' 'count'
         || this.lk == 54952        // 'json' 'decimal-format'
         || this.lk == 55976        // 'json' 'declare'
         || this.lk == 56488        // 'json' 'default'
         || this.lk == 57000        // 'json' 'delete'
         || this.lk == 57512        // 'json' 'descendant'
         || this.lk == 58024        // 'json' 'descendant-or-self'
         || this.lk == 58536        // 'json' 'descending'
         || this.lk == 61096        // 'json' 'div'
         || this.lk == 61608        // 'json' 'document'
         || this.lk == 62120        // 'json' 'document-node'
         || this.lk == 62632        // 'json' 'element'
         || this.lk == 63144        // 'json' 'else'
         || this.lk == 63656        // 'json' 'empty'
         || this.lk == 64168        // 'json' 'empty-sequence'
         || this.lk == 64680        // 'json' 'encoding'
         || this.lk == 65192        // 'json' 'end'
         || this.lk == 66216        // 'json' 'eq'
         || this.lk == 66728        // 'json' 'every'
         || this.lk == 67752        // 'json' 'except'
         || this.lk == 68264        // 'json' 'exit'
         || this.lk == 68776        // 'json' 'external'
         || this.lk == 69288        // 'json' 'false'
         || this.lk == 69800        // 'json' 'first'
         || this.lk == 70312        // 'json' 'following'
         || this.lk == 70824        // 'json' 'following-sibling'
         || this.lk == 71336        // 'json' 'for'
         || this.lk == 72872        // 'json' 'from'
         || this.lk == 73384        // 'json' 'ft-option'
         || this.lk == 75432        // 'json' 'function'
         || this.lk == 75944        // 'json' 'ge'
         || this.lk == 76968        // 'json' 'group'
         || this.lk == 77992        // 'json' 'gt'
         || this.lk == 78504        // 'json' 'idiv'
         || this.lk == 79016        // 'json' 'if'
         || this.lk == 79528        // 'json' 'import'
         || this.lk == 80040        // 'json' 'in'
         || this.lk == 80552        // 'json' 'index'
         || this.lk == 82600        // 'json' 'insert'
         || this.lk == 83112        // 'json' 'instance'
         || this.lk == 83624        // 'json' 'integrity'
         || this.lk == 84136        // 'json' 'intersect'
         || this.lk == 84648        // 'json' 'into'
         || this.lk == 85160        // 'json' 'is'
         || this.lk == 85672        // 'json' 'item'
         || this.lk == 86184        // 'json' 'json'
         || this.lk == 86696        // 'json' 'json-item'
         || this.lk == 87208        // 'json' 'jsoniq'
         || this.lk == 88744        // 'json' 'last'
         || this.lk == 89256        // 'json' 'lax'
         || this.lk == 89768        // 'json' 'le'
         || this.lk == 90792        // 'json' 'let'
         || this.lk == 91816        // 'json' 'loop'
         || this.lk == 92840        // 'json' 'lt'
         || this.lk == 93864        // 'json' 'mod'
         || this.lk == 94376        // 'json' 'modify'
         || this.lk == 94888        // 'json' 'module'
         || this.lk == 95912        // 'json' 'namespace'
         || this.lk == 96424        // 'json' 'namespace-node'
         || this.lk == 96936        // 'json' 'ne'
         || this.lk == 99496        // 'json' 'node'
         || this.lk == 100008       // 'json' 'nodes'
         || this.lk == 100520       // 'json' 'not'
         || this.lk == 101032       // 'json' 'null'
         || this.lk == 101544       // 'json' 'object'
         || this.lk == 103592       // 'json' 'only'
         || this.lk == 104104       // 'json' 'option'
         || this.lk == 104616       // 'json' 'or'
         || this.lk == 105128       // 'json' 'order'
         || this.lk == 105640       // 'json' 'ordered'
         || this.lk == 106152       // 'json' 'ordering'
         || this.lk == 107688       // 'json' 'parent'
         || this.lk == 110760       // 'json' 'preceding'
         || this.lk == 111272       // 'json' 'preceding-sibling'
         || this.lk == 112808       // 'json' 'processing-instruction'
         || this.lk == 113832       // 'json' 'rename'
         || this.lk == 114344       // 'json' 'replace'
         || this.lk == 114856       // 'json' 'return'
         || this.lk == 115368       // 'json' 'returning'
         || this.lk == 115880       // 'json' 'revalidation'
         || this.lk == 116904       // 'json' 'satisfies'
         || this.lk == 117416       // 'json' 'schema'
         || this.lk == 117928       // 'json' 'schema-attribute'
         || this.lk == 118440       // 'json' 'schema-element'
         || this.lk == 118952       // 'json' 'score'
         || this.lk == 119464       // 'json' 'select'
         || this.lk == 119976       // 'json' 'self'
         || this.lk == 122536       // 'json' 'sliding'
         || this.lk == 123048       // 'json' 'some'
         || this.lk == 123560       // 'json' 'stable'
         || this.lk == 124072       // 'json' 'start'
         || this.lk == 125608       // 'json' 'strict'
         || this.lk == 126632       // 'json' 'structured-item'
         || this.lk == 127144       // 'json' 'switch'
         || this.lk == 127656       // 'json' 'text'
         || this.lk == 129704       // 'json' 'to'
         || this.lk == 130216       // 'json' 'treat'
         || this.lk == 130728       // 'json' 'true'
         || this.lk == 131240       // 'json' 'try'
         || this.lk == 131752       // 'json' 'tumbling'
         || this.lk == 132264       // 'json' 'type'
         || this.lk == 132776       // 'json' 'typeswitch'
         || this.lk == 133288       // 'json' 'union'
         || this.lk == 134312       // 'json' 'unordered'
         || this.lk == 134824       // 'json' 'updating'
         || this.lk == 136360       // 'json' 'validate'
         || this.lk == 136872       // 'json' 'value'
         || this.lk == 137384       // 'json' 'variable'
         || this.lk == 137896       // 'json' 'version'
         || this.lk == 139432       // 'json' 'where'
         || this.lk == 139944       // 'json' 'while'
         || this.lk == 141480       // 'json' 'with'
         || this.lk == 144040       // 'json' '{'
         || this.lk == 145064)      // 'json' '{|'
        {
          this.shiftT(168);         // 'json'
        }
        this.lookahead1W(266);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
        this.try_ExprSingle();
        this.shiftT(165);           // 'into'
        this.lookahead1W(266);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
        this.try_ExprSingle();
        switch (this.l1)
        {
        case 82:                    // 'at'
          this.lookahead2W(72);     // S^WS | '(:' | 'position'
          break;
        default:
          this.lk = this.l1;
        }
        if (this.lk == 110162)      // 'at' 'position'
        {
          this.lk = this.memoized(14, this.e0);
          if (this.lk == 0)
          {
            var b0B = this.b0; var e0B = this.e0; var l1B = this.l1;
            var b1B = this.b1; var e1B = this.e1; var l2B = this.l2;
            var b2B = this.b2; var e2B = this.e2;
            try
            {
              this.shiftT(82);      // 'at'
              this.lookahead1W(72); // S^WS | '(:' | 'position'
              this.shiftT(215);     // 'position'
              this.lookahead1W(266); // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                     // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                     // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                     // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                     // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                     // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                     // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                     // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                     // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                     // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                     // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                     // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                     // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                     // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                     // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                     // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                     // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                     // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                     // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                     // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' |
                                     // 'schema-element' | 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' |
                                     // 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' |
                                     // 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                     // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                     // 'with' | '{' | '{|'
              this.try_ExprSingle();
              this.memoize(14, e0B, -1);
            }
            catch (p1B)
            {
              this.b0 = b0B; this.e0 = e0B; this.l1 = l1B; if (this.l1 == 0) {this.end = e0B;} else {
              this.b1 = b1B; this.e1 = e1B; this.l2 = l2B; if (this.l2 == 0) {this.end = e1B;} else {
              this.b2 = b2B; this.e2 = e2B; this.end = e2B; }}
              this.memoize(14, e0B, -2);
            }
            this.lk = -2;
          }
        }
        if (this.lk == -1)
        {
          this.shiftT(82);          // 'at'
          this.lookahead1W(72);     // S^WS | '(:' | 'position'
          this.shiftT(215);         // 'position'
          this.lookahead1W(266);    // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
          this.try_ExprSingle();
        }
        break;
      case -3:
        break;
      default:
        this.shiftT(161);           // 'insert'
        this.lookahead1W(267);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // NCName^Token | S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' |
                                    // '//' | '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
        switch (this.l1)
        {
        case 168:                   // 'json'
          this.lookahead2W(281);    // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // NCName^Token | S^WS | '#' | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' |
                                    // '/' | '//' | ':' | '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
          break;
        default:
          this.lk = this.l1;
        }
        if (this.lk == 18088)       // 'json' '('
        {
          this.lk = this.memoized(15, this.e0);
          if (this.lk == 0)
          {
            var b0B = this.b0; var e0B = this.e0; var l1B = this.l1;
            var b1B = this.b1; var e1B = this.e1; var l2B = this.l2;
            var b2B = this.b2; var e2B = this.e2;
            try
            {
              this.shiftT(168);     // 'json'
              this.memoize(15, e0B, -1);
            }
            catch (p1B)
            {
              this.b0 = b0B; this.e0 = e0B; this.l1 = l1B; if (this.l1 == 0) {this.end = e0B;} else {
              this.b1 = b1B; this.e1 = e1B; this.l2 = l2B; if (this.l2 == 0) {this.end = e1B;} else {
              this.b2 = b2B; this.e2 = e2B; this.end = e2B; }}
              this.memoize(15, e0B, -2);
            }
            this.lk = -2;
          }
        }
        if (this.lk == -1
         || this.lk == 3240         // 'json' EQName^Token
         || this.lk == 4264         // 'json' IntegerLiteral
         || this.lk == 4776         // 'json' DecimalLiteral
         || this.lk == 5288         // 'json' DoubleLiteral
         || this.lk == 5800         // 'json' StringLiteral
         || this.lk == 9896         // 'json' NCName^Token
         || this.lk == 16040        // 'json' '$'
         || this.lk == 16552        // 'json' '$$'
         || this.lk == 17064        // 'json' '%'
         || this.lk == 18600        // 'json' '(#'
         || this.lk == 21160        // 'json' '+'
         || this.lk == 22184        // 'json' '-'
         || this.lk == 24232        // 'json' '/'
         || this.lk == 24744        // 'json' '//'
         || this.lk == 28328        // 'json' '<'
         || this.lk == 28840        // 'json' '<!--'
         || this.lk == 30888        // 'json' '<?'
         || this.lk == 35496        // 'json' '['
         || this.lk == 36520        // 'json' 'after'
         || this.lk == 37544        // 'json' 'allowing'
         || this.lk == 38056        // 'json' 'ancestor'
         || this.lk == 38568        // 'json' 'ancestor-or-self'
         || this.lk == 39080        // 'json' 'and'
         || this.lk == 40104        // 'json' 'append'
         || this.lk == 40616        // 'json' 'array'
         || this.lk == 41128        // 'json' 'as'
         || this.lk == 41640        // 'json' 'ascending'
         || this.lk == 42152        // 'json' 'at'
         || this.lk == 42664        // 'json' 'attribute'
         || this.lk == 43176        // 'json' 'base-uri'
         || this.lk == 43688        // 'json' 'before'
         || this.lk == 44200        // 'json' 'boundary-space'
         || this.lk == 44712        // 'json' 'break'
         || this.lk == 45736        // 'json' 'case'
         || this.lk == 46248        // 'json' 'cast'
         || this.lk == 46760        // 'json' 'castable'
         || this.lk == 47272        // 'json' 'catch'
         || this.lk == 48296        // 'json' 'child'
         || this.lk == 48808        // 'json' 'collation'
         || this.lk == 49832        // 'json' 'comment'
         || this.lk == 50344        // 'json' 'constraint'
         || this.lk == 50856        // 'json' 'construction'
         || this.lk == 52392        // 'json' 'context'
         || this.lk == 52904        // 'json' 'continue'
         || this.lk == 53416        // 'json' 'copy'
         || this.lk == 53928        // 'json' 'copy-namespaces'
         || this.lk == 54440        // 'json' 'count'
         || this.lk == 54952        // 'json' 'decimal-format'
         || this.lk == 55976        // 'json' 'declare'
         || this.lk == 56488        // 'json' 'default'
         || this.lk == 57000        // 'json' 'delete'
         || this.lk == 57512        // 'json' 'descendant'
         || this.lk == 58024        // 'json' 'descendant-or-self'
         || this.lk == 58536        // 'json' 'descending'
         || this.lk == 61096        // 'json' 'div'
         || this.lk == 61608        // 'json' 'document'
         || this.lk == 62120        // 'json' 'document-node'
         || this.lk == 62632        // 'json' 'element'
         || this.lk == 63144        // 'json' 'else'
         || this.lk == 63656        // 'json' 'empty'
         || this.lk == 64168        // 'json' 'empty-sequence'
         || this.lk == 64680        // 'json' 'encoding'
         || this.lk == 65192        // 'json' 'end'
         || this.lk == 66216        // 'json' 'eq'
         || this.lk == 66728        // 'json' 'every'
         || this.lk == 67752        // 'json' 'except'
         || this.lk == 68264        // 'json' 'exit'
         || this.lk == 68776        // 'json' 'external'
         || this.lk == 69288        // 'json' 'false'
         || this.lk == 69800        // 'json' 'first'
         || this.lk == 70312        // 'json' 'following'
         || this.lk == 70824        // 'json' 'following-sibling'
         || this.lk == 71336        // 'json' 'for'
         || this.lk == 72872        // 'json' 'from'
         || this.lk == 73384        // 'json' 'ft-option'
         || this.lk == 75432        // 'json' 'function'
         || this.lk == 75944        // 'json' 'ge'
         || this.lk == 76968        // 'json' 'group'
         || this.lk == 77992        // 'json' 'gt'
         || this.lk == 78504        // 'json' 'idiv'
         || this.lk == 79016        // 'json' 'if'
         || this.lk == 79528        // 'json' 'import'
         || this.lk == 80040        // 'json' 'in'
         || this.lk == 80552        // 'json' 'index'
         || this.lk == 82600        // 'json' 'insert'
         || this.lk == 83112        // 'json' 'instance'
         || this.lk == 83624        // 'json' 'integrity'
         || this.lk == 84136        // 'json' 'intersect'
         || this.lk == 84648        // 'json' 'into'
         || this.lk == 85160        // 'json' 'is'
         || this.lk == 85672        // 'json' 'item'
         || this.lk == 86184        // 'json' 'json'
         || this.lk == 86696        // 'json' 'json-item'
         || this.lk == 87208        // 'json' 'jsoniq'
         || this.lk == 88744        // 'json' 'last'
         || this.lk == 89256        // 'json' 'lax'
         || this.lk == 89768        // 'json' 'le'
         || this.lk == 90792        // 'json' 'let'
         || this.lk == 91816        // 'json' 'loop'
         || this.lk == 92840        // 'json' 'lt'
         || this.lk == 93864        // 'json' 'mod'
         || this.lk == 94376        // 'json' 'modify'
         || this.lk == 94888        // 'json' 'module'
         || this.lk == 95912        // 'json' 'namespace'
         || this.lk == 96424        // 'json' 'namespace-node'
         || this.lk == 96936        // 'json' 'ne'
         || this.lk == 99496        // 'json' 'node'
         || this.lk == 100008       // 'json' 'nodes'
         || this.lk == 100520       // 'json' 'not'
         || this.lk == 101032       // 'json' 'null'
         || this.lk == 101544       // 'json' 'object'
         || this.lk == 103592       // 'json' 'only'
         || this.lk == 104104       // 'json' 'option'
         || this.lk == 104616       // 'json' 'or'
         || this.lk == 105128       // 'json' 'order'
         || this.lk == 105640       // 'json' 'ordered'
         || this.lk == 106152       // 'json' 'ordering'
         || this.lk == 107688       // 'json' 'parent'
         || this.lk == 110760       // 'json' 'preceding'
         || this.lk == 111272       // 'json' 'preceding-sibling'
         || this.lk == 112808       // 'json' 'processing-instruction'
         || this.lk == 113832       // 'json' 'rename'
         || this.lk == 114344       // 'json' 'replace'
         || this.lk == 114856       // 'json' 'return'
         || this.lk == 115368       // 'json' 'returning'
         || this.lk == 115880       // 'json' 'revalidation'
         || this.lk == 116904       // 'json' 'satisfies'
         || this.lk == 117416       // 'json' 'schema'
         || this.lk == 117928       // 'json' 'schema-attribute'
         || this.lk == 118440       // 'json' 'schema-element'
         || this.lk == 118952       // 'json' 'score'
         || this.lk == 119464       // 'json' 'select'
         || this.lk == 119976       // 'json' 'self'
         || this.lk == 122536       // 'json' 'sliding'
         || this.lk == 123048       // 'json' 'some'
         || this.lk == 123560       // 'json' 'stable'
         || this.lk == 124072       // 'json' 'start'
         || this.lk == 125608       // 'json' 'strict'
         || this.lk == 126632       // 'json' 'structured-item'
         || this.lk == 127144       // 'json' 'switch'
         || this.lk == 127656       // 'json' 'text'
         || this.lk == 129704       // 'json' 'to'
         || this.lk == 130216       // 'json' 'treat'
         || this.lk == 130728       // 'json' 'true'
         || this.lk == 131240       // 'json' 'try'
         || this.lk == 131752       // 'json' 'tumbling'
         || this.lk == 132264       // 'json' 'type'
         || this.lk == 132776       // 'json' 'typeswitch'
         || this.lk == 133288       // 'json' 'union'
         || this.lk == 134312       // 'json' 'unordered'
         || this.lk == 134824       // 'json' 'updating'
         || this.lk == 136360       // 'json' 'validate'
         || this.lk == 136872       // 'json' 'value'
         || this.lk == 137384       // 'json' 'variable'
         || this.lk == 137896       // 'json' 'version'
         || this.lk == 139432       // 'json' 'where'
         || this.lk == 139944       // 'json' 'while'
         || this.lk == 141480       // 'json' 'with'
         || this.lk == 144040       // 'json' '{'
         || this.lk == 145064)      // 'json' '{|'
        {
          this.shiftT(168);         // 'json'
        }
        this.lookahead1W(267);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // NCName^Token | S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' |
                                    // '//' | '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
        this.try_PairConstructorList();
        this.shiftT(165);           // 'into'
        this.lookahead1W(266);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
        this.try_ExprSingle();
      }
    }

    private parse_JSONRenameExpr()
    {
      this.eventHandler.startNonterminal("JSONRenameExpr", this.e0);
      this.shift(222);              // 'rename'
      this.lookahead1W(259);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(:' | '<' | '<!--' | '<?' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'jsoniq' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'null' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | '{' | '{|'
      switch (this.l1)
      {
      case 168:                     // 'json'
        this.lookahead2W(260);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '#' | '$' | '$$' | '%' | '(' | '(:' | '<' | '<!--' | '<?' | '[' |
                                    // 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'jsoniq' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'null' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | '{' | '{|'
        break;
      default:
        this.lk = this.l1;
      }
      if (this.lk == 18088)         // 'json' '('
      {
        this.lk = this.memoized(16, this.e0);
        if (this.lk == 0)
        {
          var b0A = this.b0; var e0A = this.e0; var l1A = this.l1;
          var b1A = this.b1; var e1A = this.e1; var l2A = this.l2;
          var b2A = this.b2; var e2A = this.e2;
          try
          {
            this.shiftT(168);       // 'json'
            this.lk = -1;
          }
          catch (p1A)
          {
            this.lk = -2;
          }
          this.b0 = b0A; this.e0 = e0A; this.l1 = l1A; if (this.l1 == 0) {this.end = e0A;} else {
          this.b1 = b1A; this.e1 = e1A; this.l2 = l2A; if (this.l2 == 0) {this.end = e1A;} else {
          this.b2 = b2A; this.e2 = e2A; this.end = e2A; }}
          this.memoize(16, this.e0, this.lk);
        }
      }
      if (this.lk == -1
       || this.lk == 3240           // 'json' EQName^Token
       || this.lk == 4264           // 'json' IntegerLiteral
       || this.lk == 4776           // 'json' DecimalLiteral
       || this.lk == 5288           // 'json' DoubleLiteral
       || this.lk == 5800           // 'json' StringLiteral
       || this.lk == 16040          // 'json' '$'
       || this.lk == 16552          // 'json' '$$'
       || this.lk == 17064          // 'json' '%'
       || this.lk == 28328          // 'json' '<'
       || this.lk == 28840          // 'json' '<!--'
       || this.lk == 30888          // 'json' '<?'
       || this.lk == 35496          // 'json' '['
       || this.lk == 36520          // 'json' 'after'
       || this.lk == 37544          // 'json' 'allowing'
       || this.lk == 38056          // 'json' 'ancestor'
       || this.lk == 38568          // 'json' 'ancestor-or-self'
       || this.lk == 39080          // 'json' 'and'
       || this.lk == 40104          // 'json' 'append'
       || this.lk == 40616          // 'json' 'array'
       || this.lk == 41128          // 'json' 'as'
       || this.lk == 41640          // 'json' 'ascending'
       || this.lk == 42152          // 'json' 'at'
       || this.lk == 42664          // 'json' 'attribute'
       || this.lk == 43176          // 'json' 'base-uri'
       || this.lk == 43688          // 'json' 'before'
       || this.lk == 44200          // 'json' 'boundary-space'
       || this.lk == 44712          // 'json' 'break'
       || this.lk == 45736          // 'json' 'case'
       || this.lk == 46248          // 'json' 'cast'
       || this.lk == 46760          // 'json' 'castable'
       || this.lk == 47272          // 'json' 'catch'
       || this.lk == 48296          // 'json' 'child'
       || this.lk == 48808          // 'json' 'collation'
       || this.lk == 49832          // 'json' 'comment'
       || this.lk == 50344          // 'json' 'constraint'
       || this.lk == 50856          // 'json' 'construction'
       || this.lk == 52392          // 'json' 'context'
       || this.lk == 52904          // 'json' 'continue'
       || this.lk == 53416          // 'json' 'copy'
       || this.lk == 53928          // 'json' 'copy-namespaces'
       || this.lk == 54440          // 'json' 'count'
       || this.lk == 54952          // 'json' 'decimal-format'
       || this.lk == 55976          // 'json' 'declare'
       || this.lk == 56488          // 'json' 'default'
       || this.lk == 57000          // 'json' 'delete'
       || this.lk == 57512          // 'json' 'descendant'
       || this.lk == 58024          // 'json' 'descendant-or-self'
       || this.lk == 58536          // 'json' 'descending'
       || this.lk == 61096          // 'json' 'div'
       || this.lk == 61608          // 'json' 'document'
       || this.lk == 62120          // 'json' 'document-node'
       || this.lk == 62632          // 'json' 'element'
       || this.lk == 63144          // 'json' 'else'
       || this.lk == 63656          // 'json' 'empty'
       || this.lk == 64168          // 'json' 'empty-sequence'
       || this.lk == 64680          // 'json' 'encoding'
       || this.lk == 65192          // 'json' 'end'
       || this.lk == 66216          // 'json' 'eq'
       || this.lk == 66728          // 'json' 'every'
       || this.lk == 67752          // 'json' 'except'
       || this.lk == 68264          // 'json' 'exit'
       || this.lk == 68776          // 'json' 'external'
       || this.lk == 69288          // 'json' 'false'
       || this.lk == 69800          // 'json' 'first'
       || this.lk == 70312          // 'json' 'following'
       || this.lk == 70824          // 'json' 'following-sibling'
       || this.lk == 71336          // 'json' 'for'
       || this.lk == 72872          // 'json' 'from'
       || this.lk == 73384          // 'json' 'ft-option'
       || this.lk == 75432          // 'json' 'function'
       || this.lk == 75944          // 'json' 'ge'
       || this.lk == 76968          // 'json' 'group'
       || this.lk == 77992          // 'json' 'gt'
       || this.lk == 78504          // 'json' 'idiv'
       || this.lk == 79016          // 'json' 'if'
       || this.lk == 79528          // 'json' 'import'
       || this.lk == 80040          // 'json' 'in'
       || this.lk == 80552          // 'json' 'index'
       || this.lk == 82600          // 'json' 'insert'
       || this.lk == 83112          // 'json' 'instance'
       || this.lk == 83624          // 'json' 'integrity'
       || this.lk == 84136          // 'json' 'intersect'
       || this.lk == 84648          // 'json' 'into'
       || this.lk == 85160          // 'json' 'is'
       || this.lk == 85672          // 'json' 'item'
       || this.lk == 86184          // 'json' 'json'
       || this.lk == 86696          // 'json' 'json-item'
       || this.lk == 87208          // 'json' 'jsoniq'
       || this.lk == 88744          // 'json' 'last'
       || this.lk == 89256          // 'json' 'lax'
       || this.lk == 89768          // 'json' 'le'
       || this.lk == 90792          // 'json' 'let'
       || this.lk == 91816          // 'json' 'loop'
       || this.lk == 92840          // 'json' 'lt'
       || this.lk == 93864          // 'json' 'mod'
       || this.lk == 94376          // 'json' 'modify'
       || this.lk == 94888          // 'json' 'module'
       || this.lk == 95912          // 'json' 'namespace'
       || this.lk == 96424          // 'json' 'namespace-node'
       || this.lk == 96936          // 'json' 'ne'
       || this.lk == 99496          // 'json' 'node'
       || this.lk == 100008         // 'json' 'nodes'
       || this.lk == 101032         // 'json' 'null'
       || this.lk == 101544         // 'json' 'object'
       || this.lk == 103592         // 'json' 'only'
       || this.lk == 104104         // 'json' 'option'
       || this.lk == 104616         // 'json' 'or'
       || this.lk == 105128         // 'json' 'order'
       || this.lk == 105640         // 'json' 'ordered'
       || this.lk == 106152         // 'json' 'ordering'
       || this.lk == 107688         // 'json' 'parent'
       || this.lk == 110760         // 'json' 'preceding'
       || this.lk == 111272         // 'json' 'preceding-sibling'
       || this.lk == 112808         // 'json' 'processing-instruction'
       || this.lk == 113832         // 'json' 'rename'
       || this.lk == 114344         // 'json' 'replace'
       || this.lk == 114856         // 'json' 'return'
       || this.lk == 115368         // 'json' 'returning'
       || this.lk == 115880         // 'json' 'revalidation'
       || this.lk == 116904         // 'json' 'satisfies'
       || this.lk == 117416         // 'json' 'schema'
       || this.lk == 117928         // 'json' 'schema-attribute'
       || this.lk == 118440         // 'json' 'schema-element'
       || this.lk == 118952         // 'json' 'score'
       || this.lk == 119464         // 'json' 'select'
       || this.lk == 119976         // 'json' 'self'
       || this.lk == 122536         // 'json' 'sliding'
       || this.lk == 123048         // 'json' 'some'
       || this.lk == 123560         // 'json' 'stable'
       || this.lk == 124072         // 'json' 'start'
       || this.lk == 125608         // 'json' 'strict'
       || this.lk == 126632         // 'json' 'structured-item'
       || this.lk == 127144         // 'json' 'switch'
       || this.lk == 127656         // 'json' 'text'
       || this.lk == 129704         // 'json' 'to'
       || this.lk == 130216         // 'json' 'treat'
       || this.lk == 130728         // 'json' 'true'
       || this.lk == 131240         // 'json' 'try'
       || this.lk == 131752         // 'json' 'tumbling'
       || this.lk == 132264         // 'json' 'type'
       || this.lk == 132776         // 'json' 'typeswitch'
       || this.lk == 133288         // 'json' 'union'
       || this.lk == 134312         // 'json' 'unordered'
       || this.lk == 134824         // 'json' 'updating'
       || this.lk == 136360         // 'json' 'validate'
       || this.lk == 136872         // 'json' 'value'
       || this.lk == 137384         // 'json' 'variable'
       || this.lk == 137896         // 'json' 'version'
       || this.lk == 139432         // 'json' 'where'
       || this.lk == 139944         // 'json' 'while'
       || this.lk == 141480         // 'json' 'with'
       || this.lk == 144040         // 'json' '{'
       || this.lk == 145064)        // 'json' '{|'
      {
        this.shift(168);            // 'json'
      }
      this.lookahead1W(259);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(:' | '<' | '<!--' | '<?' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'jsoniq' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'null' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | '{' | '{|'
      this.whitespace();
      this.parse_PostfixExpr();
      this.shift(80);               // 'as'
      this.lookahead1W(266);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.whitespace();
      this.parse_ExprSingle();
      this.eventHandler.endNonterminal("JSONRenameExpr", this.e0);
    }

    private try_JSONRenameExpr()
    {
      this.shiftT(222);             // 'rename'
      this.lookahead1W(259);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(:' | '<' | '<!--' | '<?' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'jsoniq' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'null' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | '{' | '{|'
      switch (this.l1)
      {
      case 168:                     // 'json'
        this.lookahead2W(260);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '#' | '$' | '$$' | '%' | '(' | '(:' | '<' | '<!--' | '<?' | '[' |
                                    // 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'jsoniq' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'null' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | '{' | '{|'
        break;
      default:
        this.lk = this.l1;
      }
      if (this.lk == 18088)         // 'json' '('
      {
        this.lk = this.memoized(16, this.e0);
        if (this.lk == 0)
        {
          var b0A = this.b0; var e0A = this.e0; var l1A = this.l1;
          var b1A = this.b1; var e1A = this.e1; var l2A = this.l2;
          var b2A = this.b2; var e2A = this.e2;
          try
          {
            this.shiftT(168);       // 'json'
            this.memoize(16, e0A, -1);
          }
          catch (p1A)
          {
            this.b0 = b0A; this.e0 = e0A; this.l1 = l1A; if (this.l1 == 0) {this.end = e0A;} else {
            this.b1 = b1A; this.e1 = e1A; this.l2 = l2A; if (this.l2 == 0) {this.end = e1A;} else {
            this.b2 = b2A; this.e2 = e2A; this.end = e2A; }}
            this.memoize(16, e0A, -2);
          }
          this.lk = -2;
        }
      }
      if (this.lk == -1
       || this.lk == 3240           // 'json' EQName^Token
       || this.lk == 4264           // 'json' IntegerLiteral
       || this.lk == 4776           // 'json' DecimalLiteral
       || this.lk == 5288           // 'json' DoubleLiteral
       || this.lk == 5800           // 'json' StringLiteral
       || this.lk == 16040          // 'json' '$'
       || this.lk == 16552          // 'json' '$$'
       || this.lk == 17064          // 'json' '%'
       || this.lk == 28328          // 'json' '<'
       || this.lk == 28840          // 'json' '<!--'
       || this.lk == 30888          // 'json' '<?'
       || this.lk == 35496          // 'json' '['
       || this.lk == 36520          // 'json' 'after'
       || this.lk == 37544          // 'json' 'allowing'
       || this.lk == 38056          // 'json' 'ancestor'
       || this.lk == 38568          // 'json' 'ancestor-or-self'
       || this.lk == 39080          // 'json' 'and'
       || this.lk == 40104          // 'json' 'append'
       || this.lk == 40616          // 'json' 'array'
       || this.lk == 41128          // 'json' 'as'
       || this.lk == 41640          // 'json' 'ascending'
       || this.lk == 42152          // 'json' 'at'
       || this.lk == 42664          // 'json' 'attribute'
       || this.lk == 43176          // 'json' 'base-uri'
       || this.lk == 43688          // 'json' 'before'
       || this.lk == 44200          // 'json' 'boundary-space'
       || this.lk == 44712          // 'json' 'break'
       || this.lk == 45736          // 'json' 'case'
       || this.lk == 46248          // 'json' 'cast'
       || this.lk == 46760          // 'json' 'castable'
       || this.lk == 47272          // 'json' 'catch'
       || this.lk == 48296          // 'json' 'child'
       || this.lk == 48808          // 'json' 'collation'
       || this.lk == 49832          // 'json' 'comment'
       || this.lk == 50344          // 'json' 'constraint'
       || this.lk == 50856          // 'json' 'construction'
       || this.lk == 52392          // 'json' 'context'
       || this.lk == 52904          // 'json' 'continue'
       || this.lk == 53416          // 'json' 'copy'
       || this.lk == 53928          // 'json' 'copy-namespaces'
       || this.lk == 54440          // 'json' 'count'
       || this.lk == 54952          // 'json' 'decimal-format'
       || this.lk == 55976          // 'json' 'declare'
       || this.lk == 56488          // 'json' 'default'
       || this.lk == 57000          // 'json' 'delete'
       || this.lk == 57512          // 'json' 'descendant'
       || this.lk == 58024          // 'json' 'descendant-or-self'
       || this.lk == 58536          // 'json' 'descending'
       || this.lk == 61096          // 'json' 'div'
       || this.lk == 61608          // 'json' 'document'
       || this.lk == 62120          // 'json' 'document-node'
       || this.lk == 62632          // 'json' 'element'
       || this.lk == 63144          // 'json' 'else'
       || this.lk == 63656          // 'json' 'empty'
       || this.lk == 64168          // 'json' 'empty-sequence'
       || this.lk == 64680          // 'json' 'encoding'
       || this.lk == 65192          // 'json' 'end'
       || this.lk == 66216          // 'json' 'eq'
       || this.lk == 66728          // 'json' 'every'
       || this.lk == 67752          // 'json' 'except'
       || this.lk == 68264          // 'json' 'exit'
       || this.lk == 68776          // 'json' 'external'
       || this.lk == 69288          // 'json' 'false'
       || this.lk == 69800          // 'json' 'first'
       || this.lk == 70312          // 'json' 'following'
       || this.lk == 70824          // 'json' 'following-sibling'
       || this.lk == 71336          // 'json' 'for'
       || this.lk == 72872          // 'json' 'from'
       || this.lk == 73384          // 'json' 'ft-option'
       || this.lk == 75432          // 'json' 'function'
       || this.lk == 75944          // 'json' 'ge'
       || this.lk == 76968          // 'json' 'group'
       || this.lk == 77992          // 'json' 'gt'
       || this.lk == 78504          // 'json' 'idiv'
       || this.lk == 79016          // 'json' 'if'
       || this.lk == 79528          // 'json' 'import'
       || this.lk == 80040          // 'json' 'in'
       || this.lk == 80552          // 'json' 'index'
       || this.lk == 82600          // 'json' 'insert'
       || this.lk == 83112          // 'json' 'instance'
       || this.lk == 83624          // 'json' 'integrity'
       || this.lk == 84136          // 'json' 'intersect'
       || this.lk == 84648          // 'json' 'into'
       || this.lk == 85160          // 'json' 'is'
       || this.lk == 85672          // 'json' 'item'
       || this.lk == 86184          // 'json' 'json'
       || this.lk == 86696          // 'json' 'json-item'
       || this.lk == 87208          // 'json' 'jsoniq'
       || this.lk == 88744          // 'json' 'last'
       || this.lk == 89256          // 'json' 'lax'
       || this.lk == 89768          // 'json' 'le'
       || this.lk == 90792          // 'json' 'let'
       || this.lk == 91816          // 'json' 'loop'
       || this.lk == 92840          // 'json' 'lt'
       || this.lk == 93864          // 'json' 'mod'
       || this.lk == 94376          // 'json' 'modify'
       || this.lk == 94888          // 'json' 'module'
       || this.lk == 95912          // 'json' 'namespace'
       || this.lk == 96424          // 'json' 'namespace-node'
       || this.lk == 96936          // 'json' 'ne'
       || this.lk == 99496          // 'json' 'node'
       || this.lk == 100008         // 'json' 'nodes'
       || this.lk == 101032         // 'json' 'null'
       || this.lk == 101544         // 'json' 'object'
       || this.lk == 103592         // 'json' 'only'
       || this.lk == 104104         // 'json' 'option'
       || this.lk == 104616         // 'json' 'or'
       || this.lk == 105128         // 'json' 'order'
       || this.lk == 105640         // 'json' 'ordered'
       || this.lk == 106152         // 'json' 'ordering'
       || this.lk == 107688         // 'json' 'parent'
       || this.lk == 110760         // 'json' 'preceding'
       || this.lk == 111272         // 'json' 'preceding-sibling'
       || this.lk == 112808         // 'json' 'processing-instruction'
       || this.lk == 113832         // 'json' 'rename'
       || this.lk == 114344         // 'json' 'replace'
       || this.lk == 114856         // 'json' 'return'
       || this.lk == 115368         // 'json' 'returning'
       || this.lk == 115880         // 'json' 'revalidation'
       || this.lk == 116904         // 'json' 'satisfies'
       || this.lk == 117416         // 'json' 'schema'
       || this.lk == 117928         // 'json' 'schema-attribute'
       || this.lk == 118440         // 'json' 'schema-element'
       || this.lk == 118952         // 'json' 'score'
       || this.lk == 119464         // 'json' 'select'
       || this.lk == 119976         // 'json' 'self'
       || this.lk == 122536         // 'json' 'sliding'
       || this.lk == 123048         // 'json' 'some'
       || this.lk == 123560         // 'json' 'stable'
       || this.lk == 124072         // 'json' 'start'
       || this.lk == 125608         // 'json' 'strict'
       || this.lk == 126632         // 'json' 'structured-item'
       || this.lk == 127144         // 'json' 'switch'
       || this.lk == 127656         // 'json' 'text'
       || this.lk == 129704         // 'json' 'to'
       || this.lk == 130216         // 'json' 'treat'
       || this.lk == 130728         // 'json' 'true'
       || this.lk == 131240         // 'json' 'try'
       || this.lk == 131752         // 'json' 'tumbling'
       || this.lk == 132264         // 'json' 'type'
       || this.lk == 132776         // 'json' 'typeswitch'
       || this.lk == 133288         // 'json' 'union'
       || this.lk == 134312         // 'json' 'unordered'
       || this.lk == 134824         // 'json' 'updating'
       || this.lk == 136360         // 'json' 'validate'
       || this.lk == 136872         // 'json' 'value'
       || this.lk == 137384         // 'json' 'variable'
       || this.lk == 137896         // 'json' 'version'
       || this.lk == 139432         // 'json' 'where'
       || this.lk == 139944         // 'json' 'while'
       || this.lk == 141480         // 'json' 'with'
       || this.lk == 144040         // 'json' '{'
       || this.lk == 145064)        // 'json' '{|'
      {
        this.shiftT(168);           // 'json'
      }
      this.lookahead1W(259);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(:' | '<' | '<!--' | '<?' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'jsoniq' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'null' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | '{' | '{|'
      this.try_PostfixExpr();
      this.shiftT(80);              // 'as'
      this.lookahead1W(266);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.try_ExprSingle();
    }

    private parse_JSONReplaceExpr()
    {
      this.eventHandler.startNonterminal("JSONReplaceExpr", this.e0);
      this.shift(223);              // 'replace'
      this.lookahead1W(85);         // S^WS | '(:' | 'value'
      this.shift(267);              // 'value'
      this.lookahead1W(67);         // S^WS | '(:' | 'of'
      this.shift(200);              // 'of'
      this.lookahead1W(59);         // S^WS | '(:' | 'json'
      this.shift(168);              // 'json'
      this.lookahead1W(259);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(:' | '<' | '<!--' | '<?' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'jsoniq' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'null' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | '{' | '{|'
      this.whitespace();
      this.parse_PostfixExpr();
      this.shift(276);              // 'with'
      this.lookahead1W(266);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.whitespace();
      this.parse_ExprSingle();
      this.eventHandler.endNonterminal("JSONReplaceExpr", this.e0);
    }

    private try_JSONReplaceExpr()
    {
      this.shiftT(223);             // 'replace'
      this.lookahead1W(85);         // S^WS | '(:' | 'value'
      this.shiftT(267);             // 'value'
      this.lookahead1W(67);         // S^WS | '(:' | 'of'
      this.shiftT(200);             // 'of'
      this.lookahead1W(59);         // S^WS | '(:' | 'json'
      this.shiftT(168);             // 'json'
      this.lookahead1W(259);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(:' | '<' | '<!--' | '<?' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'jsoniq' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'null' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | '{' | '{|'
      this.try_PostfixExpr();
      this.shiftT(276);             // 'with'
      this.lookahead1W(266);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.try_ExprSingle();
    }

    private parse_JSONAppendExpr()
    {
      this.eventHandler.startNonterminal("JSONAppendExpr", this.e0);
      this.shift(78);               // 'append'
      this.lookahead1W(266);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      switch (this.l1)
      {
      case 168:                     // 'json'
        this.lookahead2W(268);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '#' | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' |
                                    // '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
        break;
      default:
        this.lk = this.l1;
      }
      if (this.lk == 18088)         // 'json' '('
      {
        this.lk = this.memoized(17, this.e0);
        if (this.lk == 0)
        {
          var b0A = this.b0; var e0A = this.e0; var l1A = this.l1;
          var b1A = this.b1; var e1A = this.e1; var l2A = this.l2;
          var b2A = this.b2; var e2A = this.e2;
          try
          {
            this.shiftT(168);       // 'json'
            this.lk = -1;
          }
          catch (p1A)
          {
            this.lk = -2;
          }
          this.b0 = b0A; this.e0 = e0A; this.l1 = l1A; if (this.l1 == 0) {this.end = e0A;} else {
          this.b1 = b1A; this.e1 = e1A; this.l2 = l2A; if (this.l2 == 0) {this.end = e1A;} else {
          this.b2 = b2A; this.e2 = e2A; this.end = e2A; }}
          this.memoize(17, this.e0, this.lk);
        }
      }
      if (this.lk == -1
       || this.lk == 3240           // 'json' EQName^Token
       || this.lk == 4264           // 'json' IntegerLiteral
       || this.lk == 4776           // 'json' DecimalLiteral
       || this.lk == 5288           // 'json' DoubleLiteral
       || this.lk == 5800           // 'json' StringLiteral
       || this.lk == 16040          // 'json' '$'
       || this.lk == 16552          // 'json' '$$'
       || this.lk == 17064          // 'json' '%'
       || this.lk == 18600          // 'json' '(#'
       || this.lk == 21160          // 'json' '+'
       || this.lk == 22184          // 'json' '-'
       || this.lk == 24232          // 'json' '/'
       || this.lk == 24744          // 'json' '//'
       || this.lk == 28328          // 'json' '<'
       || this.lk == 28840          // 'json' '<!--'
       || this.lk == 30888          // 'json' '<?'
       || this.lk == 35496          // 'json' '['
       || this.lk == 36520          // 'json' 'after'
       || this.lk == 37544          // 'json' 'allowing'
       || this.lk == 38056          // 'json' 'ancestor'
       || this.lk == 38568          // 'json' 'ancestor-or-self'
       || this.lk == 39080          // 'json' 'and'
       || this.lk == 40104          // 'json' 'append'
       || this.lk == 40616          // 'json' 'array'
       || this.lk == 41128          // 'json' 'as'
       || this.lk == 41640          // 'json' 'ascending'
       || this.lk == 42152          // 'json' 'at'
       || this.lk == 42664          // 'json' 'attribute'
       || this.lk == 43176          // 'json' 'base-uri'
       || this.lk == 43688          // 'json' 'before'
       || this.lk == 44200          // 'json' 'boundary-space'
       || this.lk == 44712          // 'json' 'break'
       || this.lk == 45736          // 'json' 'case'
       || this.lk == 46248          // 'json' 'cast'
       || this.lk == 46760          // 'json' 'castable'
       || this.lk == 47272          // 'json' 'catch'
       || this.lk == 48296          // 'json' 'child'
       || this.lk == 48808          // 'json' 'collation'
       || this.lk == 49832          // 'json' 'comment'
       || this.lk == 50344          // 'json' 'constraint'
       || this.lk == 50856          // 'json' 'construction'
       || this.lk == 52392          // 'json' 'context'
       || this.lk == 52904          // 'json' 'continue'
       || this.lk == 53416          // 'json' 'copy'
       || this.lk == 53928          // 'json' 'copy-namespaces'
       || this.lk == 54440          // 'json' 'count'
       || this.lk == 54952          // 'json' 'decimal-format'
       || this.lk == 55976          // 'json' 'declare'
       || this.lk == 56488          // 'json' 'default'
       || this.lk == 57000          // 'json' 'delete'
       || this.lk == 57512          // 'json' 'descendant'
       || this.lk == 58024          // 'json' 'descendant-or-self'
       || this.lk == 58536          // 'json' 'descending'
       || this.lk == 61096          // 'json' 'div'
       || this.lk == 61608          // 'json' 'document'
       || this.lk == 62120          // 'json' 'document-node'
       || this.lk == 62632          // 'json' 'element'
       || this.lk == 63144          // 'json' 'else'
       || this.lk == 63656          // 'json' 'empty'
       || this.lk == 64168          // 'json' 'empty-sequence'
       || this.lk == 64680          // 'json' 'encoding'
       || this.lk == 65192          // 'json' 'end'
       || this.lk == 66216          // 'json' 'eq'
       || this.lk == 66728          // 'json' 'every'
       || this.lk == 67752          // 'json' 'except'
       || this.lk == 68264          // 'json' 'exit'
       || this.lk == 68776          // 'json' 'external'
       || this.lk == 69288          // 'json' 'false'
       || this.lk == 69800          // 'json' 'first'
       || this.lk == 70312          // 'json' 'following'
       || this.lk == 70824          // 'json' 'following-sibling'
       || this.lk == 71336          // 'json' 'for'
       || this.lk == 72872          // 'json' 'from'
       || this.lk == 73384          // 'json' 'ft-option'
       || this.lk == 75432          // 'json' 'function'
       || this.lk == 75944          // 'json' 'ge'
       || this.lk == 76968          // 'json' 'group'
       || this.lk == 77992          // 'json' 'gt'
       || this.lk == 78504          // 'json' 'idiv'
       || this.lk == 79016          // 'json' 'if'
       || this.lk == 79528          // 'json' 'import'
       || this.lk == 80040          // 'json' 'in'
       || this.lk == 80552          // 'json' 'index'
       || this.lk == 82600          // 'json' 'insert'
       || this.lk == 83112          // 'json' 'instance'
       || this.lk == 83624          // 'json' 'integrity'
       || this.lk == 84136          // 'json' 'intersect'
       || this.lk == 84648          // 'json' 'into'
       || this.lk == 85160          // 'json' 'is'
       || this.lk == 85672          // 'json' 'item'
       || this.lk == 86184          // 'json' 'json'
       || this.lk == 86696          // 'json' 'json-item'
       || this.lk == 87208          // 'json' 'jsoniq'
       || this.lk == 88744          // 'json' 'last'
       || this.lk == 89256          // 'json' 'lax'
       || this.lk == 89768          // 'json' 'le'
       || this.lk == 90792          // 'json' 'let'
       || this.lk == 91816          // 'json' 'loop'
       || this.lk == 92840          // 'json' 'lt'
       || this.lk == 93864          // 'json' 'mod'
       || this.lk == 94376          // 'json' 'modify'
       || this.lk == 94888          // 'json' 'module'
       || this.lk == 95912          // 'json' 'namespace'
       || this.lk == 96424          // 'json' 'namespace-node'
       || this.lk == 96936          // 'json' 'ne'
       || this.lk == 99496          // 'json' 'node'
       || this.lk == 100008         // 'json' 'nodes'
       || this.lk == 100520         // 'json' 'not'
       || this.lk == 101032         // 'json' 'null'
       || this.lk == 101544         // 'json' 'object'
       || this.lk == 103592         // 'json' 'only'
       || this.lk == 104104         // 'json' 'option'
       || this.lk == 104616         // 'json' 'or'
       || this.lk == 105128         // 'json' 'order'
       || this.lk == 105640         // 'json' 'ordered'
       || this.lk == 106152         // 'json' 'ordering'
       || this.lk == 107688         // 'json' 'parent'
       || this.lk == 110760         // 'json' 'preceding'
       || this.lk == 111272         // 'json' 'preceding-sibling'
       || this.lk == 112808         // 'json' 'processing-instruction'
       || this.lk == 113832         // 'json' 'rename'
       || this.lk == 114344         // 'json' 'replace'
       || this.lk == 114856         // 'json' 'return'
       || this.lk == 115368         // 'json' 'returning'
       || this.lk == 115880         // 'json' 'revalidation'
       || this.lk == 116904         // 'json' 'satisfies'
       || this.lk == 117416         // 'json' 'schema'
       || this.lk == 117928         // 'json' 'schema-attribute'
       || this.lk == 118440         // 'json' 'schema-element'
       || this.lk == 118952         // 'json' 'score'
       || this.lk == 119464         // 'json' 'select'
       || this.lk == 119976         // 'json' 'self'
       || this.lk == 122536         // 'json' 'sliding'
       || this.lk == 123048         // 'json' 'some'
       || this.lk == 123560         // 'json' 'stable'
       || this.lk == 124072         // 'json' 'start'
       || this.lk == 125608         // 'json' 'strict'
       || this.lk == 126632         // 'json' 'structured-item'
       || this.lk == 127144         // 'json' 'switch'
       || this.lk == 127656         // 'json' 'text'
       || this.lk == 129704         // 'json' 'to'
       || this.lk == 130216         // 'json' 'treat'
       || this.lk == 130728         // 'json' 'true'
       || this.lk == 131240         // 'json' 'try'
       || this.lk == 131752         // 'json' 'tumbling'
       || this.lk == 132264         // 'json' 'type'
       || this.lk == 132776         // 'json' 'typeswitch'
       || this.lk == 133288         // 'json' 'union'
       || this.lk == 134312         // 'json' 'unordered'
       || this.lk == 134824         // 'json' 'updating'
       || this.lk == 136360         // 'json' 'validate'
       || this.lk == 136872         // 'json' 'value'
       || this.lk == 137384         // 'json' 'variable'
       || this.lk == 137896         // 'json' 'version'
       || this.lk == 139432         // 'json' 'where'
       || this.lk == 139944         // 'json' 'while'
       || this.lk == 141480         // 'json' 'with'
       || this.lk == 144040         // 'json' '{'
       || this.lk == 145064)        // 'json' '{|'
      {
        this.shift(168);            // 'json'
      }
      this.lookahead1W(266);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.whitespace();
      this.parse_ExprSingle();
      this.shift(165);              // 'into'
      this.lookahead1W(266);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.whitespace();
      this.parse_ExprSingle();
      this.eventHandler.endNonterminal("JSONAppendExpr", this.e0);
    }

    private try_JSONAppendExpr()
    {
      this.shiftT(78);              // 'append'
      this.lookahead1W(266);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      switch (this.l1)
      {
      case 168:                     // 'json'
        this.lookahead2W(268);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '#' | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' |
                                    // '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
        break;
      default:
        this.lk = this.l1;
      }
      if (this.lk == 18088)         // 'json' '('
      {
        this.lk = this.memoized(17, this.e0);
        if (this.lk == 0)
        {
          var b0A = this.b0; var e0A = this.e0; var l1A = this.l1;
          var b1A = this.b1; var e1A = this.e1; var l2A = this.l2;
          var b2A = this.b2; var e2A = this.e2;
          try
          {
            this.shiftT(168);       // 'json'
            this.memoize(17, e0A, -1);
          }
          catch (p1A)
          {
            this.b0 = b0A; this.e0 = e0A; this.l1 = l1A; if (this.l1 == 0) {this.end = e0A;} else {
            this.b1 = b1A; this.e1 = e1A; this.l2 = l2A; if (this.l2 == 0) {this.end = e1A;} else {
            this.b2 = b2A; this.e2 = e2A; this.end = e2A; }}
            this.memoize(17, e0A, -2);
          }
          this.lk = -2;
        }
      }
      if (this.lk == -1
       || this.lk == 3240           // 'json' EQName^Token
       || this.lk == 4264           // 'json' IntegerLiteral
       || this.lk == 4776           // 'json' DecimalLiteral
       || this.lk == 5288           // 'json' DoubleLiteral
       || this.lk == 5800           // 'json' StringLiteral
       || this.lk == 16040          // 'json' '$'
       || this.lk == 16552          // 'json' '$$'
       || this.lk == 17064          // 'json' '%'
       || this.lk == 18600          // 'json' '(#'
       || this.lk == 21160          // 'json' '+'
       || this.lk == 22184          // 'json' '-'
       || this.lk == 24232          // 'json' '/'
       || this.lk == 24744          // 'json' '//'
       || this.lk == 28328          // 'json' '<'
       || this.lk == 28840          // 'json' '<!--'
       || this.lk == 30888          // 'json' '<?'
       || this.lk == 35496          // 'json' '['
       || this.lk == 36520          // 'json' 'after'
       || this.lk == 37544          // 'json' 'allowing'
       || this.lk == 38056          // 'json' 'ancestor'
       || this.lk == 38568          // 'json' 'ancestor-or-self'
       || this.lk == 39080          // 'json' 'and'
       || this.lk == 40104          // 'json' 'append'
       || this.lk == 40616          // 'json' 'array'
       || this.lk == 41128          // 'json' 'as'
       || this.lk == 41640          // 'json' 'ascending'
       || this.lk == 42152          // 'json' 'at'
       || this.lk == 42664          // 'json' 'attribute'
       || this.lk == 43176          // 'json' 'base-uri'
       || this.lk == 43688          // 'json' 'before'
       || this.lk == 44200          // 'json' 'boundary-space'
       || this.lk == 44712          // 'json' 'break'
       || this.lk == 45736          // 'json' 'case'
       || this.lk == 46248          // 'json' 'cast'
       || this.lk == 46760          // 'json' 'castable'
       || this.lk == 47272          // 'json' 'catch'
       || this.lk == 48296          // 'json' 'child'
       || this.lk == 48808          // 'json' 'collation'
       || this.lk == 49832          // 'json' 'comment'
       || this.lk == 50344          // 'json' 'constraint'
       || this.lk == 50856          // 'json' 'construction'
       || this.lk == 52392          // 'json' 'context'
       || this.lk == 52904          // 'json' 'continue'
       || this.lk == 53416          // 'json' 'copy'
       || this.lk == 53928          // 'json' 'copy-namespaces'
       || this.lk == 54440          // 'json' 'count'
       || this.lk == 54952          // 'json' 'decimal-format'
       || this.lk == 55976          // 'json' 'declare'
       || this.lk == 56488          // 'json' 'default'
       || this.lk == 57000          // 'json' 'delete'
       || this.lk == 57512          // 'json' 'descendant'
       || this.lk == 58024          // 'json' 'descendant-or-self'
       || this.lk == 58536          // 'json' 'descending'
       || this.lk == 61096          // 'json' 'div'
       || this.lk == 61608          // 'json' 'document'
       || this.lk == 62120          // 'json' 'document-node'
       || this.lk == 62632          // 'json' 'element'
       || this.lk == 63144          // 'json' 'else'
       || this.lk == 63656          // 'json' 'empty'
       || this.lk == 64168          // 'json' 'empty-sequence'
       || this.lk == 64680          // 'json' 'encoding'
       || this.lk == 65192          // 'json' 'end'
       || this.lk == 66216          // 'json' 'eq'
       || this.lk == 66728          // 'json' 'every'
       || this.lk == 67752          // 'json' 'except'
       || this.lk == 68264          // 'json' 'exit'
       || this.lk == 68776          // 'json' 'external'
       || this.lk == 69288          // 'json' 'false'
       || this.lk == 69800          // 'json' 'first'
       || this.lk == 70312          // 'json' 'following'
       || this.lk == 70824          // 'json' 'following-sibling'
       || this.lk == 71336          // 'json' 'for'
       || this.lk == 72872          // 'json' 'from'
       || this.lk == 73384          // 'json' 'ft-option'
       || this.lk == 75432          // 'json' 'function'
       || this.lk == 75944          // 'json' 'ge'
       || this.lk == 76968          // 'json' 'group'
       || this.lk == 77992          // 'json' 'gt'
       || this.lk == 78504          // 'json' 'idiv'
       || this.lk == 79016          // 'json' 'if'
       || this.lk == 79528          // 'json' 'import'
       || this.lk == 80040          // 'json' 'in'
       || this.lk == 80552          // 'json' 'index'
       || this.lk == 82600          // 'json' 'insert'
       || this.lk == 83112          // 'json' 'instance'
       || this.lk == 83624          // 'json' 'integrity'
       || this.lk == 84136          // 'json' 'intersect'
       || this.lk == 84648          // 'json' 'into'
       || this.lk == 85160          // 'json' 'is'
       || this.lk == 85672          // 'json' 'item'
       || this.lk == 86184          // 'json' 'json'
       || this.lk == 86696          // 'json' 'json-item'
       || this.lk == 87208          // 'json' 'jsoniq'
       || this.lk == 88744          // 'json' 'last'
       || this.lk == 89256          // 'json' 'lax'
       || this.lk == 89768          // 'json' 'le'
       || this.lk == 90792          // 'json' 'let'
       || this.lk == 91816          // 'json' 'loop'
       || this.lk == 92840          // 'json' 'lt'
       || this.lk == 93864          // 'json' 'mod'
       || this.lk == 94376          // 'json' 'modify'
       || this.lk == 94888          // 'json' 'module'
       || this.lk == 95912          // 'json' 'namespace'
       || this.lk == 96424          // 'json' 'namespace-node'
       || this.lk == 96936          // 'json' 'ne'
       || this.lk == 99496          // 'json' 'node'
       || this.lk == 100008         // 'json' 'nodes'
       || this.lk == 100520         // 'json' 'not'
       || this.lk == 101032         // 'json' 'null'
       || this.lk == 101544         // 'json' 'object'
       || this.lk == 103592         // 'json' 'only'
       || this.lk == 104104         // 'json' 'option'
       || this.lk == 104616         // 'json' 'or'
       || this.lk == 105128         // 'json' 'order'
       || this.lk == 105640         // 'json' 'ordered'
       || this.lk == 106152         // 'json' 'ordering'
       || this.lk == 107688         // 'json' 'parent'
       || this.lk == 110760         // 'json' 'preceding'
       || this.lk == 111272         // 'json' 'preceding-sibling'
       || this.lk == 112808         // 'json' 'processing-instruction'
       || this.lk == 113832         // 'json' 'rename'
       || this.lk == 114344         // 'json' 'replace'
       || this.lk == 114856         // 'json' 'return'
       || this.lk == 115368         // 'json' 'returning'
       || this.lk == 115880         // 'json' 'revalidation'
       || this.lk == 116904         // 'json' 'satisfies'
       || this.lk == 117416         // 'json' 'schema'
       || this.lk == 117928         // 'json' 'schema-attribute'
       || this.lk == 118440         // 'json' 'schema-element'
       || this.lk == 118952         // 'json' 'score'
       || this.lk == 119464         // 'json' 'select'
       || this.lk == 119976         // 'json' 'self'
       || this.lk == 122536         // 'json' 'sliding'
       || this.lk == 123048         // 'json' 'some'
       || this.lk == 123560         // 'json' 'stable'
       || this.lk == 124072         // 'json' 'start'
       || this.lk == 125608         // 'json' 'strict'
       || this.lk == 126632         // 'json' 'structured-item'
       || this.lk == 127144         // 'json' 'switch'
       || this.lk == 127656         // 'json' 'text'
       || this.lk == 129704         // 'json' 'to'
       || this.lk == 130216         // 'json' 'treat'
       || this.lk == 130728         // 'json' 'true'
       || this.lk == 131240         // 'json' 'try'
       || this.lk == 131752         // 'json' 'tumbling'
       || this.lk == 132264         // 'json' 'type'
       || this.lk == 132776         // 'json' 'typeswitch'
       || this.lk == 133288         // 'json' 'union'
       || this.lk == 134312         // 'json' 'unordered'
       || this.lk == 134824         // 'json' 'updating'
       || this.lk == 136360         // 'json' 'validate'
       || this.lk == 136872         // 'json' 'value'
       || this.lk == 137384         // 'json' 'variable'
       || this.lk == 137896         // 'json' 'version'
       || this.lk == 139432         // 'json' 'where'
       || this.lk == 139944         // 'json' 'while'
       || this.lk == 141480         // 'json' 'with'
       || this.lk == 144040         // 'json' '{'
       || this.lk == 145064)        // 'json' '{|'
      {
        this.shiftT(168);           // 'json'
      }
      this.lookahead1W(266);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.try_ExprSingle();
      this.shiftT(165);             // 'into'
      this.lookahead1W(266);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.try_ExprSingle();
    }

    private parse_CommonContent()
    {
      this.eventHandler.startNonterminal("CommonContent", this.e0);
      switch (this.l1)
      {
      case 12:                      // PredefinedEntityRef
        this.shift(12);             // PredefinedEntityRef
        break;
      case 23:                      // CharRef
        this.shift(23);             // CharRef
        break;
      case 282:                     // '{{'
        this.shift(282);            // '{{'
        break;
      case 288:                     // '}}'
        this.shift(288);            // '}}'
        break;
      default:
        this.parse_BlockExpr();
      }
      this.eventHandler.endNonterminal("CommonContent", this.e0);
    }

    private try_CommonContent()
    {
      switch (this.l1)
      {
      case 12:                      // PredefinedEntityRef
        this.shiftT(12);            // PredefinedEntityRef
        break;
      case 23:                      // CharRef
        this.shiftT(23);            // CharRef
        break;
      case 282:                     // '{{'
        this.shiftT(282);           // '{{'
        break;
      case 288:                     // '}}'
        this.shiftT(288);           // '}}'
        break;
      default:
        this.try_BlockExpr();
      }
    }

    private parse_ContentExpr()
    {
      this.eventHandler.startNonterminal("ContentExpr", this.e0);
      this.parse_StatementsAndExpr();
      this.eventHandler.endNonterminal("ContentExpr", this.e0);
    }

    private try_ContentExpr()
    {
      this.try_StatementsAndExpr();
    }

    private parse_CompDocConstructor()
    {
      this.eventHandler.startNonterminal("CompDocConstructor", this.e0);
      this.shift(120);              // 'document'
      this.lookahead1W(90);         // S^WS | '(:' | '{'
      this.whitespace();
      this.parse_BlockExpr();
      this.eventHandler.endNonterminal("CompDocConstructor", this.e0);
    }

    private try_CompDocConstructor()
    {
      this.shiftT(120);             // 'document'
      this.lookahead1W(90);         // S^WS | '(:' | '{'
      this.try_BlockExpr();
    }

    private parse_CompAttrConstructor()
    {
      this.eventHandler.startNonterminal("CompAttrConstructor", this.e0);
      this.shift(83);               // 'attribute'
      this.lookahead1W(249);        // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | '{'
      switch (this.l1)
      {
      case 281:                     // '{'
        this.shift(281);            // '{'
        this.lookahead1W(266);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
        this.whitespace();
        this.parse_Expr();
        this.shift(287);            // '}'
        break;
      default:
        this.whitespace();
        this.parse_EQName();
      }
      this.lookahead1W(90);         // S^WS | '(:' | '{'
      switch (this.l1)
      {
      case 281:                     // '{'
        this.lookahead2W(280);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | ';' |
                                    // '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|' | '}'
        break;
      default:
        this.lk = this.l1;
      }
      if (this.lk == 147225)        // '{' '}'
      {
        this.lk = this.memoized(18, this.e0);
        if (this.lk == 0)
        {
          var b0A = this.b0; var e0A = this.e0; var l1A = this.l1;
          var b1A = this.b1; var e1A = this.e1; var l2A = this.l2;
          var b2A = this.b2; var e2A = this.e2;
          try
          {
            this.shiftT(281);       // '{'
            this.lookahead1W(91);   // S^WS | '(:' | '}'
            this.shiftT(287);       // '}'
            this.lk = -1;
          }
          catch (p1A)
          {
            this.lk = -2;
          }
          this.b0 = b0A; this.e0 = e0A; this.l1 = l1A; if (this.l1 == 0) {this.end = e0A;} else {
          this.b1 = b1A; this.e1 = e1A; this.l2 = l2A; if (this.l2 == 0) {this.end = e1A;} else {
          this.b2 = b2A; this.e2 = e2A; this.end = e2A; }}
          this.memoize(18, this.e0, this.lk);
        }
      }
      switch (this.lk)
      {
      case -1:
        this.shift(281);            // '{'
        this.lookahead1W(91);       // S^WS | '(:' | '}'
        this.shift(287);            // '}'
        break;
      default:
        this.whitespace();
        this.parse_BlockExpr();
      }
      this.eventHandler.endNonterminal("CompAttrConstructor", this.e0);
    }

    private try_CompAttrConstructor()
    {
      this.shiftT(83);              // 'attribute'
      this.lookahead1W(249);        // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | '{'
      switch (this.l1)
      {
      case 281:                     // '{'
        this.shiftT(281);           // '{'
        this.lookahead1W(266);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
        this.try_Expr();
        this.shiftT(287);           // '}'
        break;
      default:
        this.try_EQName();
      }
      this.lookahead1W(90);         // S^WS | '(:' | '{'
      switch (this.l1)
      {
      case 281:                     // '{'
        this.lookahead2W(280);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | ';' |
                                    // '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|' | '}'
        break;
      default:
        this.lk = this.l1;
      }
      if (this.lk == 147225)        // '{' '}'
      {
        this.lk = this.memoized(18, this.e0);
        if (this.lk == 0)
        {
          var b0A = this.b0; var e0A = this.e0; var l1A = this.l1;
          var b1A = this.b1; var e1A = this.e1; var l2A = this.l2;
          var b2A = this.b2; var e2A = this.e2;
          try
          {
            this.shiftT(281);       // '{'
            this.lookahead1W(91);   // S^WS | '(:' | '}'
            this.shiftT(287);       // '}'
            this.memoize(18, e0A, -1);
            this.lk = -3;
          }
          catch (p1A)
          {
            this.lk = -2;
            this.b0 = b0A; this.e0 = e0A; this.l1 = l1A; if (this.l1 == 0) {this.end = e0A;} else {
            this.b1 = b1A; this.e1 = e1A; this.l2 = l2A; if (this.l2 == 0) {this.end = e1A;} else {
            this.b2 = b2A; this.e2 = e2A; this.end = e2A; }}
            this.memoize(18, e0A, -2);
          }
        }
      }
      switch (this.lk)
      {
      case -1:
        this.shiftT(281);           // '{'
        this.lookahead1W(91);       // S^WS | '(:' | '}'
        this.shiftT(287);           // '}'
        break;
      case -3:
        break;
      default:
        this.try_BlockExpr();
      }
    }

    private parse_CompPIConstructor()
    {
      this.eventHandler.startNonterminal("CompPIConstructor", this.e0);
      this.shift(220);              // 'processing-instruction'
      this.lookahead1W(241);        // NCName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'null' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | '{'
      switch (this.l1)
      {
      case 281:                     // '{'
        this.shift(281);            // '{'
        this.lookahead1W(266);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
        this.whitespace();
        this.parse_Expr();
        this.shift(287);            // '}'
        break;
      default:
        this.whitespace();
        this.parse_NCName();
      }
      this.lookahead1W(90);         // S^WS | '(:' | '{'
      switch (this.l1)
      {
      case 281:                     // '{'
        this.lookahead2W(280);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | ';' |
                                    // '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|' | '}'
        break;
      default:
        this.lk = this.l1;
      }
      if (this.lk == 147225)        // '{' '}'
      {
        this.lk = this.memoized(19, this.e0);
        if (this.lk == 0)
        {
          var b0A = this.b0; var e0A = this.e0; var l1A = this.l1;
          var b1A = this.b1; var e1A = this.e1; var l2A = this.l2;
          var b2A = this.b2; var e2A = this.e2;
          try
          {
            this.shiftT(281);       // '{'
            this.lookahead1W(91);   // S^WS | '(:' | '}'
            this.shiftT(287);       // '}'
            this.lk = -1;
          }
          catch (p1A)
          {
            this.lk = -2;
          }
          this.b0 = b0A; this.e0 = e0A; this.l1 = l1A; if (this.l1 == 0) {this.end = e0A;} else {
          this.b1 = b1A; this.e1 = e1A; this.l2 = l2A; if (this.l2 == 0) {this.end = e1A;} else {
          this.b2 = b2A; this.e2 = e2A; this.end = e2A; }}
          this.memoize(19, this.e0, this.lk);
        }
      }
      switch (this.lk)
      {
      case -1:
        this.shift(281);            // '{'
        this.lookahead1W(91);       // S^WS | '(:' | '}'
        this.shift(287);            // '}'
        break;
      default:
        this.whitespace();
        this.parse_BlockExpr();
      }
      this.eventHandler.endNonterminal("CompPIConstructor", this.e0);
    }

    private try_CompPIConstructor()
    {
      this.shiftT(220);             // 'processing-instruction'
      this.lookahead1W(241);        // NCName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'null' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | '{'
      switch (this.l1)
      {
      case 281:                     // '{'
        this.shiftT(281);           // '{'
        this.lookahead1W(266);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
        this.try_Expr();
        this.shiftT(287);           // '}'
        break;
      default:
        this.try_NCName();
      }
      this.lookahead1W(90);         // S^WS | '(:' | '{'
      switch (this.l1)
      {
      case 281:                     // '{'
        this.lookahead2W(280);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | ';' |
                                    // '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|' | '}'
        break;
      default:
        this.lk = this.l1;
      }
      if (this.lk == 147225)        // '{' '}'
      {
        this.lk = this.memoized(19, this.e0);
        if (this.lk == 0)
        {
          var b0A = this.b0; var e0A = this.e0; var l1A = this.l1;
          var b1A = this.b1; var e1A = this.e1; var l2A = this.l2;
          var b2A = this.b2; var e2A = this.e2;
          try
          {
            this.shiftT(281);       // '{'
            this.lookahead1W(91);   // S^WS | '(:' | '}'
            this.shiftT(287);       // '}'
            this.memoize(19, e0A, -1);
            this.lk = -3;
          }
          catch (p1A)
          {
            this.lk = -2;
            this.b0 = b0A; this.e0 = e0A; this.l1 = l1A; if (this.l1 == 0) {this.end = e0A;} else {
            this.b1 = b1A; this.e1 = e1A; this.l2 = l2A; if (this.l2 == 0) {this.end = e1A;} else {
            this.b2 = b2A; this.e2 = e2A; this.end = e2A; }}
            this.memoize(19, e0A, -2);
          }
        }
      }
      switch (this.lk)
      {
      case -1:
        this.shiftT(281);           // '{'
        this.lookahead1W(91);       // S^WS | '(:' | '}'
        this.shiftT(287);           // '}'
        break;
      case -3:
        break;
      default:
        this.try_BlockExpr();
      }
    }

    private parse_CompCommentConstructor()
    {
      this.eventHandler.startNonterminal("CompCommentConstructor", this.e0);
      this.shift(97);               // 'comment'
      this.lookahead1W(90);         // S^WS | '(:' | '{'
      this.whitespace();
      this.parse_BlockExpr();
      this.eventHandler.endNonterminal("CompCommentConstructor", this.e0);
    }

    private try_CompCommentConstructor()
    {
      this.shiftT(97);              // 'comment'
      this.lookahead1W(90);         // S^WS | '(:' | '{'
      this.try_BlockExpr();
    }

    private parse_CompTextConstructor()
    {
      this.eventHandler.startNonterminal("CompTextConstructor", this.e0);
      this.shift(249);              // 'text'
      this.lookahead1W(90);         // S^WS | '(:' | '{'
      this.whitespace();
      this.parse_BlockExpr();
      this.eventHandler.endNonterminal("CompTextConstructor", this.e0);
    }

    private try_CompTextConstructor()
    {
      this.shiftT(249);             // 'text'
      this.lookahead1W(90);         // S^WS | '(:' | '{'
      this.try_BlockExpr();
    }

    private parse_PrimaryExpr()
    {
      this.eventHandler.startNonterminal("PrimaryExpr", this.e0);
      switch (this.l1)
      {
      case 187:                     // 'namespace'
        this.lookahead2W(246);      // NCName^Token | S^WS | '#' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'null' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | '{'
        break;
      case 220:                     // 'processing-instruction'
        this.lookahead2W(244);      // NCName^Token | S^WS | '#' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'null' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | '{'
        break;
      case 281:                     // '{'
        this.lookahead2W(282);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // NCName^Token | S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' |
                                    // '//' | ';' | '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|' | '}'
        break;
      case 83:                      // 'attribute'
      case 122:                     // 'element'
        this.lookahead2W(252);      // EQName^Token | S^WS | '#' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | '{'
        break;
      case 97:                      // 'comment'
      case 249:                     // 'text'
        this.lookahead2W(97);       // S^WS | '#' | '(:' | '{'
        break;
      case 120:                     // 'document'
      case 206:                     // 'ordered'
      case 262:                     // 'unordered'
        this.lookahead2W(148);      // S^WS | '#' | '(' | '(:' | '{'
        break;
      case 135:                     // 'false'
      case 197:                     // 'null'
      case 255:                     // 'true'
        this.lookahead2W(236);      // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '.' |
                                    // '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' |
                                    // 'cast' | 'castable' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' | '||' |
                                    // '|}' | '}'
        break;
      case 6:                       // EQName^Token
      case 71:                      // 'after'
      case 73:                      // 'allowing'
      case 74:                      // 'ancestor'
      case 75:                      // 'ancestor-or-self'
      case 76:                      // 'and'
      case 78:                      // 'append'
      case 80:                      // 'as'
      case 81:                      // 'ascending'
      case 82:                      // 'at'
      case 84:                      // 'base-uri'
      case 85:                      // 'before'
      case 86:                      // 'boundary-space'
      case 87:                      // 'break'
      case 89:                      // 'case'
      case 90:                      // 'cast'
      case 91:                      // 'castable'
      case 92:                      // 'catch'
      case 94:                      // 'child'
      case 95:                      // 'collation'
      case 98:                      // 'constraint'
      case 99:                      // 'construction'
      case 102:                     // 'context'
      case 103:                     // 'continue'
      case 104:                     // 'copy'
      case 105:                     // 'copy-namespaces'
      case 106:                     // 'count'
      case 107:                     // 'decimal-format'
      case 109:                     // 'declare'
      case 110:                     // 'default'
      case 111:                     // 'delete'
      case 112:                     // 'descendant'
      case 113:                     // 'descendant-or-self'
      case 114:                     // 'descending'
      case 119:                     // 'div'
      case 123:                     // 'else'
      case 124:                     // 'empty'
      case 126:                     // 'encoding'
      case 127:                     // 'end'
      case 129:                     // 'eq'
      case 130:                     // 'every'
      case 132:                     // 'except'
      case 133:                     // 'exit'
      case 134:                     // 'external'
      case 136:                     // 'first'
      case 137:                     // 'following'
      case 138:                     // 'following-sibling'
      case 139:                     // 'for'
      case 142:                     // 'from'
      case 143:                     // 'ft-option'
      case 148:                     // 'ge'
      case 150:                     // 'group'
      case 152:                     // 'gt'
      case 153:                     // 'idiv'
      case 155:                     // 'import'
      case 156:                     // 'in'
      case 157:                     // 'index'
      case 161:                     // 'insert'
      case 162:                     // 'instance'
      case 163:                     // 'integrity'
      case 164:                     // 'intersect'
      case 165:                     // 'into'
      case 166:                     // 'is'
      case 168:                     // 'json'
      case 170:                     // 'jsoniq'
      case 173:                     // 'last'
      case 174:                     // 'lax'
      case 175:                     // 'le'
      case 177:                     // 'let'
      case 179:                     // 'loop'
      case 181:                     // 'lt'
      case 183:                     // 'mod'
      case 184:                     // 'modify'
      case 185:                     // 'module'
      case 189:                     // 'ne'
      case 195:                     // 'nodes'
      case 198:                     // 'object'
      case 202:                     // 'only'
      case 203:                     // 'option'
      case 204:                     // 'or'
      case 205:                     // 'order'
      case 207:                     // 'ordering'
      case 210:                     // 'parent'
      case 216:                     // 'preceding'
      case 217:                     // 'preceding-sibling'
      case 222:                     // 'rename'
      case 223:                     // 'replace'
      case 224:                     // 'return'
      case 225:                     // 'returning'
      case 226:                     // 'revalidation'
      case 228:                     // 'satisfies'
      case 229:                     // 'schema'
      case 232:                     // 'score'
      case 233:                     // 'select'
      case 234:                     // 'self'
      case 239:                     // 'sliding'
      case 240:                     // 'some'
      case 241:                     // 'stable'
      case 242:                     // 'start'
      case 245:                     // 'strict'
      case 253:                     // 'to'
      case 254:                     // 'treat'
      case 256:                     // 'try'
      case 257:                     // 'tumbling'
      case 258:                     // 'type'
      case 260:                     // 'union'
      case 263:                     // 'updating'
      case 266:                     // 'validate'
      case 267:                     // 'value'
      case 268:                     // 'variable'
      case 269:                     // 'version'
      case 272:                     // 'where'
      case 273:                     // 'while'
      case 276:                     // 'with'
        this.lookahead2W(95);       // S^WS | '#' | '(' | '(:'
        break;
      default:
        this.lk = this.l1;
      }
      if (this.lk == 3353           // '{' EQName^Token
       || this.lk == 4377           // '{' IntegerLiteral
       || this.lk == 4889           // '{' DecimalLiteral
       || this.lk == 5401           // '{' DoubleLiteral
       || this.lk == 5913           // '{' StringLiteral
       || this.lk == 16153          // '{' '$'
       || this.lk == 16665          // '{' '$$'
       || this.lk == 17177          // '{' '%'
       || this.lk == 18055          // 'false' '('
       || this.lk == 18117          // 'null' '('
       || this.lk == 18175          // 'true' '('
       || this.lk == 18201          // '{' '('
       || this.lk == 18713          // '{' '(#'
       || this.lk == 21273          // '{' '+'
       || this.lk == 22297          // '{' '-'
       || this.lk == 24345          // '{' '/'
       || this.lk == 24857          // '{' '//'
       || this.lk == 28441          // '{' '<'
       || this.lk == 28953          // '{' '<!--'
       || this.lk == 31001          // '{' '<?'
       || this.lk == 35609          // '{' '['
       || this.lk == 36633          // '{' 'after'
       || this.lk == 37657          // '{' 'allowing'
       || this.lk == 38169          // '{' 'ancestor'
       || this.lk == 38681          // '{' 'ancestor-or-self'
       || this.lk == 39193          // '{' 'and'
       || this.lk == 40217          // '{' 'append'
       || this.lk == 40729          // '{' 'array'
       || this.lk == 41241          // '{' 'as'
       || this.lk == 41753          // '{' 'ascending'
       || this.lk == 42265          // '{' 'at'
       || this.lk == 42777          // '{' 'attribute'
       || this.lk == 43289          // '{' 'base-uri'
       || this.lk == 43801          // '{' 'before'
       || this.lk == 44313          // '{' 'boundary-space'
       || this.lk == 44825          // '{' 'break'
       || this.lk == 45849          // '{' 'case'
       || this.lk == 46361          // '{' 'cast'
       || this.lk == 46873          // '{' 'castable'
       || this.lk == 47385          // '{' 'catch'
       || this.lk == 48409          // '{' 'child'
       || this.lk == 48921          // '{' 'collation'
       || this.lk == 49945          // '{' 'comment'
       || this.lk == 50457          // '{' 'constraint'
       || this.lk == 50969          // '{' 'construction'
       || this.lk == 52505          // '{' 'context'
       || this.lk == 53017          // '{' 'continue'
       || this.lk == 53529          // '{' 'copy'
       || this.lk == 54041          // '{' 'copy-namespaces'
       || this.lk == 54553          // '{' 'count'
       || this.lk == 55065          // '{' 'decimal-format'
       || this.lk == 56089          // '{' 'declare'
       || this.lk == 56601          // '{' 'default'
       || this.lk == 57113          // '{' 'delete'
       || this.lk == 57625          // '{' 'descendant'
       || this.lk == 58137          // '{' 'descendant-or-self'
       || this.lk == 58649          // '{' 'descending'
       || this.lk == 61209          // '{' 'div'
       || this.lk == 61721          // '{' 'document'
       || this.lk == 62233          // '{' 'document-node'
       || this.lk == 62745          // '{' 'element'
       || this.lk == 63257          // '{' 'else'
       || this.lk == 63769          // '{' 'empty'
       || this.lk == 64281          // '{' 'empty-sequence'
       || this.lk == 64793          // '{' 'encoding'
       || this.lk == 65305          // '{' 'end'
       || this.lk == 66329          // '{' 'eq'
       || this.lk == 66841          // '{' 'every'
       || this.lk == 67865          // '{' 'except'
       || this.lk == 68377          // '{' 'exit'
       || this.lk == 68889          // '{' 'external'
       || this.lk == 69401          // '{' 'false'
       || this.lk == 69913          // '{' 'first'
       || this.lk == 70425          // '{' 'following'
       || this.lk == 70937          // '{' 'following-sibling'
       || this.lk == 71449          // '{' 'for'
       || this.lk == 72985          // '{' 'from'
       || this.lk == 73497          // '{' 'ft-option'
       || this.lk == 75545          // '{' 'function'
       || this.lk == 76057          // '{' 'ge'
       || this.lk == 77081          // '{' 'group'
       || this.lk == 78105          // '{' 'gt'
       || this.lk == 78617          // '{' 'idiv'
       || this.lk == 79129          // '{' 'if'
       || this.lk == 79641          // '{' 'import'
       || this.lk == 80153          // '{' 'in'
       || this.lk == 80665          // '{' 'index'
       || this.lk == 82713          // '{' 'insert'
       || this.lk == 83225          // '{' 'instance'
       || this.lk == 83737          // '{' 'integrity'
       || this.lk == 84249          // '{' 'intersect'
       || this.lk == 84761          // '{' 'into'
       || this.lk == 85273          // '{' 'is'
       || this.lk == 85785          // '{' 'item'
       || this.lk == 86297          // '{' 'json'
       || this.lk == 86809          // '{' 'json-item'
       || this.lk == 87321          // '{' 'jsoniq'
       || this.lk == 88857          // '{' 'last'
       || this.lk == 89369          // '{' 'lax'
       || this.lk == 89881          // '{' 'le'
       || this.lk == 90905          // '{' 'let'
       || this.lk == 91929          // '{' 'loop'
       || this.lk == 92953          // '{' 'lt'
       || this.lk == 93977          // '{' 'mod'
       || this.lk == 94489          // '{' 'modify'
       || this.lk == 95001          // '{' 'module'
       || this.lk == 96025          // '{' 'namespace'
       || this.lk == 96537          // '{' 'namespace-node'
       || this.lk == 97049          // '{' 'ne'
       || this.lk == 99609          // '{' 'node'
       || this.lk == 100121         // '{' 'nodes'
       || this.lk == 100633         // '{' 'not'
       || this.lk == 101145         // '{' 'null'
       || this.lk == 101657         // '{' 'object'
       || this.lk == 103705         // '{' 'only'
       || this.lk == 104217         // '{' 'option'
       || this.lk == 104729         // '{' 'or'
       || this.lk == 105241         // '{' 'order'
       || this.lk == 105753         // '{' 'ordered'
       || this.lk == 106265         // '{' 'ordering'
       || this.lk == 107801         // '{' 'parent'
       || this.lk == 110873         // '{' 'preceding'
       || this.lk == 111385         // '{' 'preceding-sibling'
       || this.lk == 112921         // '{' 'processing-instruction'
       || this.lk == 113945         // '{' 'rename'
       || this.lk == 114457         // '{' 'replace'
       || this.lk == 114969         // '{' 'return'
       || this.lk == 115481         // '{' 'returning'
       || this.lk == 115993         // '{' 'revalidation'
       || this.lk == 117017         // '{' 'satisfies'
       || this.lk == 117529         // '{' 'schema'
       || this.lk == 118041         // '{' 'schema-attribute'
       || this.lk == 118553         // '{' 'schema-element'
       || this.lk == 119065         // '{' 'score'
       || this.lk == 119577         // '{' 'select'
       || this.lk == 120089         // '{' 'self'
       || this.lk == 122649         // '{' 'sliding'
       || this.lk == 123161         // '{' 'some'
       || this.lk == 123673         // '{' 'stable'
       || this.lk == 124185         // '{' 'start'
       || this.lk == 125721         // '{' 'strict'
       || this.lk == 126745         // '{' 'structured-item'
       || this.lk == 127257         // '{' 'switch'
       || this.lk == 127769         // '{' 'text'
       || this.lk == 129817         // '{' 'to'
       || this.lk == 130329         // '{' 'treat'
       || this.lk == 130841         // '{' 'true'
       || this.lk == 131353         // '{' 'try'
       || this.lk == 131865         // '{' 'tumbling'
       || this.lk == 132377         // '{' 'type'
       || this.lk == 132889         // '{' 'typeswitch'
       || this.lk == 133401         // '{' 'union'
       || this.lk == 134425         // '{' 'unordered'
       || this.lk == 134937         // '{' 'updating'
       || this.lk == 136473         // '{' 'validate'
       || this.lk == 136985         // '{' 'value'
       || this.lk == 137497         // '{' 'variable'
       || this.lk == 138009         // '{' 'version'
       || this.lk == 139545         // '{' 'where'
       || this.lk == 140057         // '{' 'while'
       || this.lk == 141593         // '{' 'with'
       || this.lk == 144153         // '{' '{'
       || this.lk == 145177         // '{' '{|'
       || this.lk == 147225)        // '{' '}'
      {
        this.lk = this.memoized(20, this.e0);
        if (this.lk == 0)
        {
          var b0A = this.b0; var e0A = this.e0; var l1A = this.l1;
          var b1A = this.b1; var e1A = this.e1; var l2A = this.l2;
          var b2A = this.b2; var e2A = this.e2;
          try
          {
            this.try_Literal();
            this.lk = -1;
          }
          catch (p1A)
          {
            try
            {
              this.b0 = b0A; this.e0 = e0A; this.l1 = l1A; if (this.l1 == 0) {this.end = e0A;} else {
              this.b1 = b1A; this.e1 = e1A; this.l2 = l2A; if (this.l2 == 0) {this.end = e1A;} else {
              this.b2 = b2A; this.e2 = e2A; this.end = e2A; }}
              this.try_FunctionCall();
              this.lk = -5;
            }
            catch (p5A)
            {
              try
              {
                this.b0 = b0A; this.e0 = e0A; this.l1 = l1A; if (this.l1 == 0) {this.end = e0A;} else {
                this.b1 = b1A; this.e1 = e1A; this.l2 = l2A; if (this.l2 == 0) {this.end = e1A;} else {
                this.b2 = b2A; this.e2 = e2A; this.end = e2A; }}
                this.try_BlockExpr();
                this.lk = -10;
              }
              catch (p10A)
              {
                this.lk = -11;
              }
            }
          }
          this.b0 = b0A; this.e0 = e0A; this.l1 = l1A; if (this.l1 == 0) {this.end = e0A;} else {
          this.b1 = b1A; this.e1 = e1A; this.l2 = l2A; if (this.l2 == 0) {this.end = e1A;} else {
          this.b2 = b2A; this.e2 = e2A; this.end = e2A; }}
          this.memoize(20, this.e0, this.lk);
        }
      }
      switch (this.lk)
      {
      case -1:
      case 8:                       // IntegerLiteral
      case 9:                       // DecimalLiteral
      case 10:                      // DoubleLiteral
      case 11:                      // StringLiteral
      case 12935:                   // 'false' EOF
      case 12997:                   // 'null' EOF
      case 13055:                   // 'true' EOF
      case 13447:                   // 'false' '!'
      case 13509:                   // 'null' '!'
      case 13567:                   // 'true' '!'
      case 13959:                   // 'false' '!='
      case 14021:                   // 'null' '!='
      case 14079:                   // 'true' '!='
      case 19591:                   // 'false' ')'
      case 19653:                   // 'null' ')'
      case 19711:                   // 'true' ')'
      case 20103:                   // 'false' '*'
      case 20165:                   // 'null' '*'
      case 20223:                   // 'true' '*'
      case 21127:                   // 'false' '+'
      case 21189:                   // 'null' '+'
      case 21247:                   // 'true' '+'
      case 21639:                   // 'false' ','
      case 21701:                   // 'null' ','
      case 21759:                   // 'true' ','
      case 22151:                   // 'false' '-'
      case 22213:                   // 'null' '-'
      case 22271:                   // 'true' '-'
      case 23175:                   // 'false' '.'
      case 23237:                   // 'null' '.'
      case 23295:                   // 'true' '.'
      case 24199:                   // 'false' '/'
      case 24261:                   // 'null' '/'
      case 24319:                   // 'true' '/'
      case 24711:                   // 'false' '//'
      case 24773:                   // 'null' '//'
      case 24831:                   // 'true' '//'
      case 25735:                   // 'false' ':'
      case 25797:                   // 'null' ':'
      case 25855:                   // 'true' ':'
      case 27783:                   // 'false' ';'
      case 27845:                   // 'null' ';'
      case 27903:                   // 'true' ';'
      case 28295:                   // 'false' '<'
      case 28357:                   // 'null' '<'
      case 28415:                   // 'true' '<'
      case 29831:                   // 'false' '<<'
      case 29893:                   // 'null' '<<'
      case 29951:                   // 'true' '<<'
      case 30343:                   // 'false' '<='
      case 30405:                   // 'null' '<='
      case 30463:                   // 'true' '<='
      case 31367:                   // 'false' '='
      case 31429:                   // 'null' '='
      case 31487:                   // 'true' '='
      case 31879:                   // 'false' '>'
      case 31941:                   // 'null' '>'
      case 31999:                   // 'true' '>'
      case 32391:                   // 'false' '>='
      case 32453:                   // 'null' '>='
      case 32511:                   // 'true' '>='
      case 32903:                   // 'false' '>>'
      case 32965:                   // 'null' '>>'
      case 33023:                   // 'true' '>>'
      case 35463:                   // 'false' '['
      case 35525:                   // 'null' '['
      case 35583:                   // 'true' '['
      case 35975:                   // 'false' ']'
      case 36037:                   // 'null' ']'
      case 36095:                   // 'true' ']'
      case 36487:                   // 'false' 'after'
      case 36549:                   // 'null' 'after'
      case 36607:                   // 'true' 'after'
      case 39047:                   // 'false' 'and'
      case 39109:                   // 'null' 'and'
      case 39167:                   // 'true' 'and'
      case 41095:                   // 'false' 'as'
      case 41157:                   // 'null' 'as'
      case 41215:                   // 'true' 'as'
      case 41607:                   // 'false' 'ascending'
      case 41669:                   // 'null' 'ascending'
      case 41727:                   // 'true' 'ascending'
      case 42119:                   // 'false' 'at'
      case 42181:                   // 'null' 'at'
      case 42239:                   // 'true' 'at'
      case 43655:                   // 'false' 'before'
      case 43717:                   // 'null' 'before'
      case 43775:                   // 'true' 'before'
      case 45191:                   // 'false' 'by'
      case 45253:                   // 'null' 'by'
      case 45311:                   // 'true' 'by'
      case 45703:                   // 'false' 'case'
      case 45765:                   // 'null' 'case'
      case 45823:                   // 'true' 'case'
      case 46215:                   // 'false' 'cast'
      case 46277:                   // 'null' 'cast'
      case 46335:                   // 'true' 'cast'
      case 46727:                   // 'false' 'castable'
      case 46789:                   // 'null' 'castable'
      case 46847:                   // 'true' 'castable'
      case 48775:                   // 'false' 'collation'
      case 48837:                   // 'null' 'collation'
      case 48895:                   // 'true' 'collation'
      case 51335:                   // 'false' 'contains'
      case 51397:                   // 'null' 'contains'
      case 51455:                   // 'true' 'contains'
      case 54407:                   // 'false' 'count'
      case 54469:                   // 'null' 'count'
      case 54527:                   // 'true' 'count'
      case 56455:                   // 'false' 'default'
      case 56517:                   // 'null' 'default'
      case 56575:                   // 'true' 'default'
      case 58503:                   // 'false' 'descending'
      case 58565:                   // 'null' 'descending'
      case 58623:                   // 'true' 'descending'
      case 61063:                   // 'false' 'div'
      case 61125:                   // 'null' 'div'
      case 61183:                   // 'true' 'div'
      case 63111:                   // 'false' 'else'
      case 63173:                   // 'null' 'else'
      case 63231:                   // 'true' 'else'
      case 63623:                   // 'false' 'empty'
      case 63685:                   // 'null' 'empty'
      case 63743:                   // 'true' 'empty'
      case 65159:                   // 'false' 'end'
      case 65221:                   // 'null' 'end'
      case 65279:                   // 'true' 'end'
      case 66183:                   // 'false' 'eq'
      case 66245:                   // 'null' 'eq'
      case 66303:                   // 'true' 'eq'
      case 67719:                   // 'false' 'except'
      case 67781:                   // 'null' 'except'
      case 67839:                   // 'true' 'except'
      case 71303:                   // 'false' 'for'
      case 71365:                   // 'null' 'for'
      case 71423:                   // 'true' 'for'
      case 75911:                   // 'false' 'ge'
      case 75973:                   // 'null' 'ge'
      case 76031:                   // 'true' 'ge'
      case 76935:                   // 'false' 'group'
      case 76997:                   // 'null' 'group'
      case 77055:                   // 'true' 'group'
      case 77959:                   // 'false' 'gt'
      case 78021:                   // 'null' 'gt'
      case 78079:                   // 'true' 'gt'
      case 78471:                   // 'false' 'idiv'
      case 78533:                   // 'null' 'idiv'
      case 78591:                   // 'true' 'idiv'
      case 83079:                   // 'false' 'instance'
      case 83141:                   // 'null' 'instance'
      case 83199:                   // 'true' 'instance'
      case 84103:                   // 'false' 'intersect'
      case 84165:                   // 'null' 'intersect'
      case 84223:                   // 'true' 'intersect'
      case 84615:                   // 'false' 'into'
      case 84677:                   // 'null' 'into'
      case 84735:                   // 'true' 'into'
      case 85127:                   // 'false' 'is'
      case 85189:                   // 'null' 'is'
      case 85247:                   // 'true' 'is'
      case 89735:                   // 'false' 'le'
      case 89797:                   // 'null' 'le'
      case 89855:                   // 'true' 'le'
      case 90759:                   // 'false' 'let'
      case 90821:                   // 'null' 'let'
      case 90879:                   // 'true' 'let'
      case 92807:                   // 'false' 'lt'
      case 92869:                   // 'null' 'lt'
      case 92927:                   // 'true' 'lt'
      case 93831:                   // 'false' 'mod'
      case 93893:                   // 'null' 'mod'
      case 93951:                   // 'true' 'mod'
      case 94343:                   // 'false' 'modify'
      case 94405:                   // 'null' 'modify'
      case 94463:                   // 'true' 'modify'
      case 96903:                   // 'false' 'ne'
      case 96965:                   // 'null' 'ne'
      case 97023:                   // 'true' 'ne'
      case 103559:                  // 'false' 'only'
      case 103621:                  // 'null' 'only'
      case 103679:                  // 'true' 'only'
      case 104583:                  // 'false' 'or'
      case 104645:                  // 'null' 'or'
      case 104703:                  // 'true' 'or'
      case 105095:                  // 'false' 'order'
      case 105157:                  // 'null' 'order'
      case 105215:                  // 'true' 'order'
      case 107143:                  // 'false' 'paragraphs'
      case 107205:                  // 'null' 'paragraphs'
      case 107263:                  // 'true' 'paragraphs'
      case 114823:                  // 'false' 'return'
      case 114885:                  // 'null' 'return'
      case 114943:                  // 'true' 'return'
      case 116871:                  // 'false' 'satisfies'
      case 116933:                  // 'null' 'satisfies'
      case 116991:                  // 'true' 'satisfies'
      case 121479:                  // 'false' 'sentences'
      case 121541:                  // 'null' 'sentences'
      case 121599:                  // 'true' 'sentences'
      case 123527:                  // 'false' 'stable'
      case 123589:                  // 'null' 'stable'
      case 123647:                  // 'true' 'stable'
      case 124039:                  // 'false' 'start'
      case 124101:                  // 'null' 'start'
      case 124159:                  // 'true' 'start'
      case 129159:                  // 'false' 'times'
      case 129221:                  // 'null' 'times'
      case 129279:                  // 'true' 'times'
      case 129671:                  // 'false' 'to'
      case 129733:                  // 'null' 'to'
      case 129791:                  // 'true' 'to'
      case 130183:                  // 'false' 'treat'
      case 130245:                  // 'null' 'treat'
      case 130303:                  // 'true' 'treat'
      case 133255:                  // 'false' 'union'
      case 133317:                  // 'null' 'union'
      case 133375:                  // 'true' 'union'
      case 139399:                  // 'false' 'where'
      case 139461:                  // 'null' 'where'
      case 139519:                  // 'true' 'where'
      case 141447:                  // 'false' 'with'
      case 141509:                  // 'null' 'with'
      case 141567:                  // 'true' 'with'
      case 142983:                  // 'false' 'words'
      case 143045:                  // 'null' 'words'
      case 143103:                  // 'true' 'words'
      case 145543:                  // 'false' '|'
      case 145605:                  // 'null' '|'
      case 145663:                  // 'true' '|'
      case 146055:                  // 'false' '||'
      case 146117:                  // 'null' '||'
      case 146175:                  // 'true' '||'
      case 146567:                  // 'false' '|}'
      case 146629:                  // 'null' '|}'
      case 146687:                  // 'true' '|}'
      case 147079:                  // 'false' '}'
      case 147141:                  // 'null' '}'
      case 147199:                  // 'true' '}'
        this.parse_Literal();
        break;
      case 31:                      // '$'
        this.parse_VarRef();
        break;
      case 35:                      // '('
        this.parse_ParenthesizedExpr();
        break;
      case 32:                      // '$$'
        this.parse_ContextItemExpr();
        break;
      case -5:
      case 17926:                   // EQName^Token '('
      case 17991:                   // 'after' '('
      case 17993:                   // 'allowing' '('
      case 17994:                   // 'ancestor' '('
      case 17995:                   // 'ancestor-or-self' '('
      case 17996:                   // 'and' '('
      case 17998:                   // 'append' '('
      case 18000:                   // 'as' '('
      case 18001:                   // 'ascending' '('
      case 18002:                   // 'at' '('
      case 18004:                   // 'base-uri' '('
      case 18005:                   // 'before' '('
      case 18006:                   // 'boundary-space' '('
      case 18007:                   // 'break' '('
      case 18009:                   // 'case' '('
      case 18010:                   // 'cast' '('
      case 18011:                   // 'castable' '('
      case 18012:                   // 'catch' '('
      case 18014:                   // 'child' '('
      case 18015:                   // 'collation' '('
      case 18018:                   // 'constraint' '('
      case 18019:                   // 'construction' '('
      case 18022:                   // 'context' '('
      case 18023:                   // 'continue' '('
      case 18024:                   // 'copy' '('
      case 18025:                   // 'copy-namespaces' '('
      case 18026:                   // 'count' '('
      case 18027:                   // 'decimal-format' '('
      case 18029:                   // 'declare' '('
      case 18030:                   // 'default' '('
      case 18031:                   // 'delete' '('
      case 18032:                   // 'descendant' '('
      case 18033:                   // 'descendant-or-self' '('
      case 18034:                   // 'descending' '('
      case 18039:                   // 'div' '('
      case 18040:                   // 'document' '('
      case 18043:                   // 'else' '('
      case 18044:                   // 'empty' '('
      case 18046:                   // 'encoding' '('
      case 18047:                   // 'end' '('
      case 18049:                   // 'eq' '('
      case 18050:                   // 'every' '('
      case 18052:                   // 'except' '('
      case 18053:                   // 'exit' '('
      case 18054:                   // 'external' '('
      case 18056:                   // 'first' '('
      case 18057:                   // 'following' '('
      case 18058:                   // 'following-sibling' '('
      case 18059:                   // 'for' '('
      case 18062:                   // 'from' '('
      case 18063:                   // 'ft-option' '('
      case 18068:                   // 'ge' '('
      case 18070:                   // 'group' '('
      case 18072:                   // 'gt' '('
      case 18073:                   // 'idiv' '('
      case 18075:                   // 'import' '('
      case 18076:                   // 'in' '('
      case 18077:                   // 'index' '('
      case 18081:                   // 'insert' '('
      case 18082:                   // 'instance' '('
      case 18083:                   // 'integrity' '('
      case 18084:                   // 'intersect' '('
      case 18085:                   // 'into' '('
      case 18086:                   // 'is' '('
      case 18088:                   // 'json' '('
      case 18090:                   // 'jsoniq' '('
      case 18093:                   // 'last' '('
      case 18094:                   // 'lax' '('
      case 18095:                   // 'le' '('
      case 18097:                   // 'let' '('
      case 18099:                   // 'loop' '('
      case 18101:                   // 'lt' '('
      case 18103:                   // 'mod' '('
      case 18104:                   // 'modify' '('
      case 18105:                   // 'module' '('
      case 18107:                   // 'namespace' '('
      case 18109:                   // 'ne' '('
      case 18115:                   // 'nodes' '('
      case 18118:                   // 'object' '('
      case 18122:                   // 'only' '('
      case 18123:                   // 'option' '('
      case 18124:                   // 'or' '('
      case 18125:                   // 'order' '('
      case 18126:                   // 'ordered' '('
      case 18127:                   // 'ordering' '('
      case 18130:                   // 'parent' '('
      case 18136:                   // 'preceding' '('
      case 18137:                   // 'preceding-sibling' '('
      case 18142:                   // 'rename' '('
      case 18143:                   // 'replace' '('
      case 18144:                   // 'return' '('
      case 18145:                   // 'returning' '('
      case 18146:                   // 'revalidation' '('
      case 18148:                   // 'satisfies' '('
      case 18149:                   // 'schema' '('
      case 18152:                   // 'score' '('
      case 18153:                   // 'select' '('
      case 18154:                   // 'self' '('
      case 18159:                   // 'sliding' '('
      case 18160:                   // 'some' '('
      case 18161:                   // 'stable' '('
      case 18162:                   // 'start' '('
      case 18165:                   // 'strict' '('
      case 18173:                   // 'to' '('
      case 18174:                   // 'treat' '('
      case 18176:                   // 'try' '('
      case 18177:                   // 'tumbling' '('
      case 18178:                   // 'type' '('
      case 18180:                   // 'union' '('
      case 18182:                   // 'unordered' '('
      case 18183:                   // 'updating' '('
      case 18186:                   // 'validate' '('
      case 18187:                   // 'value' '('
      case 18188:                   // 'variable' '('
      case 18189:                   // 'version' '('
      case 18192:                   // 'where' '('
      case 18193:                   // 'while' '('
      case 18196:                   // 'with' '('
        this.parse_FunctionCall();
        break;
      case 144078:                  // 'ordered' '{'
        this.parse_OrderedExpr();
        break;
      case 144134:                  // 'unordered' '{'
        this.parse_UnorderedExpr();
        break;
      case 33:                      // '%'
      case 79:                      // 'array'
      case 121:                     // 'document-node'
      case 125:                     // 'empty-sequence'
      case 147:                     // 'function'
      case 154:                     // 'if'
      case 167:                     // 'item'
      case 169:                     // 'json-item'
      case 188:                     // 'namespace-node'
      case 194:                     // 'node'
      case 230:                     // 'schema-attribute'
      case 231:                     // 'schema-element'
      case 247:                     // 'structured-item'
      case 248:                     // 'switch'
      case 259:                     // 'typeswitch'
      case 14854:                   // EQName^Token '#'
      case 14919:                   // 'after' '#'
      case 14921:                   // 'allowing' '#'
      case 14922:                   // 'ancestor' '#'
      case 14923:                   // 'ancestor-or-self' '#'
      case 14924:                   // 'and' '#'
      case 14926:                   // 'append' '#'
      case 14928:                   // 'as' '#'
      case 14929:                   // 'ascending' '#'
      case 14930:                   // 'at' '#'
      case 14931:                   // 'attribute' '#'
      case 14932:                   // 'base-uri' '#'
      case 14933:                   // 'before' '#'
      case 14934:                   // 'boundary-space' '#'
      case 14935:                   // 'break' '#'
      case 14937:                   // 'case' '#'
      case 14938:                   // 'cast' '#'
      case 14939:                   // 'castable' '#'
      case 14940:                   // 'catch' '#'
      case 14942:                   // 'child' '#'
      case 14943:                   // 'collation' '#'
      case 14945:                   // 'comment' '#'
      case 14946:                   // 'constraint' '#'
      case 14947:                   // 'construction' '#'
      case 14950:                   // 'context' '#'
      case 14951:                   // 'continue' '#'
      case 14952:                   // 'copy' '#'
      case 14953:                   // 'copy-namespaces' '#'
      case 14954:                   // 'count' '#'
      case 14955:                   // 'decimal-format' '#'
      case 14957:                   // 'declare' '#'
      case 14958:                   // 'default' '#'
      case 14959:                   // 'delete' '#'
      case 14960:                   // 'descendant' '#'
      case 14961:                   // 'descendant-or-self' '#'
      case 14962:                   // 'descending' '#'
      case 14967:                   // 'div' '#'
      case 14968:                   // 'document' '#'
      case 14970:                   // 'element' '#'
      case 14971:                   // 'else' '#'
      case 14972:                   // 'empty' '#'
      case 14974:                   // 'encoding' '#'
      case 14975:                   // 'end' '#'
      case 14977:                   // 'eq' '#'
      case 14978:                   // 'every' '#'
      case 14980:                   // 'except' '#'
      case 14981:                   // 'exit' '#'
      case 14982:                   // 'external' '#'
      case 14983:                   // 'false' '#'
      case 14984:                   // 'first' '#'
      case 14985:                   // 'following' '#'
      case 14986:                   // 'following-sibling' '#'
      case 14987:                   // 'for' '#'
      case 14990:                   // 'from' '#'
      case 14991:                   // 'ft-option' '#'
      case 14996:                   // 'ge' '#'
      case 14998:                   // 'group' '#'
      case 15000:                   // 'gt' '#'
      case 15001:                   // 'idiv' '#'
      case 15003:                   // 'import' '#'
      case 15004:                   // 'in' '#'
      case 15005:                   // 'index' '#'
      case 15009:                   // 'insert' '#'
      case 15010:                   // 'instance' '#'
      case 15011:                   // 'integrity' '#'
      case 15012:                   // 'intersect' '#'
      case 15013:                   // 'into' '#'
      case 15014:                   // 'is' '#'
      case 15016:                   // 'json' '#'
      case 15018:                   // 'jsoniq' '#'
      case 15021:                   // 'last' '#'
      case 15022:                   // 'lax' '#'
      case 15023:                   // 'le' '#'
      case 15025:                   // 'let' '#'
      case 15027:                   // 'loop' '#'
      case 15029:                   // 'lt' '#'
      case 15031:                   // 'mod' '#'
      case 15032:                   // 'modify' '#'
      case 15033:                   // 'module' '#'
      case 15035:                   // 'namespace' '#'
      case 15037:                   // 'ne' '#'
      case 15043:                   // 'nodes' '#'
      case 15045:                   // 'null' '#'
      case 15046:                   // 'object' '#'
      case 15050:                   // 'only' '#'
      case 15051:                   // 'option' '#'
      case 15052:                   // 'or' '#'
      case 15053:                   // 'order' '#'
      case 15054:                   // 'ordered' '#'
      case 15055:                   // 'ordering' '#'
      case 15058:                   // 'parent' '#'
      case 15064:                   // 'preceding' '#'
      case 15065:                   // 'preceding-sibling' '#'
      case 15068:                   // 'processing-instruction' '#'
      case 15070:                   // 'rename' '#'
      case 15071:                   // 'replace' '#'
      case 15072:                   // 'return' '#'
      case 15073:                   // 'returning' '#'
      case 15074:                   // 'revalidation' '#'
      case 15076:                   // 'satisfies' '#'
      case 15077:                   // 'schema' '#'
      case 15080:                   // 'score' '#'
      case 15081:                   // 'select' '#'
      case 15082:                   // 'self' '#'
      case 15087:                   // 'sliding' '#'
      case 15088:                   // 'some' '#'
      case 15089:                   // 'stable' '#'
      case 15090:                   // 'start' '#'
      case 15093:                   // 'strict' '#'
      case 15097:                   // 'text' '#'
      case 15101:                   // 'to' '#'
      case 15102:                   // 'treat' '#'
      case 15103:                   // 'true' '#'
      case 15104:                   // 'try' '#'
      case 15105:                   // 'tumbling' '#'
      case 15106:                   // 'type' '#'
      case 15108:                   // 'union' '#'
      case 15110:                   // 'unordered' '#'
      case 15111:                   // 'updating' '#'
      case 15114:                   // 'validate' '#'
      case 15115:                   // 'value' '#'
      case 15116:                   // 'variable' '#'
      case 15117:                   // 'version' '#'
      case 15120:                   // 'where' '#'
      case 15121:                   // 'while' '#'
      case 15124:                   // 'with' '#'
        this.parse_FunctionItemExpr();
        break;
      case -10:
      case 27929:                   // '{' ';'
        this.parse_BlockExpr();
        break;
      case -11:
      case 10009:                   // '{' NCName^Token
        this.parse_ObjectConstructor();
        break;
      case 69:                      // '['
        this.parse_ArrayConstructor();
        break;
      case 283:                     // '{|'
        this.parse_JSONSimpleObjectUnion();
        break;
      default:
        this.parse_Constructor();
      }
      this.eventHandler.endNonterminal("PrimaryExpr", this.e0);
    }

    private try_PrimaryExpr()
    {
      switch (this.l1)
      {
      case 187:                     // 'namespace'
        this.lookahead2W(246);      // NCName^Token | S^WS | '#' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'null' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | '{'
        break;
      case 220:                     // 'processing-instruction'
        this.lookahead2W(244);      // NCName^Token | S^WS | '#' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'null' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | '{'
        break;
      case 281:                     // '{'
        this.lookahead2W(282);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // NCName^Token | S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' |
                                    // '//' | ';' | '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|' | '}'
        break;
      case 83:                      // 'attribute'
      case 122:                     // 'element'
        this.lookahead2W(252);      // EQName^Token | S^WS | '#' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | '{'
        break;
      case 97:                      // 'comment'
      case 249:                     // 'text'
        this.lookahead2W(97);       // S^WS | '#' | '(:' | '{'
        break;
      case 120:                     // 'document'
      case 206:                     // 'ordered'
      case 262:                     // 'unordered'
        this.lookahead2W(148);      // S^WS | '#' | '(' | '(:' | '{'
        break;
      case 135:                     // 'false'
      case 197:                     // 'null'
      case 255:                     // 'true'
        this.lookahead2W(236);      // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '.' |
                                    // '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' |
                                    // 'cast' | 'castable' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' | '||' |
                                    // '|}' | '}'
        break;
      case 6:                       // EQName^Token
      case 71:                      // 'after'
      case 73:                      // 'allowing'
      case 74:                      // 'ancestor'
      case 75:                      // 'ancestor-or-self'
      case 76:                      // 'and'
      case 78:                      // 'append'
      case 80:                      // 'as'
      case 81:                      // 'ascending'
      case 82:                      // 'at'
      case 84:                      // 'base-uri'
      case 85:                      // 'before'
      case 86:                      // 'boundary-space'
      case 87:                      // 'break'
      case 89:                      // 'case'
      case 90:                      // 'cast'
      case 91:                      // 'castable'
      case 92:                      // 'catch'
      case 94:                      // 'child'
      case 95:                      // 'collation'
      case 98:                      // 'constraint'
      case 99:                      // 'construction'
      case 102:                     // 'context'
      case 103:                     // 'continue'
      case 104:                     // 'copy'
      case 105:                     // 'copy-namespaces'
      case 106:                     // 'count'
      case 107:                     // 'decimal-format'
      case 109:                     // 'declare'
      case 110:                     // 'default'
      case 111:                     // 'delete'
      case 112:                     // 'descendant'
      case 113:                     // 'descendant-or-self'
      case 114:                     // 'descending'
      case 119:                     // 'div'
      case 123:                     // 'else'
      case 124:                     // 'empty'
      case 126:                     // 'encoding'
      case 127:                     // 'end'
      case 129:                     // 'eq'
      case 130:                     // 'every'
      case 132:                     // 'except'
      case 133:                     // 'exit'
      case 134:                     // 'external'
      case 136:                     // 'first'
      case 137:                     // 'following'
      case 138:                     // 'following-sibling'
      case 139:                     // 'for'
      case 142:                     // 'from'
      case 143:                     // 'ft-option'
      case 148:                     // 'ge'
      case 150:                     // 'group'
      case 152:                     // 'gt'
      case 153:                     // 'idiv'
      case 155:                     // 'import'
      case 156:                     // 'in'
      case 157:                     // 'index'
      case 161:                     // 'insert'
      case 162:                     // 'instance'
      case 163:                     // 'integrity'
      case 164:                     // 'intersect'
      case 165:                     // 'into'
      case 166:                     // 'is'
      case 168:                     // 'json'
      case 170:                     // 'jsoniq'
      case 173:                     // 'last'
      case 174:                     // 'lax'
      case 175:                     // 'le'
      case 177:                     // 'let'
      case 179:                     // 'loop'
      case 181:                     // 'lt'
      case 183:                     // 'mod'
      case 184:                     // 'modify'
      case 185:                     // 'module'
      case 189:                     // 'ne'
      case 195:                     // 'nodes'
      case 198:                     // 'object'
      case 202:                     // 'only'
      case 203:                     // 'option'
      case 204:                     // 'or'
      case 205:                     // 'order'
      case 207:                     // 'ordering'
      case 210:                     // 'parent'
      case 216:                     // 'preceding'
      case 217:                     // 'preceding-sibling'
      case 222:                     // 'rename'
      case 223:                     // 'replace'
      case 224:                     // 'return'
      case 225:                     // 'returning'
      case 226:                     // 'revalidation'
      case 228:                     // 'satisfies'
      case 229:                     // 'schema'
      case 232:                     // 'score'
      case 233:                     // 'select'
      case 234:                     // 'self'
      case 239:                     // 'sliding'
      case 240:                     // 'some'
      case 241:                     // 'stable'
      case 242:                     // 'start'
      case 245:                     // 'strict'
      case 253:                     // 'to'
      case 254:                     // 'treat'
      case 256:                     // 'try'
      case 257:                     // 'tumbling'
      case 258:                     // 'type'
      case 260:                     // 'union'
      case 263:                     // 'updating'
      case 266:                     // 'validate'
      case 267:                     // 'value'
      case 268:                     // 'variable'
      case 269:                     // 'version'
      case 272:                     // 'where'
      case 273:                     // 'while'
      case 276:                     // 'with'
        this.lookahead2W(95);       // S^WS | '#' | '(' | '(:'
        break;
      default:
        this.lk = this.l1;
      }
      if (this.lk == 3353           // '{' EQName^Token
       || this.lk == 4377           // '{' IntegerLiteral
       || this.lk == 4889           // '{' DecimalLiteral
       || this.lk == 5401           // '{' DoubleLiteral
       || this.lk == 5913           // '{' StringLiteral
       || this.lk == 16153          // '{' '$'
       || this.lk == 16665          // '{' '$$'
       || this.lk == 17177          // '{' '%'
       || this.lk == 18055          // 'false' '('
       || this.lk == 18117          // 'null' '('
       || this.lk == 18175          // 'true' '('
       || this.lk == 18201          // '{' '('
       || this.lk == 18713          // '{' '(#'
       || this.lk == 21273          // '{' '+'
       || this.lk == 22297          // '{' '-'
       || this.lk == 24345          // '{' '/'
       || this.lk == 24857          // '{' '//'
       || this.lk == 28441          // '{' '<'
       || this.lk == 28953          // '{' '<!--'
       || this.lk == 31001          // '{' '<?'
       || this.lk == 35609          // '{' '['
       || this.lk == 36633          // '{' 'after'
       || this.lk == 37657          // '{' 'allowing'
       || this.lk == 38169          // '{' 'ancestor'
       || this.lk == 38681          // '{' 'ancestor-or-self'
       || this.lk == 39193          // '{' 'and'
       || this.lk == 40217          // '{' 'append'
       || this.lk == 40729          // '{' 'array'
       || this.lk == 41241          // '{' 'as'
       || this.lk == 41753          // '{' 'ascending'
       || this.lk == 42265          // '{' 'at'
       || this.lk == 42777          // '{' 'attribute'
       || this.lk == 43289          // '{' 'base-uri'
       || this.lk == 43801          // '{' 'before'
       || this.lk == 44313          // '{' 'boundary-space'
       || this.lk == 44825          // '{' 'break'
       || this.lk == 45849          // '{' 'case'
       || this.lk == 46361          // '{' 'cast'
       || this.lk == 46873          // '{' 'castable'
       || this.lk == 47385          // '{' 'catch'
       || this.lk == 48409          // '{' 'child'
       || this.lk == 48921          // '{' 'collation'
       || this.lk == 49945          // '{' 'comment'
       || this.lk == 50457          // '{' 'constraint'
       || this.lk == 50969          // '{' 'construction'
       || this.lk == 52505          // '{' 'context'
       || this.lk == 53017          // '{' 'continue'
       || this.lk == 53529          // '{' 'copy'
       || this.lk == 54041          // '{' 'copy-namespaces'
       || this.lk == 54553          // '{' 'count'
       || this.lk == 55065          // '{' 'decimal-format'
       || this.lk == 56089          // '{' 'declare'
       || this.lk == 56601          // '{' 'default'
       || this.lk == 57113          // '{' 'delete'
       || this.lk == 57625          // '{' 'descendant'
       || this.lk == 58137          // '{' 'descendant-or-self'
       || this.lk == 58649          // '{' 'descending'
       || this.lk == 61209          // '{' 'div'
       || this.lk == 61721          // '{' 'document'
       || this.lk == 62233          // '{' 'document-node'
       || this.lk == 62745          // '{' 'element'
       || this.lk == 63257          // '{' 'else'
       || this.lk == 63769          // '{' 'empty'
       || this.lk == 64281          // '{' 'empty-sequence'
       || this.lk == 64793          // '{' 'encoding'
       || this.lk == 65305          // '{' 'end'
       || this.lk == 66329          // '{' 'eq'
       || this.lk == 66841          // '{' 'every'
       || this.lk == 67865          // '{' 'except'
       || this.lk == 68377          // '{' 'exit'
       || this.lk == 68889          // '{' 'external'
       || this.lk == 69401          // '{' 'false'
       || this.lk == 69913          // '{' 'first'
       || this.lk == 70425          // '{' 'following'
       || this.lk == 70937          // '{' 'following-sibling'
       || this.lk == 71449          // '{' 'for'
       || this.lk == 72985          // '{' 'from'
       || this.lk == 73497          // '{' 'ft-option'
       || this.lk == 75545          // '{' 'function'
       || this.lk == 76057          // '{' 'ge'
       || this.lk == 77081          // '{' 'group'
       || this.lk == 78105          // '{' 'gt'
       || this.lk == 78617          // '{' 'idiv'
       || this.lk == 79129          // '{' 'if'
       || this.lk == 79641          // '{' 'import'
       || this.lk == 80153          // '{' 'in'
       || this.lk == 80665          // '{' 'index'
       || this.lk == 82713          // '{' 'insert'
       || this.lk == 83225          // '{' 'instance'
       || this.lk == 83737          // '{' 'integrity'
       || this.lk == 84249          // '{' 'intersect'
       || this.lk == 84761          // '{' 'into'
       || this.lk == 85273          // '{' 'is'
       || this.lk == 85785          // '{' 'item'
       || this.lk == 86297          // '{' 'json'
       || this.lk == 86809          // '{' 'json-item'
       || this.lk == 87321          // '{' 'jsoniq'
       || this.lk == 88857          // '{' 'last'
       || this.lk == 89369          // '{' 'lax'
       || this.lk == 89881          // '{' 'le'
       || this.lk == 90905          // '{' 'let'
       || this.lk == 91929          // '{' 'loop'
       || this.lk == 92953          // '{' 'lt'
       || this.lk == 93977          // '{' 'mod'
       || this.lk == 94489          // '{' 'modify'
       || this.lk == 95001          // '{' 'module'
       || this.lk == 96025          // '{' 'namespace'
       || this.lk == 96537          // '{' 'namespace-node'
       || this.lk == 97049          // '{' 'ne'
       || this.lk == 99609          // '{' 'node'
       || this.lk == 100121         // '{' 'nodes'
       || this.lk == 100633         // '{' 'not'
       || this.lk == 101145         // '{' 'null'
       || this.lk == 101657         // '{' 'object'
       || this.lk == 103705         // '{' 'only'
       || this.lk == 104217         // '{' 'option'
       || this.lk == 104729         // '{' 'or'
       || this.lk == 105241         // '{' 'order'
       || this.lk == 105753         // '{' 'ordered'
       || this.lk == 106265         // '{' 'ordering'
       || this.lk == 107801         // '{' 'parent'
       || this.lk == 110873         // '{' 'preceding'
       || this.lk == 111385         // '{' 'preceding-sibling'
       || this.lk == 112921         // '{' 'processing-instruction'
       || this.lk == 113945         // '{' 'rename'
       || this.lk == 114457         // '{' 'replace'
       || this.lk == 114969         // '{' 'return'
       || this.lk == 115481         // '{' 'returning'
       || this.lk == 115993         // '{' 'revalidation'
       || this.lk == 117017         // '{' 'satisfies'
       || this.lk == 117529         // '{' 'schema'
       || this.lk == 118041         // '{' 'schema-attribute'
       || this.lk == 118553         // '{' 'schema-element'
       || this.lk == 119065         // '{' 'score'
       || this.lk == 119577         // '{' 'select'
       || this.lk == 120089         // '{' 'self'
       || this.lk == 122649         // '{' 'sliding'
       || this.lk == 123161         // '{' 'some'
       || this.lk == 123673         // '{' 'stable'
       || this.lk == 124185         // '{' 'start'
       || this.lk == 125721         // '{' 'strict'
       || this.lk == 126745         // '{' 'structured-item'
       || this.lk == 127257         // '{' 'switch'
       || this.lk == 127769         // '{' 'text'
       || this.lk == 129817         // '{' 'to'
       || this.lk == 130329         // '{' 'treat'
       || this.lk == 130841         // '{' 'true'
       || this.lk == 131353         // '{' 'try'
       || this.lk == 131865         // '{' 'tumbling'
       || this.lk == 132377         // '{' 'type'
       || this.lk == 132889         // '{' 'typeswitch'
       || this.lk == 133401         // '{' 'union'
       || this.lk == 134425         // '{' 'unordered'
       || this.lk == 134937         // '{' 'updating'
       || this.lk == 136473         // '{' 'validate'
       || this.lk == 136985         // '{' 'value'
       || this.lk == 137497         // '{' 'variable'
       || this.lk == 138009         // '{' 'version'
       || this.lk == 139545         // '{' 'where'
       || this.lk == 140057         // '{' 'while'
       || this.lk == 141593         // '{' 'with'
       || this.lk == 144153         // '{' '{'
       || this.lk == 145177         // '{' '{|'
       || this.lk == 147225)        // '{' '}'
      {
        this.lk = this.memoized(20, this.e0);
        if (this.lk == 0)
        {
          var b0A = this.b0; var e0A = this.e0; var l1A = this.l1;
          var b1A = this.b1; var e1A = this.e1; var l2A = this.l2;
          var b2A = this.b2; var e2A = this.e2;
          try
          {
            this.try_Literal();
            this.memoize(20, e0A, -1);
            this.lk = -14;
          }
          catch (p1A)
          {
            try
            {
              this.b0 = b0A; this.e0 = e0A; this.l1 = l1A; if (this.l1 == 0) {this.end = e0A;} else {
              this.b1 = b1A; this.e1 = e1A; this.l2 = l2A; if (this.l2 == 0) {this.end = e1A;} else {
              this.b2 = b2A; this.e2 = e2A; this.end = e2A; }}
              this.try_FunctionCall();
              this.memoize(20, e0A, -5);
              this.lk = -14;
            }
            catch (p5A)
            {
              try
              {
                this.b0 = b0A; this.e0 = e0A; this.l1 = l1A; if (this.l1 == 0) {this.end = e0A;} else {
                this.b1 = b1A; this.e1 = e1A; this.l2 = l2A; if (this.l2 == 0) {this.end = e1A;} else {
                this.b2 = b2A; this.e2 = e2A; this.end = e2A; }}
                this.try_BlockExpr();
                this.memoize(20, e0A, -10);
                this.lk = -14;
              }
              catch (p10A)
              {
                this.lk = -11;
                this.b0 = b0A; this.e0 = e0A; this.l1 = l1A; if (this.l1 == 0) {this.end = e0A;} else {
                this.b1 = b1A; this.e1 = e1A; this.l2 = l2A; if (this.l2 == 0) {this.end = e1A;} else {
                this.b2 = b2A; this.e2 = e2A; this.end = e2A; }}
                this.memoize(20, e0A, -11);
              }
            }
          }
        }
      }
      switch (this.lk)
      {
      case -1:
      case 8:                       // IntegerLiteral
      case 9:                       // DecimalLiteral
      case 10:                      // DoubleLiteral
      case 11:                      // StringLiteral
      case 12935:                   // 'false' EOF
      case 12997:                   // 'null' EOF
      case 13055:                   // 'true' EOF
      case 13447:                   // 'false' '!'
      case 13509:                   // 'null' '!'
      case 13567:                   // 'true' '!'
      case 13959:                   // 'false' '!='
      case 14021:                   // 'null' '!='
      case 14079:                   // 'true' '!='
      case 19591:                   // 'false' ')'
      case 19653:                   // 'null' ')'
      case 19711:                   // 'true' ')'
      case 20103:                   // 'false' '*'
      case 20165:                   // 'null' '*'
      case 20223:                   // 'true' '*'
      case 21127:                   // 'false' '+'
      case 21189:                   // 'null' '+'
      case 21247:                   // 'true' '+'
      case 21639:                   // 'false' ','
      case 21701:                   // 'null' ','
      case 21759:                   // 'true' ','
      case 22151:                   // 'false' '-'
      case 22213:                   // 'null' '-'
      case 22271:                   // 'true' '-'
      case 23175:                   // 'false' '.'
      case 23237:                   // 'null' '.'
      case 23295:                   // 'true' '.'
      case 24199:                   // 'false' '/'
      case 24261:                   // 'null' '/'
      case 24319:                   // 'true' '/'
      case 24711:                   // 'false' '//'
      case 24773:                   // 'null' '//'
      case 24831:                   // 'true' '//'
      case 25735:                   // 'false' ':'
      case 25797:                   // 'null' ':'
      case 25855:                   // 'true' ':'
      case 27783:                   // 'false' ';'
      case 27845:                   // 'null' ';'
      case 27903:                   // 'true' ';'
      case 28295:                   // 'false' '<'
      case 28357:                   // 'null' '<'
      case 28415:                   // 'true' '<'
      case 29831:                   // 'false' '<<'
      case 29893:                   // 'null' '<<'
      case 29951:                   // 'true' '<<'
      case 30343:                   // 'false' '<='
      case 30405:                   // 'null' '<='
      case 30463:                   // 'true' '<='
      case 31367:                   // 'false' '='
      case 31429:                   // 'null' '='
      case 31487:                   // 'true' '='
      case 31879:                   // 'false' '>'
      case 31941:                   // 'null' '>'
      case 31999:                   // 'true' '>'
      case 32391:                   // 'false' '>='
      case 32453:                   // 'null' '>='
      case 32511:                   // 'true' '>='
      case 32903:                   // 'false' '>>'
      case 32965:                   // 'null' '>>'
      case 33023:                   // 'true' '>>'
      case 35463:                   // 'false' '['
      case 35525:                   // 'null' '['
      case 35583:                   // 'true' '['
      case 35975:                   // 'false' ']'
      case 36037:                   // 'null' ']'
      case 36095:                   // 'true' ']'
      case 36487:                   // 'false' 'after'
      case 36549:                   // 'null' 'after'
      case 36607:                   // 'true' 'after'
      case 39047:                   // 'false' 'and'
      case 39109:                   // 'null' 'and'
      case 39167:                   // 'true' 'and'
      case 41095:                   // 'false' 'as'
      case 41157:                   // 'null' 'as'
      case 41215:                   // 'true' 'as'
      case 41607:                   // 'false' 'ascending'
      case 41669:                   // 'null' 'ascending'
      case 41727:                   // 'true' 'ascending'
      case 42119:                   // 'false' 'at'
      case 42181:                   // 'null' 'at'
      case 42239:                   // 'true' 'at'
      case 43655:                   // 'false' 'before'
      case 43717:                   // 'null' 'before'
      case 43775:                   // 'true' 'before'
      case 45191:                   // 'false' 'by'
      case 45253:                   // 'null' 'by'
      case 45311:                   // 'true' 'by'
      case 45703:                   // 'false' 'case'
      case 45765:                   // 'null' 'case'
      case 45823:                   // 'true' 'case'
      case 46215:                   // 'false' 'cast'
      case 46277:                   // 'null' 'cast'
      case 46335:                   // 'true' 'cast'
      case 46727:                   // 'false' 'castable'
      case 46789:                   // 'null' 'castable'
      case 46847:                   // 'true' 'castable'
      case 48775:                   // 'false' 'collation'
      case 48837:                   // 'null' 'collation'
      case 48895:                   // 'true' 'collation'
      case 51335:                   // 'false' 'contains'
      case 51397:                   // 'null' 'contains'
      case 51455:                   // 'true' 'contains'
      case 54407:                   // 'false' 'count'
      case 54469:                   // 'null' 'count'
      case 54527:                   // 'true' 'count'
      case 56455:                   // 'false' 'default'
      case 56517:                   // 'null' 'default'
      case 56575:                   // 'true' 'default'
      case 58503:                   // 'false' 'descending'
      case 58565:                   // 'null' 'descending'
      case 58623:                   // 'true' 'descending'
      case 61063:                   // 'false' 'div'
      case 61125:                   // 'null' 'div'
      case 61183:                   // 'true' 'div'
      case 63111:                   // 'false' 'else'
      case 63173:                   // 'null' 'else'
      case 63231:                   // 'true' 'else'
      case 63623:                   // 'false' 'empty'
      case 63685:                   // 'null' 'empty'
      case 63743:                   // 'true' 'empty'
      case 65159:                   // 'false' 'end'
      case 65221:                   // 'null' 'end'
      case 65279:                   // 'true' 'end'
      case 66183:                   // 'false' 'eq'
      case 66245:                   // 'null' 'eq'
      case 66303:                   // 'true' 'eq'
      case 67719:                   // 'false' 'except'
      case 67781:                   // 'null' 'except'
      case 67839:                   // 'true' 'except'
      case 71303:                   // 'false' 'for'
      case 71365:                   // 'null' 'for'
      case 71423:                   // 'true' 'for'
      case 75911:                   // 'false' 'ge'
      case 75973:                   // 'null' 'ge'
      case 76031:                   // 'true' 'ge'
      case 76935:                   // 'false' 'group'
      case 76997:                   // 'null' 'group'
      case 77055:                   // 'true' 'group'
      case 77959:                   // 'false' 'gt'
      case 78021:                   // 'null' 'gt'
      case 78079:                   // 'true' 'gt'
      case 78471:                   // 'false' 'idiv'
      case 78533:                   // 'null' 'idiv'
      case 78591:                   // 'true' 'idiv'
      case 83079:                   // 'false' 'instance'
      case 83141:                   // 'null' 'instance'
      case 83199:                   // 'true' 'instance'
      case 84103:                   // 'false' 'intersect'
      case 84165:                   // 'null' 'intersect'
      case 84223:                   // 'true' 'intersect'
      case 84615:                   // 'false' 'into'
      case 84677:                   // 'null' 'into'
      case 84735:                   // 'true' 'into'
      case 85127:                   // 'false' 'is'
      case 85189:                   // 'null' 'is'
      case 85247:                   // 'true' 'is'
      case 89735:                   // 'false' 'le'
      case 89797:                   // 'null' 'le'
      case 89855:                   // 'true' 'le'
      case 90759:                   // 'false' 'let'
      case 90821:                   // 'null' 'let'
      case 90879:                   // 'true' 'let'
      case 92807:                   // 'false' 'lt'
      case 92869:                   // 'null' 'lt'
      case 92927:                   // 'true' 'lt'
      case 93831:                   // 'false' 'mod'
      case 93893:                   // 'null' 'mod'
      case 93951:                   // 'true' 'mod'
      case 94343:                   // 'false' 'modify'
      case 94405:                   // 'null' 'modify'
      case 94463:                   // 'true' 'modify'
      case 96903:                   // 'false' 'ne'
      case 96965:                   // 'null' 'ne'
      case 97023:                   // 'true' 'ne'
      case 103559:                  // 'false' 'only'
      case 103621:                  // 'null' 'only'
      case 103679:                  // 'true' 'only'
      case 104583:                  // 'false' 'or'
      case 104645:                  // 'null' 'or'
      case 104703:                  // 'true' 'or'
      case 105095:                  // 'false' 'order'
      case 105157:                  // 'null' 'order'
      case 105215:                  // 'true' 'order'
      case 107143:                  // 'false' 'paragraphs'
      case 107205:                  // 'null' 'paragraphs'
      case 107263:                  // 'true' 'paragraphs'
      case 114823:                  // 'false' 'return'
      case 114885:                  // 'null' 'return'
      case 114943:                  // 'true' 'return'
      case 116871:                  // 'false' 'satisfies'
      case 116933:                  // 'null' 'satisfies'
      case 116991:                  // 'true' 'satisfies'
      case 121479:                  // 'false' 'sentences'
      case 121541:                  // 'null' 'sentences'
      case 121599:                  // 'true' 'sentences'
      case 123527:                  // 'false' 'stable'
      case 123589:                  // 'null' 'stable'
      case 123647:                  // 'true' 'stable'
      case 124039:                  // 'false' 'start'
      case 124101:                  // 'null' 'start'
      case 124159:                  // 'true' 'start'
      case 129159:                  // 'false' 'times'
      case 129221:                  // 'null' 'times'
      case 129279:                  // 'true' 'times'
      case 129671:                  // 'false' 'to'
      case 129733:                  // 'null' 'to'
      case 129791:                  // 'true' 'to'
      case 130183:                  // 'false' 'treat'
      case 130245:                  // 'null' 'treat'
      case 130303:                  // 'true' 'treat'
      case 133255:                  // 'false' 'union'
      case 133317:                  // 'null' 'union'
      case 133375:                  // 'true' 'union'
      case 139399:                  // 'false' 'where'
      case 139461:                  // 'null' 'where'
      case 139519:                  // 'true' 'where'
      case 141447:                  // 'false' 'with'
      case 141509:                  // 'null' 'with'
      case 141567:                  // 'true' 'with'
      case 142983:                  // 'false' 'words'
      case 143045:                  // 'null' 'words'
      case 143103:                  // 'true' 'words'
      case 145543:                  // 'false' '|'
      case 145605:                  // 'null' '|'
      case 145663:                  // 'true' '|'
      case 146055:                  // 'false' '||'
      case 146117:                  // 'null' '||'
      case 146175:                  // 'true' '||'
      case 146567:                  // 'false' '|}'
      case 146629:                  // 'null' '|}'
      case 146687:                  // 'true' '|}'
      case 147079:                  // 'false' '}'
      case 147141:                  // 'null' '}'
      case 147199:                  // 'true' '}'
        this.try_Literal();
        break;
      case 31:                      // '$'
        this.try_VarRef();
        break;
      case 35:                      // '('
        this.try_ParenthesizedExpr();
        break;
      case 32:                      // '$$'
        this.try_ContextItemExpr();
        break;
      case -5:
      case 17926:                   // EQName^Token '('
      case 17991:                   // 'after' '('
      case 17993:                   // 'allowing' '('
      case 17994:                   // 'ancestor' '('
      case 17995:                   // 'ancestor-or-self' '('
      case 17996:                   // 'and' '('
      case 17998:                   // 'append' '('
      case 18000:                   // 'as' '('
      case 18001:                   // 'ascending' '('
      case 18002:                   // 'at' '('
      case 18004:                   // 'base-uri' '('
      case 18005:                   // 'before' '('
      case 18006:                   // 'boundary-space' '('
      case 18007:                   // 'break' '('
      case 18009:                   // 'case' '('
      case 18010:                   // 'cast' '('
      case 18011:                   // 'castable' '('
      case 18012:                   // 'catch' '('
      case 18014:                   // 'child' '('
      case 18015:                   // 'collation' '('
      case 18018:                   // 'constraint' '('
      case 18019:                   // 'construction' '('
      case 18022:                   // 'context' '('
      case 18023:                   // 'continue' '('
      case 18024:                   // 'copy' '('
      case 18025:                   // 'copy-namespaces' '('
      case 18026:                   // 'count' '('
      case 18027:                   // 'decimal-format' '('
      case 18029:                   // 'declare' '('
      case 18030:                   // 'default' '('
      case 18031:                   // 'delete' '('
      case 18032:                   // 'descendant' '('
      case 18033:                   // 'descendant-or-self' '('
      case 18034:                   // 'descending' '('
      case 18039:                   // 'div' '('
      case 18040:                   // 'document' '('
      case 18043:                   // 'else' '('
      case 18044:                   // 'empty' '('
      case 18046:                   // 'encoding' '('
      case 18047:                   // 'end' '('
      case 18049:                   // 'eq' '('
      case 18050:                   // 'every' '('
      case 18052:                   // 'except' '('
      case 18053:                   // 'exit' '('
      case 18054:                   // 'external' '('
      case 18056:                   // 'first' '('
      case 18057:                   // 'following' '('
      case 18058:                   // 'following-sibling' '('
      case 18059:                   // 'for' '('
      case 18062:                   // 'from' '('
      case 18063:                   // 'ft-option' '('
      case 18068:                   // 'ge' '('
      case 18070:                   // 'group' '('
      case 18072:                   // 'gt' '('
      case 18073:                   // 'idiv' '('
      case 18075:                   // 'import' '('
      case 18076:                   // 'in' '('
      case 18077:                   // 'index' '('
      case 18081:                   // 'insert' '('
      case 18082:                   // 'instance' '('
      case 18083:                   // 'integrity' '('
      case 18084:                   // 'intersect' '('
      case 18085:                   // 'into' '('
      case 18086:                   // 'is' '('
      case 18088:                   // 'json' '('
      case 18090:                   // 'jsoniq' '('
      case 18093:                   // 'last' '('
      case 18094:                   // 'lax' '('
      case 18095:                   // 'le' '('
      case 18097:                   // 'let' '('
      case 18099:                   // 'loop' '('
      case 18101:                   // 'lt' '('
      case 18103:                   // 'mod' '('
      case 18104:                   // 'modify' '('
      case 18105:                   // 'module' '('
      case 18107:                   // 'namespace' '('
      case 18109:                   // 'ne' '('
      case 18115:                   // 'nodes' '('
      case 18118:                   // 'object' '('
      case 18122:                   // 'only' '('
      case 18123:                   // 'option' '('
      case 18124:                   // 'or' '('
      case 18125:                   // 'order' '('
      case 18126:                   // 'ordered' '('
      case 18127:                   // 'ordering' '('
      case 18130:                   // 'parent' '('
      case 18136:                   // 'preceding' '('
      case 18137:                   // 'preceding-sibling' '('
      case 18142:                   // 'rename' '('
      case 18143:                   // 'replace' '('
      case 18144:                   // 'return' '('
      case 18145:                   // 'returning' '('
      case 18146:                   // 'revalidation' '('
      case 18148:                   // 'satisfies' '('
      case 18149:                   // 'schema' '('
      case 18152:                   // 'score' '('
      case 18153:                   // 'select' '('
      case 18154:                   // 'self' '('
      case 18159:                   // 'sliding' '('
      case 18160:                   // 'some' '('
      case 18161:                   // 'stable' '('
      case 18162:                   // 'start' '('
      case 18165:                   // 'strict' '('
      case 18173:                   // 'to' '('
      case 18174:                   // 'treat' '('
      case 18176:                   // 'try' '('
      case 18177:                   // 'tumbling' '('
      case 18178:                   // 'type' '('
      case 18180:                   // 'union' '('
      case 18182:                   // 'unordered' '('
      case 18183:                   // 'updating' '('
      case 18186:                   // 'validate' '('
      case 18187:                   // 'value' '('
      case 18188:                   // 'variable' '('
      case 18189:                   // 'version' '('
      case 18192:                   // 'where' '('
      case 18193:                   // 'while' '('
      case 18196:                   // 'with' '('
        this.try_FunctionCall();
        break;
      case 144078:                  // 'ordered' '{'
        this.try_OrderedExpr();
        break;
      case 144134:                  // 'unordered' '{'
        this.try_UnorderedExpr();
        break;
      case 33:                      // '%'
      case 79:                      // 'array'
      case 121:                     // 'document-node'
      case 125:                     // 'empty-sequence'
      case 147:                     // 'function'
      case 154:                     // 'if'
      case 167:                     // 'item'
      case 169:                     // 'json-item'
      case 188:                     // 'namespace-node'
      case 194:                     // 'node'
      case 230:                     // 'schema-attribute'
      case 231:                     // 'schema-element'
      case 247:                     // 'structured-item'
      case 248:                     // 'switch'
      case 259:                     // 'typeswitch'
      case 14854:                   // EQName^Token '#'
      case 14919:                   // 'after' '#'
      case 14921:                   // 'allowing' '#'
      case 14922:                   // 'ancestor' '#'
      case 14923:                   // 'ancestor-or-self' '#'
      case 14924:                   // 'and' '#'
      case 14926:                   // 'append' '#'
      case 14928:                   // 'as' '#'
      case 14929:                   // 'ascending' '#'
      case 14930:                   // 'at' '#'
      case 14931:                   // 'attribute' '#'
      case 14932:                   // 'base-uri' '#'
      case 14933:                   // 'before' '#'
      case 14934:                   // 'boundary-space' '#'
      case 14935:                   // 'break' '#'
      case 14937:                   // 'case' '#'
      case 14938:                   // 'cast' '#'
      case 14939:                   // 'castable' '#'
      case 14940:                   // 'catch' '#'
      case 14942:                   // 'child' '#'
      case 14943:                   // 'collation' '#'
      case 14945:                   // 'comment' '#'
      case 14946:                   // 'constraint' '#'
      case 14947:                   // 'construction' '#'
      case 14950:                   // 'context' '#'
      case 14951:                   // 'continue' '#'
      case 14952:                   // 'copy' '#'
      case 14953:                   // 'copy-namespaces' '#'
      case 14954:                   // 'count' '#'
      case 14955:                   // 'decimal-format' '#'
      case 14957:                   // 'declare' '#'
      case 14958:                   // 'default' '#'
      case 14959:                   // 'delete' '#'
      case 14960:                   // 'descendant' '#'
      case 14961:                   // 'descendant-or-self' '#'
      case 14962:                   // 'descending' '#'
      case 14967:                   // 'div' '#'
      case 14968:                   // 'document' '#'
      case 14970:                   // 'element' '#'
      case 14971:                   // 'else' '#'
      case 14972:                   // 'empty' '#'
      case 14974:                   // 'encoding' '#'
      case 14975:                   // 'end' '#'
      case 14977:                   // 'eq' '#'
      case 14978:                   // 'every' '#'
      case 14980:                   // 'except' '#'
      case 14981:                   // 'exit' '#'
      case 14982:                   // 'external' '#'
      case 14983:                   // 'false' '#'
      case 14984:                   // 'first' '#'
      case 14985:                   // 'following' '#'
      case 14986:                   // 'following-sibling' '#'
      case 14987:                   // 'for' '#'
      case 14990:                   // 'from' '#'
      case 14991:                   // 'ft-option' '#'
      case 14996:                   // 'ge' '#'
      case 14998:                   // 'group' '#'
      case 15000:                   // 'gt' '#'
      case 15001:                   // 'idiv' '#'
      case 15003:                   // 'import' '#'
      case 15004:                   // 'in' '#'
      case 15005:                   // 'index' '#'
      case 15009:                   // 'insert' '#'
      case 15010:                   // 'instance' '#'
      case 15011:                   // 'integrity' '#'
      case 15012:                   // 'intersect' '#'
      case 15013:                   // 'into' '#'
      case 15014:                   // 'is' '#'
      case 15016:                   // 'json' '#'
      case 15018:                   // 'jsoniq' '#'
      case 15021:                   // 'last' '#'
      case 15022:                   // 'lax' '#'
      case 15023:                   // 'le' '#'
      case 15025:                   // 'let' '#'
      case 15027:                   // 'loop' '#'
      case 15029:                   // 'lt' '#'
      case 15031:                   // 'mod' '#'
      case 15032:                   // 'modify' '#'
      case 15033:                   // 'module' '#'
      case 15035:                   // 'namespace' '#'
      case 15037:                   // 'ne' '#'
      case 15043:                   // 'nodes' '#'
      case 15045:                   // 'null' '#'
      case 15046:                   // 'object' '#'
      case 15050:                   // 'only' '#'
      case 15051:                   // 'option' '#'
      case 15052:                   // 'or' '#'
      case 15053:                   // 'order' '#'
      case 15054:                   // 'ordered' '#'
      case 15055:                   // 'ordering' '#'
      case 15058:                   // 'parent' '#'
      case 15064:                   // 'preceding' '#'
      case 15065:                   // 'preceding-sibling' '#'
      case 15068:                   // 'processing-instruction' '#'
      case 15070:                   // 'rename' '#'
      case 15071:                   // 'replace' '#'
      case 15072:                   // 'return' '#'
      case 15073:                   // 'returning' '#'
      case 15074:                   // 'revalidation' '#'
      case 15076:                   // 'satisfies' '#'
      case 15077:                   // 'schema' '#'
      case 15080:                   // 'score' '#'
      case 15081:                   // 'select' '#'
      case 15082:                   // 'self' '#'
      case 15087:                   // 'sliding' '#'
      case 15088:                   // 'some' '#'
      case 15089:                   // 'stable' '#'
      case 15090:                   // 'start' '#'
      case 15093:                   // 'strict' '#'
      case 15097:                   // 'text' '#'
      case 15101:                   // 'to' '#'
      case 15102:                   // 'treat' '#'
      case 15103:                   // 'true' '#'
      case 15104:                   // 'try' '#'
      case 15105:                   // 'tumbling' '#'
      case 15106:                   // 'type' '#'
      case 15108:                   // 'union' '#'
      case 15110:                   // 'unordered' '#'
      case 15111:                   // 'updating' '#'
      case 15114:                   // 'validate' '#'
      case 15115:                   // 'value' '#'
      case 15116:                   // 'variable' '#'
      case 15117:                   // 'version' '#'
      case 15120:                   // 'where' '#'
      case 15121:                   // 'while' '#'
      case 15124:                   // 'with' '#'
        this.try_FunctionItemExpr();
        break;
      case -10:
      case 27929:                   // '{' ';'
        this.try_BlockExpr();
        break;
      case -11:
      case 10009:                   // '{' NCName^Token
        this.try_ObjectConstructor();
        break;
      case 69:                      // '['
        this.try_ArrayConstructor();
        break;
      case 283:                     // '{|'
        this.try_JSONSimpleObjectUnion();
        break;
      case -14:
        break;
      default:
        this.try_Constructor();
      }
    }

    private parse_JSONSimpleObjectUnion()
    {
      this.eventHandler.startNonterminal("JSONSimpleObjectUnion", this.e0);
      this.shift(283);              // '{|'
      this.lookahead1W(273);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|' | '|}'
      if (this.l1 != 286)           // '|}'
      {
        this.whitespace();
        this.parse_Expr();
      }
      this.shift(286);              // '|}'
      this.eventHandler.endNonterminal("JSONSimpleObjectUnion", this.e0);
    }

    private try_JSONSimpleObjectUnion()
    {
      this.shiftT(283);             // '{|'
      this.lookahead1W(273);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|' | '|}'
      if (this.l1 != 286)           // '|}'
      {
        this.try_Expr();
      }
      this.shiftT(286);             // '|}'
    }

    private parse_ObjectConstructor()
    {
      this.eventHandler.startNonterminal("ObjectConstructor", this.e0);
      this.shift(281);              // '{'
      this.lookahead1W(276);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // NCName^Token | S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' |
                                    // '//' | '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|' | '}'
      if (this.l1 != 287)           // '}'
      {
        this.whitespace();
        this.parse_PairConstructorList();
      }
      this.shift(287);              // '}'
      this.eventHandler.endNonterminal("ObjectConstructor", this.e0);
    }

    private try_ObjectConstructor()
    {
      this.shiftT(281);             // '{'
      this.lookahead1W(276);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // NCName^Token | S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' |
                                    // '//' | '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|' | '}'
      if (this.l1 != 287)           // '}'
      {
        this.try_PairConstructorList();
      }
      this.shiftT(287);             // '}'
    }

    private parse_PairConstructorList()
    {
      this.eventHandler.startNonterminal("PairConstructorList", this.e0);
      this.parse_PairConstructor();
      for (;;)
      {
        if (this.l1 != 42)          // ','
        {
          break;
        }
        this.shift(42);             // ','
        this.lookahead1W(267);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // NCName^Token | S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' |
                                    // '//' | '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
        this.whitespace();
        this.parse_PairConstructor();
      }
      this.eventHandler.endNonterminal("PairConstructorList", this.e0);
    }

    private try_PairConstructorList()
    {
      this.try_PairConstructor();
      for (;;)
      {
        if (this.l1 != 42)          // ','
        {
          break;
        }
        this.shiftT(42);            // ','
        this.lookahead1W(267);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // NCName^Token | S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' |
                                    // '//' | '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
        this.try_PairConstructor();
      }
    }

    private parse_PairConstructor()
    {
      this.eventHandler.startNonterminal("PairConstructor", this.e0);
      switch (this.l1)
      {
      case 78:                      // 'append'
        this.lookahead2W(278);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '#' | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' |
                                    // ':' | '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
        break;
      case 139:                     // 'for'
        this.lookahead2W(187);      // S^WS | '#' | '$' | '(' | '(:' | ':' | 'sliding' | 'tumbling'
        break;
      case 161:                     // 'insert'
        this.lookahead2W(281);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // NCName^Token | S^WS | '#' | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' |
                                    // '/' | '//' | ':' | '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
        break;
      case 177:                     // 'let'
        this.lookahead2W(178);      // S^WS | '#' | '$' | '(' | '(:' | ':' | 'score'
        break;
      case 187:                     // 'namespace'
        this.lookahead2W(251);      // NCName^Token | S^WS | '#' | '(' | '(:' | ':' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | '{'
        break;
      case 220:                     // 'processing-instruction'
        this.lookahead2W(247);      // NCName^Token | S^WS | '#' | '(:' | ':' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'null' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | '{'
        break;
      case 223:                     // 'replace'
        this.lookahead2W(180);      // S^WS | '#' | '(' | '(:' | ':' | 'node' | 'value'
        break;
      case 266:                     // 'validate'
        this.lookahead2W(191);      // S^WS | '#' | '(' | '(:' | ':' | 'lax' | 'strict' | 'type' | '{'
        break;
      case 83:                      // 'attribute'
      case 122:                     // 'element'
        this.lookahead2W(256);      // EQName^Token | S^WS | '#' | '(:' | ':' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | '{'
        break;
      case 97:                      // 'comment'
      case 249:                     // 'text'
        this.lookahead2W(149);      // S^WS | '#' | '(:' | ':' | '{'
        break;
      case 111:                     // 'delete'
      case 222:                     // 'rename'
        this.lookahead2W(261);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '#' | '$' | '$$' | '%' | '(' | '(:' | ':' | '<' | '<!--' | '<?' | '[' |
                                    // 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'jsoniq' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'null' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | '{' | '{|'
        break;
      case 104:                     // 'copy'
      case 130:                     // 'every'
      case 240:                     // 'some'
        this.lookahead2W(165);      // S^WS | '#' | '$' | '(' | '(:' | ':'
        break;
      case 135:                     // 'false'
      case 197:                     // 'null'
      case 255:                     // 'true'
        this.lookahead2W(208);      // S^WS | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | '-' | '.' | '/' | '//' | ':' |
                                    // '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' | 'castable' |
                                    // 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' | 'treat' |
                                    // 'union' | '|' | '||'
        break;
      case 120:                     // 'document'
      case 206:                     // 'ordered'
      case 256:                     // 'try'
      case 262:                     // 'unordered'
        this.lookahead2W(167);      // S^WS | '#' | '(' | '(:' | ':' | '{'
        break;
      case 121:                     // 'document-node'
      case 125:                     // 'empty-sequence'
      case 167:                     // 'item'
      case 188:                     // 'namespace-node'
      case 194:                     // 'node'
      case 230:                     // 'schema-attribute'
      case 231:                     // 'schema-element'
        this.lookahead2W(96);       // S^WS | '#' | '(:' | ':'
        break;
      case 71:                      // 'after'
      case 73:                      // 'allowing'
      case 74:                      // 'ancestor'
      case 75:                      // 'ancestor-or-self'
      case 76:                      // 'and'
      case 80:                      // 'as'
      case 81:                      // 'ascending'
      case 82:                      // 'at'
      case 84:                      // 'base-uri'
      case 85:                      // 'before'
      case 86:                      // 'boundary-space'
      case 87:                      // 'break'
      case 89:                      // 'case'
      case 90:                      // 'cast'
      case 91:                      // 'castable'
      case 92:                      // 'catch'
      case 94:                      // 'child'
      case 95:                      // 'collation'
      case 98:                      // 'constraint'
      case 99:                      // 'construction'
      case 102:                     // 'context'
      case 103:                     // 'continue'
      case 105:                     // 'copy-namespaces'
      case 106:                     // 'count'
      case 107:                     // 'decimal-format'
      case 109:                     // 'declare'
      case 110:                     // 'default'
      case 112:                     // 'descendant'
      case 113:                     // 'descendant-or-self'
      case 114:                     // 'descending'
      case 119:                     // 'div'
      case 123:                     // 'else'
      case 124:                     // 'empty'
      case 126:                     // 'encoding'
      case 127:                     // 'end'
      case 129:                     // 'eq'
      case 132:                     // 'except'
      case 133:                     // 'exit'
      case 134:                     // 'external'
      case 136:                     // 'first'
      case 137:                     // 'following'
      case 138:                     // 'following-sibling'
      case 142:                     // 'from'
      case 143:                     // 'ft-option'
      case 147:                     // 'function'
      case 148:                     // 'ge'
      case 150:                     // 'group'
      case 152:                     // 'gt'
      case 153:                     // 'idiv'
      case 154:                     // 'if'
      case 155:                     // 'import'
      case 156:                     // 'in'
      case 157:                     // 'index'
      case 162:                     // 'instance'
      case 163:                     // 'integrity'
      case 164:                     // 'intersect'
      case 165:                     // 'into'
      case 166:                     // 'is'
      case 168:                     // 'json'
      case 170:                     // 'jsoniq'
      case 173:                     // 'last'
      case 174:                     // 'lax'
      case 175:                     // 'le'
      case 179:                     // 'loop'
      case 181:                     // 'lt'
      case 183:                     // 'mod'
      case 184:                     // 'modify'
      case 185:                     // 'module'
      case 189:                     // 'ne'
      case 195:                     // 'nodes'
      case 198:                     // 'object'
      case 202:                     // 'only'
      case 203:                     // 'option'
      case 204:                     // 'or'
      case 205:                     // 'order'
      case 207:                     // 'ordering'
      case 210:                     // 'parent'
      case 216:                     // 'preceding'
      case 217:                     // 'preceding-sibling'
      case 224:                     // 'return'
      case 225:                     // 'returning'
      case 226:                     // 'revalidation'
      case 228:                     // 'satisfies'
      case 229:                     // 'schema'
      case 232:                     // 'score'
      case 233:                     // 'select'
      case 234:                     // 'self'
      case 239:                     // 'sliding'
      case 241:                     // 'stable'
      case 242:                     // 'start'
      case 245:                     // 'strict'
      case 248:                     // 'switch'
      case 253:                     // 'to'
      case 254:                     // 'treat'
      case 257:                     // 'tumbling'
      case 258:                     // 'type'
      case 259:                     // 'typeswitch'
      case 260:                     // 'union'
      case 263:                     // 'updating'
      case 267:                     // 'value'
      case 268:                     // 'variable'
      case 269:                     // 'version'
      case 272:                     // 'where'
      case 273:                     // 'while'
      case 276:                     // 'with'
        this.lookahead2W(144);      // S^WS | '#' | '(' | '(:' | ':'
        break;
      default:
        this.lk = this.l1;
      }
      if (this.lk == 25735          // 'false' ':'
       || this.lk == 25797          // 'null' ':'
       || this.lk == 25855)         // 'true' ':'
      {
        this.lk = this.memoized(21, this.e0);
        if (this.lk == 0)
        {
          var b0A = this.b0; var e0A = this.e0; var l1A = this.l1;
          var b1A = this.b1; var e1A = this.e1; var l2A = this.l2;
          var b2A = this.b2; var e2A = this.e2;
          try
          {
            this.try_ExprSingle();
            this.lk = -1;
          }
          catch (p1A)
          {
            this.lk = -2;
          }
          this.b0 = b0A; this.e0 = e0A; this.l1 = l1A; if (this.l1 == 0) {this.end = e0A;} else {
          this.b1 = b1A; this.e1 = e1A; this.l2 = l2A; if (this.l2 == 0) {this.end = e1A;} else {
          this.b2 = b2A; this.e2 = e2A; this.end = e2A; }}
          this.memoize(21, this.e0, this.lk);
        }
      }
      switch (this.lk)
      {
      case -2:
      case 19:                      // NCName^Token
      case 25671:                   // 'after' ':'
      case 25673:                   // 'allowing' ':'
      case 25674:                   // 'ancestor' ':'
      case 25675:                   // 'ancestor-or-self' ':'
      case 25676:                   // 'and' ':'
      case 25678:                   // 'append' ':'
      case 25680:                   // 'as' ':'
      case 25681:                   // 'ascending' ':'
      case 25682:                   // 'at' ':'
      case 25683:                   // 'attribute' ':'
      case 25684:                   // 'base-uri' ':'
      case 25685:                   // 'before' ':'
      case 25686:                   // 'boundary-space' ':'
      case 25687:                   // 'break' ':'
      case 25689:                   // 'case' ':'
      case 25690:                   // 'cast' ':'
      case 25691:                   // 'castable' ':'
      case 25692:                   // 'catch' ':'
      case 25694:                   // 'child' ':'
      case 25695:                   // 'collation' ':'
      case 25697:                   // 'comment' ':'
      case 25698:                   // 'constraint' ':'
      case 25699:                   // 'construction' ':'
      case 25702:                   // 'context' ':'
      case 25703:                   // 'continue' ':'
      case 25704:                   // 'copy' ':'
      case 25705:                   // 'copy-namespaces' ':'
      case 25706:                   // 'count' ':'
      case 25707:                   // 'decimal-format' ':'
      case 25709:                   // 'declare' ':'
      case 25710:                   // 'default' ':'
      case 25711:                   // 'delete' ':'
      case 25712:                   // 'descendant' ':'
      case 25713:                   // 'descendant-or-self' ':'
      case 25714:                   // 'descending' ':'
      case 25719:                   // 'div' ':'
      case 25720:                   // 'document' ':'
      case 25721:                   // 'document-node' ':'
      case 25722:                   // 'element' ':'
      case 25723:                   // 'else' ':'
      case 25724:                   // 'empty' ':'
      case 25725:                   // 'empty-sequence' ':'
      case 25726:                   // 'encoding' ':'
      case 25727:                   // 'end' ':'
      case 25729:                   // 'eq' ':'
      case 25730:                   // 'every' ':'
      case 25732:                   // 'except' ':'
      case 25733:                   // 'exit' ':'
      case 25734:                   // 'external' ':'
      case 25736:                   // 'first' ':'
      case 25737:                   // 'following' ':'
      case 25738:                   // 'following-sibling' ':'
      case 25739:                   // 'for' ':'
      case 25742:                   // 'from' ':'
      case 25743:                   // 'ft-option' ':'
      case 25747:                   // 'function' ':'
      case 25748:                   // 'ge' ':'
      case 25750:                   // 'group' ':'
      case 25752:                   // 'gt' ':'
      case 25753:                   // 'idiv' ':'
      case 25754:                   // 'if' ':'
      case 25755:                   // 'import' ':'
      case 25756:                   // 'in' ':'
      case 25757:                   // 'index' ':'
      case 25761:                   // 'insert' ':'
      case 25762:                   // 'instance' ':'
      case 25763:                   // 'integrity' ':'
      case 25764:                   // 'intersect' ':'
      case 25765:                   // 'into' ':'
      case 25766:                   // 'is' ':'
      case 25767:                   // 'item' ':'
      case 25768:                   // 'json' ':'
      case 25770:                   // 'jsoniq' ':'
      case 25773:                   // 'last' ':'
      case 25774:                   // 'lax' ':'
      case 25775:                   // 'le' ':'
      case 25777:                   // 'let' ':'
      case 25779:                   // 'loop' ':'
      case 25781:                   // 'lt' ':'
      case 25783:                   // 'mod' ':'
      case 25784:                   // 'modify' ':'
      case 25785:                   // 'module' ':'
      case 25787:                   // 'namespace' ':'
      case 25788:                   // 'namespace-node' ':'
      case 25789:                   // 'ne' ':'
      case 25794:                   // 'node' ':'
      case 25795:                   // 'nodes' ':'
      case 25798:                   // 'object' ':'
      case 25802:                   // 'only' ':'
      case 25803:                   // 'option' ':'
      case 25804:                   // 'or' ':'
      case 25805:                   // 'order' ':'
      case 25806:                   // 'ordered' ':'
      case 25807:                   // 'ordering' ':'
      case 25810:                   // 'parent' ':'
      case 25816:                   // 'preceding' ':'
      case 25817:                   // 'preceding-sibling' ':'
      case 25820:                   // 'processing-instruction' ':'
      case 25822:                   // 'rename' ':'
      case 25823:                   // 'replace' ':'
      case 25824:                   // 'return' ':'
      case 25825:                   // 'returning' ':'
      case 25826:                   // 'revalidation' ':'
      case 25828:                   // 'satisfies' ':'
      case 25829:                   // 'schema' ':'
      case 25830:                   // 'schema-attribute' ':'
      case 25831:                   // 'schema-element' ':'
      case 25832:                   // 'score' ':'
      case 25833:                   // 'select' ':'
      case 25834:                   // 'self' ':'
      case 25839:                   // 'sliding' ':'
      case 25840:                   // 'some' ':'
      case 25841:                   // 'stable' ':'
      case 25842:                   // 'start' ':'
      case 25845:                   // 'strict' ':'
      case 25848:                   // 'switch' ':'
      case 25849:                   // 'text' ':'
      case 25853:                   // 'to' ':'
      case 25854:                   // 'treat' ':'
      case 25856:                   // 'try' ':'
      case 25857:                   // 'tumbling' ':'
      case 25858:                   // 'type' ':'
      case 25859:                   // 'typeswitch' ':'
      case 25860:                   // 'union' ':'
      case 25862:                   // 'unordered' ':'
      case 25863:                   // 'updating' ':'
      case 25866:                   // 'validate' ':'
      case 25867:                   // 'value' ':'
      case 25868:                   // 'variable' ':'
      case 25869:                   // 'version' ':'
      case 25872:                   // 'where' ':'
      case 25873:                   // 'while' ':'
      case 25876:                   // 'with' ':'
        this.parse_NCName();
        break;
      default:
        this.parse_ExprSingle();
      }
      this.lookahead1W(26);         // S^WS | '(:' | ':'
      this.shift(50);               // ':'
      this.lookahead1W(266);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.whitespace();
      this.parse_ExprSingle();
      this.eventHandler.endNonterminal("PairConstructor", this.e0);
    }

    private try_PairConstructor()
    {
      switch (this.l1)
      {
      case 78:                      // 'append'
        this.lookahead2W(278);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '#' | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' |
                                    // ':' | '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
        break;
      case 139:                     // 'for'
        this.lookahead2W(187);      // S^WS | '#' | '$' | '(' | '(:' | ':' | 'sliding' | 'tumbling'
        break;
      case 161:                     // 'insert'
        this.lookahead2W(281);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // NCName^Token | S^WS | '#' | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' |
                                    // '/' | '//' | ':' | '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
        break;
      case 177:                     // 'let'
        this.lookahead2W(178);      // S^WS | '#' | '$' | '(' | '(:' | ':' | 'score'
        break;
      case 187:                     // 'namespace'
        this.lookahead2W(251);      // NCName^Token | S^WS | '#' | '(' | '(:' | ':' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | '{'
        break;
      case 220:                     // 'processing-instruction'
        this.lookahead2W(247);      // NCName^Token | S^WS | '#' | '(:' | ':' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'null' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | '{'
        break;
      case 223:                     // 'replace'
        this.lookahead2W(180);      // S^WS | '#' | '(' | '(:' | ':' | 'node' | 'value'
        break;
      case 266:                     // 'validate'
        this.lookahead2W(191);      // S^WS | '#' | '(' | '(:' | ':' | 'lax' | 'strict' | 'type' | '{'
        break;
      case 83:                      // 'attribute'
      case 122:                     // 'element'
        this.lookahead2W(256);      // EQName^Token | S^WS | '#' | '(:' | ':' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | '{'
        break;
      case 97:                      // 'comment'
      case 249:                     // 'text'
        this.lookahead2W(149);      // S^WS | '#' | '(:' | ':' | '{'
        break;
      case 111:                     // 'delete'
      case 222:                     // 'rename'
        this.lookahead2W(261);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '#' | '$' | '$$' | '%' | '(' | '(:' | ':' | '<' | '<!--' | '<?' | '[' |
                                    // 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'jsoniq' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'null' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | '{' | '{|'
        break;
      case 104:                     // 'copy'
      case 130:                     // 'every'
      case 240:                     // 'some'
        this.lookahead2W(165);      // S^WS | '#' | '$' | '(' | '(:' | ':'
        break;
      case 135:                     // 'false'
      case 197:                     // 'null'
      case 255:                     // 'true'
        this.lookahead2W(208);      // S^WS | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | '-' | '.' | '/' | '//' | ':' |
                                    // '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' | 'castable' |
                                    // 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' | 'treat' |
                                    // 'union' | '|' | '||'
        break;
      case 120:                     // 'document'
      case 206:                     // 'ordered'
      case 256:                     // 'try'
      case 262:                     // 'unordered'
        this.lookahead2W(167);      // S^WS | '#' | '(' | '(:' | ':' | '{'
        break;
      case 121:                     // 'document-node'
      case 125:                     // 'empty-sequence'
      case 167:                     // 'item'
      case 188:                     // 'namespace-node'
      case 194:                     // 'node'
      case 230:                     // 'schema-attribute'
      case 231:                     // 'schema-element'
        this.lookahead2W(96);       // S^WS | '#' | '(:' | ':'
        break;
      case 71:                      // 'after'
      case 73:                      // 'allowing'
      case 74:                      // 'ancestor'
      case 75:                      // 'ancestor-or-self'
      case 76:                      // 'and'
      case 80:                      // 'as'
      case 81:                      // 'ascending'
      case 82:                      // 'at'
      case 84:                      // 'base-uri'
      case 85:                      // 'before'
      case 86:                      // 'boundary-space'
      case 87:                      // 'break'
      case 89:                      // 'case'
      case 90:                      // 'cast'
      case 91:                      // 'castable'
      case 92:                      // 'catch'
      case 94:                      // 'child'
      case 95:                      // 'collation'
      case 98:                      // 'constraint'
      case 99:                      // 'construction'
      case 102:                     // 'context'
      case 103:                     // 'continue'
      case 105:                     // 'copy-namespaces'
      case 106:                     // 'count'
      case 107:                     // 'decimal-format'
      case 109:                     // 'declare'
      case 110:                     // 'default'
      case 112:                     // 'descendant'
      case 113:                     // 'descendant-or-self'
      case 114:                     // 'descending'
      case 119:                     // 'div'
      case 123:                     // 'else'
      case 124:                     // 'empty'
      case 126:                     // 'encoding'
      case 127:                     // 'end'
      case 129:                     // 'eq'
      case 132:                     // 'except'
      case 133:                     // 'exit'
      case 134:                     // 'external'
      case 136:                     // 'first'
      case 137:                     // 'following'
      case 138:                     // 'following-sibling'
      case 142:                     // 'from'
      case 143:                     // 'ft-option'
      case 147:                     // 'function'
      case 148:                     // 'ge'
      case 150:                     // 'group'
      case 152:                     // 'gt'
      case 153:                     // 'idiv'
      case 154:                     // 'if'
      case 155:                     // 'import'
      case 156:                     // 'in'
      case 157:                     // 'index'
      case 162:                     // 'instance'
      case 163:                     // 'integrity'
      case 164:                     // 'intersect'
      case 165:                     // 'into'
      case 166:                     // 'is'
      case 168:                     // 'json'
      case 170:                     // 'jsoniq'
      case 173:                     // 'last'
      case 174:                     // 'lax'
      case 175:                     // 'le'
      case 179:                     // 'loop'
      case 181:                     // 'lt'
      case 183:                     // 'mod'
      case 184:                     // 'modify'
      case 185:                     // 'module'
      case 189:                     // 'ne'
      case 195:                     // 'nodes'
      case 198:                     // 'object'
      case 202:                     // 'only'
      case 203:                     // 'option'
      case 204:                     // 'or'
      case 205:                     // 'order'
      case 207:                     // 'ordering'
      case 210:                     // 'parent'
      case 216:                     // 'preceding'
      case 217:                     // 'preceding-sibling'
      case 224:                     // 'return'
      case 225:                     // 'returning'
      case 226:                     // 'revalidation'
      case 228:                     // 'satisfies'
      case 229:                     // 'schema'
      case 232:                     // 'score'
      case 233:                     // 'select'
      case 234:                     // 'self'
      case 239:                     // 'sliding'
      case 241:                     // 'stable'
      case 242:                     // 'start'
      case 245:                     // 'strict'
      case 248:                     // 'switch'
      case 253:                     // 'to'
      case 254:                     // 'treat'
      case 257:                     // 'tumbling'
      case 258:                     // 'type'
      case 259:                     // 'typeswitch'
      case 260:                     // 'union'
      case 263:                     // 'updating'
      case 267:                     // 'value'
      case 268:                     // 'variable'
      case 269:                     // 'version'
      case 272:                     // 'where'
      case 273:                     // 'while'
      case 276:                     // 'with'
        this.lookahead2W(144);      // S^WS | '#' | '(' | '(:' | ':'
        break;
      default:
        this.lk = this.l1;
      }
      if (this.lk == 25735          // 'false' ':'
       || this.lk == 25797          // 'null' ':'
       || this.lk == 25855)         // 'true' ':'
      {
        this.lk = this.memoized(21, this.e0);
        if (this.lk == 0)
        {
          var b0A = this.b0; var e0A = this.e0; var l1A = this.l1;
          var b1A = this.b1; var e1A = this.e1; var l2A = this.l2;
          var b2A = this.b2; var e2A = this.e2;
          try
          {
            this.try_ExprSingle();
            this.memoize(21, e0A, -1);
            this.lk = -3;
          }
          catch (p1A)
          {
            this.lk = -2;
            this.b0 = b0A; this.e0 = e0A; this.l1 = l1A; if (this.l1 == 0) {this.end = e0A;} else {
            this.b1 = b1A; this.e1 = e1A; this.l2 = l2A; if (this.l2 == 0) {this.end = e1A;} else {
            this.b2 = b2A; this.e2 = e2A; this.end = e2A; }}
            this.memoize(21, e0A, -2);
          }
        }
      }
      switch (this.lk)
      {
      case -2:
      case 19:                      // NCName^Token
      case 25671:                   // 'after' ':'
      case 25673:                   // 'allowing' ':'
      case 25674:                   // 'ancestor' ':'
      case 25675:                   // 'ancestor-or-self' ':'
      case 25676:                   // 'and' ':'
      case 25678:                   // 'append' ':'
      case 25680:                   // 'as' ':'
      case 25681:                   // 'ascending' ':'
      case 25682:                   // 'at' ':'
      case 25683:                   // 'attribute' ':'
      case 25684:                   // 'base-uri' ':'
      case 25685:                   // 'before' ':'
      case 25686:                   // 'boundary-space' ':'
      case 25687:                   // 'break' ':'
      case 25689:                   // 'case' ':'
      case 25690:                   // 'cast' ':'
      case 25691:                   // 'castable' ':'
      case 25692:                   // 'catch' ':'
      case 25694:                   // 'child' ':'
      case 25695:                   // 'collation' ':'
      case 25697:                   // 'comment' ':'
      case 25698:                   // 'constraint' ':'
      case 25699:                   // 'construction' ':'
      case 25702:                   // 'context' ':'
      case 25703:                   // 'continue' ':'
      case 25704:                   // 'copy' ':'
      case 25705:                   // 'copy-namespaces' ':'
      case 25706:                   // 'count' ':'
      case 25707:                   // 'decimal-format' ':'
      case 25709:                   // 'declare' ':'
      case 25710:                   // 'default' ':'
      case 25711:                   // 'delete' ':'
      case 25712:                   // 'descendant' ':'
      case 25713:                   // 'descendant-or-self' ':'
      case 25714:                   // 'descending' ':'
      case 25719:                   // 'div' ':'
      case 25720:                   // 'document' ':'
      case 25721:                   // 'document-node' ':'
      case 25722:                   // 'element' ':'
      case 25723:                   // 'else' ':'
      case 25724:                   // 'empty' ':'
      case 25725:                   // 'empty-sequence' ':'
      case 25726:                   // 'encoding' ':'
      case 25727:                   // 'end' ':'
      case 25729:                   // 'eq' ':'
      case 25730:                   // 'every' ':'
      case 25732:                   // 'except' ':'
      case 25733:                   // 'exit' ':'
      case 25734:                   // 'external' ':'
      case 25736:                   // 'first' ':'
      case 25737:                   // 'following' ':'
      case 25738:                   // 'following-sibling' ':'
      case 25739:                   // 'for' ':'
      case 25742:                   // 'from' ':'
      case 25743:                   // 'ft-option' ':'
      case 25747:                   // 'function' ':'
      case 25748:                   // 'ge' ':'
      case 25750:                   // 'group' ':'
      case 25752:                   // 'gt' ':'
      case 25753:                   // 'idiv' ':'
      case 25754:                   // 'if' ':'
      case 25755:                   // 'import' ':'
      case 25756:                   // 'in' ':'
      case 25757:                   // 'index' ':'
      case 25761:                   // 'insert' ':'
      case 25762:                   // 'instance' ':'
      case 25763:                   // 'integrity' ':'
      case 25764:                   // 'intersect' ':'
      case 25765:                   // 'into' ':'
      case 25766:                   // 'is' ':'
      case 25767:                   // 'item' ':'
      case 25768:                   // 'json' ':'
      case 25770:                   // 'jsoniq' ':'
      case 25773:                   // 'last' ':'
      case 25774:                   // 'lax' ':'
      case 25775:                   // 'le' ':'
      case 25777:                   // 'let' ':'
      case 25779:                   // 'loop' ':'
      case 25781:                   // 'lt' ':'
      case 25783:                   // 'mod' ':'
      case 25784:                   // 'modify' ':'
      case 25785:                   // 'module' ':'
      case 25787:                   // 'namespace' ':'
      case 25788:                   // 'namespace-node' ':'
      case 25789:                   // 'ne' ':'
      case 25794:                   // 'node' ':'
      case 25795:                   // 'nodes' ':'
      case 25798:                   // 'object' ':'
      case 25802:                   // 'only' ':'
      case 25803:                   // 'option' ':'
      case 25804:                   // 'or' ':'
      case 25805:                   // 'order' ':'
      case 25806:                   // 'ordered' ':'
      case 25807:                   // 'ordering' ':'
      case 25810:                   // 'parent' ':'
      case 25816:                   // 'preceding' ':'
      case 25817:                   // 'preceding-sibling' ':'
      case 25820:                   // 'processing-instruction' ':'
      case 25822:                   // 'rename' ':'
      case 25823:                   // 'replace' ':'
      case 25824:                   // 'return' ':'
      case 25825:                   // 'returning' ':'
      case 25826:                   // 'revalidation' ':'
      case 25828:                   // 'satisfies' ':'
      case 25829:                   // 'schema' ':'
      case 25830:                   // 'schema-attribute' ':'
      case 25831:                   // 'schema-element' ':'
      case 25832:                   // 'score' ':'
      case 25833:                   // 'select' ':'
      case 25834:                   // 'self' ':'
      case 25839:                   // 'sliding' ':'
      case 25840:                   // 'some' ':'
      case 25841:                   // 'stable' ':'
      case 25842:                   // 'start' ':'
      case 25845:                   // 'strict' ':'
      case 25848:                   // 'switch' ':'
      case 25849:                   // 'text' ':'
      case 25853:                   // 'to' ':'
      case 25854:                   // 'treat' ':'
      case 25856:                   // 'try' ':'
      case 25857:                   // 'tumbling' ':'
      case 25858:                   // 'type' ':'
      case 25859:                   // 'typeswitch' ':'
      case 25860:                   // 'union' ':'
      case 25862:                   // 'unordered' ':'
      case 25863:                   // 'updating' ':'
      case 25866:                   // 'validate' ':'
      case 25867:                   // 'value' ':'
      case 25868:                   // 'variable' ':'
      case 25869:                   // 'version' ':'
      case 25872:                   // 'where' ':'
      case 25873:                   // 'while' ':'
      case 25876:                   // 'with' ':'
        this.try_NCName();
        break;
      case -3:
        break;
      default:
        this.try_ExprSingle();
      }
      this.lookahead1W(26);         // S^WS | '(:' | ':'
      this.shiftT(50);              // ':'
      this.lookahead1W(266);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      this.try_ExprSingle();
    }

    private parse_ArrayConstructor()
    {
      this.eventHandler.startNonterminal("ArrayConstructor", this.e0);
      this.shift(69);               // '['
      this.lookahead1W(272);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | ']' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      if (this.l1 != 70)            // ']'
      {
        this.whitespace();
        this.parse_Expr();
      }
      this.shift(70);               // ']'
      this.eventHandler.endNonterminal("ArrayConstructor", this.e0);
    }

    private try_ArrayConstructor()
    {
      this.shiftT(69);              // '['
      this.lookahead1W(272);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | ']' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      if (this.l1 != 70)            // ']'
      {
        this.try_Expr();
      }
      this.shiftT(70);              // ']'
    }

    private parse_BlockExpr()
    {
      this.eventHandler.startNonterminal("BlockExpr", this.e0);
      this.shift(281);              // '{'
      this.lookahead1W(280);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | ';' |
                                    // '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|' | '}'
      this.whitespace();
      this.parse_StatementsAndOptionalExpr();
      this.shift(287);              // '}'
      this.eventHandler.endNonterminal("BlockExpr", this.e0);
    }

    private try_BlockExpr()
    {
      this.shiftT(281);             // '{'
      this.lookahead1W(280);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | ';' |
                                    // '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|' | '}'
      this.try_StatementsAndOptionalExpr();
      this.shiftT(287);             // '}'
    }

    private parse_FunctionDecl()
    {
      this.eventHandler.startNonterminal("FunctionDecl", this.e0);
      this.shift(147);              // 'function'
      this.lookahead1W(245);        // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      this.whitespace();
      this.parse_EQName();
      this.lookahead1W(22);         // S^WS | '(' | '(:'
      this.shift(35);               // '('
      this.lookahead1W(98);         // S^WS | '$' | '(:' | ')'
      if (this.l1 == 31)            // '$'
      {
        this.whitespace();
        this.parse_ParamList();
      }
      this.shift(38);               // ')'
      this.lookahead1W(158);        // S^WS | '(:' | 'as' | 'external' | '{'
      if (this.l1 == 80)            // 'as'
      {
        this.whitespace();
        this.parse_ReturnType();
      }
      this.lookahead1W(122);        // S^WS | '(:' | 'external' | '{'
      switch (this.l1)
      {
      case 281:                     // '{'
        this.shift(281);            // '{'
        this.lookahead1W(280);      // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | ';' |
                                    // '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|' | '}'
        this.whitespace();
        this.parse_StatementsAndOptionalExpr();
        this.shift(287);            // '}'
        break;
      default:
        this.shift(134);            // 'external'
      }
      this.eventHandler.endNonterminal("FunctionDecl", this.e0);
    }

    private parse_ReturnType()
    {
      this.eventHandler.startNonterminal("ReturnType", this.e0);
      this.shift(80);               // 'as'
      this.lookahead1W(253);        // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      this.whitespace();
      this.parse_SequenceType();
      this.eventHandler.endNonterminal("ReturnType", this.e0);
    }

    private shift(t: number)
    {
      if (this.l1 == t)
      {
        this.whitespace();
        this.eventHandler.terminal(Parser.TOKEN[this.l1], this.b1, this.e1 > this.size ? this.size : this.e1);
        this.b0 = this.b1; this.e0 = this.e1; this.l1 = this.l2; if (this.l1 != 0) {
        this.b1 = this.b2; this.e1 = this.e2; this.l2 = 0; }
      }
      else
      {
        this.error(this.b1, this.e1, 0, this.l1, t);
      }
    }

    private shiftT(t: number)
    {
      if (this.l1 == t)
      {
        this.b0 = this.b1; this.e0 = this.e1; this.l1 = this.l2; if (this.l1 != 0) {
        this.b1 = this.b2; this.e1 = this.e2; this.l2 = 0; }
      }
      else
      {
        this.error(this.b1, this.e1, 0, this.l1, t);
      }
    }

    private skip(code: number)
    {
      var b0W = this.b0; var e0W = this.e0; var l1W = this.l1;
      var b1W = this.b1; var e1W = this.e1;

      this.l1 = code; this.b1 = this.begin; this.e1 = this.end;
      this.l2 = 0;

      this.try_Whitespace();

      this.b0 = b0W; this.e0 = e0W; this.l1 = l1W; if (this.l1 != 0) {
      this.b1 = b1W; this.e1 = e1W; }
    }

    private whitespace()
    {
      if (this.e0 != this.b1)
      {
        this.eventHandler.whitespace(this.e0, this.b1);
        this.e0 = this.b1;
      }
    }

    private matchW(set: number): number
    {
      var code: number;
      for (;;)
      {
        code = this.match(set);
        if (code != 22)             // S^WS
        {
          if (code != 37)           // '(:'
          {
            break;
          }
          this.skip(code);
        }
      }
      return code;
    }

    private lookahead1W(set: number)
    {
      if (this.l1 == 0)
      {
        this.l1 = this.matchW(set);
        this.b1 = this.begin;
        this.e1 = this.end;
      }
    }

    private lookahead2W(set: number)
    {
      if (this.l2 == 0)
      {
        this.l2 = this.matchW(set);
        this.b2 = this.begin;
        this.e2 = this.end;
      }
      this.lk = (this.l2 << 9) | this.l1;
    }

    private lookahead1(set: number)
    {
      if (this.l1 == 0)
      {
        this.l1 = this.match(set);
        this.b1 = this.begin;
        this.e1 = this.end;
      }
    }

    private lookahead2(set: number)
    {
      if (this.l2 == 0)
      {
        this.l2 = this.match(set);
        this.b2 = this.begin;
        this.e2 = this.end;
      }
      this.lk = (this.l2 << 9) | this.l1;
    }

    private error(b: number, e: number, s: number, l: number, t: number)
    {
      if (e >= this.ex)
      {
        this.bx = b;
        this.ex = e;
        this.sx = s;
        this.lx = l;
        this.tx = t;
      }
      throw new ParseException(this.bx, this.ex, this.sx, this.lx, this.tx);
    }

    private lk: number; private b0: number; private e0: number;
    private l1: number; private b1: number; private e1: number;
    private l2: number; private b2: number; private e2: number;
    private bx: number; private ex: number; private sx: number; private lx: number; private tx: number;
    private eventHandler: ParsingEventHandler;
    private memo: Memoizer;

    private memoize(i: number, e: number, v: number)
    {
      this.memo[(e << 5) + i] = v;
    }

    private memoized(i: number, e: number): number
    {
      var v = this.memo[(e << 5) + i];
      return typeof v != "undefined" ? v : 0;
    }

    private input: string;
    private size: number;
    private begin: number;
    private end: number;

    private match(tokenSetId: number): number
    {
      var nonbmp = false;
      this.begin = this.end;
      var current = this.end;
      var result = Parser.INITIAL[tokenSetId];
      var state = 0;
      for (var code = result & 8191; code != 0; )
      {
        var charclass: number;
        var c0 = current < this.size ? this.input.charCodeAt(current) : 0;
        ++current;
        if (c0 < 0x80)
        {
          charclass = Parser.MAP0[c0];
        }
        else if (c0 < 0xd800)
        {
          var c1 = c0 >> 4;
          charclass = Parser.MAP1[(c0 & 15) + Parser.MAP1[(c1 & 31) + Parser.MAP1[c1 >> 5]]];
        }
        else
        {
          if (c0 < 0xdc00)
          {
            var c1: number = current < this.size ? this.input.charCodeAt(current) : 0;
            if (c1 >= 0xdc00 && c1 < 0xe000)
            {
              ++current;
              c0 = ((c0 & 0x3ff) << 10) + (c1 & 0x3ff) + 0x10000;
              nonbmp = true;
            }
          }
          var lo = 0, hi = 5;
          for (var m = 3; ; m = (hi + lo) >> 1)
          {
            if (Parser.MAP2[m] > c0) hi = m - 1;
            else if (Parser.MAP2[6 + m] < c0) lo = m + 1;
            else {charclass = Parser.MAP2[12 + m]; break;}
            if (lo > hi) {charclass = 0; break;}
          }
        }

        state = code;
        var i0 = (charclass << 13) + code - 1;
        code = Parser.TRANSITION[(i0 & 31) + Parser.TRANSITION[i0 >> 5]];

        if (code > 8191)
        {
          result = code;
          code &= 8191;
          this.end = current;
        }
      }

      result >>= 13;
      if (result == 0)
      {
        this.end = current - 1;
        var c1: number = this.end < this.size ? this.input.charCodeAt(this.end) : 0;
        if (c1 >= 0xdc00 && c1 < 0xe000) --this.end;
        this.error(this.begin, this.end, state, -1, -1);
      }

      if (nonbmp)
      {
        for (var i = result >> 9; i > 0; --i)
        {
          --this.end;
          var c1: number = this.end < this.size ? this.input.charCodeAt(this.end) : 0;
          if (c1 >= 0xdc00 && c1 < 0xe000) --this.end;
        }
      }
      else
      {
        this.end -= result >> 9;
      }

      return (result & 511) - 1;
    }

    private static getTokenSet(tokenSetId: number)
    {
      var set: string[] = [];
      var s = tokenSetId < 0 ? - tokenSetId : Parser.INITIAL[tokenSetId] & 8191;
      for (var i = 0; i < 289; i += 32)
      {
        var j = i;
        var i0 = (i >> 5) * 4235 + s - 1;
      var i1 = i0 >> 2;
      var i2 = i1 >> 2;
      var f = Parser.EXPECTED[(i0 & 3) + Parser.EXPECTED[(i1 & 3) + Parser.EXPECTED[(i2 & 15) + Parser.EXPECTED[i2 >> 4]]]];
        for ( ; f != 0; f >>>= 1, ++j)
        {
          if ((f & 1) != 0)
          {
            set.push(Parser.TOKEN[j]);
          }
        }
      }
      return set;
    }

    private static MAP0: number[] =
    [
      /*   0 */ 71, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3,
      /*  35 */ 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 18, 19, 20, 21, 22,
      /*  63 */ 23, 24, 25, 26, 27, 28, 29, 26, 30, 30, 30, 30, 30, 31, 32, 33, 30, 30, 34, 30, 30, 35, 30, 30, 30, 36,
      /*  89 */ 30, 30, 37, 38, 39, 40, 30, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58,
      /* 115 */ 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 40, 40
    ];

    private static MAP1: number[] =
    [
      /*   0 */ 108, 124, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 156, 181, 181, 181, 181,
      /*  21 */ 181, 214, 215, 213, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
      /*  42 */ 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
      /*  63 */ 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
      /*  84 */ 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
      /* 105 */ 214, 214, 214, 247, 261, 277, 293, 309, 355, 371, 387, 423, 423, 423, 415, 339, 331, 339, 331, 339, 339,
      /* 126 */ 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 440, 440, 440, 440, 440, 440, 440,
      /* 147 */ 324, 339, 339, 339, 339, 339, 339, 339, 339, 401, 423, 423, 424, 422, 423, 423, 339, 339, 339, 339, 339,
      /* 168 */ 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 423, 423, 423, 423, 423, 423, 423, 423,
      /* 189 */ 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423,
      /* 210 */ 423, 423, 423, 338, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339,
      /* 231 */ 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 423, 71, 0, 0, 0, 0, 0, 0, 0,
      /* 255 */ 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,
      /* 289 */ 13, 14, 15, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29,
      /* 315 */ 26, 30, 30, 30, 30, 30, 31, 32, 33, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 40, 30, 30,
      /* 341 */ 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 34, 30, 30, 35, 30, 30, 30, 36, 30, 30, 37,
      /* 367 */ 38, 39, 40, 30, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
      /* 393 */ 62, 63, 64, 65, 66, 67, 68, 69, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 30, 30, 40, 40, 40, 40,
      /* 419 */ 40, 40, 40, 70, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 70, 70, 70, 70, 70, 70,
      /* 445 */ 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70
    ];

    private static MAP2: number[] =
    [
      /*  0 */ 57344, 63744, 64976, 65008, 65536, 983040, 63743, 64975, 65007, 65533, 983039, 1114111, 40, 30, 40, 30, 30,
      /* 17 */ 40
    ];

    private static INITIAL: number[] =
    [
      /*   0 */ 1, 24578, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28,
      /*  28 */ 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54,
      /*  54 */ 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,
      /*  80 */ 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105,
      /* 105 */ 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126,
      /* 126 */ 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147,
      /* 147 */ 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
      /* 168 */ 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189,
      /* 189 */ 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210,
      /* 210 */ 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
      /* 231 */ 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252,
      /* 252 */ 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273,
      /* 273 */ 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289
    ];

    private static TRANSITION: number[] =
    [
      /*     0 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*    15 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*    30 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*    45 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*    60 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*    75 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*    90 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*   105 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*   120 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*   135 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*   150 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*   165 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*   180 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*   195 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*   210 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*   225 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*   240 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*   255 */ 32640, 18432, 18508, 18512, 18508, 18508, 18471, 18503, 18452, 18508, 18544, 32640, 25253, 32640, 72986,
      /*   270 */ 32640, 32640, 18907, 32640, 23058, 21807, 31154, 19779, 32640, 18612, 18649, 18757, 18789, 18959, 22037,
      /*   285 */ 22069, 18821, 22057, 18887, 18787, 18957, 18991, 36451, 32640, 24875, 69179, 19041, 62458, 19134, 40819,
      /*   300 */ 21341, 19073, 46732, 21342, 19074, 46733, 19106, 19193, 40822, 19438, 66570, 19251, 21244, 41014, 19334,
      /*   315 */ 19366, 19398, 19470, 19502, 19538, 25119, 19498, 19534, 19570, 19359, 19629, 19422, 19661, 19735, 19811,
      /*   330 */ 19878, 19910, 19942, 20019, 30851, 30993, 20026, 30858, 20058, 19907, 21927, 19969, 20090, 20138, 20211,
      /*   345 */ 20265, 20357, 63521, 20412, 63518, 20488, 20547, 20291, 20579, 20709, 20774, 20821, 20870, 20853, 20885,
      /*   360 */ 20789, 20917, 20949, 21030, 21062, 21094, 21084, 21126, 21186, 21310, 21452, 21374, 21431, 21484, 21618,
      /*   375 */ 21650, 21741, 21802, 23057, 21839, 21899, 21959, 22101, 21154, 22249, 22281, 22427, 22459, 22487, 32640,
      /*   390 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*   405 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*   420 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*   435 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*   450 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*   465 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*   480 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*   495 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*   510 */ 32640, 32640, 22530, 32640, 61740, 32640, 32640, 53140, 22565, 22594, 54694, 22641, 32640, 25253, 32640,
      /*   525 */ 22707, 32640, 32640, 18907, 32640, 40804, 19219, 31154, 19779, 32640, 18612, 18649, 18757, 18789, 18959,
      /*   540 */ 22037, 22069, 18821, 22057, 18887, 18787, 18957, 18991, 36451, 32640, 24875, 69179, 19041, 62458, 19134,
      /*   555 */ 40819, 21341, 19073, 46732, 21342, 19074, 46733, 19106, 19193, 40822, 19438, 66570, 19251, 21244, 41014,
      /*   570 */ 19334, 19366, 19398, 19470, 19502, 19538, 25119, 19498, 19534, 19570, 19359, 19629, 19422, 19661, 19735,
      /*   585 */ 19811, 19878, 19910, 19942, 20019, 30851, 30993, 20026, 30858, 20058, 19907, 21927, 19969, 20090, 20138,
      /*   600 */ 20211, 20265, 20357, 63521, 20412, 63518, 20488, 20547, 20291, 20579, 20709, 20774, 20821, 20870, 20853,
      /*   615 */ 20885, 20789, 20917, 20949, 21030, 21062, 21094, 21084, 21126, 21186, 21310, 21452, 21374, 21431, 21484,
      /*   630 */ 21618, 21650, 21741, 21802, 23057, 21839, 21899, 21959, 22101, 21154, 22249, 22281, 22427, 22459, 22487,
      /*   645 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*   660 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*   675 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*   690 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*   705 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*   720 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*   735 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*   750 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*   765 */ 32640, 32640, 32640, 22757, 32640, 23442, 32640, 20728, 22822, 22912, 62853, 22949, 23023, 32640, 25253,
      /*   780 */ 37379, 72986, 32640, 32640, 18907, 32640, 23058, 40482, 31154, 19779, 32640, 18612, 18649, 18757, 18789,
      /*   795 */ 18959, 22037, 22069, 18821, 22057, 18887, 18787, 18957, 18991, 36451, 32640, 24875, 69179, 19041, 62458,
      /*   810 */ 19134, 40819, 21341, 19073, 46732, 21342, 19074, 46733, 19106, 19193, 40822, 19438, 66570, 19251, 21244,
      /*   825 */ 41014, 19334, 19366, 19398, 19470, 19502, 19538, 25119, 19498, 19534, 19570, 19359, 19629, 19422, 19661,
      /*   840 */ 19735, 19811, 19878, 19910, 19942, 20019, 30851, 30993, 20026, 30858, 20058, 19907, 21927, 19969, 20090,
      /*   855 */ 20138, 20211, 20265, 20357, 63521, 20412, 63518, 20488, 20547, 20291, 20579, 20709, 20774, 20821, 20870,
      /*   870 */ 20853, 20885, 20789, 20917, 20949, 21030, 21062, 21094, 21084, 21126, 21186, 21310, 21452, 21374, 21431,
      /*   885 */ 21484, 21618, 21650, 21741, 21802, 23057, 21839, 21899, 21959, 22101, 21154, 22249, 22281, 22427, 22459,
      /*   900 */ 22487, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*   915 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*   930 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*   945 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*   960 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*   975 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*   990 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  1005 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  1020 */ 32640, 32640, 32640, 32640, 23090, 32640, 70756, 57235, 23625, 57174, 23143, 53889, 57205, 23194, 32640,
      /*  1035 */ 44590, 57237, 72986, 32640, 32640, 18907, 32640, 23058, 18925, 31154, 19779, 32640, 18612, 18649, 18757,
      /*  1050 */ 18789, 18959, 22037, 22069, 18821, 22057, 18887, 18787, 18957, 18991, 36451, 32640, 24875, 69179, 19041,
      /*  1065 */ 62458, 19134, 40819, 22132, 19073, 46732, 23294, 19074, 46733, 19106, 19193, 40822, 19438, 66570, 19251,
      /*  1080 */ 21244, 41014, 19334, 19366, 19398, 19470, 19502, 19538, 25119, 19498, 19534, 19570, 19359, 19629, 19422,
      /*  1095 */ 19661, 19735, 19811, 19878, 19910, 19942, 20019, 30851, 30993, 20026, 30858, 20058, 19907, 21927, 19969,
      /*  1110 */ 20090, 20138, 20211, 20265, 20357, 63521, 20412, 63518, 20488, 20547, 20291, 20579, 20709, 20774, 20821,
      /*  1125 */ 20870, 20853, 20885, 20789, 20917, 20949, 21030, 21062, 21094, 21084, 21126, 21186, 21310, 21452, 21374,
      /*  1140 */ 21431, 21484, 21618, 21650, 21741, 21802, 23057, 21839, 21899, 21959, 22101, 21154, 22249, 22281, 22427,
      /*  1155 */ 22459, 22487, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  1170 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  1185 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  1200 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  1215 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  1230 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  1245 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  1260 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  1275 */ 32640, 32640, 32640, 32640, 32640, 23361, 32640, 61740, 23437, 23807, 23824, 22912, 35136, 23474, 23607,
      /*  1290 */ 32640, 25253, 32640, 72986, 32640, 32640, 18907, 32640, 40461, 21807, 31154, 19779, 32640, 18612, 18649,
      /*  1305 */ 18757, 18789, 18959, 22037, 22069, 18821, 22057, 18887, 18787, 18957, 18991, 36451, 32640, 24875, 69179,
      /*  1320 */ 19041, 62458, 19134, 40819, 21341, 19073, 46732, 21342, 19074, 46733, 19106, 19193, 40822, 19438, 66570,
      /*  1335 */ 19251, 21244, 41014, 19334, 19366, 19398, 19470, 19502, 19538, 25119, 19498, 19534, 19570, 19359, 19629,
      /*  1350 */ 19422, 19661, 19735, 19811, 19878, 19910, 19942, 20019, 30851, 30993, 20026, 30858, 20058, 19907, 21927,
      /*  1365 */ 19969, 20090, 20138, 20211, 20265, 20357, 63521, 20412, 63518, 20488, 20547, 20291, 20579, 20709, 20774,
      /*  1380 */ 20821, 20870, 20853, 20885, 20789, 20917, 20949, 21030, 21062, 21094, 21084, 21126, 21186, 21310, 21452,
      /*  1395 */ 21374, 21431, 21484, 21618, 21650, 21741, 21802, 23057, 21839, 21899, 21959, 22101, 21154, 22249, 22281,
      /*  1410 */ 22427, 22459, 22487, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  1425 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  1440 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  1455 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  1470 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  1485 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  1500 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  1515 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  1530 */ 32640, 32640, 32640, 32640, 32640, 32640, 22530, 32640, 61740, 57592, 32640, 53140, 23657, 43708, 23704,
      /*  1545 */ 23789, 32640, 25253, 32640, 72986, 32640, 32640, 18907, 32640, 23058, 21807, 31154, 19779, 32640, 18612,
      /*  1560 */ 18649, 18757, 18789, 18959, 22037, 22069, 18821, 22057, 18887, 18787, 18957, 18991, 36451, 32640, 24875,
      /*  1575 */ 69179, 19041, 62458, 19134, 40819, 21341, 19073, 46732, 21342, 19074, 46733, 19106, 19193, 40822, 19438,
      /*  1590 */ 66570, 19251, 21244, 41014, 19334, 19366, 19398, 19470, 19502, 19538, 25119, 19498, 19534, 19570, 19359,
      /*  1605 */ 19629, 19422, 19661, 19735, 19811, 19878, 19910, 19942, 20019, 30851, 30993, 20026, 30858, 20058, 19907,
      /*  1620 */ 21927, 19969, 20090, 20138, 20211, 20265, 20357, 63521, 20412, 63518, 20488, 20547, 20291, 20579, 20709,
      /*  1635 */ 20774, 20821, 20870, 20853, 20885, 20789, 20917, 20949, 21030, 21062, 21094, 21084, 21126, 21186, 21310,
      /*  1650 */ 21452, 21374, 21431, 21484, 21618, 21650, 21741, 21802, 23057, 21839, 21899, 21959, 22101, 21154, 22249,
      /*  1665 */ 22281, 22427, 22459, 22487, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  1680 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  1695 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  1710 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  1725 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  1740 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  1755 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  1770 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  1785 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 22530, 32640, 61740, 32640, 32640, 39259, 23856, 32640,
      /*  1800 */ 32640, 23893, 32640, 25253, 32640, 72986, 32640, 32640, 18907, 32640, 23058, 21807, 31154, 19779, 32640,
      /*  1815 */ 18612, 18649, 18757, 18789, 18959, 73053, 22069, 23965, 22057, 18887, 18787, 18957, 18991, 36451, 32640,
      /*  1830 */ 24875, 69179, 19041, 62458, 19134, 40819, 21341, 19073, 46732, 21342, 19074, 46733, 19106, 19193, 40822,
      /*  1845 */ 19438, 66570, 19251, 21244, 41014, 19334, 19366, 19398, 19470, 19502, 19538, 25119, 19498, 19534, 19570,
      /*  1860 */ 19359, 19629, 19422, 19661, 19735, 19811, 19878, 19910, 19942, 20019, 30851, 30993, 20026, 30858, 20058,
      /*  1875 */ 19907, 21927, 19969, 20090, 20138, 20211, 20265, 20357, 63521, 20412, 63518, 20488, 20547, 20291, 20579,
      /*  1890 */ 20709, 20774, 20821, 20870, 20853, 20885, 20789, 20917, 20949, 21030, 21062, 21094, 21084, 21126, 21186,
      /*  1905 */ 21310, 21452, 21374, 21431, 21484, 21618, 21650, 21741, 21802, 23057, 21839, 21899, 21959, 22101, 21154,
      /*  1920 */ 22249, 22281, 22427, 22459, 22487, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  1935 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  1950 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  1965 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  1980 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  1995 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  2010 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  2025 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  2040 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 24031, 32640, 23861, 32640, 22776, 24082, 22912,
      /*  2055 */ 56240, 24206, 24329, 32640, 25253, 32640, 24379, 32640, 32640, 18907, 32640, 23058, 57529, 31154, 19779,
      /*  2070 */ 32640, 18612, 18649, 18757, 18789, 18959, 22037, 22069, 18821, 22057, 18887, 18787, 18957, 18991, 36451,
      /*  2085 */ 32640, 24875, 69179, 19041, 62458, 19134, 40819, 21341, 19073, 46732, 21342, 19074, 46733, 19106, 19193,
      /*  2100 */ 40822, 19438, 66570, 19251, 21244, 41014, 19334, 19366, 19398, 19470, 19502, 19538, 25119, 19498, 19534,
      /*  2115 */ 19570, 19359, 19629, 19422, 19661, 19735, 19811, 19878, 19910, 19942, 20019, 30851, 30993, 20026, 30858,
      /*  2130 */ 20058, 19907, 21927, 19969, 20090, 20138, 20211, 20265, 20357, 63521, 20412, 63518, 20488, 20547, 20291,
      /*  2145 */ 20579, 20709, 20774, 20821, 20870, 20853, 20885, 20789, 20917, 20949, 21030, 21062, 21094, 21084, 21126,
      /*  2160 */ 21186, 21310, 21452, 21374, 21431, 21484, 21618, 21650, 21741, 21802, 23057, 21839, 21899, 21959, 22101,
      /*  2175 */ 21154, 22249, 22281, 22427, 22459, 22487, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  2190 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  2205 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  2220 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  2235 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  2250 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  2265 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  2280 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  2295 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 24415, 24449, 24453, 24440, 24534, 24485,
      /*  2310 */ 24515, 24566, 24596, 24628, 32640, 32105, 32640, 72986, 32640, 32640, 18907, 32640, 23058, 21807, 31154,
      /*  2325 */ 45903, 32640, 18612, 18649, 18757, 18789, 18959, 22037, 22069, 18821, 22057, 18887, 18787, 18957, 18991,
      /*  2340 */ 36451, 32640, 24875, 69179, 19041, 62458, 19134, 40819, 21341, 19073, 46732, 21342, 19074, 46733, 19106,
      /*  2355 */ 19193, 40822, 19438, 66570, 19251, 21244, 41014, 19334, 19366, 19398, 19470, 19502, 19538, 25119, 19498,
      /*  2370 */ 19534, 19570, 19359, 19629, 19422, 19661, 19735, 19811, 19878, 19910, 19942, 20019, 30851, 30993, 20026,
      /*  2385 */ 30858, 20058, 19907, 21927, 19969, 20090, 20138, 20211, 20265, 20357, 63521, 20412, 63518, 20488, 20547,
      /*  2400 */ 20291, 20579, 20709, 20774, 20821, 20870, 20853, 20885, 20789, 20917, 20949, 21030, 21062, 21094, 21084,
      /*  2415 */ 21126, 21186, 21310, 21452, 21374, 21431, 21484, 21618, 21650, 21741, 21802, 23057, 21839, 21899, 21959,
      /*  2430 */ 22101, 21154, 22249, 22281, 22427, 22459, 22487, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  2445 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  2460 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  2475 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  2490 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  2505 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  2520 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  2535 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  2550 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 24678, 32640, 61740, 24746, 48361,
      /*  2565 */ 53140, 24789, 24808, 24825, 24857, 32640, 27397, 32640, 72986, 32640, 32640, 18907, 32640, 23058, 21807,
      /*  2580 */ 31154, 45563, 32640, 18612, 18649, 18757, 18789, 18959, 22037, 22069, 18821, 22057, 18887, 18787, 18957,
      /*  2595 */ 18991, 36451, 32640, 24875, 69179, 19041, 62458, 19134, 40819, 21341, 19073, 46732, 21342, 19074, 46733,
      /*  2610 */ 19106, 19193, 40822, 19438, 66570, 19251, 21244, 41014, 19334, 19366, 19398, 19470, 19502, 19538, 25119,
      /*  2625 */ 19498, 19534, 19570, 19359, 19629, 19422, 19661, 19735, 19811, 19878, 19910, 19942, 20019, 30851, 30993,
      /*  2640 */ 20026, 30858, 20058, 19907, 21927, 19969, 20090, 20138, 20211, 20265, 20357, 63521, 20412, 63518, 20488,
      /*  2655 */ 20547, 20291, 20579, 20709, 20774, 20821, 20870, 20853, 20885, 20789, 20917, 20949, 21030, 21062, 21094,
      /*  2670 */ 21084, 21126, 21186, 21310, 21452, 21374, 21431, 21484, 21618, 21650, 21741, 21802, 23057, 21839, 21899,
      /*  2685 */ 21959, 22101, 21154, 22249, 22281, 22427, 22459, 22487, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  2700 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  2715 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  2730 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  2745 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  2760 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  2775 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  2790 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  2805 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 24907, 32640, 61740, 32640,
      /*  2820 */ 32640, 52064, 24984, 25013, 61799, 25045, 32640, 25253, 32640, 72986, 32640, 32640, 18907, 32640, 23058,
      /*  2835 */ 21807, 31154, 19779, 32640, 18612, 18649, 18757, 18789, 18959, 22037, 22069, 25095, 22057, 18887, 18787,
      /*  2850 */ 18957, 18991, 36451, 32640, 24875, 69179, 19041, 62458, 19134, 40819, 21341, 19073, 46732, 21342, 19074,
      /*  2865 */ 46733, 19106, 19193, 40822, 19438, 66570, 19251, 21244, 41014, 19334, 19366, 19398, 19470, 19502, 19538,
      /*  2880 */ 25119, 19498, 19534, 19570, 19359, 19629, 19422, 19661, 19735, 19811, 19878, 19910, 19942, 20019, 30851,
      /*  2895 */ 30993, 20026, 30858, 20058, 19907, 21927, 19969, 20090, 20138, 20211, 20265, 20357, 63521, 20412, 63518,
      /*  2910 */ 20488, 20547, 20291, 20579, 20709, 20774, 20821, 20870, 20853, 20885, 20789, 20917, 20949, 21030, 21062,
      /*  2925 */ 21094, 21084, 21126, 21186, 21310, 21452, 21374, 21431, 21484, 21618, 21650, 21741, 21802, 23057, 21839,
      /*  2940 */ 21899, 21959, 22101, 21154, 22249, 22281, 22427, 22459, 22487, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  2955 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  2970 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  2985 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  3000 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  3015 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  3030 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  3045 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  3060 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 22530, 32640, 61740,
      /*  3075 */ 32640, 32640, 54034, 25151, 25188, 25171, 25235, 32640, 25253, 32640, 72986, 32640, 32640, 18907, 32640,
      /*  3090 */ 23058, 21807, 31154, 19779, 32640, 25302, 18649, 18757, 18789, 18959, 22037, 22069, 18821, 22057, 18887,
      /*  3105 */ 18787, 18957, 18991, 36451, 32640, 24875, 69179, 19041, 62458, 19134, 40819, 21341, 19073, 46732, 21342,
      /*  3120 */ 19074, 46733, 19106, 19193, 40822, 19438, 66570, 19251, 21244, 41014, 19334, 19366, 19398, 19470, 19502,
      /*  3135 */ 19538, 25119, 19498, 19534, 19570, 19359, 19629, 19422, 19661, 19735, 19811, 19878, 19910, 19942, 20019,
      /*  3150 */ 30851, 30993, 20026, 30858, 20058, 19907, 21927, 19969, 20090, 20138, 20211, 20265, 20357, 63521, 20412,
      /*  3165 */ 63518, 20488, 20547, 20291, 20579, 20709, 20774, 20821, 20870, 20853, 20885, 20789, 20917, 20949, 21030,
      /*  3180 */ 21062, 21094, 21084, 21126, 21186, 21310, 21452, 21374, 21431, 21484, 21618, 21650, 21741, 21802, 23057,
      /*  3195 */ 21839, 21899, 21959, 22101, 21154, 22249, 22281, 22427, 22459, 22487, 32640, 32640, 32640, 32640, 32640,
      /*  3210 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  3225 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  3240 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  3255 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  3270 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  3285 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  3300 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  3315 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 25340, 32640,
      /*  3330 */ 61740, 24702, 35413, 25353, 25385, 25402, 58363, 25449, 32640, 25253, 32640, 72986, 32640, 32640, 18907,
      /*  3345 */ 32640, 23058, 21807, 31154, 19779, 32640, 18612, 18649, 18757, 18789, 18959, 22037, 22069, 18821, 22057,
      /*  3360 */ 18887, 18787, 18957, 18991, 36451, 32640, 24875, 69179, 19041, 62458, 19134, 40819, 21341, 19073, 46732,
      /*  3375 */ 21342, 19074, 46733, 19106, 19193, 40822, 19438, 66570, 19251, 21244, 41014, 19334, 19366, 19398, 19470,
      /*  3390 */ 19502, 19538, 25119, 19498, 19534, 19570, 19359, 19629, 19422, 19661, 19735, 19811, 19878, 19910, 19942,
      /*  3405 */ 20019, 30851, 30993, 20026, 30858, 20058, 19907, 21927, 19969, 20090, 20138, 20211, 20265, 20357, 63521,
      /*  3420 */ 20412, 63518, 20488, 20547, 20291, 20579, 20709, 20774, 20821, 20870, 20853, 20885, 20789, 20917, 20949,
      /*  3435 */ 21030, 21062, 21094, 21084, 21126, 21186, 21310, 21452, 21374, 21431, 21484, 21618, 21650, 21741, 21802,
      /*  3450 */ 23057, 21839, 21899, 21959, 22101, 21154, 22249, 22281, 22427, 22459, 22487, 32640, 32640, 32640, 32640,
      /*  3465 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  3480 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  3495 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  3510 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  3525 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  3540 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  3555 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  3570 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 25499,
      /*  3585 */ 32640, 61740, 32640, 32640, 53140, 25538, 25575, 25558, 25622, 32640, 25253, 32640, 72986, 32640, 32640,
      /*  3600 */ 49347, 54782, 64809, 35297, 64457, 32024, 25672, 25724, 32640, 25308, 42746, 72012, 48724, 25775, 59604,
      /*  3615 */ 63895, 70062, 53329, 26051, 44572, 32640, 32640, 53365, 69246, 32640, 64131, 72012, 72012, 25809, 25776,
      /*  3630 */ 25776, 25844, 25983, 25984, 26051, 26051, 26018, 36217, 25878, 32640, 32640, 25912, 56403, 72012, 72012,
      /*  3645 */ 47453, 69896, 25776, 64787, 25947, 25982, 26472, 26016, 26050, 68602, 32640, 32640, 21278, 65491, 41507,
      /*  3660 */ 72012, 47768, 59999, 36922, 55439, 25983, 53287, 66001, 26051, 68608, 32640, 35129, 65495, 72012, 26084,
      /*  3675 */ 25776, 26132, 25983, 66375, 26051, 26181, 26227, 36550, 62167, 71378, 26264, 56947, 53286, 26299, 56814,
      /*  3690 */ 66968, 50229, 37146, 26336, 26407, 64681, 37193, 26609, 67516, 26450, 26504, 26590, 60773, 47253, 26654,
      /*  3705 */ 26722, 26771, 49912, 26461, 51539, 26820, 36159, 34716, 26535, 44815, 26905, 26933, 32640, 32640, 32640,
      /*  3720 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  3735 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  3750 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  3765 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  3780 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  3795 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  3810 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  3825 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  3840 */ 22530, 32640, 61740, 32640, 32640, 29428, 26976, 69042, 27027, 27107, 32640, 25253, 32640, 27176, 32640,
      /*  3855 */ 32640, 18907, 32640, 35800, 21807, 31154, 19779, 32640, 18612, 18649, 18757, 18789, 18959, 22037, 22069,
      /*  3870 */ 18821, 22057, 18887, 18787, 18957, 18991, 36451, 32640, 24875, 69179, 19041, 62458, 19134, 40819, 21341,
      /*  3885 */ 19073, 46732, 21342, 19074, 46733, 19106, 19193, 40822, 19438, 66570, 19251, 21244, 41014, 19334, 19366,
      /*  3900 */ 19398, 19470, 19502, 19538, 25119, 19498, 19534, 19570, 19359, 19629, 19422, 19661, 19735, 19811, 19878,
      /*  3915 */ 19910, 19942, 20019, 30851, 30993, 20026, 30858, 20058, 19907, 21927, 19969, 20090, 20138, 20211, 20265,
      /*  3930 */ 20357, 63521, 20412, 63518, 20488, 20547, 20291, 20579, 20709, 20774, 20821, 20870, 20853, 20885, 20789,
      /*  3945 */ 20917, 20949, 21030, 21062, 21094, 21084, 21126, 21186, 21310, 21452, 21374, 21431, 21484, 21618, 21650,
      /*  3960 */ 21741, 21802, 23057, 21839, 21899, 21959, 22101, 21154, 22249, 22281, 22427, 22459, 22487, 32640, 32640,
      /*  3975 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  3990 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  4005 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  4020 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  4035 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  4050 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  4065 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  4080 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  4095 */ 32640, 27212, 32640, 18617, 32640, 32640, 53140, 27264, 27332, 41428, 27379, 32640, 25253, 32640, 27446,
      /*  4110 */ 36386, 32640, 18907, 32640, 23058, 40482, 31154, 19779, 32640, 18612, 18649, 18757, 18789, 18959, 22037,
      /*  4125 */ 22069, 18821, 22057, 18887, 18787, 18957, 18991, 36451, 32640, 24875, 69179, 19041, 62458, 19134, 40819,
      /*  4140 */ 21341, 19073, 46732, 21342, 19074, 46733, 19106, 19193, 40822, 19438, 66570, 19251, 21244, 41014, 19334,
      /*  4155 */ 19366, 19398, 19470, 19502, 19538, 25119, 19498, 19534, 19570, 19359, 19629, 19422, 19661, 19735, 19811,
      /*  4170 */ 19878, 19910, 19942, 20019, 30851, 30993, 20026, 30858, 20058, 19907, 21927, 19969, 20090, 20138, 20211,
      /*  4185 */ 20265, 20357, 63521, 20412, 63518, 20488, 20547, 20291, 20579, 20709, 20774, 20821, 20870, 20853, 20885,
      /*  4200 */ 20789, 20917, 20949, 21030, 21062, 21094, 21084, 21126, 21186, 21310, 21452, 21374, 21431, 21484, 21618,
      /*  4215 */ 21650, 21741, 21802, 23057, 21839, 21899, 21959, 22101, 21154, 22249, 22281, 22427, 22459, 22487, 32640,
      /*  4230 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  4245 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  4260 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  4275 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  4290 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  4305 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  4320 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  4335 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  4350 */ 32640, 32640, 27496, 32640, 61740, 32640, 32640, 45704, 22912, 32640, 27545, 27614, 32640, 25253, 32640,
      /*  4365 */ 27679, 32640, 32640, 49347, 54782, 51035, 35297, 32640, 32024, 32640, 27715, 32640, 25308, 72012, 72012,
      /*  4380 */ 48724, 25776, 59604, 25983, 61672, 26051, 26051, 49853, 32640, 32640, 70980, 32640, 32640, 64131, 72012,
      /*  4395 */ 72012, 25809, 25776, 25776, 25844, 25983, 25984, 26051, 26051, 26018, 40010, 32640, 32640, 25692, 32640,
      /*  4410 */ 68393, 72012, 72012, 27753, 25776, 25776, 39830, 25983, 25983, 39566, 26051, 26051, 43098, 32640, 32640,
      /*  4425 */ 32640, 65491, 72012, 72012, 27795, 25776, 60349, 39842, 25983, 53287, 26051, 26051, 70527, 32640, 32640,
      /*  4440 */ 65495, 72012, 46827, 25776, 55996, 25983, 53288, 26051, 37187, 32640, 32640, 64131, 71378, 25776, 29955,
      /*  4455 */ 53286, 26051, 46302, 32640, 68392, 71381, 31947, 25983, 51580, 37193, 26609, 71375, 60465, 43860, 58860,
      /*  4470 */ 33375, 70146, 67746, 49921, 43861, 49912, 26461, 39900, 47849, 36159, 34716, 26535, 44815, 26905, 26933,
      /*  4485 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  4500 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  4515 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  4530 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  4545 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  4560 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  4575 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  4590 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  4605 */ 32640, 32640, 32640, 27836, 32640, 26232, 27985, 34535, 60068, 27930, 27958, 60099, 28032, 32640, 32366,
      /*  4620 */ 32640, 72986, 32640, 32640, 73079, 29194, 30273, 28620, 31154, 44986, 32640, 18612, 18649, 18757, 18789,
      /*  4635 */ 18959, 32755, 28084, 30249, 28403, 29274, 28141, 28173, 28885, 36451, 32640, 24875, 69179, 19041, 62458,
      /*  4650 */ 19134, 40819, 21681, 28259, 30189, 28317, 28376, 29214, 30382, 28201, 30288, 28732, 66570, 19251, 21244,
      /*  4665 */ 41014, 19334, 19366, 19398, 28435, 28285, 28497, 28109, 28529, 28561, 28593, 28652, 28684, 28716, 19661,
      /*  4680 */ 19735, 19811, 19878, 19910, 19942, 28764, 21709, 32781, 28826, 28935, 28991, 29023, 29361, 30055, 20090,
      /*  4695 */ 20138, 20211, 20265, 29171, 28465, 29246, 28344, 29334, 29302, 29393, 20579, 20709, 20774, 29460, 29082,
      /*  4710 */ 29111, 29139, 29492, 29611, 20949, 21030, 29555, 29643, 29675, 28857, 29707, 21310, 29804, 29832, 29864,
      /*  4725 */ 29896, 29992, 30024, 30105, 30173, 28959, 30221, 29583, 29053, 28794, 28227, 30320, 30352, 29523, 30414,
      /*  4740 */ 30442, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  4755 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  4770 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  4785 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  4800 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  4815 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  4830 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  4845 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  4860 */ 32640, 32640, 32640, 32640, 30485, 32640, 61740, 55714, 40332, 67370, 30532, 30549, 30500, 30596, 32640,
      /*  4875 */ 25253, 32640, 72986, 32640, 32640, 18907, 32640, 23058, 21807, 31154, 19779, 32640, 18612, 18649, 18757,
      /*  4890 */ 18789, 18959, 22037, 22069, 18821, 22057, 18887, 18787, 18957, 18991, 36451, 32640, 25063, 69179, 19041,
      /*  4905 */ 62458, 19134, 40819, 21341, 19073, 46732, 21342, 19074, 46733, 19106, 19193, 40822, 62487, 66570, 19251,
      /*  4920 */ 64424, 41014, 19334, 19366, 19398, 19470, 19502, 19538, 25119, 19498, 19534, 19570, 19359, 19629, 30661,
      /*  4935 */ 19661, 19735, 19811, 19878, 19910, 19942, 30758, 30851, 33683, 30826, 30858, 20058, 19907, 21927, 19969,
      /*  4950 */ 20090, 20138, 20211, 20265, 30890, 63521, 30967, 63518, 20488, 20547, 20291, 20579, 20709, 20774, 20821,
      /*  4965 */ 20870, 20853, 20885, 20789, 20917, 20949, 21030, 21062, 21094, 21084, 21126, 21186, 21310, 21452, 21374,
      /*  4980 */ 21431, 21484, 21618, 21650, 21741, 21802, 23057, 21839, 21899, 21959, 22101, 21154, 22249, 22281, 22427,
      /*  4995 */ 22459, 22487, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  5010 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  5025 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  5040 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  5055 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  5070 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  5085 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  5100 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  5115 */ 32640, 32640, 32640, 32640, 32640, 22530, 32640, 61740, 32640, 32640, 32640, 31025, 31042, 31089, 31121,
      /*  5130 */ 32640, 25253, 32640, 72986, 41921, 32640, 18907, 32640, 23058, 19161, 31154, 19779, 32640, 18612, 18649,
      /*  5145 */ 18757, 18789, 18959, 22037, 22069, 18821, 22057, 18887, 18787, 18957, 18991, 36451, 32640, 24875, 69179,
      /*  5160 */ 19041, 62458, 19134, 40819, 21341, 19073, 46732, 21342, 19074, 46733, 19106, 19193, 40822, 19438, 66570,
      /*  5175 */ 19251, 21244, 41014, 19334, 19366, 19398, 19470, 19502, 19538, 25119, 19498, 19534, 19570, 19359, 19629,
      /*  5190 */ 19422, 19661, 19735, 19811, 19878, 19910, 19942, 20019, 30851, 30993, 20026, 30858, 20058, 19907, 21927,
      /*  5205 */ 19969, 20090, 20138, 20211, 20265, 20357, 63521, 20412, 63518, 20488, 20547, 20291, 20579, 20709, 20774,
      /*  5220 */ 20821, 20870, 20853, 20885, 20789, 20917, 20949, 21030, 21062, 21094, 21084, 21126, 21186, 21310, 21452,
      /*  5235 */ 21374, 21431, 21484, 21618, 21650, 21741, 21802, 23057, 21839, 21899, 21959, 22101, 21154, 22249, 22281,
      /*  5250 */ 22427, 22459, 22487, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  5265 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  5280 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  5295 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  5310 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  5325 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  5340 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  5355 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  5370 */ 32640, 32640, 32640, 32640, 32640, 32640, 31186, 32640, 61740, 32640, 32640, 53140, 31304, 31321, 61422,
      /*  5385 */ 31368, 32640, 25253, 32640, 72986, 38336, 32640, 18907, 32640, 23058, 19597, 31154, 19779, 32640, 18612,
      /*  5400 */ 18649, 18757, 18789, 18959, 22037, 22069, 18821, 22057, 18887, 18787, 18957, 18991, 36451, 32640, 24875,
      /*  5415 */ 69179, 19041, 62458, 19134, 40819, 21341, 19073, 46732, 21342, 19074, 46733, 19106, 19193, 40822, 19438,
      /*  5430 */ 66570, 19251, 21244, 41014, 19334, 19366, 19398, 19470, 19502, 19538, 25119, 19498, 19534, 19570, 19359,
      /*  5445 */ 19629, 19422, 19661, 19735, 19811, 19878, 19910, 19942, 20019, 30851, 30993, 20026, 30858, 20058, 19907,
      /*  5460 */ 21927, 19969, 20090, 20138, 20211, 20265, 20357, 63521, 20412, 63518, 20488, 20547, 20291, 20579, 20709,
      /*  5475 */ 20774, 20821, 20870, 20853, 20885, 20789, 20917, 20949, 21030, 21062, 21094, 21084, 21126, 21186, 21310,
      /*  5490 */ 21452, 21374, 21431, 21484, 21618, 21650, 21741, 21802, 23057, 21839, 21899, 21959, 22101, 21154, 22249,
      /*  5505 */ 22281, 22427, 22459, 22487, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  5520 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  5535 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  5550 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  5565 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  5580 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  5595 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  5610 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  5625 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 31436, 32640, 22917, 32640, 32640, 53140, 31488, 31505,
      /*  5640 */ 63455, 31552, 32640, 25253, 32640, 72986, 23911, 32640, 18907, 32640, 23058, 20233, 31154, 19779, 32640,
      /*  5655 */ 18612, 18649, 18757, 18789, 18959, 22037, 22069, 18821, 22057, 18887, 18787, 18957, 18991, 36451, 32640,
      /*  5670 */ 24875, 69179, 19041, 62458, 19134, 40819, 21341, 19073, 46732, 21342, 19074, 46733, 19106, 19193, 40822,
      /*  5685 */ 19438, 66570, 19251, 21244, 41014, 19334, 19366, 19398, 19470, 19502, 19538, 25119, 19498, 19534, 19570,
      /*  5700 */ 19359, 19629, 19422, 19661, 19735, 19811, 19878, 19910, 19942, 20019, 30851, 30993, 20026, 30858, 20058,
      /*  5715 */ 19907, 21927, 19969, 20090, 20138, 20211, 20265, 20357, 63521, 20412, 63518, 20488, 20547, 20291, 20579,
      /*  5730 */ 20709, 20774, 20821, 20870, 20853, 20885, 20789, 20917, 20949, 21030, 21062, 21094, 21084, 21126, 21186,
      /*  5745 */ 21310, 21452, 21374, 21431, 21484, 21618, 21650, 31603, 21802, 23057, 21839, 21899, 21959, 22101, 21154,
      /*  5760 */ 22249, 22281, 22427, 22459, 22487, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  5775 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  5790 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  5805 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  5820 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  5835 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  5850 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  5865 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  5880 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 31688, 32640, 61740, 27887, 32640, 57839, 22912,
      /*  5895 */ 31734, 24347, 31775, 32640, 25253, 32640, 31840, 32640, 32640, 18907, 32640, 57508, 20515, 31154, 19779,
      /*  5910 */ 32640, 18612, 18649, 18757, 18789, 18959, 22037, 22069, 18821, 22057, 18887, 18787, 18957, 18991, 36451,
      /*  5925 */ 32640, 24875, 69179, 19041, 62458, 19134, 40819, 21341, 19073, 46732, 21342, 19074, 46733, 19106, 19193,
      /*  5940 */ 40822, 19438, 66570, 19251, 21244, 41014, 19334, 19366, 19398, 19470, 19502, 19538, 25119, 19498, 19534,
      /*  5955 */ 19570, 19359, 19629, 19422, 19661, 19735, 19811, 19878, 19910, 19942, 20019, 30851, 30993, 20026, 30858,
      /*  5970 */ 20058, 19907, 21927, 19969, 20090, 20138, 20211, 20265, 20357, 63521, 20412, 63518, 20488, 20547, 20291,
      /*  5985 */ 20579, 20709, 20774, 20821, 20870, 20853, 20885, 20789, 20917, 20949, 21030, 21062, 21094, 21084, 21126,
      /*  6000 */ 21186, 21310, 21452, 21374, 21431, 21484, 21618, 21650, 21741, 21802, 23057, 21839, 21899, 21959, 22101,
      /*  6015 */ 21154, 22249, 22281, 22427, 22459, 22487, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  6030 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  6045 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  6060 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  6075 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  6090 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  6105 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  6120 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  6135 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 22530, 32640, 61740, 32640, 32640, 53140,
      /*  6150 */ 22912, 32640, 62571, 27379, 32640, 25253, 32640, 72986, 32640, 32640, 18907, 32640, 23058, 21807, 31154,
      /*  6165 */ 19779, 32640, 18612, 18649, 18757, 18789, 18959, 22037, 22069, 18821, 22057, 18887, 18787, 18957, 18991,
      /*  6180 */ 36451, 32640, 24875, 69179, 19041, 62458, 19134, 40819, 21341, 19073, 46732, 21342, 19074, 46733, 19106,
      /*  6195 */ 19193, 40822, 19438, 66570, 19251, 21244, 41014, 19334, 19366, 19398, 19470, 19502, 19538, 25119, 19498,
      /*  6210 */ 19534, 19570, 19359, 19629, 19422, 19661, 19735, 19811, 19878, 19910, 19942, 20019, 30851, 30993, 20026,
      /*  6225 */ 30858, 20058, 19907, 21927, 19969, 20090, 20138, 20211, 20265, 20357, 63521, 20412, 63518, 20488, 20547,
      /*  6240 */ 20291, 20579, 20709, 20774, 20821, 20870, 20853, 20885, 20789, 20917, 20949, 21030, 21062, 21094, 21084,
      /*  6255 */ 21126, 21186, 21310, 21452, 21374, 21431, 21484, 21618, 21650, 21741, 21802, 23057, 21839, 21899, 21959,
      /*  6270 */ 22101, 21154, 22249, 22281, 22427, 22459, 22487, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  6285 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  6300 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  6315 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  6330 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  6345 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  6360 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  6375 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  6390 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 31905, 32640, 72814, 32640, 32640,
      /*  6405 */ 53140, 22912, 36567, 70299, 34240, 32640, 25253, 32640, 32640, 32640, 32640, 49347, 54782, 64809, 51195,
      /*  6420 */ 32640, 32024, 32640, 32640, 32640, 25308, 72012, 72012, 31942, 25776, 62010, 25983, 61672, 26051, 26051,
      /*  6435 */ 53000, 32640, 32640, 25682, 32640, 32640, 64131, 72012, 72012, 25809, 25776, 25776, 25844, 25983, 25984,
      /*  6450 */ 26051, 26051, 26018, 34467, 32640, 32640, 25692, 32640, 68393, 72012, 72012, 33962, 25776, 25776, 55427,
      /*  6465 */ 25983, 25983, 39566, 26051, 26051, 43098, 32640, 32640, 46497, 65491, 72012, 72012, 51277, 25776, 46932,
      /*  6480 */ 39842, 25983, 53287, 26051, 26051, 70527, 32640, 32640, 65495, 72012, 46827, 25776, 55996, 25983, 53288,
      /*  6495 */ 26051, 37187, 32640, 52315, 64131, 71378, 25776, 29955, 53286, 26051, 46302, 32640, 68392, 71381, 31947,
      /*  6510 */ 25983, 51580, 37193, 26609, 71375, 60465, 43860, 58860, 33375, 70146, 67746, 49921, 43861, 49912, 26461,
      /*  6525 */ 39900, 47849, 36159, 34716, 26535, 44815, 26905, 26933, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  6540 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  6555 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  6570 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  6585 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  6600 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  6615 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  6630 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  6645 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 31905, 32640, 72814, 32640,
      /*  6660 */ 32640, 53140, 22912, 36567, 70299, 34240, 32640, 25253, 32640, 32640, 32640, 32640, 49347, 54782, 64809,
      /*  6675 */ 51195, 32640, 32024, 32640, 32640, 32640, 25308, 72012, 72012, 31942, 25776, 62010, 25983, 61672, 26051,
      /*  6690 */ 26051, 53000, 32640, 32640, 25682, 32640, 32640, 64131, 72012, 72012, 25809, 25776, 25776, 25844, 25983,
      /*  6705 */ 25984, 26051, 26051, 26018, 34467, 32640, 32640, 25692, 32640, 68393, 72012, 72012, 33962, 25776, 25776,
      /*  6720 */ 55427, 25983, 25983, 39566, 26051, 26051, 43098, 32640, 32640, 32640, 65491, 72012, 72012, 51277, 25776,
      /*  6735 */ 46932, 39842, 25983, 53287, 26051, 26051, 70527, 32640, 32640, 65495, 72012, 46827, 25776, 55996, 25983,
      /*  6750 */ 53288, 26051, 37187, 32640, 32640, 64131, 71378, 25776, 29955, 53286, 26051, 46302, 32640, 68392, 71381,
      /*  6765 */ 31947, 25983, 51580, 37193, 26609, 71375, 60465, 43860, 58860, 33375, 70146, 67746, 49921, 43861, 49912,
      /*  6780 */ 26461, 39900, 47849, 36159, 34716, 26535, 44815, 26905, 26933, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  6795 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  6810 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  6825 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  6840 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  6855 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  6870 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  6885 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  6900 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 31905, 32640, 72814,
      /*  6915 */ 32640, 32640, 53140, 22912, 36567, 70299, 34240, 32640, 25253, 32640, 32640, 32640, 32640, 49347, 54782,
      /*  6930 */ 64809, 51195, 32640, 32024, 32640, 32640, 32640, 25308, 72012, 72012, 31942, 25776, 62010, 25983, 61672,
      /*  6945 */ 26051, 26051, 53000, 32640, 32640, 25682, 32497, 32640, 64131, 72012, 72012, 25809, 25776, 25776, 25844,
      /*  6960 */ 25983, 25984, 26051, 26051, 26018, 34467, 32640, 32640, 25692, 32640, 68393, 72012, 72012, 33962, 25776,
      /*  6975 */ 25776, 55427, 25983, 25983, 39566, 26051, 26051, 43098, 32640, 32640, 32640, 65491, 72012, 72012, 51277,
      /*  6990 */ 25776, 46932, 39842, 25983, 53287, 26051, 26051, 70527, 32640, 32640, 65495, 72012, 46827, 25776, 55996,
      /*  7005 */ 25983, 53288, 26051, 37187, 32640, 32640, 64131, 71378, 25776, 29955, 53286, 26051, 46302, 32640, 68392,
      /*  7020 */ 71381, 31947, 25983, 51580, 37193, 26609, 71375, 60465, 43860, 58860, 33375, 70146, 67746, 49921, 43861,
      /*  7035 */ 49912, 26461, 39900, 47849, 36159, 34716, 26535, 44815, 26905, 26933, 32640, 32640, 32640, 32640, 32640,
      /*  7050 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  7065 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  7080 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  7095 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  7110 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  7125 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  7140 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  7155 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 31905, 32640,
      /*  7170 */ 72814, 32640, 32640, 53140, 22912, 36567, 70299, 34240, 32640, 25253, 32640, 32640, 32640, 32640, 49347,
      /*  7185 */ 54782, 64809, 51195, 32640, 32024, 32640, 32640, 32640, 25308, 72012, 72012, 31942, 25776, 62010, 25983,
      /*  7200 */ 61672, 26051, 26051, 53000, 32640, 32640, 25682, 32640, 32640, 64131, 72012, 72012, 25809, 25776, 25776,
      /*  7215 */ 25844, 25983, 25984, 26051, 26051, 26018, 34467, 32640, 32640, 20179, 32640, 68393, 72012, 72012, 33962,
      /*  7230 */ 25776, 25776, 55427, 25983, 25983, 39566, 26051, 26051, 43098, 32640, 32640, 32640, 65491, 72012, 72012,
      /*  7245 */ 51277, 25776, 46932, 39842, 25983, 53287, 26051, 26051, 70527, 32640, 32640, 65495, 72012, 46827, 25776,
      /*  7260 */ 55996, 25983, 53288, 26051, 37187, 32640, 32640, 64131, 71378, 25776, 29955, 53286, 26051, 46302, 32640,
      /*  7275 */ 68392, 71381, 31947, 25983, 51580, 37193, 26609, 71375, 60465, 43860, 58860, 33375, 70146, 67746, 49921,
      /*  7290 */ 43861, 49912, 26461, 39900, 47849, 36159, 34716, 26535, 44815, 26905, 26933, 32640, 32640, 32640, 32640,
      /*  7305 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  7320 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  7335 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  7350 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  7365 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  7380 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  7395 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  7410 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 31905,
      /*  7425 */ 32640, 72814, 32640, 32640, 53140, 22912, 36567, 70299, 34240, 32640, 25253, 32640, 31980, 32640, 32640,
      /*  7440 */ 49347, 54782, 64809, 51195, 32640, 32024, 32640, 31979, 32640, 25308, 72012, 72012, 31942, 25776, 62010,
      /*  7455 */ 25983, 61672, 26051, 26051, 53000, 32640, 32640, 25682, 32640, 32640, 64131, 72012, 72012, 25809, 25776,
      /*  7470 */ 25776, 25844, 25983, 25984, 26051, 26051, 26018, 34467, 32640, 32640, 25692, 32640, 68393, 72012, 72012,
      /*  7485 */ 33962, 25776, 25776, 55427, 25983, 25983, 39566, 26051, 26051, 43098, 32640, 32640, 32640, 65491, 72012,
      /*  7500 */ 72012, 51277, 25776, 46932, 39842, 25983, 53287, 26051, 26051, 70527, 32640, 32640, 65495, 72012, 46827,
      /*  7515 */ 25776, 55996, 25983, 53288, 26051, 37187, 32640, 32640, 64131, 71378, 25776, 29955, 53286, 26051, 46302,
      /*  7530 */ 32640, 68392, 71381, 31947, 25983, 51580, 37193, 26609, 71375, 60465, 43860, 58860, 33375, 70146, 67746,
      /*  7545 */ 49921, 43861, 49912, 26461, 39900, 47849, 36159, 34716, 26535, 44815, 26905, 26933, 32640, 32640, 32640,
      /*  7560 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  7575 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  7590 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  7605 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  7620 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  7635 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  7650 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  7665 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  7680 */ 31905, 32640, 72814, 32640, 32640, 53140, 22912, 36567, 70299, 34240, 32640, 25253, 32640, 32640, 32640,
      /*  7695 */ 32640, 49347, 54782, 64809, 51195, 32640, 32024, 32640, 32640, 32640, 25308, 72012, 72012, 31942, 25776,
      /*  7710 */ 62010, 25983, 61672, 26051, 26051, 44572, 32640, 32640, 32640, 32640, 32640, 64131, 72012, 72012, 25809,
      /*  7725 */ 25776, 25776, 25844, 25983, 25984, 26051, 26051, 26018, 58552, 32640, 32640, 32640, 32640, 68393, 72012,
      /*  7740 */ 72012, 33962, 25776, 25776, 55427, 25983, 25983, 39566, 26051, 26051, 68602, 32640, 32640, 32640, 65491,
      /*  7755 */ 72012, 72012, 47768, 25776, 36922, 39842, 25983, 53287, 26051, 26051, 68608, 32640, 32640, 65495, 72012,
      /*  7770 */ 51360, 25776, 65698, 25983, 53288, 26051, 37187, 32640, 32640, 64131, 71378, 25776, 29955, 53286, 26051,
      /*  7785 */ 46302, 32640, 68392, 71381, 31947, 25983, 51580, 37193, 26609, 71375, 60465, 43860, 58860, 33375, 70146,
      /*  7800 */ 67746, 49921, 43861, 49912, 26461, 39900, 47849, 36159, 34716, 26535, 44815, 26905, 26933, 32640, 32640,
      /*  7815 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  7830 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  7845 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  7860 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  7875 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  7890 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  7905 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  7920 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  7935 */ 32640, 31905, 32640, 72814, 32640, 32640, 53140, 22912, 36567, 70299, 34240, 32640, 25253, 32640, 32640,
      /*  7950 */ 32640, 32640, 49347, 54782, 64809, 69771, 32640, 32024, 32640, 32640, 32640, 25308, 72012, 72012, 31942,
      /*  7965 */ 25776, 62010, 25983, 61672, 26051, 26051, 44572, 32640, 32640, 32640, 32640, 32640, 64131, 72012, 72012,
      /*  7980 */ 25809, 25776, 25776, 25844, 25983, 25984, 26051, 26051, 26018, 58552, 32640, 32640, 32640, 32640, 68393,
      /*  7995 */ 72012, 72012, 33962, 25776, 25776, 55427, 25983, 25983, 39566, 26051, 26051, 68602, 32640, 32640, 32640,
      /*  8010 */ 65491, 72012, 72012, 47768, 25776, 36922, 39842, 25983, 53287, 26051, 26051, 68608, 32640, 32640, 65495,
      /*  8025 */ 72012, 51360, 25776, 65698, 25983, 53288, 26051, 37187, 32640, 32640, 64131, 71378, 25776, 29955, 53286,
      /*  8040 */ 26051, 46302, 32640, 68392, 71381, 31947, 25983, 51580, 37193, 26609, 71375, 60465, 43860, 58860, 33375,
      /*  8055 */ 70146, 67746, 49921, 43861, 49912, 26461, 39900, 47849, 36159, 34716, 26535, 44815, 26905, 26933, 32640,
      /*  8070 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  8085 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  8100 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  8115 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  8130 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  8145 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  8160 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  8175 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  8190 */ 32640, 32640, 31905, 32640, 72814, 32640, 32640, 53140, 22912, 36567, 70299, 41903, 32640, 25253, 32640,
      /*  8205 */ 32640, 32640, 32640, 49347, 54782, 64809, 51195, 32640, 32024, 32640, 32640, 32640, 25308, 72012, 72012,
      /*  8220 */ 31942, 25776, 62010, 25983, 61672, 26051, 26051, 44572, 32640, 32640, 32640, 32640, 32640, 64131, 72012,
      /*  8235 */ 72012, 25809, 25776, 25776, 25844, 25983, 25984, 26051, 26051, 26018, 58552, 32640, 32640, 32640, 32640,
      /*  8250 */ 68393, 72012, 72012, 33962, 25776, 25776, 55427, 25983, 25983, 39566, 26051, 26051, 68602, 32640, 32640,
      /*  8265 */ 32640, 65491, 72012, 72012, 47768, 25776, 36922, 39842, 25983, 53287, 26051, 26051, 68608, 32640, 32640,
      /*  8280 */ 65495, 72012, 51360, 25776, 65698, 25983, 53288, 26051, 37187, 32640, 32640, 64131, 71378, 25776, 29955,
      /*  8295 */ 53286, 26051, 46302, 32640, 68392, 71381, 31947, 25983, 51580, 37193, 26609, 71375, 60465, 43860, 58860,
      /*  8310 */ 33375, 70146, 67746, 49921, 43861, 49912, 26461, 39900, 47849, 36159, 34716, 26535, 44815, 26905, 26933,
      /*  8325 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  8340 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  8355 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  8370 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  8385 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  8400 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  8415 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  8430 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  8445 */ 32640, 32640, 32640, 31905, 32640, 72814, 32640, 32640, 53140, 32012, 36567, 70299, 34240, 32640, 25253,
      /*  8460 */ 32640, 32640, 32640, 32640, 49347, 54782, 64809, 51195, 32640, 32024, 32640, 57111, 32640, 25308, 72012,
      /*  8475 */ 72012, 31942, 25776, 62010, 25983, 61672, 26051, 26051, 44572, 32640, 32640, 32640, 32640, 32640, 64131,
      /*  8490 */ 72012, 72012, 25809, 25776, 25776, 25844, 25983, 25984, 26051, 26051, 26018, 58552, 32640, 32640, 32640,
      /*  8505 */ 32640, 68393, 72012, 72012, 33962, 25776, 25776, 55427, 25983, 25983, 39566, 26051, 26051, 68602, 32640,
      /*  8520 */ 32640, 32640, 65491, 72012, 72012, 47768, 25776, 36922, 39842, 25983, 53287, 26051, 26051, 68608, 32640,
      /*  8535 */ 32640, 65495, 72012, 51360, 25776, 65698, 25983, 53288, 26051, 37187, 32640, 32640, 64131, 71378, 25776,
      /*  8550 */ 29955, 53286, 26051, 46302, 32640, 68392, 71381, 31947, 25983, 51580, 37193, 26609, 71375, 60465, 43860,
      /*  8565 */ 58860, 33375, 70146, 67746, 49921, 43861, 49912, 26461, 39900, 47849, 36159, 34716, 26535, 44815, 26905,
      /*  8580 */ 26933, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  8595 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  8610 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  8625 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  8640 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  8655 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  8670 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  8685 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  8700 */ 32640, 32640, 32640, 32640, 31905, 32640, 72814, 32640, 32640, 53140, 22912, 27513, 32056, 32087, 32640,
      /*  8715 */ 25253, 32640, 32640, 32640, 32640, 49347, 54782, 64809, 51195, 32640, 32024, 32640, 32640, 32640, 25308,
      /*  8730 */ 72012, 72012, 31942, 25776, 62010, 25983, 61672, 26051, 26051, 44572, 32640, 32640, 32640, 32640, 32640,
      /*  8745 */ 64131, 72012, 72012, 25809, 25776, 25776, 25844, 25983, 25984, 26051, 26051, 26018, 58552, 32640, 32640,
      /*  8760 */ 32640, 32640, 68393, 72012, 72012, 33962, 25776, 25776, 55427, 25983, 25983, 39566, 26051, 26051, 68602,
      /*  8775 */ 32640, 32640, 32640, 65491, 72012, 72012, 47768, 25776, 36922, 39842, 25983, 53287, 26051, 26051, 68608,
      /*  8790 */ 32640, 32640, 65495, 72012, 51360, 25776, 65698, 25983, 53288, 26051, 37187, 32640, 32640, 64131, 71378,
      /*  8805 */ 25776, 29955, 53286, 26051, 46302, 32640, 68392, 71381, 31947, 25983, 51580, 37193, 26609, 71375, 60465,
      /*  8820 */ 43860, 58860, 33375, 70146, 67746, 49921, 43861, 49912, 26461, 39900, 47849, 36159, 34716, 26535, 44815,
      /*  8835 */ 26905, 26933, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  8850 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  8865 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  8880 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  8895 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  8910 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  8925 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  8940 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  8955 */ 32640, 32640, 32640, 32640, 32640, 31905, 32640, 72814, 32640, 32640, 53140, 22912, 36567, 70299, 34240,
      /*  8970 */ 32640, 25253, 32640, 32640, 32640, 32640, 49347, 54782, 64809, 51195, 32640, 32024, 32640, 32640, 32640,
      /*  8985 */ 25308, 72012, 72012, 31942, 25776, 62010, 25983, 61672, 26051, 26051, 44572, 32640, 32640, 32640, 32640,
      /*  9000 */ 32640, 64131, 72012, 72012, 25809, 25776, 25776, 25844, 25983, 25984, 26051, 26051, 26018, 58552, 32640,
      /*  9015 */ 32640, 32640, 32640, 68393, 72012, 72012, 33962, 25776, 25776, 55427, 25983, 25983, 39566, 26051, 26051,
      /*  9030 */ 68602, 32640, 32640, 32640, 65491, 72012, 72012, 47768, 25776, 36922, 39842, 25983, 53287, 26051, 26051,
      /*  9045 */ 68608, 32640, 31793, 65495, 72012, 51360, 25776, 65698, 25983, 53288, 26051, 37187, 32640, 32640, 64131,
      /*  9060 */ 71378, 25776, 29955, 53286, 26051, 46302, 32640, 68392, 71381, 31947, 25983, 51580, 37193, 26609, 71375,
      /*  9075 */ 60465, 43860, 58860, 33375, 70146, 67746, 49921, 43861, 49912, 26461, 39900, 47849, 36159, 34716, 26535,
      /*  9090 */ 44815, 26905, 26933, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  9105 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  9120 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  9135 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  9150 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  9165 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  9180 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  9195 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  9210 */ 32640, 32640, 32640, 32640, 32640, 32640, 32154, 32640, 72814, 32640, 32640, 53140, 22912, 36567, 70299,
      /*  9225 */ 34240, 32640, 25253, 32640, 32640, 32640, 32640, 49347, 54782, 64809, 51195, 32640, 32024, 32640, 32640,
      /*  9240 */ 32640, 25308, 72012, 72012, 31942, 25776, 62010, 25983, 61672, 26051, 26051, 44572, 32640, 32640, 32640,
      /*  9255 */ 32640, 32640, 64131, 72012, 72012, 25809, 25776, 25776, 25844, 25983, 25984, 26051, 26051, 26018, 58552,
      /*  9270 */ 32640, 32640, 32640, 32640, 68393, 72012, 72012, 33962, 25776, 25776, 55427, 25983, 25983, 39566, 26051,
      /*  9285 */ 26051, 68602, 32640, 32640, 32640, 65491, 72012, 72012, 47768, 25776, 36922, 39842, 25983, 53287, 26051,
      /*  9300 */ 26051, 68608, 32640, 32640, 65495, 72012, 51360, 25776, 65698, 25983, 53288, 26051, 37187, 32640, 32640,
      /*  9315 */ 64131, 71378, 25776, 29955, 53286, 26051, 46302, 32640, 68392, 71381, 31947, 25983, 51580, 37193, 26609,
      /*  9330 */ 71375, 60465, 43860, 58860, 33375, 70146, 67746, 49921, 43861, 49912, 26461, 39900, 47849, 36159, 34716,
      /*  9345 */ 26535, 44815, 26905, 26933, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  9360 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  9375 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  9390 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  9405 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  9420 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  9435 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  9450 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  9465 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32191, 32640, 61740, 32640, 32640, 53140, 32266, 32219,
      /*  9480 */ 32317, 32348, 32640, 25253, 32640, 72986, 32640, 32640, 18907, 32640, 23058, 21807, 31154, 19779, 32640,
      /*  9495 */ 32398, 18649, 18757, 18789, 18959, 22037, 22069, 18821, 22057, 18887, 18787, 18957, 18991, 36451, 32640,
      /*  9510 */ 24875, 69179, 19041, 62458, 19134, 40819, 21341, 19073, 46732, 21342, 19074, 46733, 19106, 19193, 40822,
      /*  9525 */ 19438, 66570, 19251, 21244, 41014, 19334, 19366, 19398, 19470, 19502, 19538, 25119, 19498, 19534, 19570,
      /*  9540 */ 19359, 19629, 19422, 19661, 19735, 19811, 19878, 19910, 19942, 20019, 30851, 30993, 20026, 30858, 20058,
      /*  9555 */ 19907, 21927, 19969, 20090, 20138, 20211, 20265, 20357, 63521, 20412, 63518, 20488, 20547, 20291, 20579,
      /*  9570 */ 20709, 20774, 20821, 20870, 20853, 20885, 20789, 20917, 32449, 21030, 21062, 21094, 21084, 21126, 21186,
      /*  9585 */ 21310, 21452, 21374, 21431, 21484, 21618, 21650, 21741, 21802, 23057, 21839, 21899, 21959, 22101, 21154,
      /*  9600 */ 22249, 22281, 22427, 22459, 22487, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  9615 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  9630 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  9645 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  9660 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  9675 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  9690 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  9705 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  9720 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 22530, 32640, 61740, 32640, 32640, 53140, 22912,
      /*  9735 */ 32640, 32640, 32541, 32640, 25253, 32640, 72986, 32640, 32640, 18907, 32640, 23058, 40482, 31154, 19779,
      /*  9750 */ 32640, 18612, 18649, 18757, 18789, 18959, 22037, 22069, 18821, 22057, 18887, 18787, 18957, 18991, 36451,
      /*  9765 */ 32640, 24875, 69179, 19041, 62458, 19134, 40819, 21341, 19073, 46732, 21342, 19074, 46733, 19106, 19193,
      /*  9780 */ 40822, 19438, 66570, 19251, 21244, 41014, 19334, 19366, 19398, 19470, 19502, 19538, 25119, 19498, 19534,
      /*  9795 */ 19570, 19359, 19629, 19422, 19661, 19735, 19811, 19878, 19910, 19942, 20019, 30851, 30993, 20026, 30858,
      /*  9810 */ 20058, 19907, 21927, 19969, 20090, 20138, 20211, 20265, 20357, 63521, 20412, 63518, 20488, 20547, 20291,
      /*  9825 */ 20579, 20709, 20774, 20821, 20870, 20853, 20885, 20789, 20917, 20949, 21030, 21062, 21094, 21084, 21126,
      /*  9840 */ 21186, 21310, 21452, 21374, 21431, 21484, 21618, 21650, 21741, 21802, 23057, 21839, 21899, 21959, 22101,
      /*  9855 */ 21154, 22249, 22281, 22427, 22459, 22487, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  9870 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  9885 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  9900 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  9915 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  9930 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  9945 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  9960 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /*  9975 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 22530, 32639, 61740, 32640, 32640, 53140,
      /*  9990 */ 32606, 32625, 66147, 32673, 32640, 25253, 32640, 72986, 32640, 32640, 18907, 32640, 23058, 21807, 31154,
      /* 10005 */ 19779, 32640, 18612, 18649, 18757, 18789, 18959, 22037, 22069, 18821, 22057, 18887, 18787, 18957, 18991,
      /* 10020 */ 36451, 32640, 24875, 69179, 19041, 62458, 19134, 40819, 21341, 19073, 46732, 21342, 19074, 46733, 19106,
      /* 10035 */ 19193, 40822, 19438, 66570, 19251, 21244, 41014, 19334, 19366, 19398, 19470, 19502, 19538, 25119, 19498,
      /* 10050 */ 19534, 19570, 19359, 19629, 19422, 19661, 19735, 19811, 19878, 19910, 19942, 20019, 30851, 30993, 20026,
      /* 10065 */ 30858, 20058, 19907, 21927, 19969, 20090, 20138, 20211, 20265, 20357, 63521, 20412, 63518, 20488, 20547,
      /* 10080 */ 20291, 20579, 20709, 20774, 20821, 20870, 20853, 20885, 20789, 20917, 20949, 21030, 21062, 21094, 21084,
      /* 10095 */ 21126, 21186, 32724, 21452, 21374, 21431, 32813, 21618, 21650, 32920, 21802, 23057, 21839, 21899, 21959,
      /* 10110 */ 22101, 21154, 22249, 22281, 22427, 22459, 22487, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 10125 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 10140 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 10155 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 10170 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 10185 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 10200 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 10215 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 10230 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 22530, 32640, 61740, 32640, 32640,
      /* 10245 */ 53140, 22912, 32640, 32640, 27379, 32640, 25253, 32640, 72986, 32640, 32640, 18907, 32640, 23058, 21807,
      /* 10260 */ 31154, 19779, 32640, 18612, 18649, 18757, 18789, 18959, 22037, 22069, 18821, 22057, 18887, 18787, 18957,
      /* 10275 */ 18991, 36451, 32640, 24875, 69179, 19041, 62458, 19134, 40819, 21341, 19073, 46732, 21342, 19074, 46733,
      /* 10290 */ 19106, 19193, 40822, 19438, 66570, 19251, 21244, 41014, 19334, 19366, 19398, 19470, 19502, 19538, 25119,
      /* 10305 */ 19498, 19534, 19570, 19359, 19629, 19422, 19661, 19735, 19811, 19878, 19910, 19942, 20019, 30851, 30993,
      /* 10320 */ 20026, 30858, 20058, 19907, 21927, 19969, 20090, 20138, 20211, 20265, 20357, 63521, 20412, 63518, 20488,
      /* 10335 */ 20547, 20291, 20579, 20709, 20774, 20821, 20870, 20853, 20885, 20789, 20917, 20949, 21030, 21062, 21094,
      /* 10350 */ 21084, 21126, 21186, 21310, 21452, 21374, 21431, 21484, 21618, 21650, 21741, 21802, 23057, 21839, 21899,
      /* 10365 */ 21959, 22101, 21154, 22249, 22281, 22427, 22459, 22487, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 10380 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 10395 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 10410 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 10425 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 10440 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 10455 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 10470 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 10485 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 31905, 33014, 72814, 65242,
      /* 10500 */ 23329, 65262, 33049, 33078, 33110, 33141, 72172, 33868, 38406, 33224, 33302, 35892, 33415, 33497, 33529,
      /* 10515 */ 33657, 32640, 70241, 33715, 23262, 70547, 65483, 72012, 56115, 31942, 25776, 33771, 25983, 62395, 26051,
      /* 10530 */ 60426, 53000, 43338, 33820, 20169, 33900, 28052, 33936, 72012, 34004, 34096, 25776, 69679, 34153, 25983,
      /* 10545 */ 34209, 34305, 26051, 34381, 34413, 59316, 60982, 34567, 18580, 43988, 66280, 56105, 34613, 34671, 54769,
      /* 10560 */ 57995, 34763, 50540, 69616, 34835, 44365, 69116, 72659, 27683, 51215, 45101, 34941, 55781, 57901, 25776,
      /* 10575 */ 68182, 34981, 25983, 35037, 38017, 43551, 35100, 35168, 46148, 32692, 38542, 69316, 67857, 54357, 35200,
      /* 10590 */ 37506, 35270, 39191, 36089, 32640, 37090, 24260, 50683, 56669, 60278, 35348, 46302, 32640, 68392, 71381,
      /* 10605 */ 31947, 25983, 51580, 37193, 26609, 71375, 60465, 43860, 58860, 33375, 70146, 43929, 35445, 35530, 35582,
      /* 10620 */ 50980, 66874, 47849, 48295, 34716, 26535, 44815, 26905, 26933, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 10635 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 10650 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 10665 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 10680 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 10695 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 10710 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 10725 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 10740 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 31905, 35651, 72814,
      /* 10755 */ 32640, 32640, 53140, 35689, 35718, 35750, 35781, 32640, 25253, 32640, 32640, 32640, 32640, 42703, 63159,
      /* 10770 */ 35832, 71490, 32640, 32024, 32640, 32640, 32640, 25308, 72012, 72012, 31942, 25776, 62010, 25983, 61672,
      /* 10785 */ 26051, 26051, 53000, 32640, 32640, 71083, 54414, 54421, 64131, 72012, 55872, 25809, 25776, 60149, 25844,
      /* 10800 */ 25983, 63179, 26051, 26051, 34327, 34467, 32640, 32640, 25692, 32640, 68393, 72012, 72012, 33962, 25776,
      /* 10815 */ 25776, 55427, 25983, 25983, 39566, 26051, 26051, 43098, 32640, 35952, 27144, 30726, 72012, 63213, 63138,
      /* 10830 */ 25776, 69714, 35989, 25983, 42068, 36035, 26051, 36069, 32640, 32640, 65495, 72012, 46827, 25776, 55996,
      /* 10845 */ 25983, 53288, 26051, 37187, 32640, 32640, 64131, 71378, 25776, 29955, 53286, 26051, 46302, 32640, 68392,
      /* 10860 */ 71381, 31947, 25983, 51580, 37193, 26609, 71375, 60465, 43860, 58860, 33375, 70146, 67746, 49921, 43861,
      /* 10875 */ 20456, 36134, 36191, 47849, 36159, 34716, 26535, 44815, 26905, 26933, 32640, 32640, 32640, 32640, 32640,
      /* 10890 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 10905 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 10920 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 10935 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 10950 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 10965 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 10980 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 10995 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 31905, 64516,
      /* 11010 */ 72814, 48426, 59530, 63767, 36272, 36304, 36336, 36367, 32640, 36432, 25203, 32640, 32640, 41660, 37716,
      /* 11025 */ 55922, 36483, 36530, 48415, 59494, 31702, 18855, 62820, 64973, 39682, 72012, 36599, 25776, 18725, 36659,
      /* 11040 */ 69934, 36699, 26051, 52493, 36750, 23246, 55732, 34581, 32640, 18679, 55301, 36783, 36820, 35485, 36918,
      /* 11055 */ 36954, 37494, 37030, 64702, 65892, 37178, 34467, 32640, 37225, 65319, 32640, 68393, 72012, 37261, 33962,
      /* 11070 */ 25776, 37316, 55427, 25983, 39119, 39566, 26051, 49047, 43098, 37375, 42559, 23999, 65491, 72012, 48479,
      /* 11085 */ 51277, 25776, 37411, 39842, 45287, 53287, 26051, 67220, 70527, 32640, 37538, 37571, 37131, 46827, 23541,
      /* 11100 */ 55996, 67894, 53288, 53572, 47622, 37618, 25915, 66600, 37659, 46843, 32872, 37796, 37836, 46302, 47046,
      /* 11115 */ 68392, 23524, 65621, 25983, 37889, 41315, 26609, 71375, 60465, 43860, 58860, 33375, 70146, 67746, 49921,
      /* 11130 */ 43861, 37927, 37988, 38060, 47849, 36159, 34716, 26535, 44815, 38151, 26933, 32640, 32640, 32640, 32640,
      /* 11145 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 11160 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 11175 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 11190 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 11205 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 11220 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 11235 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 11250 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 31905,
      /* 11265 */ 20106, 72814, 32509, 23162, 53140, 38224, 38253, 38285, 38316, 32640, 25253, 32640, 32640, 60657, 39330,
      /* 11280 */ 34441, 50711, 54836, 51195, 33270, 38384, 46719, 22206, 33192, 38438, 72385, 38511, 38616, 40937, 20657,
      /* 11295 */ 38673, 38705, 39528, 38892, 38940, 32640, 47380, 49323, 32640, 70823, 64131, 72012, 32968, 25809, 25776,
      /* 11310 */ 45195, 25844, 25983, 46666, 26051, 26051, 58683, 38996, 32640, 59450, 25692, 27180, 22361, 39052, 64136,
      /* 11325 */ 40912, 42209, 25776, 39090, 66443, 25983, 39151, 60300, 26051, 39223, 32640, 32640, 36102, 70444, 72012,
      /* 11340 */ 71366, 65683, 25776, 39291, 39362, 35619, 34803, 26051, 43538, 70527, 72942, 37229, 65495, 39402, 46827,
      /* 11355 */ 39434, 39492, 52767, 39560, 39598, 39731, 22659, 32640, 64131, 71378, 25776, 29955, 53286, 26051, 46302,
      /* 11370 */ 19837, 68392, 68106, 33972, 25983, 39769, 58918, 26609, 71375, 56493, 39511, 67952, 33375, 70146, 67746,
      /* 11385 */ 39807, 39877, 27300, 39932, 39984, 47849, 36159, 34716, 26535, 44815, 26905, 26933, 32640, 32640, 32640,
      /* 11400 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 11415 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 11430 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 11445 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 11460 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 11475 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 11490 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 11505 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 11520 */ 31905, 22609, 72814, 27464, 30794, 40060, 40119, 40148, 40180, 40211, 40263, 40295, 40364, 40412, 40514,
      /* 11535 */ 40546, 40606, 40667, 40699, 40731, 40783, 20976, 40854, 40994, 52527, 25308, 41046, 39699, 41078, 46357,
      /* 11550 */ 49141, 41137, 44544, 41236, 41286, 41368, 47192, 41460, 41554, 41610, 40087, 41703, 41735, 41816, 41872,
      /* 11565 */ 41968, 42030, 42100, 42250, 42282, 42373, 42458, 42490, 42522, 42554, 42591, 31571, 42679, 24113, 42735,
      /* 11580 */ 42778, 42826, 42887, 59586, 42933, 43014, 20677, 52796, 43080, 37857, 50773, 19009, 50153, 72778, 68055,
      /* 11595 */ 66201, 43130, 61992, 43205, 43285, 43380, 36003, 43457, 50341, 43583, 43639, 62580, 43704, 43740, 65764,
      /* 11610 */ 46827, 43772, 55996, 43804, 43857, 43893, 43961, 72604, 44020, 44104, 67022, 44136, 44196, 44228, 44289,
      /* 11625 */ 44397, 41399, 46788, 44452, 69369, 44513, 44648, 70208, 20438, 68896, 51376, 63626, 44257, 54317, 44622,
      /* 11640 */ 67433, 55113, 55250, 49487, 51457, 67801, 44680, 44712, 34716, 38736, 44788, 26905, 26933, 32640, 32640,
      /* 11655 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 11670 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 11685 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 11700 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 11715 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 11730 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 11745 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 11760 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 11775 */ 32640, 31905, 54076, 72814, 67462, 71804, 46979, 44874, 44903, 44935, 44966, 65157, 25253, 32640, 32640,
      /* 11790 */ 45018, 45029, 45061, 36627, 47904, 71490, 70229, 49986, 32640, 30141, 65148, 45093, 45133, 72012, 45175,
      /* 11805 */ 25776, 67154, 25983, 61672, 45240, 26051, 53000, 32640, 32640, 25682, 32640, 30614, 64131, 72012, 62187,
      /* 11820 */ 25809, 25776, 34052, 25844, 25983, 58051, 26051, 26051, 68586, 34467, 32640, 32640, 25692, 49974, 68393,
      /* 11835 */ 36788, 72012, 33962, 51715, 25776, 55427, 25983, 45283, 39566, 26051, 45319, 43098, 32640, 32640, 22533,
      /* 11850 */ 65491, 72012, 65748, 51277, 25776, 40635, 39842, 48131, 53287, 26051, 72059, 70527, 32640, 32640, 65495,
      /* 11865 */ 72012, 46827, 25776, 55996, 25983, 53288, 26051, 37187, 32640, 32640, 64131, 71378, 25776, 29955, 53286,
      /* 11880 */ 26051, 26195, 32640, 30913, 33383, 31947, 68516, 43425, 37193, 26609, 71375, 60465, 43860, 58860, 33375,
      /* 11895 */ 70146, 67746, 49921, 43861, 49912, 26461, 39900, 47849, 36159, 34716, 38767, 44815, 45355, 26933, 32640,
      /* 11910 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 11925 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 11940 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 11955 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 11970 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 11985 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 12000 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 12015 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 12030 */ 32640, 32640, 31905, 32640, 72814, 72990, 32640, 53140, 45461, 45480, 45512, 45543, 32640, 25253, 25880,
      /* 12045 */ 32640, 32640, 32640, 49347, 54782, 64809, 65216, 32640, 32024, 32640, 29772, 32640, 25308, 72012, 72012,
      /* 12060 */ 31942, 25776, 62010, 25983, 61672, 26051, 26051, 44572, 32640, 32640, 32640, 26944, 43348, 64131, 72012,
      /* 12075 */ 72012, 45595, 25776, 25776, 45631, 25983, 25984, 26051, 26051, 26018, 58552, 32640, 45666, 62963, 32640,
      /* 12090 */ 45736, 45143, 72012, 33962, 47777, 25776, 55427, 45634, 25983, 39566, 62106, 26051, 66507, 32640, 61374,
      /* 12105 */ 32640, 65491, 72012, 72012, 47768, 25776, 36922, 39842, 25983, 53287, 26051, 26051, 68608, 32640, 45776,
      /* 12120 */ 65495, 72012, 45833, 25776, 43236, 25983, 48970, 26051, 35378, 19759, 45883, 40885, 45935, 34121, 45988,
      /* 12135 */ 46059, 68691, 46114, 46509, 48784, 46180, 46232, 52911, 56583, 46294, 61320, 46334, 46389, 52972, 46541,
      /* 12150 */ 33375, 70146, 67746, 49921, 43861, 49912, 26461, 39900, 47849, 36159, 34716, 26535, 57068, 26905, 26933,
      /* 12165 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 12180 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 12195 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 12210 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 12225 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 12240 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 12255 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 12270 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 12285 */ 32640, 32640, 32640, 31905, 32640, 72814, 32640, 32640, 53140, 22912, 36567, 70299, 37061, 32640, 46592,
      /* 12300 */ 32640, 23927, 23933, 35920, 72528, 46641, 71255, 46698, 32640, 41638, 46765, 32640, 32640, 25308, 72012,
      /* 12315 */ 32982, 31942, 25812, 62010, 25983, 52465, 26051, 62071, 44572, 32640, 32640, 32640, 32640, 46875, 64131,
      /* 12330 */ 72012, 72012, 46928, 25776, 25777, 25844, 25983, 25846, 26051, 26051, 48238, 66922, 32640, 32640, 32640,
      /* 12345 */ 58432, 34888, 72012, 72012, 24139, 25776, 25776, 64186, 25983, 25983, 64365, 26051, 26051, 68602, 32640,
      /* 12360 */ 31139, 32640, 65491, 72012, 59125, 47768, 25776, 23575, 39842, 25983, 43409, 26051, 51585, 68608, 32640,
      /* 12375 */ 40326, 65495, 72012, 51360, 25776, 65698, 25983, 53288, 26051, 37187, 32640, 32640, 64131, 71378, 25776,
      /* 12390 */ 29955, 53286, 26051, 46302, 23989, 59115, 71381, 31947, 25983, 51580, 26788, 46560, 61892, 58181, 67203,
      /* 12405 */ 61301, 33375, 70146, 67746, 49921, 43861, 49912, 26461, 39900, 47849, 36159, 34716, 26535, 44815, 26905,
      /* 12420 */ 26933, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 12435 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 12450 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 12465 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 12480 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 12495 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 12510 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 12525 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 12540 */ 32640, 32640, 32640, 32640, 31905, 48851, 72814, 23672, 46964, 47011, 47078, 47108, 47140, 47171, 32640,
      /* 12555 */ 41336, 32640, 50620, 20998, 40574, 47224, 47285, 49169, 47359, 32640, 35316, 31404, 32640, 22498, 71540,
      /* 12570 */ 47426, 22395, 47485, 41998, 47553, 68243, 35005, 43487, 49590, 47654, 45801, 22675, 32476, 32285, 47707,
      /* 12585 */ 67491, 67589, 47739, 47809, 47521, 53771, 47881, 39370, 54202, 70106, 63727, 47936, 58552, 32640, 49793,
      /* 12600 */ 48007, 32640, 65551, 71979, 37586, 48049, 48729, 71596, 33444, 48130, 48163, 50320, 48235, 48270, 34864,
      /* 12615 */ 70560, 48327, 48393, 48458, 72887, 48523, 38468, 37956, 42313, 48632, 55501, 51516, 36886, 48664, 48761,
      /* 12630 */ 48816, 50855, 27414, 41840, 48883, 63268, 48941, 45429, 49017, 55015, 49079, 32640, 22725, 23734, 49111,
      /* 12645 */ 51113, 69533, 55593, 49224, 46302, 49298, 68392, 71381, 31947, 25983, 51580, 58698, 26609, 49388, 58232,
      /* 12660 */ 70503, 49450, 42622, 70146, 67746, 49519, 60834, 49912, 26461, 39900, 47849, 56608, 49551, 26535, 44815,
      /* 12675 */ 49622, 26933, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 12690 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 12705 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 12720 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 12735 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 12750 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 12765 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 12780 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 12795 */ 32640, 32640, 32640, 32640, 32640, 31905, 69860, 72814, 32640, 32640, 53140, 22912, 46609, 49741, 49772,
      /* 12810 */ 32640, 25253, 32640, 32640, 32640, 32640, 49347, 54782, 64809, 51195, 32640, 32024, 32640, 32640, 32640,
      /* 12825 */ 25308, 72012, 57444, 31942, 38479, 62010, 25983, 49825, 26051, 53559, 44572, 32640, 32640, 32640, 32640,
      /* 12840 */ 32640, 64131, 72012, 72012, 25809, 25776, 25776, 25844, 25983, 25984, 26051, 26051, 26018, 58552, 32640,
      /* 12855 */ 32640, 32640, 32640, 68393, 72012, 72012, 33962, 25776, 25776, 55427, 25983, 25983, 39566, 26051, 26051,
      /* 12870 */ 68602, 32640, 32640, 32640, 65491, 72012, 72012, 47768, 25776, 36922, 39842, 25983, 53287, 26051, 26051,
      /* 12885 */ 68608, 32640, 32640, 65495, 72012, 51360, 25776, 65698, 25983, 53288, 26051, 37187, 32640, 32640, 64131,
      /* 12900 */ 71378, 25776, 29955, 53286, 26051, 46302, 32640, 68392, 71381, 31947, 25983, 51580, 37193, 26609, 71375,
      /* 12915 */ 60465, 43860, 58860, 33375, 70146, 67746, 49921, 43861, 49912, 26461, 39900, 47849, 36159, 34716, 26535,
      /* 12930 */ 44815, 26905, 26933, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 12945 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 12960 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 12975 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 12990 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 13005 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 13020 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 13035 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 13050 */ 32640, 32640, 32640, 32640, 32640, 32640, 31905, 59709, 72814, 32640, 32640, 53140, 22912, 36567, 70299,
      /* 13065 */ 34240, 32640, 25253, 61385, 32640, 32640, 32640, 49347, 54782, 64809, 51195, 32640, 32024, 32640, 32640,
      /* 13080 */ 32640, 25308, 72012, 72012, 31942, 25776, 62010, 25983, 61672, 26051, 26051, 44572, 32640, 32640, 32640,
      /* 13095 */ 32640, 32640, 64131, 72012, 72012, 25809, 25776, 25776, 25844, 25983, 25984, 26051, 26051, 26018, 55063,
      /* 13110 */ 32640, 32640, 32640, 32640, 51342, 72012, 72012, 34031, 25776, 25776, 21586, 25983, 25983, 37804, 26051,
      /* 13125 */ 26051, 68602, 32640, 32640, 32640, 65491, 72012, 72012, 47768, 25776, 36922, 39842, 25983, 53287, 26051,
      /* 13140 */ 26051, 68608, 32640, 32640, 65495, 72012, 51360, 25776, 65698, 25983, 53288, 26051, 37187, 32640, 32640,
      /* 13155 */ 64131, 71378, 25776, 29955, 53286, 26051, 46302, 32640, 68392, 71381, 31947, 25983, 51580, 37193, 26609,
      /* 13170 */ 71375, 60465, 43860, 58860, 33375, 70146, 67746, 49921, 43861, 49912, 26461, 39900, 47849, 36159, 34716,
      /* 13185 */ 26535, 44815, 26905, 26933, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 13200 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 13215 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 13230 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 13245 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 13260 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 13275 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 13290 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 13305 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 31905, 52831, 72814, 72305, 49953, 50018, 50050, 50069,
      /* 13320 */ 50101, 50132, 70815, 25253, 24050, 32640, 72261, 50206, 50261, 50293, 50389, 50456, 50572, 49266, 32159,
      /* 13335 */ 46476, 50609, 46896, 49653, 37284, 50652, 61556, 51136, 34792, 50743, 43516, 41182, 50834, 50887, 32640,
      /* 13350 */ 37764, 32640, 32640, 39657, 23757, 50924, 50956, 53683, 55377, 51012, 52437, 51082, 71275, 51168, 51247,
      /* 13365 */ 58552, 31456, 32640, 51318, 32640, 68393, 71632, 34909, 33962, 25776, 51408, 55427, 25983, 51489, 51571,
      /* 13380 */ 26051, 51617, 51676, 60646, 71309, 32640, 65491, 66269, 72012, 47768, 51714, 36922, 67551, 25983, 53287,
      /* 13395 */ 50411, 26051, 51682, 70346, 19987, 51747, 72012, 24952, 25776, 68123, 51821, 47327, 51856, 50424, 31808,
      /* 13410 */ 72723, 44072, 71378, 24163, 55203, 53286, 67732, 46302, 62840, 68392, 67136, 45208, 51824, 51580, 51892,
      /* 13425 */ 26609, 71375, 60465, 43860, 58860, 33375, 70146, 67746, 49921, 43861, 49912, 26461, 49192, 51996, 52096,
      /* 13440 */ 48579, 26535, 57041, 26905, 26933, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 13455 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 13470 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 13485 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 13500 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 13515 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 13530 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 13545 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 13560 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 31905, 32641, 72814, 32640, 52167, 20380, 52202,
      /* 13575 */ 52231, 52263, 52294, 52373, 25253, 38352, 32640, 52375, 52359, 29926, 52407, 61167, 51195, 57599, 32024,
      /* 13590 */ 25590, 52525, 32640, 52559, 51778, 52613, 52685, 43173, 52736, 25950, 43825, 49580, 44319, 53632, 52043,
      /* 13605 */ 52828, 32640, 32640, 32640, 58759, 38563, 72012, 52863, 54749, 25776, 52943, 55231, 25984, 38908, 53056,
      /* 13620 */ 26018, 58552, 53105, 32640, 22853, 53172, 39020, 53205, 55838, 69472, 53239, 53488, 67539, 53276, 33788,
      /* 13635 */ 39566, 53320, 63643, 68602, 32640, 32640, 32640, 65491, 72012, 72012, 47768, 25776, 36922, 39842, 25983,
      /* 13650 */ 53287, 26051, 26051, 68608, 32640, 32640, 65495, 72012, 51360, 25776, 65698, 25983, 53288, 26051, 37187,
      /* 13665 */ 53361, 32640, 72366, 71378, 53397, 57660, 53286, 53431, 46302, 32640, 68392, 71381, 47833, 35238, 66390,
      /* 13680 */ 37193, 26609, 71375, 60465, 43860, 63958, 50482, 38641, 53073, 53467, 53538, 49912, 26461, 39900, 47849,
      /* 13695 */ 36159, 48078, 53604, 44815, 26905, 26933, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 13710 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 13725 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 13740 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 13755 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 13770 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 13785 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 13800 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 13815 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 31905, 32640, 53715, 36751, 53803, 53858,
      /* 13830 */ 53921, 53950, 53982, 54013, 68341, 65423, 54066, 22337, 73196, 54108, 54140, 54172, 54234, 54389, 39321,
      /* 13845 */ 25417, 42341, 50174, 54455, 44050, 56059, 66616, 54504, 54555, 45851, 57679, 42130, 56789, 64232, 60925,
      /* 13860 */ 56829, 19692, 32640, 54689, 69055, 20609, 57455, 72012, 54726, 52653, 25776, 54814, 63908, 25984, 61227,
      /* 13875 */ 36498, 26018, 58552, 32640, 47394, 24383, 68318, 72870, 72012, 54868, 18707, 25776, 69705, 54929, 25983,
      /* 13890 */ 71927, 54995, 26051, 43915, 55047, 31632, 29738, 32574, 55095, 55145, 55282, 55174, 55347, 55409, 55471,
      /* 13905 */ 55533, 55625, 55661, 26850, 67349, 33333, 55693, 55764, 55813, 55904, 55954, 45409, 55563, 59673, 58326,
      /* 13920 */ 64010, 31239, 37627, 56028, 56147, 63574, 71739, 56202, 48600, 52021, 33017, 44420, 56272, 51439, 56304,
      /* 13935 */ 26558, 56379, 49469, 56435, 56525, 55629, 58860, 53658, 56557, 38796, 56640, 56760, 53746, 56861, 56918,
      /* 13950 */ 47849, 36159, 34716, 35068, 57014, 26905, 57100, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 13965 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 13980 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 13995 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 14010 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 14025 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 14040 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 14055 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 14070 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 31905, 32640, 57143, 60501, 46140,
      /* 14085 */ 53140, 57269, 57298, 57330, 57361, 57393, 21867, 57487, 53826, 57561, 73137, 57631, 57725, 57757, 57818,
      /* 14100 */ 64532, 33845, 25743, 28903, 32640, 30718, 48491, 57871, 57933, 57965, 50507, 34177, 46420, 65902, 58083,
      /* 14115 */ 44572, 34502, 27347, 47675, 69192, 32417, 27057, 58115, 45744, 58167, 58213, 58473, 58264, 36980, 26375,
      /* 14130 */ 58296, 44349, 69977, 37742, 31057, 58358, 32640, 35957, 68393, 49673, 58395, 33962, 23558, 65824, 55427,
      /* 14145 */ 66456, 46015, 39566, 60313, 47611, 68602, 32640, 47038, 58431, 65491, 72012, 72012, 58464, 25776, 27804,
      /* 14160 */ 58505, 25983, 57693, 26051, 26051, 58542, 33253, 32640, 51913, 22383, 49691, 64312, 64327, 50524, 46027,
      /* 14175 */ 71028, 38028, 53132, 32640, 21514, 49356, 67641, 68454, 61634, 65986, 49249, 32640, 68392, 71381, 31947,
      /* 14190 */ 25983, 51580, 39737, 67971, 58592, 35498, 68821, 42982, 65031, 58624, 58730, 58791, 58892, 49912, 26461,
      /* 14205 */ 39900, 47849, 36159, 34716, 60897, 62262, 58971, 59003, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 14220 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 14235 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 14250 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 14265 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 14280 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 14295 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 14310 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 14325 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 31905, 32640, 53024, 32640,
      /* 14340 */ 59046, 59088, 59157, 59186, 59218, 59249, 26690, 25253, 32640, 62512, 59314, 32640, 21399, 45956, 59348,
      /* 14355 */ 59428, 60204, 32024, 59282, 59482, 59526, 27721, 62325, 42794, 59562, 37343, 41105, 59653, 46262, 57786,
      /* 14370 */ 56728, 42158, 59014, 59705, 59741, 32640, 32640, 64131, 27582, 72012, 25809, 51286, 25776, 25844, 68525,
      /* 14385 */ 25984, 26051, 69412, 26018, 38086, 59766, 53173, 30453, 31873, 68393, 59807, 72012, 38182, 56458, 25776,
      /* 14400 */ 67880, 68261, 25983, 39566, 61247, 26051, 68602, 40380, 32640, 32640, 65491, 72012, 59857, 47966, 60005,
      /* 14415 */ 45599, 39842, 71940, 53287, 26051, 59892, 68608, 32640, 32640, 65495, 72012, 51360, 25776, 65698, 25983,
      /* 14430 */ 53288, 26051, 37187, 71116, 32640, 59931, 71378, 25776, 29955, 53286, 26051, 56227, 32640, 68392, 71381,
      /* 14445 */ 31947, 25983, 51580, 37193, 26609, 71375, 60465, 43860, 36718, 59969, 24280, 60037, 60131, 43861, 49912,
      /* 14460 */ 26461, 39900, 47849, 36159, 34716, 26535, 44815, 26905, 26933, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 14475 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 14490 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 14505 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 14520 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 14535 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 14550 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 14565 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 14580 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 31905, 32640, 72814,
      /* 14595 */ 32640, 32640, 53140, 22912, 36567, 70299, 34240, 32640, 25253, 54423, 32640, 20742, 60181, 32843, 60251,
      /* 14610 */ 67710, 54291, 32640, 32024, 32640, 32640, 32640, 25308, 72012, 72012, 31942, 25776, 62010, 25983, 61672,
      /* 14625 */ 26051, 26051, 44572, 32640, 29420, 32640, 32640, 32640, 64131, 72012, 72012, 60345, 25776, 25776, 60381,
      /* 14640 */ 25983, 25984, 26051, 26051, 26018, 58552, 32640, 32640, 32640, 32640, 68393, 72012, 72012, 33962, 25776,
      /* 14655 */ 25776, 55427, 25983, 25983, 39566, 26051, 26051, 68602, 32640, 32640, 32640, 65491, 53207, 72012, 47768,
      /* 14670 */ 27763, 36922, 39842, 71874, 53287, 26051, 60418, 68608, 32640, 32640, 65495, 72012, 51360, 25776, 65698,
      /* 14685 */ 25983, 53288, 26051, 37187, 32640, 32640, 64131, 71378, 25776, 29955, 53286, 26051, 46302, 32640, 70720,
      /* 14700 */ 71381, 60458, 35226, 48985, 37193, 26609, 71375, 60465, 43860, 58860, 33375, 70146, 67746, 49921, 43861,
      /* 14715 */ 49912, 26461, 39900, 47849, 36159, 34716, 26535, 44815, 26905, 26933, 32640, 32640, 32640, 32640, 32640,
      /* 14730 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 14745 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 14760 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 14775 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 14790 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 14805 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 14820 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 14835 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 31905, 32640,
      /* 14850 */ 36240, 60497, 23383, 53140, 60533, 60561, 60593, 60624, 23405, 25467, 22160, 33169, 60689, 60747, 60715,
      /* 14865 */ 60805, 60866, 60957, 32640, 36400, 61023, 26995, 32640, 33355, 55315, 59825, 61082, 65831, 61145, 47313,
      /* 14880 */ 61199, 61279, 67236, 61352, 32640, 30073, 61417, 71794, 61454, 22979, 61508, 38584, 61544, 61588, 56170,
      /* 14895 */ 61624, 61666, 64623, 61704, 26051, 48694, 58552, 65333, 72472, 61736, 61772, 61831, 56082, 61881, 64292,
      /* 14910 */ 46200, 55981, 63076, 32888, 56329, 36998, 50357, 58842, 68602, 61924, 31336, 31217, 32949, 61962, 72012,
      /* 14925 */ 54897, 52135, 36922, 43253, 54949, 53287, 62059, 62103, 54635, 69791, 32640, 71552, 72012, 20633, 25776,
      /* 14940 */ 66700, 25983, 70631, 26051, 43048, 60991, 32640, 27575, 38860, 26267, 35612, 71431, 26052, 46302, 39252,
      /* 14955 */ 68392, 71381, 31947, 25983, 51580, 37193, 26609, 71375, 60465, 43860, 59396, 61050, 48909, 62138, 49921,
      /* 14970 */ 43861, 50802, 44756, 26873, 47849, 36159, 34716, 33560, 62235, 62294, 26933, 32640, 32640, 32640, 32640,
      /* 14985 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 15000 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 15015 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 15030 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 15045 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 15060 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 15075 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 15090 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 31905,
      /* 15105 */ 32640, 69266, 62427, 62544, 62612, 62644, 62673, 62705, 62736, 31256, 49878, 31910, 32640, 62790, 62885,
      /* 15120 */ 62917, 44164, 69556, 51644, 62949, 62995, 45696, 32640, 19278, 63027, 63108, 63211, 63245, 54342, 53506,
      /* 15135 */ 63300, 61672, 63378, 63410, 44572, 63450, 21770, 63487, 58560, 32640, 57422, 68884, 61512, 63553, 47513,
      /* 15150 */ 61592, 63606, 63675, 29960, 51050, 63717, 37895, 63759, 18562, 21217, 40028, 32560, 63799, 59860, 58135,
      /* 15165 */ 43158, 25776, 63843, 70614, 25983, 63875, 63940, 26051, 63990, 64042, 64442, 21262, 32640, 64117, 58399,
      /* 15180 */ 38848, 47768, 24174, 64168, 39842, 56347, 53287, 26051, 64218, 68608, 27898, 31520, 65495, 64264, 51931,
      /* 15195 */ 42855, 67656, 26365, 64359, 39180, 64397, 32640, 22880, 64131, 71378, 25776, 29955, 53286, 26051, 56886,
      /* 15210 */ 32234, 41489, 41766, 51964, 60386, 51580, 64489, 54657, 64564, 34064, 72128, 35550, 42184, 64655, 39628,
      /* 15225 */ 49921, 43861, 62758, 40962, 68714, 54610, 64734, 36847, 26535, 44815, 26905, 26933, 32640, 32640, 32640,
      /* 15240 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 15255 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 15270 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 15285 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 15300 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 15315 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 15330 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 15345 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 15360 */ 31905, 32640, 25270, 32640, 23111, 32122, 64856, 64887, 64919, 64950, 31389, 65005, 27232, 34519, 65063,
      /* 15375 */ 65120, 65088, 61113, 65189, 65294, 65365, 65397, 32640, 65455, 65527, 65583, 65653, 65730, 65796, 42647,
      /* 15390 */ 52704, 58025, 65863, 65934, 65966, 66033, 64072, 66099, 26683, 30564, 66131, 66179, 66246, 41522, 66312,
      /* 15405 */ 64765, 26100, 66344, 66422, 62027, 63346, 66488, 48098, 66539, 38119, 40439, 30690, 24714, 66648, 46809,
      /* 15420 */ 22991, 67082, 66680, 47975, 66732, 66764, 58510, 66819, 66851, 26304, 66906, 66954, 31272, 32640, 67000,
      /* 15435 */ 67054, 67114, 21544, 34639, 21568, 67186, 67268, 67325, 67402, 54264, 43607, 48017, 34273, 42426, 67583,
      /* 15450 */ 30935, 67621, 41784, 67688, 48203, 67778, 64824, 41671, 20315, 24236, 67833, 44481, 37470, 67926, 59378,
      /* 15465 */ 68003, 32640, 68087, 68155, 34696, 68214, 39952, 68293, 68373, 68425, 68486, 66787, 35862, 33375, 70146,
      /* 15480 */ 67746, 49921, 43861, 49912, 58817, 68777, 68557, 68640, 68746, 58655, 44815, 68853, 26933, 32640, 32640,
      /* 15495 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 15510 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 15525 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 15540 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 15555 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 15570 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 15585 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 15600 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 15615 */ 32640, 31905, 32640, 64085, 32640, 48353, 53140, 68928, 68957, 68989, 69020, 32640, 27125, 27632, 30788,
      /* 15630 */ 27143, 32640, 31656, 64595, 69087, 69148, 32640, 32024, 32640, 69224, 32640, 49895, 69298, 39058, 69348,
      /* 15645 */ 25776, 49418, 25983, 70024, 69401, 45323, 46448, 24757, 70970, 32640, 27865, 31743, 52581, 61849, 69444,
      /* 15660 */ 69504, 54523, 54583, 69588, 33465, 69648, 59899, 33588, 69746, 58552, 69823, 32640, 32640, 69855, 38964,
      /* 15675 */ 72012, 72012, 65611, 69892, 25776, 72113, 69928, 25983, 39566, 69966, 26051, 41254, 35657, 32640, 32640,
      /* 15690 */ 61476, 72012, 72012, 62354, 25776, 36922, 70009, 25983, 26418, 26051, 26051, 34349, 32640, 18845, 26622,
      /* 15705 */ 72012, 27075, 25776, 39460, 70056, 67293, 70094, 41204, 31858, 32640, 64131, 71378, 25776, 29955, 53286,
      /* 15720 */ 26051, 46302, 32640, 68392, 71381, 31947, 25983, 51580, 37193, 26609, 45386, 70138, 70178, 58860, 33375,
      /* 15735 */ 70146, 67746, 49921, 43861, 49912, 26461, 46082, 68666, 70273, 34716, 26535, 44842, 26905, 26933, 32640,
      /* 15750 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 15765 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 15780 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 15795 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 15810 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 15825 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 15840 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 15855 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 15870 */ 32640, 32640, 31905, 32640, 22217, 68030, 66060, 33739, 70331, 54472, 70378, 70409, 32640, 25253, 32640,
      /* 15885 */ 32640, 32640, 32640, 19302, 70476, 56692, 51195, 59775, 43315, 32640, 32640, 27647, 25308, 37113, 62203,
      /* 15900 */ 70592, 53244, 62010, 70663, 47583, 56714, 33625, 44572, 32640, 32640, 28000, 32640, 29763, 64131, 55855,
      /* 15915 */ 72012, 25809, 51949, 25776, 25844, 56967, 25984, 26051, 33611, 26018, 58552, 32640, 32640, 32640, 32640,
      /* 15930 */ 68393, 72012, 72012, 33962, 25776, 25776, 55427, 25983, 25983, 39566, 26051, 26051, 68602, 32640, 32640,
      /* 15945 */ 32640, 65491, 72012, 72012, 47768, 25776, 36922, 39842, 25983, 53287, 26051, 26051, 68608, 50577, 32640,
      /* 15960 */ 65495, 72012, 51360, 25776, 65698, 25983, 53288, 26051, 37187, 25506, 32640, 64131, 71378, 25776, 29955,
      /* 15975 */ 53286, 26051, 46302, 32640, 68392, 71381, 31947, 25983, 51580, 37193, 70701, 71375, 60465, 43860, 58860,
      /* 15990 */ 33375, 70146, 67746, 49921, 43861, 49912, 26461, 39900, 47849, 36159, 34716, 26535, 44815, 26905, 26933,
      /* 16005 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 16020 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 16035 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 16050 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 16065 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 16080 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 16095 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 16110 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 16125 */ 32640, 32640, 32640, 31905, 32640, 59056, 32640, 70752, 70788, 70855, 70884, 70916, 70947, 32640, 25253,
      /* 16140 */ 32640, 32640, 32640, 32640, 41578, 49709, 71012, 71060, 32640, 32024, 32640, 32640, 71115, 25308, 72012,
      /* 16155 */ 72012, 31942, 25776, 62010, 25983, 61672, 26051, 26051, 44572, 32640, 32640, 32640, 32640, 32640, 64131,
      /* 16170 */ 72012, 72012, 25809, 25776, 25776, 25844, 25983, 25984, 26051, 26051, 26018, 58552, 32640, 32640, 38108,
      /* 16185 */ 32640, 24932, 72012, 72012, 52641, 25776, 25776, 71858, 25983, 25983, 43032, 26051, 26051, 68602, 32640,
      /* 16200 */ 71148, 32640, 65491, 51789, 34949, 47768, 56478, 42901, 39842, 71181, 63325, 63418, 36037, 68608, 32640,
      /* 16215 */ 32640, 65495, 72012, 51360, 25776, 65698, 25983, 53288, 26051, 37187, 32640, 32640, 64131, 71378, 25776,
      /* 16230 */ 29955, 53286, 26051, 46302, 32640, 68392, 71381, 31947, 25983, 51580, 37193, 26609, 71375, 60465, 43860,
      /* 16245 */ 58860, 33375, 70146, 67746, 49921, 43861, 49912, 26461, 39900, 47849, 36159, 34716, 26535, 44815, 26905,
      /* 16260 */ 26933, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 16275 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 16290 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 16305 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 16320 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 16335 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 16350 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 16365 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 16380 */ 32640, 32640, 32640, 32640, 32154, 32640, 72814, 32640, 32640, 53140, 22912, 36567, 70299, 34240, 32640,
      /* 16395 */ 25640, 43672, 32640, 22790, 58939, 37441, 71228, 41160, 51195, 32640, 22183, 71515, 71307, 32640, 25308,
      /* 16410 */ 72012, 71341, 31942, 35465, 71413, 36667, 59621, 26051, 71463, 42401, 32640, 32640, 32640, 32640, 32640,
      /* 16425 */ 64131, 72012, 72012, 25809, 25776, 25776, 25844, 25983, 25984, 26051, 26051, 26018, 58552, 32640, 32640,
      /* 16440 */ 41936, 32640, 68393, 66214, 72012, 71584, 38192, 25776, 42053, 70669, 25983, 39566, 39775, 26051, 68602,
      /* 16455 */ 35405, 32640, 32640, 65491, 71628, 72012, 48552, 25776, 36922, 26149, 25983, 53287, 71664, 26051, 68608,
      /* 16470 */ 32640, 32640, 65495, 72012, 51360, 25776, 65698, 25983, 53288, 26051, 37187, 32640, 32640, 64131, 71378,
      /* 16485 */ 25776, 29955, 53286, 26051, 46302, 32640, 68392, 71381, 31947, 25983, 51580, 37193, 26609, 71375, 60465,
      /* 16500 */ 43860, 58860, 33375, 70146, 67746, 49921, 43861, 49912, 26461, 39900, 47849, 36159, 34716, 26535, 44815,
      /* 16515 */ 26905, 26933, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 16530 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 16545 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 16560 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 16575 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 16590 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 16605 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 16620 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 16635 */ 32640, 32640, 32640, 32640, 32640, 31905, 32640, 72814, 32640, 32640, 53140, 22912, 36567, 70299, 37690,
      /* 16650 */ 32640, 25253, 66067, 32640, 32640, 32640, 71710, 26739, 42964, 71771, 20325, 32024, 32640, 32640, 32640,
      /* 16665 */ 27283, 72012, 59937, 31942, 25776, 52893, 25983, 56982, 26051, 51860, 44572, 23321, 32640, 32640, 37539,
      /* 16680 */ 32640, 38825, 72013, 72012, 71836, 53399, 25776, 71906, 39845, 25984, 71678, 53435, 26018, 58552, 30134,
      /* 16695 */ 32640, 32640, 32640, 68393, 71972, 72012, 63054, 52123, 25776, 62376, 48188, 25983, 24297, 36872, 26051,
      /* 16710 */ 68602, 32640, 32640, 33904, 65491, 72012, 72011, 47768, 42218, 36922, 39842, 71196, 53287, 26051, 72045,
      /* 16725 */ 68608, 32640, 48843, 65495, 72012, 51360, 25776, 65698, 25983, 53288, 26051, 45251, 32640, 34258, 23504,
      /* 16740 */ 63811, 25776, 68806, 63685, 26051, 46302, 23041, 68392, 72091, 44738, 54963, 34731, 37193, 26609, 71375,
      /* 16755 */ 60465, 43860, 58860, 33375, 70146, 67746, 49921, 43861, 49912, 26461, 39900, 47849, 36159, 34716, 26535,
      /* 16770 */ 44815, 26905, 26933, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 16785 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 16800 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 16815 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 16830 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 16845 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 16860 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 16875 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 16890 */ 32640, 32640, 32640, 32640, 32640, 32640, 31905, 32640, 72814, 32640, 32640, 53140, 72160, 36567, 70299,
      /* 16905 */ 34240, 32640, 25253, 32640, 32640, 32640, 32640, 49347, 54782, 64809, 51195, 32640, 32024, 32640, 32640,
      /* 16920 */ 32640, 25308, 72012, 72012, 31942, 25776, 62010, 25983, 61672, 26051, 26051, 44572, 32640, 32640, 32640,
      /* 16935 */ 32640, 32640, 64131, 72012, 72012, 25809, 25776, 25776, 25844, 25983, 25984, 26051, 26051, 26018, 58552,
      /* 16950 */ 32640, 32640, 32640, 32640, 68393, 72012, 72012, 33962, 25776, 25776, 55427, 25983, 25983, 39566, 26051,
      /* 16965 */ 26051, 68602, 32640, 32640, 32640, 65491, 72012, 72012, 47768, 25776, 36922, 39842, 25983, 53287, 26051,
      /* 16980 */ 26051, 68608, 32640, 32640, 65495, 72012, 51360, 25776, 65698, 25983, 53288, 26051, 37187, 32640, 32640,
      /* 16995 */ 64131, 71378, 25776, 29955, 53286, 26051, 46302, 32640, 68392, 71381, 31947, 25983, 51580, 37193, 26609,
      /* 17010 */ 71375, 60465, 43860, 58860, 33375, 70146, 67746, 49921, 43861, 49912, 26461, 39900, 47849, 36159, 34716,
      /* 17025 */ 26535, 44815, 26905, 26933, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 17040 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 17055 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 17070 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 17085 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 17100 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 17115 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 17130 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 17145 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 22530, 32640, 72268, 72234, 40231, 72204, 72300, 72337,
      /* 17160 */ 72417, 72449, 32640, 25253, 71149, 72986, 32640, 32640, 22011, 19703, 24646, 21807, 31154, 19779, 32640,
      /* 17175 */ 18612, 18649, 18757, 18789, 18959, 21985, 22069, 72504, 22057, 18887, 18787, 18957, 18991, 36451, 32640,
      /* 17190 */ 24875, 69179, 19041, 62458, 19134, 40819, 21341, 19073, 46732, 21342, 19074, 46733, 19106, 19193, 40822,
      /* 17205 */ 19438, 66570, 19251, 21244, 41014, 19334, 19366, 19398, 19470, 19502, 19538, 25119, 19498, 19534, 19570,
      /* 17220 */ 19359, 19629, 19422, 19661, 19735, 19811, 19878, 19910, 19942, 20019, 30851, 30993, 20026, 30858, 20058,
      /* 17235 */ 19907, 21927, 19969, 20090, 20138, 20211, 20265, 20357, 63521, 20412, 63518, 20488, 20547, 20291, 20579,
      /* 17250 */ 20709, 20774, 20821, 20870, 20853, 20885, 20789, 20917, 20949, 21030, 21062, 21094, 21084, 21126, 21186,
      /* 17265 */ 21310, 21452, 21374, 21431, 21484, 21618, 21650, 21741, 21802, 23057, 21839, 21899, 21959, 22101, 21154,
      /* 17280 */ 22249, 22281, 22427, 22459, 22487, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 17295 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 17310 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 17325 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 17340 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 17355 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 17370 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 17385 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 17400 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 22530, 32640, 61740, 32640, 70431, 53140, 72560,
      /* 17415 */ 72589, 60219, 72636, 32640, 25253, 32640, 72986, 50892, 50890, 18907, 32640, 40751, 21807, 31154, 19779,
      /* 17430 */ 32640, 18612, 18649, 18757, 18789, 18959, 22037, 22069, 18821, 22057, 18887, 18787, 18957, 18991, 36451,
      /* 17445 */ 32640, 24875, 69179, 19041, 62458, 19134, 40819, 21341, 19073, 46732, 21342, 19074, 46733, 19106, 19193,
      /* 17460 */ 40822, 19438, 66570, 19251, 21244, 41014, 19334, 19366, 19398, 19470, 19502, 19538, 25119, 19498, 19534,
      /* 17475 */ 19570, 19359, 19629, 19422, 19661, 19735, 19811, 19878, 19910, 19942, 20019, 30851, 30993, 20026, 30858,
      /* 17490 */ 20058, 19907, 21927, 19969, 20090, 20138, 20211, 20265, 20357, 63521, 20412, 63518, 20488, 20547, 20291,
      /* 17505 */ 20579, 20709, 20774, 20821, 20870, 20853, 20885, 20789, 20917, 20949, 21030, 21062, 21094, 21084, 21126,
      /* 17520 */ 21186, 21310, 21452, 21374, 21431, 21484, 21618, 21650, 21741, 21802, 23057, 21839, 21899, 21959, 22101,
      /* 17535 */ 21154, 22249, 22281, 22427, 22459, 22487, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 17550 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 17565 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 17580 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 17595 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 17610 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 17625 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 17640 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 17655 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 22530, 32640, 61930, 32640, 32640, 19846,
      /* 17670 */ 72691, 72708, 30629, 72755, 32640, 25253, 32640, 72810, 59270, 52170, 18907, 32640, 23058, 21807, 31154,
      /* 17685 */ 19779, 32640, 18612, 18649, 18757, 18789, 18959, 22311, 22069, 72846, 22057, 18887, 18787, 18957, 18991,
      /* 17700 */ 36451, 32640, 24875, 69179, 19041, 62458, 19134, 40819, 21341, 19073, 46732, 21342, 19074, 46733, 19106,
      /* 17715 */ 19193, 40822, 19438, 66570, 19251, 21244, 41014, 19334, 19366, 19398, 19470, 19502, 19538, 25119, 19498,
      /* 17730 */ 19534, 19570, 19359, 19629, 19422, 19661, 19735, 19811, 19878, 19910, 19942, 20019, 30851, 30993, 20026,
      /* 17745 */ 30858, 20058, 19907, 21927, 19969, 20090, 20138, 20211, 20265, 20357, 63521, 20412, 63518, 20488, 20547,
      /* 17760 */ 20291, 20579, 20709, 20774, 20821, 20870, 20853, 20885, 20789, 20917, 20949, 21030, 21062, 21094, 21084,
      /* 17775 */ 21126, 21186, 21310, 21452, 21374, 21431, 21484, 21618, 21650, 21741, 21802, 23057, 21839, 21899, 21959,
      /* 17790 */ 22101, 21154, 22249, 22281, 22427, 22459, 22487, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 17805 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 17820 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 17835 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 17850 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 17865 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 17880 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 17895 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 17910 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 22530, 32640, 61740, 32640, 32640,
      /* 17925 */ 53140, 22912, 32640, 32640, 72919, 32640, 25253, 32640, 32640, 32640, 32640, 49347, 54782, 64809, 35297,
      /* 17940 */ 32640, 32024, 32640, 32640, 32640, 25308, 72012, 72012, 48724, 25776, 59604, 25983, 61672, 26051, 26051,
      /* 17955 */ 44572, 32640, 32640, 32640, 32640, 32640, 64131, 72012, 72012, 25809, 25776, 25776, 25844, 25983, 25984,
      /* 17970 */ 26051, 26051, 26018, 58552, 32640, 32640, 32640, 32640, 68393, 72012, 72012, 33962, 25776, 25776, 55427,
      /* 17985 */ 25983, 25983, 39566, 26051, 26051, 68602, 32640, 32640, 32640, 65491, 72012, 72012, 47768, 25776, 36922,
      /* 18000 */ 39842, 25983, 53287, 26051, 26051, 68608, 32640, 32640, 65495, 72012, 51360, 25776, 65698, 25983, 53288,
      /* 18015 */ 26051, 37187, 32640, 32640, 64131, 71378, 25776, 29955, 53286, 26051, 46302, 32640, 68392, 71381, 31947,
      /* 18030 */ 25983, 51580, 37193, 26609, 71375, 60465, 43860, 58860, 33375, 70146, 67746, 49921, 43861, 49912, 26461,
      /* 18045 */ 39900, 47849, 36159, 34716, 26535, 44815, 26905, 26933, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 18060 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 18075 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 18090 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 18105 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 18120 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 18135 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 18150 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 18165 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 18180 */ 34485, 32640, 23212, 23229, 52327, 72974, 32640, 32640, 32640, 72986, 32640, 32640, 18907, 32640, 23058,
      /* 18195 */ 21807, 31154, 43659, 32640, 18612, 18649, 18757, 18789, 18959, 21985, 22069, 72504, 22057, 18887, 18787,
      /* 18210 */ 18957, 18991, 36451, 32640, 24875, 69179, 19041, 62458, 19134, 40819, 21341, 19073, 46732, 21342, 19074,
      /* 18225 */ 46733, 19106, 19193, 40822, 19438, 66570, 19251, 21244, 41014, 19334, 19366, 19398, 19470, 19502, 19538,
      /* 18240 */ 25119, 19498, 19534, 19570, 19359, 19629, 19422, 19661, 19735, 19811, 19878, 19910, 19942, 20019, 30851,
      /* 18255 */ 30993, 20026, 30858, 20058, 19907, 21927, 19969, 20090, 20138, 20211, 20265, 20357, 63521, 20412, 63518,
      /* 18270 */ 20488, 20547, 20291, 20579, 20709, 20774, 20821, 20870, 20853, 20885, 20789, 20917, 20949, 21030, 21062,
      /* 18285 */ 21094, 21084, 21126, 21186, 73022, 21452, 21374, 21431, 73111, 21618, 21650, 73169, 21802, 23057, 21839,
      /* 18300 */ 21899, 21959, 22101, 21154, 22249, 22281, 22427, 22459, 22487, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 18315 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 18330 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 18345 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 18360 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 18375 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 18390 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 18405 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640,
      /* 18420 */ 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 32640, 1, 24578, 3, 0, 0,
      /* 18437 */ 0, 0, 0, 0, 0, 180523, 180523, 180523, 180523, 0, 188716, 188716, 188716, 180523, 180523, 188716,
      /* 18453 */ 188716, 188716, 188716, 188716, 188716, 188716, 188716, 188716, 188716, 188716, 188716, 188716, 188716,
      /* 18466 */ 188716, 188716, 0, 188716, 180523, 188716, 188716, 188716, 188716, 188716, 188716, 188716, 188716,
      /* 18479 */ 188716, 188716, 188716, 188716, 188716, 188716, 188716, 188716, 188716, 188716, 188716, 188716, 188716,
      /* 18492 */ 188716, 188716, 188716, 188716, 139264, 147456, 188716, 188716, 188716, 188716, 188716, 188716, 188716,
      /* 18505 */ 188716, 188716, 131072, 188716, 188716, 188716, 188716, 188716, 188716, 188716, 188716, 188716, 188716,
      /* 18518 */ 188716, 188716, 188716, 188716, 188716, 188716, 188716, 188716, 188716, 188716, 188716, 188716, 188716,
      /* 18531 */ 188716, 188716, 188716, 188716, 188716, 188716, 188716, 188716, 188716, 367, 188716, 180523, 188716,
      /* 18544 */ 188716, 1, 24578, 3, 0, 0, 4366336, 0, 0, 0, 180523, 188716, 301, 302, 0, 4268032, 305, 306, 0, 0, 0, 0,
      /* 18566 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2289, 0, 2290, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2368, 2369,
      /* 18597 */ 0, 0, 2371, 0, 0, 0, 0, 2376, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4276224, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 18628 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 367, 0, 307, 0, 0, 5767168, 0, 0, 0, 4857856, 0, 0,
      /* 18657 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5259264, 0, 5414912, 5447680, 0, 0, 5562368, 5636096, 5685248, 0, 5750784,
      /* 18678 */ 5873664, 0, 0, 0, 0, 0, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 1877, 521, 521, 521,
      /* 18700 */ 521, 521, 521, 521, 521, 521, 1889, 521, 521, 521, 521, 521, 521, 0, 0, 0, 0, 57886, 57886, 57886,
      /* 18720 */ 59821, 57886, 59823, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 18735 */ 57886, 57886, 57886, 57886, 50657, 58754, 977, 57909, 57909, 58853, 57909, 57909, 58857, 57909, 57909,
      /* 18750 */ 57909, 57909, 57909, 57909, 57909, 57909, 58871, 0, 0, 5636096, 5873664, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 18771 */ 0, 0, 0, 0, 5873664, 0, 0, 0, 0, 0, 0, 0, 5480448, 4358144, 4358144, 4358144, 4358144, 4857856, 4874240,
      /* 18790 */ 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144,
      /* 18801 */ 4358144, 4358144, 5259264, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144,
      /* 18812 */ 5414912, 4358144, 5447680, 4358144, 5464064, 4358144, 5480448, 5562368, 4358144, 0, 0, 0, 0, 6275072, 0,
      /* 18827 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 977, 0, 0, 0, 0, 0, 4857856, 4874240, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3144, 0,
      /* 18856 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1262, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 18890 */ 0, 5873664, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6275072, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4358144, 4358144,
      /* 18917 */ 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144,
      /* 18928 */ 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 18947 */ 1140, 0, 0, 1145, 0, 4857856, 4874240, 0, 0, 4923392, 5562368, 4358144, 4358144, 4358144, 5636096,
      /* 18962 */ 4358144, 5685248, 4358144, 4358144, 5750784, 4358144, 4358144, 4358144, 4358144, 4358144, 5873664,
      /* 18973 */ 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144,
      /* 18984 */ 6275072, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144,
      /* 18995 */ 4358144, 4923392, 4358144, 4358144, 4358144, 4358144, 4358144, 0, 4923392, 0, 0, 0, 0, 4366336, 0, 0, 0,
      /* 19012 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2755, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2766, 0, 0, 0, 0, 0, 0,
      /* 19044 */ 4825088, 0, 0, 5177344, 0, 0, 0, 0, 5701632, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5808128, 0, 0, 0, 0, 4792320,
      /* 19069 */ 4833280, 0, 0, 5701632, 0, 5242880, 0, 0, 0, 0, 0, 0, 0, 5341184, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 19095 */ 5627904, 5652480, 0, 5701632, 0, 0, 0, 0, 0, 0, 0, 4358144, 4358144, 4358144, 4825088, 4358144, 4358144,
      /* 19112 */ 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144,
      /* 19123 */ 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 5177344, 4358144, 4358144, 4358144,
      /* 19134 */ 4358144, 4358144, 5242880, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 5341184,
      /* 19145 */ 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144,
      /* 19156 */ 4358144, 5627904, 5652480, 4358144, 5701632, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144,
      /* 19167 */ 4358144, 4358144, 4358144, 4358144, 4358144, 483328, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 19188 */ 4857856, 4874240, 0, 0, 4923392, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 5341184, 4358144,
      /* 19201 */ 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144,
      /* 19212 */ 5627904, 5652480, 4358144, 5701632, 4358144, 4358144, 5808128, 4358144, 4358144, 4358144, 4358144,
      /* 19223 */ 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 1051, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 19243 */ 0, 0, 0, 4857856, 4874240, 0, 0, 4923392, 0, 0, 6422528, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5619712, 0, 0,
      /* 19268 */ 0, 0, 0, 0, 0, 5726208, 5758976, 0, 0, 5791744, 0, 0, 0, 0, 0, 0, 0, 1151, 1278, 0, 0, 0, 0, 0, 0, 1285,
      /* 19294 */ 0, 0, 0, 0, 0, 0, 0, 1290, 0, 0, 0, 0, 0, 0, 0, 0, 521, 521, 521, 521, 521, 848, 521, 521, 521, 521,
      /* 19320 */ 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 57886, 57886, 57886, 0, 6479872, 0, 0, 0, 0, 0,
      /* 19341 */ 0, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4931584,
      /* 19353 */ 4939776, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 5054464, 4358144, 4358144, 4358144,
      /* 19364 */ 4358144, 4358144, 4358144, 4358144, 4358144, 5210112, 4358144, 4358144, 4358144, 4358144, 5292032,
      /* 19375 */ 4358144, 4358144, 4358144, 4358144, 5365760, 4358144, 4358144, 4358144, 5455872, 4358144, 4358144,
      /* 19386 */ 4358144, 4358144, 4358144, 5554176, 5570560, 5578752, 5619712, 5668864, 4358144, 4358144, 4358144,
      /* 19397 */ 5791744, 5816320, 4358144, 5857280, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144,
      /* 19408 */ 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 6119424, 4358144, 6168576, 4358144, 4358144,
      /* 19419 */ 4358144, 4358144, 6242304, 4358144, 6291456, 4358144, 6316032, 4358144, 4358144, 4358144, 4358144,
      /* 19430 */ 4358144, 4358144, 4358144, 4358144, 4358144, 6463488, 4358144, 4358144, 4358144, 4358144, 4358144, 0, 0,
      /* 19443 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4931584, 0, 0, 0, 0, 0, 0, 0, 4358144, 4358144,
      /* 19472 */ 4358144, 4358144, 4358144, 6463488, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4931584, 4939776, 0, 0,
      /* 19495 */ 0, 0, 0, 0, 5054464, 0, 0, 0, 0, 0, 0, 0, 0, 5210112, 0, 0, 0, 0, 5292032, 0, 0, 0, 0, 5365760, 0, 0, 0,
      /* 19522 */ 5455872, 0, 0, 0, 0, 0, 5554176, 5570560, 5578752, 5619712, 5668864, 0, 5578752, 5619712, 5668864, 0, 0,
      /* 19539 */ 0, 5791744, 5816320, 0, 5857280, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6119424, 0, 6168576, 0, 0, 0, 0,
      /* 19564 */ 0, 6242304, 0, 6291456, 0, 6316032, 0, 6291456, 0, 6316032, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6463488, 4358144,
      /* 19585 */ 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4931584,
      /* 19596 */ 4939776, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144,
      /* 19607 */ 4358144, 491520, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4857856, 4874240, 0, 0, 4923392, 5578752,
      /* 19630 */ 5619712, 5668864, 4358144, 4358144, 4358144, 5791744, 5816320, 4358144, 5857280, 4358144, 4358144,
      /* 19641 */ 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144,
      /* 19652 */ 6119424, 4358144, 6168576, 4358144, 4358144, 4358144, 4358144, 4358144, 6242304, 4956160, 4964352, 0, 0,
      /* 19665 */ 0, 0, 0, 0, 0, 0, 0, 0, 5218304, 0, 0, 0, 0, 5799936, 0, 5881856, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6373376,
      /* 19691 */ 6389760, 0, 0, 0, 0, 0, 1758, 0, 0, 1761, 0, 1763, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 19721 */ 0, 0, 0, 977, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6488064, 6103040, 0, 0, 0, 0, 0, 6184960, 5316608, 0, 0,
      /* 19747 */ 5644288, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6217728, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3384, 0, 0, 0, 3388, 0, 0, 0,
      /* 19776 */ 0, 0, 3394, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6275072, 0, 0, 0, 0, 0, 0, 0, 367, 367, 0, 0, 0, 0, 0,
      /* 19806 */ 0, 0, 0, 0, 0, 0, 0, 5390336, 5308416, 5488640, 0, 0, 5070848, 5431296, 0, 6430720, 0, 0, 5160960, 0, 0,
      /* 19827 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 4784128, 0, 0, 0, 0, 0, 0, 0, 0, 3623, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 19859 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2359296, 417, 417, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6283264, 6332416, 0, 0,
      /* 19886 */ 0, 5881856, 0, 5382144, 0, 0, 0, 0, 0, 0, 6266880, 4784128, 4358144, 4358144, 4358144, 4358144, 4358144,
      /* 19903 */ 4358144, 4358144, 4358144, 4915200, 4358144, 4956160, 4972544, 4358144, 4358144, 4358144, 4358144,
      /* 19914 */ 4358144, 4358144, 5070848, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 5218304,
      /* 19925 */ 4358144, 5267456, 4358144, 4358144, 5308416, 5316608, 4358144, 4358144, 4358144, 5431296, 4358144,
      /* 19936 */ 5488640, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 5799936, 4358144,
      /* 19947 */ 4358144, 5881856, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144,
      /* 19958 */ 6103040, 4358144, 4358144, 4358144, 6184960, 4358144, 4358144, 6283264, 4358144, 4358144, 6332416,
      /* 19969 */ 4358144, 4358144, 4358144, 6389760, 4358144, 4358144, 6430720, 6438912, 4358144, 4358144, 4358144,
      /* 19980 */ 6266880, 6488064, 0, 0, 0, 6266880, 6488064, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3149, 0, 0, 0,
      /* 20006 */ 0, 3154, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4358144, 6430720, 6438912, 0, 0, 0, 0, 0, 0, 4784128, 0, 0, 0,
      /* 20032 */ 4849664, 0, 0, 0, 0, 0, 4915200, 0, 4956160, 4972544, 0, 0, 0, 0, 0, 0, 5070848, 0, 0, 0, 0, 0, 0, 0,
      /* 20056 */ 5218304, 0, 0, 6103040, 0, 0, 0, 6184960, 0, 0, 0, 6283264, 0, 0, 6332416, 0, 0, 0, 6389760, 0, 0,
      /* 20077 */ 6430720, 6438912, 4784128, 4358144, 4358144, 4358144, 4849664, 4358144, 4358144, 4358144, 4358144,
      /* 20088 */ 4358144, 4915200, 0, 5660672, 5718016, 0, 5865472, 0, 0, 6037504, 0, 0, 6078464, 0, 0, 6340608, 0,
      /* 20105 */ 6455296, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 325, 326, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 20136 */ 0, 0, 0, 0, 0, 0, 5472256, 0, 0, 0, 6209536, 0, 0, 0, 0, 6176768, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 20165 */ 0, 4898816, 0, 5709824, 0, 0, 0, 0, 0, 1790, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1806, 0,
      /* 20194 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2348, 0, 0, 0, 0, 0, 0, 0, 0, 5283840, 0, 0, 0, 0, 5251072, 0, 6414336,
      /* 20221 */ 5832704, 0, 5955584, 0, 0, 4358144, 4358144, 4841472, 4358144, 4358144, 4358144, 4898816, 4358144,
      /* 20234 */ 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 0, 0, 0, 0, 0,
      /* 20249 */ 0, 0, 0, 0, 368640, 0, 0, 0, 0, 0, 0, 4857856, 4874240, 0, 0, 4923392, 4358144, 5111808, 4358144,
      /* 20268 */ 4358144, 4358144, 4358144, 4358144, 5283840, 4358144, 4358144, 4358144, 4358144, 5472256, 5521408,
      /* 20279 */ 4358144, 4358144, 4358144, 5595136, 5709824, 5718016, 4358144, 5824512, 5865472, 4358144, 4358144,
      /* 20290 */ 5922816, 4358144, 4358144, 6021120, 4358144, 6037504, 4358144, 4358144, 6078464, 6111232, 4358144,
      /* 20301 */ 6176768, 6209536, 4358144, 6234112, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144,
      /* 20312 */ 4358144, 4358144, 4358144, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3408, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 20340 */ 0, 0, 0, 0, 0, 0, 0, 1172, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4358144, 6078464, 6111232, 4358144, 6176768,
      /* 20362 */ 6209536, 6234112, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 0, 0, 0, 0, 4841472, 0,
      /* 20377 */ 0, 0, 4898816, 0, 0, 0, 0, 0, 0, 0, 0, 0, 340, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 388, 0, 139264,
      /* 20406 */ 147456, 0, 0, 0, 0, 0, 6037504, 0, 0, 6078464, 6111232, 0, 6176768, 6209536, 0, 6234112, 0, 0, 0, 0, 0,
      /* 20427 */ 0, 0, 0, 0, 0, 0, 4841472, 0, 0, 0, 4898816, 0, 0, 0, 0, 0, 0, 0, 0, 3773, 0, 3627, 3775, 0, 0, 3778, 0,
      /* 20454 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 521, 521, 521, 521, 521, 521, 521, 521, 4024, 521, 4026, 521, 521,
      /* 20479 */ 4028, 521, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 0, 6021120, 0, 6037504, 0, 0, 6078464,
      /* 20495 */ 6111232, 0, 6176768, 6209536, 0, 6234112, 0, 0, 0, 0, 0, 0, 0, 4358144, 4358144, 4841472, 4358144,
      /* 20512 */ 4358144, 4358144, 4898816, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144,
      /* 20523 */ 4358144, 4358144, 4358144, 499712, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4857856, 4874240, 0, 0,
      /* 20546 */ 4923392, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 5111808, 4358144, 4358144, 4358144,
      /* 20557 */ 4358144, 4358144, 5283840, 4358144, 4358144, 4358144, 4358144, 5472256, 5521408, 4358144, 4358144,
      /* 20568 */ 4358144, 4358144, 5595136, 5709824, 5718016, 4358144, 5824512, 5865472, 4358144, 4358144, 5922816, 0,
      /* 20580 */ 5029888, 5038080, 0, 0, 5103616, 5201920, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6406144, 5357568, 0,
      /* 20602 */ 5505024, 0, 0, 0, 0, 0, 5890048, 0, 0, 0, 0, 0, 521, 521, 521, 521, 521, 521, 521, 521, 521, 1873, 521,
      /* 20625 */ 521, 521, 521, 521, 521, 521, 521, 1884, 521, 521, 521, 521, 521, 521, 521, 521, 521, 3216, 521, 521,
      /* 20645 */ 521, 521, 0, 0, 57886, 57886, 57886, 57886, 57886, 60569, 57886, 60570, 57886, 57886, 57886, 57886,
      /* 20661 */ 57886, 57886, 57886, 57886, 57886, 58842, 57886, 57886, 57886, 57886, 50657, 58754, 977, 57909, 57909,
      /* 20676 */ 58854, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 59962,
      /* 20691 */ 59963, 57909, 57909, 57909, 57909, 57909, 57909, 59970, 57909, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 20706 */ 57909, 57909, 57909, 0, 6160384, 0, 5095424, 5349376, 0, 5275648, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 20727 */ 5947392, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 301, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 20759 */ 0, 0, 787, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6471680, 0, 0, 0, 4358144, 4358144, 4358144, 4358144,
      /* 20783 */ 4358144, 4358144, 4358144, 4358144, 4997120, 4358144, 4358144, 5038080, 4358144, 4358144, 4358144,
      /* 20794 */ 5095424, 5103616, 4358144, 4358144, 5201920, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144,
      /* 20805 */ 4358144, 4358144, 4358144, 4358144, 4358144, 5890048, 4358144, 4358144, 4358144, 6029312, 4358144,
      /* 20816 */ 4358144, 4358144, 4358144, 6160384, 4358144, 4358144, 4358144, 4358144, 5890048, 4358144, 4358144,
      /* 20827 */ 4358144, 6029312, 4358144, 4358144, 4358144, 4358144, 6160384, 4358144, 4358144, 4358144, 4358144,
      /* 20838 */ 4358144, 4358144, 6406144, 0, 0, 0, 0, 0, 0, 0, 0, 4997120, 0, 0, 5038080, 0, 0, 0, 0, 6406144, 0, 0, 0,
      /* 20861 */ 0, 0, 0, 0, 0, 4997120, 0, 0, 5038080, 0, 0, 0, 5095424, 5103616, 0, 0, 5201920, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 20886 */ 0, 0, 0, 5890048, 0, 0, 0, 6029312, 0, 0, 0, 0, 6160384, 0, 0, 0, 0, 0, 0, 0, 6406144, 4358144, 4358144,
      /* 20909 */ 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4997120, 4358144, 4358144, 4358144, 4358144,
      /* 20920 */ 4358144, 4358144, 4358144, 6406144, 4358144, 4358144, 4358144, 0, 0, 0, 4890624, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 20939 */ 0, 5898240, 5963776, 0, 0, 6193152, 0, 0, 5406720, 6397952, 5300224, 5234688, 5423104, 0, 0, 0, 0,
      /* 20956 */ 5988352, 0, 0, 6135808, 6307840, 0, 5996544, 4800512, 0, 6356992, 0, 0, 0, 5496832, 0, 0, 0, 0, 0,
      /* 20975 */ 5611520, 0, 0, 0, 0, 0, 0, 0, 1187, 0, 0, 1190, 1191, 0, 0, 0, 0, 1195, 0, 0, 0, 367, 367, 0, 0, 0, 0,
      /* 21002 */ 0, 0, 0, 0, 0, 0, 782, 0, 0, 0, 0, 0, 0, 0, 786, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 801, 4947968,
      /* 21031 */ 5021696, 5529600, 0, 0, 5169152, 0, 0, 0, 4800512, 4808704, 4358144, 4358144, 4890624, 4358144, 4947968,
      /* 21046 */ 4358144, 4358144, 4358144, 5046272, 4358144, 4358144, 4358144, 4358144, 5185536, 4358144, 5234688,
      /* 21057 */ 5300224, 4358144, 4358144, 5406720, 5529600, 4358144, 4358144, 4358144, 5898240, 4358144, 4358144,
      /* 21068 */ 4358144, 4358144, 4358144, 4358144, 4358144, 6307840, 4358144, 4358144, 6356992, 6381568, 6397952,
      /* 21079 */ 4800512, 4808704, 0, 0, 4890624, 0, 4947968, 0, 0, 0, 5046272, 0, 0, 0, 0, 5185536, 0, 5234688, 5300224,
      /* 21098 */ 0, 0, 5406720, 5529600, 0, 0, 0, 0, 5898240, 0, 0, 0, 0, 0, 0, 0, 0, 6307840, 0, 0, 6356992, 6381568,
      /* 21120 */ 6397952, 4800512, 4808704, 0, 0, 4890624, 0, 0, 6356992, 6381568, 6397952, 4800512, 4808704, 4358144,
      /* 21134 */ 4358144, 4890624, 4358144, 4947968, 4358144, 4358144, 4358144, 5046272, 4358144, 4358144, 4358144,
      /* 21145 */ 4358144, 5185536, 4358144, 5234688, 5300224, 4358144, 4358144, 5406720, 5529600, 4358144, 4358144,
      /* 21156 */ 4358144, 4358144, 4358144, 4358144, 4358144, 4907008, 0, 5079040, 6094848, 0, 0, 0, 4358144, 4907008,
      /* 21170 */ 4358144, 5079040, 4358144, 5226496, 4358144, 5742592, 4358144, 4358144, 4358144, 6094848, 0, 4907008, 0,
      /* 21183 */ 5079040, 0, 5226496, 5898240, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144,
      /* 21195 */ 6307840, 4358144, 4358144, 6356992, 6381568, 6397952, 5021696, 4358144, 4358144, 5021696, 0, 0, 0,
      /* 21208 */ 4980736, 0, 0, 0, 0, 0, 5373952, 5734400, 6045696, 0, 0, 0, 0, 0, 2306, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 21234 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 2290, 0, 0, 0, 0, 0, 0, 0, 6152192, 0, 0, 0, 6316032, 0, 0, 0, 0, 5816320,
      /* 21261 */ 6291456, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2778, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 21293 */ 0, 2803, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6258688, 6447104, 0, 0, 6127616, 0, 6348800,
      /* 21317 */ 5906432, 0, 5537792, 3627, 0, 0, 0, 0, 5939200, 0, 0, 5677056, 6365184, 4866048, 0, 6070272, 5545984,
      /* 21334 */ 5152768, 0, 0, 6144000, 4358144, 4866048, 4882432, 4358144, 0, 0, 0, 0, 0, 4825088, 0, 0, 0, 0, 0, 0, 0,
      /* 21355 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5177344, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5324800, 5373952, 5537792,
      /* 21381 */ 5545984, 5586944, 5734400, 5971968, 0, 6045696, 0, 6070272, 0, 0, 0, 0, 6348800, 0, 4866048, 4882432, 0,
      /* 21398 */ 4980736, 0, 0, 0, 0, 0, 0, 0, 0, 521, 831, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 877,
      /* 21421 */ 521, 521, 521, 521, 895, 521, 521, 57886, 57886, 58249, 0, 5324800, 5373952, 5537792, 5545984, 5586944,
      /* 21437 */ 5734400, 5971968, 0, 6045696, 0, 6070272, 0, 0, 0, 0, 6348800, 4358144, 4866048, 4882432, 4358144,
      /* 21452 */ 4980736, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 5324800, 5373952,
      /* 21463 */ 5537792, 5545984, 5734400, 5971968, 4358144, 6045696, 4358144, 6070272, 4358144, 4358144, 4358144,
      /* 21474 */ 6348800, 0, 4866048, 4882432, 0, 4980736, 0, 0, 0, 0, 5537792, 5545984, 5586944, 5734400, 5971968,
      /* 21489 */ 4358144, 6045696, 4358144, 6070272, 4358144, 4358144, 4358144, 4358144, 6348800, 4358144, 6144000, 0,
      /* 21501 */ 6144000, 0, 4988928, 5005312, 0, 0, 0, 0, 5775360, 0, 0, 0, 3627, 0, 0, 0, 0, 0, 521, 521, 521, 521,
      /* 21523 */ 521, 521, 521, 3441, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521,
      /* 21543 */ 3454, 521, 521, 521, 0, 0, 0, 0, 0, 0, 57886, 57886, 60242, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 21562 */ 57886, 57886, 57886, 57886, 57886, 60250, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 21577 */ 60293, 57886, 57886, 57886, 60296, 60297, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 21592 */ 57886, 57886, 57886, 57886, 0, 0, 0, 0, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 21609 */ 57909, 59917, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 5693440, 0, 6496256, 5144576, 5136384, 0,
      /* 21624 */ 5914624, 4358144, 4358144, 5005312, 4358144, 4358144, 4358144, 5120000, 5136384, 4358144, 4358144,
      /* 21635 */ 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 6324224, 0, 0, 5005312, 0, 0, 0, 5120000,
      /* 21650 */ 5136384, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6324224, 0, 0, 5005312, 0, 0, 0, 5120000, 5136384, 0, 0, 0, 0, 0,
      /* 21675 */ 0, 0, 0, 0, 0, 6324224, 4358144, 0, 0, 900, 900, 900, 4825988, 900, 900, 900, 900, 900, 900, 900, 900,
      /* 21696 */ 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 5178244, 900, 900, 900, 900, 900, 5219204,
      /* 21715 */ 900, 5268356, 900, 900, 5309316, 5317508, 900, 900, 900, 5432196, 900, 5489540, 900, 900, 900, 900, 900,
      /* 21732 */ 900, 900, 900, 900, 5800836, 900, 900, 5882756, 900, 4358144, 5005312, 4358144, 4358144, 4358144,
      /* 21746 */ 5120000, 5136384, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144,
      /* 21757 */ 4358144, 6324224, 5914624, 5914624, 0, 0, 0, 0, 0, 5513216, 5783552, 0, 3627, 0, 0, 0, 0, 0, 0, 1759, 0,
      /* 21778 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1772, 0, 1774, 0, 0, 0, 1778, 0, 0, 0, 1782, 0, 0, 0, 4358144, 4358144,
      /* 21805 */ 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144,
      /* 21816 */ 4358144, 4358144, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4857856, 4874240, 0, 0, 4923392, 0,
      /* 21840 */ 5013504, 0, 0, 6053888, 0, 0, 0, 0, 6012928, 4358144, 4358144, 5013504, 4358144, 4358144, 4358144,
      /* 21855 */ 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 6053888, 4358144, 4358144, 0, 0, 5013504, 0, 0, 0,
      /* 21870 */ 0, 0, 0, 685, 0, 0, 0, 0, 0, 0, 692, 367, 367, 367, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 705, 0, 0, 0, 0, 0,
      /* 21901 */ 0, 0, 0, 6053888, 0, 0, 0, 0, 0, 5013504, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6053888, 0, 0, 0, 4358144, 4358144,
      /* 21926 */ 5013504, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 5799936, 4358144, 4358144,
      /* 21937 */ 5881856, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 6103040,
      /* 21948 */ 4358144, 4358144, 4358144, 6184960, 4358144, 4358144, 4358144, 6283264, 4358144, 4358144, 6332416,
      /* 21959 */ 4358144, 4358144, 4358144, 4358144, 4358144, 6053888, 4358144, 4358144, 4358144, 0, 0, 0, 0, 0, 0, 0,
      /* 21975 */ 4358144, 4358144, 4358144, 4358144, 4358144, 5193728, 4358144, 4358144, 4358144, 4358144, 4358144,
      /* 21986 */ 4358144, 4358144, 0, 0, 0, 0, 0, 0, 0, 4857856, 4874240, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5259264,
      /* 22011 */ 0, 0, 0, 0, 0, 0, 0, 0, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144,
      /* 22028 */ 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144,
      /* 22039 */ 4358144, 0, 901, 0, 0, 0, 0, 0, 4857856, 4874240, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5259264, 0, 0,
      /* 22065 */ 0, 0, 0, 0, 0, 0, 5414912, 0, 5447680, 0, 5464064, 0, 5480448, 5562368, 0, 0, 0, 5636096, 0, 5685248, 0,
      /* 22086 */ 0, 5750784, 0, 0, 0, 0, 0, 5873664, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5193728, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 22115 */ 0, 0, 5193728, 0, 0, 0, 0, 0, 0, 0, 0, 4358144, 4358144, 4358144, 4358144, 4358144, 5193728, 4358144, 0,
      /* 22134 */ 1959, 0, 0, 0, 4825088, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5177344, 0, 0, 0, 0,
      /* 22164 */ 0, 0, 715, 0, 717, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 732, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1189, 0, 0, 0,
      /* 22196 */ 0, 0, 0, 0, 0, 0, 0, 367, 367, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1250, 1252, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 22227 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 362, 0, 0, 0, 0, 0, 0, 367, 0, 295, 0, 0, 5742592, 0, 0, 0, 6094848, 0,
      /* 22256 */ 0, 4907008, 0, 5079040, 0, 5226496, 0, 5742592, 0, 0, 0, 6094848, 0, 4358144, 4907008, 4358144, 5079040,
      /* 22273 */ 4358144, 5226496, 4358144, 5742592, 4358144, 4358144, 4358144, 6094848, 4358144, 5062656, 0, 0, 0,
      /* 22286 */ 4358144, 5062656, 4358144, 4358144, 4358144, 4358144, 4358144, 0, 5062656, 0, 0, 0, 0, 0, 6225920, 0,
      /* 22302 */ 5062656, 0, 0, 0, 0, 0, 6225920, 4358144, 5062656, 4358144, 4358144, 4358144, 0, 900, 0, 0, 0, 0, 0,
      /* 22321 */ 4857856, 4874240, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5259264, 0, 0, 0, 0, 0, 0, 0, 746, 0, 0, 0, 0,
      /* 22349 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 762, 0, 0, 0, 0, 0, 0, 0, 0, 521, 521, 521, 521, 521, 521, 521, 521,
      /* 22377 */ 2396, 521, 521, 521, 521, 2400, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 3199, 521, 521,
      /* 22397 */ 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 1390, 521,
      /* 22417 */ 521, 1394, 521, 521, 521, 521, 521, 1401, 521, 521, 4358144, 4358144, 4358144, 6225920, 0, 0, 0,
      /* 22434 */ 4816896, 4358144, 4358144, 4358144, 4358144, 6086656, 4816896, 0, 0, 0, 0, 6086656, 4816896, 0, 0, 0, 0,
      /* 22451 */ 6086656, 4816896, 4358144, 4358144, 4358144, 4358144, 6086656, 5087232, 0, 5931008, 4358144, 5332992,
      /* 22463 */ 5980160, 4358144, 0, 5332992, 5980160, 0, 0, 5332992, 5980160, 0, 4358144, 5332992, 5980160, 4358144,
      /* 22477 */ 5439488, 5128192, 4358144, 5128192, 0, 5128192, 0, 5128192, 4358144, 4358144, 0, 0, 4358144, 4358144, 0,
      /* 22492 */ 0, 4358144, 6004736, 6004736, 6004736, 6004736, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 22517 */ 0, 0, 0, 1289, 0, 0, 0, 0, 0, 0, 0, 0, 1294, 1, 24578, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 22548 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2816, 0, 0, 0, 0, 0, 131072, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 22580 */ 0, 221645, 221645, 221645, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 221645, 461,
      /* 22599 */ 221645, 221645, 221645, 461, 221645, 221645, 221645, 221645, 221645, 221645, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 22618 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 327, 328, 329, 330, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 221645, 1, 24578, 3, 0, 0,
      /* 22647 */ 4366336, 0, 0, 0, 0, 0, 301, 302, 0, 4268032, 305, 306, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 22674 */ 3390, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1769, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1780, 0, 0, 0,
      /* 22706 */ 0, 0, 0, 0, 4268032, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 755, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 22738 */ 0, 0, 3414, 0, 0, 0, 0, 3418, 0, 0, 0, 0, 3423, 0, 0, 0, 0, 0, 0, 1, 24578, 3, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 22768 */ 0, 0, 0, 237568, 301, 0, 305, 237568, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 302, 0, 0, 0, 0, 0, 0, 0,
      /* 22797 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 788, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 305, 0, 0, 0,
      /* 22830 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 305, 0, 0, 0, 0, 0, 0, 305, 237982, 147456, 0, 0, 0, 305, 0, 0, 0, 0, 0,
      /* 22858 */ 2334, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2349, 0, 0, 0, 0, 0, 0, 0, 3406, 0, 0,
      /* 22890 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3420, 3421, 0, 0, 0, 0, 3426, 0, 0, 0, 0, 0, 0, 0, 131072, 0, 0, 0,
      /* 22920 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 367, 0, 516096, 0, 0, 0, 0,
      /* 22952 */ 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305,
      /* 22973 */ 305, 305, 305, 305, 0, 305, 0, 0, 0, 0, 0, 521, 521, 521, 521, 521, 521, 1870, 521, 521, 521, 521, 521,
      /* 22996 */ 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 2453, 521, 521, 521, 2456,
      /* 23016 */ 521, 521, 521, 521, 521, 2461, 521, 305, 1, 24578, 3, 0, 0, 4366336, 0, 0, 0, 0, 0, 65536, 302, 0,
      /* 23038 */ 4268032, 98304, 306, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3626, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 23068 */ 0, 0, 0, 0, 0, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144,
      /* 23083 */ 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4210978, 24578, 3, 0, 0, 296, 0, 0, 0, 0,
      /* 23100 */ 296, 0, 0, 0, 0, 0, 0, 0, 0, 0, 245760, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 399, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 23132 */ 0, 0, 399, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 131072, 0, 0, 0, 0, 245760, 0, 0, 0, 0, 245760, 0,
      /* 23159 */ 245760, 0, 245760, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 326, 400, 0, 0, 0, 0, 0, 0, 0, 0, 0, 326, 0,
      /* 23188 */ 0, 0, 0, 0, 0, 0, 0, 4210978, 24578, 3, 0, 0, 4366336, 0, 0, 0, 0, 0, 301, 302, 0, 4268032, 305, 306, 0,
      /* 23213 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 212992, 0, 212992, 212992, 212992, 212992, 212992, 212992,
      /* 23235 */ 212992, 212992, 212992, 212992, 212992, 212992, 212992, 212992, 212992, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 23255 */ 0, 0, 0, 0, 0, 0, 1768, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1257, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 23288 */ 0, 0, 0, 0, 1270, 0, 0, 2059, 0, 0, 0, 4825088, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 23319 */ 0, 5177344, 0, 0, 0, 0, 0, 0, 0, 1730, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 23351 */ 0, 0, 311, 310, 0, 0, 0, 310, 310, 311, 1, 24578, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 23381 */ 0, 262144, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 350, 0, 0, 0, 0, 0, 0, 0, 0, 351, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 23413 */ 0, 0, 657, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 673, 674, 0, 0, 0, 0, 0, 0, 262144, 262144,
      /* 23441 */ 262144, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 367, 301, 0,
      /* 23473 */ 0, 0, 262144, 0, 262731, 262731, 262731, 262731, 262731, 262731, 262731, 262731, 262731, 262731, 262731,
      /* 23488 */ 262731, 262731, 262731, 262731, 262731, 262731, 262731, 262731, 262731, 262731, 262731, 262731, 262731,
      /* 23501 */ 262731, 0, 262731, 0, 0, 0, 0, 0, 521, 521, 521, 521, 521, 3439, 521, 521, 521, 521, 521, 521, 521, 521,
      /* 23523 */ 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 3670, 521, 521, 521, 521, 57886, 57886,
      /* 23543 */ 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 60591, 57886,
      /* 23558 */ 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 23573 */ 59853, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 23588 */ 57886, 57886, 60298, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 23603 */ 0, 0, 0, 0, 262731, 1, 24578, 3, 0, 0, 4366336, 0, 0, 0, 0, 0, 301, 302, 0, 4268032, 305, 306, 0, 0, 0,
      /* 23628 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 245760, 245760, 245760, 245760, 245760, 245760, 245760, 0, 0, 0, 0,
      /* 23651 */ 0, 0, 0, 0, 0, 0, 278528, 278528, 0, 0, 131072, 278528, 0, 0, 0, 278528, 0, 0, 0, 0, 278528, 0, 0, 0, 0,
      /* 23676 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 333, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 333, 384, 0, 278528,
      /* 23706 */ 278528, 278528, 278528, 278528, 278528, 278528, 278528, 278528, 278528, 278528, 278528, 278528, 278528,
      /* 23719 */ 278528, 278528, 278528, 278528, 278528, 278528, 278528, 278528, 278528, 278528, 278528, 278528, 278528,
      /* 23732 */ 0, 278528, 0, 0, 0, 0, 0, 521, 521, 521, 521, 3438, 521, 521, 521, 521, 3442, 521, 521, 521, 521, 521,
      /* 23754 */ 521, 521, 3448, 521, 521, 521, 521, 521, 521, 521, 521, 521, 1901, 521, 521, 521, 521, 521, 521, 521,
      /* 23774 */ 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 1921, 521, 521, 278528, 1, 24578, 3, 0, 0,
      /* 23795 */ 4366336, 0, 0, 0, 0, 0, 301, 302, 0, 4268032, 305, 306, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 23822 */ 262144, 0, 0, 0, 0, 0, 0, 262144, 262144, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 262144, 262144, 0, 262144, 0,
      /* 23847 */ 0, 0, 139264, 147456, 262144, 0, 0, 0, 0, 0, 0, 0, 0, 415, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 23876 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 367, 302, 0, 0, 0, 1, 24578, 3, 0, 0, 4366336, 0, 0, 0, 0, 0,
      /* 23905 */ 301, 631, 0, 4268032, 305, 634, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 532480, 0, 0, 0, 0, 0, 0,
      /* 23933 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 754, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 23967 */ 0, 0, 6275072, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1506, 0, 0, 0, 0, 0, 4857856, 4874240, 0, 0, 0, 0, 0, 0,
      /* 23995 */ 0, 0, 0, 3624, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2810, 2811, 0, 0, 0,
      /* 24027 */ 0, 0, 0, 0, 1, 24578, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 286720, 302, 0, 306, 286720, 0, 0, 0, 0, 0, 0,
      /* 24056 */ 0, 0, 0, 0, 0, 0, 0, 722, 0, 0, 0, 0, 0, 0, 0, 0, 0, 733, 0, 0, 0, 0, 733, 0, 739, 0, 0, 0, 0, 0, 306,
      /* 24087 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 306, 0, 0, 0, 0, 0, 0, 306, 139264, 287138, 0, 0, 0, 306, 0, 0, 0,
      /* 24116 */ 0, 0, 2386, 0, 0, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 2402, 521,
      /* 24138 */ 2404, 521, 521, 521, 521, 521, 521, 0, 0, 0, 0, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 24157 */ 57886, 57886, 57886, 57886, 57886, 59830, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 24172 */ 57886, 60836, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 24187 */ 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 60274, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 24202 */ 57886, 57886, 57886, 57886, 0, 0, 0, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
      /* 24222 */ 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 0, 306, 0, 0, 0, 0, 0, 521, 521, 521, 3437,
      /* 24245 */ 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 3449, 521, 521, 521, 521, 521,
      /* 24265 */ 521, 521, 521, 521, 3464, 521, 3466, 521, 521, 521, 521, 521, 521, 521, 521, 57886, 57886, 57886, 57886,
      /* 24284 */ 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57909, 61250, 57909, 57909, 61252, 57909, 57909,
      /* 24299 */ 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57936, 57936, 57936,
      /* 24314 */ 57936, 59994, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936,
      /* 24329 */ 306, 1, 24578, 3, 0, 0, 4366336, 0, 0, 0, 0, 0, 301, 66168, 0, 4268032, 305, 98939, 0, 0, 0, 0, 0, 0, 0,
      /* 24354 */ 0, 0, 0, 0, 0, 0, 0, 0, 540672, 0, 0, 0, 0, 0, 0, 0, 540672, 0, 0, 0, 0, 0, 0, 0, 0, 0, 122880, 0,
      /* 24382 */ 4268032, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2352, 0,
      /* 24414 */ 0, 1, 24578, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 303, 303, 303, 0, 0, 303, 303, 295215, 303, 303,
      /* 24440 */ 303, 303, 303, 303, 303, 303, 303, 295215, 373, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303,
      /* 24460 */ 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303,
      /* 24481 */ 368, 303, 0, 295215, 303, 303, 303, 303, 295285, 295215, 295215, 295215, 295215, 295215, 295215, 303,
      /* 24497 */ 303, 303, 303, 303, 303, 295285, 295215, 295215, 295215, 303, 303, 303, 295285, 139264, 147456, 295215,
      /* 24513 */ 295215, 303, 303, 295215, 303, 303, 131072, 303, 303, 303, 303, 295215, 303, 303, 303, 303, 295215, 303,
      /* 24531 */ 295215, 295215, 295215, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303,
      /* 24549 */ 295215, 295215, 295215, 295215, 295215, 295215, 303, 303, 303, 295215, 303, 303, 303, 303, 303, 303,
      /* 24565 */ 303, 303, 303, 303, 303, 303, 303, 295215, 303, 295215, 295215, 295215, 295215, 295215, 295215, 295215,
      /* 24581 */ 303, 0, 303, 0, 303, 303, 303, 295215, 303, 303, 303, 295215, 295215, 303, 295215, 303, 295215, 295215,
      /* 24599 */ 295215, 295215, 295215, 295215, 295215, 295215, 295285, 295285, 295285, 295285, 295285, 295285, 295285,
      /* 24612 */ 295285, 295285, 295285, 295285, 295285, 295285, 295285, 295285, 295285, 295285, 295285, 295285, 295215,
      /* 24625 */ 295215, 295215, 295215, 295215, 1, 24578, 3, 0, 0, 4366336, 0, 0, 0, 0, 0, 301, 302, 0, 4268032, 305,
      /* 24645 */ 306, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4358144, 4359045, 4358144, 4358144, 4358144, 4358144,
      /* 24667 */ 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 1,
      /* 24679 */ 24578, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 319488, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 24711 */ 352256, 0, 352256, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2373, 0, 0, 0, 0, 0,
      /* 24741 */ 0, 0, 0, 0, 0, 0, 0, 319488, 0, 0, 0, 0, 0, 0, 319488, 319488, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 24771 */ 0, 0, 0, 0, 0, 0, 0, 0, 1743, 0, 0, 0, 0, 0, 0, 0, 1751, 1752, 0, 0, 0, 0, 131072, 0, 0, 0, 0, 0, 0, 0,
      /* 24801 */ 0, 0, 0, 319488, 0, 0, 0, 319488, 319488, 319488, 319488, 319488, 319488, 319488, 319488, 319488,
      /* 24817 */ 319488, 319488, 319488, 319488, 319488, 319488, 0, 0, 0, 0, 319488, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 24838 */ 319488, 0, 0, 0, 0, 0, 0, 0, 0, 0, 319488, 0, 0, 0, 0, 319488, 0, 319488, 319488, 319488, 0, 24578, 3,
      /* 24861 */ 0, 0, 4366336, 253952, 0, 0, 0, 0, 301, 302, 0, 4268032, 305, 306, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 24887 */ 0, 0, 0, 5627904, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4284416, 0, 0, 1, 24578, 3, 0, 0, 0, 0, 0, 0,
      /* 24916 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 327680, 0, 0, 0, 0, 0, 0, 0, 0, 521, 2389, 521, 521, 521,
      /* 24945 */ 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 3219,
      /* 24965 */ 521, 0, 0, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 60571, 57886, 57886, 57886, 57886,
      /* 24981 */ 57886, 57886, 60579, 0, 0, 0, 0, 131072, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 327680, 327680, 327680, 0, 0,
      /* 25005 */ 0, 0, 0, 0, 0, 0, 0, 0, 327680, 327680, 327680, 327680, 335872, 327680, 327680, 327680, 335872, 327680,
      /* 25023 */ 327680, 327680, 327680, 327680, 327680, 0, 0, 0, 0, 0, 0, 0, 0, 0, 49716, 0, 0, 0, 0, 0, 327680, 49716,
      /* 25045 */ 327680, 1, 24578, 3, 0, 0, 4366336, 0, 0, 0, 0, 0, 301, 302, 0, 4268032, 305, 306, 0, 0, 0, 0, 0, 0, 0,
      /* 25070 */ 0, 0, 0, 0, 0, 0, 0, 0, 5627904, 0, 0, 0, 0, 0, 0, 196608, 0, 0, 0, 106496, 0, 0, 4284416, 0, 0, 0, 0,
      /* 25097 */ 0, 0, 6275072, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 49152, 977, 0, 0, 0, 0, 0, 4857856, 4874240, 0, 0, 0, 0, 0,
      /* 25124 */ 0, 0, 0, 0, 6463488, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4931584, 4939776, 0, 0, 0, 0, 0, 0, 0,
      /* 25153 */ 0, 0, 131072, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 344064, 344064, 344064, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 25180 */ 344064, 344064, 344064, 344064, 344064, 344064, 344064, 344064, 344064, 344064, 344064, 344064, 344064,
      /* 25193 */ 344064, 344064, 344064, 344064, 344064, 344064, 344064, 344064, 344064, 344064, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 25211 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 727, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 344064, 1, 24578, 3, 0, 0,
      /* 25241 */ 4366336, 0, 0, 0, 0, 0, 301, 302, 0, 4268032, 305, 306, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 367,
      /* 25268 */ 367, 367, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 356, 357, 358, 359, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 25298 */ 367, 0, 295, 0, 0, 0, 0, 0, 4276224, 1245, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 25328 */ 0, 0, 0, 0, 0, 0, 0, 521, 521, 521, 521, 521, 1, 24578, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 25358 */ 0, 0, 0, 0, 0, 0, 0, 352256, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 139264, 147456, 0, 0, 352256, 0, 0, 0,
      /* 25386 */ 0, 0, 0, 131072, 0, 352256, 352256, 0, 0, 352256, 0, 0, 352256, 0, 352256, 0, 352256, 352256, 352256,
      /* 25405 */ 352256, 352256, 352256, 352256, 352256, 352256, 352256, 352256, 352256, 352256, 352256, 352256, 0, 0, 0,
      /* 25420 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1197, 0, 367, 367, 0, 1200, 0, 0, 0, 0, 0, 0, 0, 0, 352256,
      /* 25450 */ 1, 24578, 3, 0, 0, 4366336, 0, 0, 0, 0, 0, 301, 302, 0, 4268032, 305, 306, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 25477 */ 0, 0, 0, 0, 367, 367, 367, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 706, 0, 0, 1, 291, 3, 0, 0, 0, 297, 0, 0,
      /* 25508 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3398, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 25542 */ 131072, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 360448, 360448, 360448, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 360448,
      /* 25568 */ 360448, 360448, 360448, 360448, 360448, 360448, 360448, 360448, 360448, 360448, 360448, 360448, 360448,
      /* 25581 */ 360448, 360448, 360448, 360448, 360448, 360448, 360448, 360448, 360448, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 25601 */ 0, 0, 0, 0, 0, 0, 0, 1226, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 360448, 1, 0, 3, 155941, 155941, 295,
      /* 25629 */ 0, 629, 0, 0, 0, 301, 302, 0, 4268032, 305, 306, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 367, 367,
      /* 25656 */ 367, 0, 0, 0, 0, 698, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1212, 0, 0, 0, 0, 1217, 0, 0, 0, 0, 0,
      /* 25687 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1806, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 25721 */ 0, 0, 0, 0, 0, 0, 0, 4276224, 1245, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1259, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 25752 */ 0, 0, 0, 0, 1221, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1188, 0, 58796, 57886, 57886, 57886,
      /* 25779 */ 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 25794 */ 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 59402,
      /* 25809 */ 521, 58754, 0, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 25824 */ 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 25839 */ 57886, 57886, 58826, 57886, 57886, 50657, 0, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 25854 */ 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 25869 */ 57909, 57909, 57909, 57909, 57909, 57909, 57909, 59502, 57886, 0, 2281, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 25891 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 739, 0, 0, 0, 2357, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 25924 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3428, 0, 57909, 59926, 57909, 57909,
      /* 25951 */ 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 25966 */ 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 58906, 57909,
      /* 25981 */ 57909, 59952, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 25996 */ 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 26011 */ 57909, 57909, 57909, 57909, 57886, 57936, 60009, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936,
      /* 26026 */ 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936,
      /* 26041 */ 57936, 57936, 57936, 57936, 57936, 57936, 57936, 521, 521, 60035, 57936, 57936, 57936, 57936, 57936,
      /* 26056 */ 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936,
      /* 26071 */ 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 60937, 521, 3212,
      /* 26086 */ 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 0, 0, 57886, 57886, 57886, 57886, 57886,
      /* 26105 */ 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 59387, 59388, 57886, 57886,
      /* 26120 */ 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 26135 */ 60604, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 0, 0,
      /* 26151 */ 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 26166 */ 57909, 57909, 60320, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 26181 */ 57936, 57936, 57936, 57936, 57936, 57936, 57936, 60702, 57936, 57936, 57936, 57936, 57936, 57936, 57936,
      /* 26196 */ 57936, 57936, 57936, 57936, 57936, 57936, 521, 521, 521, 57886, 57886, 57886, 0, 0, 0, 0, 0, 0, 0, 3612,
      /* 26216 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3381, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 26250 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 369, 0, 0, 0, 57886, 57886, 60830, 57886, 57886, 57886, 57886, 57886,
      /* 26272 */ 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 26287 */ 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 60853, 57886, 57886, 57936, 57936, 57936,
      /* 26302 */ 57936, 60914, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936,
      /* 26317 */ 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 60057,
      /* 26332 */ 57936, 57936, 57936, 57936, 61027, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 26347 */ 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 26362 */ 57886, 57909, 61045, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 60634, 57909, 57909,
      /* 26377 */ 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 26392 */ 57909, 57909, 57909, 57909, 57909, 59493, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57886,
      /* 26407 */ 61048, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 61056, 57909, 57909, 57909, 57909,
      /* 26422 */ 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 26437 */ 57909, 57909, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 60378, 57936, 57936, 57936, 57886, 57886,
      /* 26452 */ 57886, 57886, 61156, 57886, 57886, 57886, 57886, 61157, 61158, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 26467 */ 57886, 57886, 57886, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 26482 */ 57909, 57909, 57909, 57909, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 59997, 57936, 57936, 57936,
      /* 26497 */ 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57909, 61175, 57909, 57909, 57909, 57909, 61176, 61177,
      /* 26512 */ 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57936, 57936, 57936, 57936, 57936, 57936,
      /* 26527 */ 57936, 57936, 57936, 57936, 57936, 57936, 57936, 61194, 57936, 0, 0, 0, 0, 521, 521, 521, 521, 521, 521,
      /* 26546 */ 521, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 26561 */ 57909, 57909, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 61078, 61079, 57936, 57936, 57936, 57936,
      /* 26576 */ 61083, 61084, 57936, 57936, 57936, 57936, 57936, 61088, 57936, 57936, 57936, 57936, 57936, 57936, 57936,
      /* 26591 */ 57936, 57936, 61195, 61196, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 521, 521,
      /* 26606 */ 57886, 57886, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3627, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 26637 */ 521, 521, 521, 521, 3177, 521, 521, 521, 521, 521, 521, 3184, 521, 3186, 521, 521, 521, 57936, 57936,
      /* 26656 */ 57936, 57936, 57936, 61270, 57936, 57936, 57936, 57936, 57936, 57936, 61276, 57936, 57936, 57936, 61280,
      /* 26671 */ 57936, 521, 57886, 0, 0, 0, 0, 0, 0, 0, 0, 3627, 0, 0, 0, 0, 0, 0, 1791, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 26700 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 672, 0, 0, 0, 0, 0, 0, 0, 3947, 521, 521, 521, 521, 521,
      /* 26729 */ 521, 521, 521, 521, 521, 521, 521, 521, 521, 61306, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 26746 */ 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 58312, 57886, 57886, 57886, 0, 57909, 57909,
      /* 26761 */ 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 61322, 57909, 57909, 57909, 57909,
      /* 26776 */ 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 61338, 57936, 57936, 57936,
      /* 26791 */ 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 521, 3759, 521,
      /* 26806 */ 57886, 61105, 57886, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57886, 61439, 57886, 57886, 57886, 57886, 57886,
      /* 26827 */ 57886, 57886, 57886, 57886, 57909, 57909, 57909, 57909, 61452, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 26842 */ 57909, 57909, 57909, 57936, 57936, 57936, 57936, 61465, 57936, 57936, 57936, 57936, 57936, 57936, 57936,
      /* 26857 */ 57936, 57936, 60413, 57936, 57936, 57936, 57936, 57936, 57936, 60421, 57936, 57936, 57936, 57936, 57936,
      /* 26872 */ 60426, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 0, 0, 0, 0, 0, 4077, 0, 521, 521,
      /* 26891 */ 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 57886, 57886, 57886, 0, 0, 521, 521, 521, 521,
      /* 26911 */ 57886, 57886, 57886, 57886, 57909, 57909, 57909, 57909, 57936, 57936, 57936, 57936, 0, 521, 521, 57886,
      /* 26927 */ 57886, 57909, 57909, 57936, 57936, 521, 57886, 57909, 57936, 521, 57886, 57909, 57936, 521, 57886,
      /* 26942 */ 57909, 57936, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1829, 0, 0, 0, 0, 0, 0,
      /* 26973 */ 0, 0, 0, 0, 0, 0, 0, 131072, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 376832, 376832, 376832, 0, 0, 0, 0, 0, 0,
      /* 27001 */ 0, 0, 0, 0, 0, 0, 0, 1254, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1268, 1269, 0, 0, 0, 0, 0, 419,
      /* 27031 */ 419, 419, 419, 590, 590, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
      /* 27052 */ 419, 419, 419, 0, 419, 0, 0, 0, 0, 0, 521, 1866, 521, 521, 521, 521, 521, 521, 1872, 521, 521, 521, 521,
      /* 27075 */ 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 0, 0, 57886, 57886, 57886, 57886,
      /* 27095 */ 60568, 57886, 57886, 57886, 57886, 57886, 57886, 60575, 57886, 60577, 57886, 57886, 419, 1, 24578, 3, 0,
      /* 27112 */ 0, 4366336, 0, 0, 0, 0, 0, 301, 302, 0, 4268032, 305, 306, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 27139 */ 367, 367, 367, 0, 696, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 27171 */ 0, 0, 0, 0, 2817, 0, 0, 0, 4268773, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 27203 */ 0, 0, 0, 0, 0, 0, 2380, 0, 0, 1, 24578, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 307, 0, 0, 0,
      /* 27235 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 721, 0, 0, 0, 0, 0, 0, 0, 0, 731, 0, 637, 731, 0, 735, 736, 637, 0, 0, 0, 0,
      /* 27265 */ 0, 0, 0, 131072, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 393678, 393678, 393678, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 27293 */ 0, 0, 0, 1309, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 521, 521, 521, 521, 521, 521, 521, 521, 521, 4025,
      /* 27320 */ 521, 521, 521, 521, 521, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 0, 0, 0, 393678, 0, 393678,
      /* 27338 */ 393678, 393678, 0, 393678, 393678, 393678, 393678, 393678, 393678, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 27359 */ 0, 0, 0, 0, 0, 0, 1771, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 24578, 3, 0, 0, 4366336, 0, 0, 0,
      /* 27389 */ 0, 0, 301, 302, 0, 4268032, 305, 306, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 367, 367, 425984, 0, 0,
      /* 27416 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 521, 521, 521, 3176, 521, 521, 521, 521, 521, 3181, 521, 521,
      /* 27441 */ 521, 521, 521, 521, 521, 0, 0, 0, 4268032, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 475136, 0, 0, 0, 0, 0,
      /* 27469 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 374, 0, 0, 375, 0, 0, 0, 0, 0, 327, 375, 330, 374, 0, 0, 0, 0, 0, 1, 24578,
      /* 27498 */ 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 304, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 521, 57887,
      /* 27530 */ 521, 57887, 521, 521, 57887, 521, 521, 57910, 57887, 521, 521, 57887, 57887, 57887, 57910, 0, 0, 0, 420,
      /* 27549 */ 420, 420, 420, 420, 420, 420, 420, 420, 420, 420, 420, 420, 420, 420, 420, 420, 420, 420, 420, 420, 420,
      /* 27570 */ 420, 420, 420, 0, 420, 0, 0, 0, 0, 0, 521, 3435, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521,
      /* 27593 */ 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 1916, 521, 521, 521, 521, 521,
      /* 27613 */ 521, 420, 1, 24578, 3, 155941, 155941, 295, 0, 0, 0, 0, 0, 301, 302, 0, 304, 305, 306, 0, 0, 0, 0, 0, 0,
      /* 27638 */ 0, 0, 0, 0, 0, 0, 0, 0, 723, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1287, 0, 0, 0, 0, 0, 0,
      /* 27671 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 741, 420, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 27704 */ 0, 0, 0, 0, 0, 0, 0, 0, 2791, 0, 0, 1239, 0, 0, 0, 741, 1246, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 27735 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 521, 521, 521, 1322, 521, 521, 521, 521, 521, 521, 521, 2468, 0,
      /* 27761 */ 0, 0, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 27777 */ 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 60276, 57886, 57886, 57886, 57886, 57886,
      /* 27792 */ 57886, 57886, 57886, 521, 521, 521, 2468, 2895, 0, 0, 0, 0, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 27810 */ 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 27825 */ 57886, 57886, 57886, 57886, 60305, 57886, 57886, 0, 0, 0, 2963, 1, 24578, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 27848 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 417792, 308, 309, 0, 0, 0, 0, 0, 0, 1815, 0, 0, 0, 0, 0, 0, 0,
      /* 27879 */ 0, 1821, 0, 1823, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 540672, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 27910 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3127, 0, 0, 0, 0, 3132, 0, 0, 0, 0, 0, 0, 0, 0, 131072, 0, 0, 0, 0, 0, 0,
      /* 27941 */ 0, 0, 309, 0, 417792, 417792, 0, 0, 417792, 417792, 417792, 417792, 417792, 417792, 417792, 417792,
      /* 27957 */ 417792, 417792, 417792, 417792, 417792, 418101, 417792, 417792, 418100, 418101, 417792, 417792, 418100,
      /* 27970 */ 417792, 418100, 417792, 0, 0, 0, 0, 0, 0, 0, 0, 417792, 0, 0, 0, 417792, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 27996 */ 0, 309, 309, 309, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1802, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 28028 */ 0, 0, 0, 0, 417792, 1, 24578, 3, 0, 0, 4366964, 0, 0, 0, 0, 0, 301, 302, 311296, 4268032, 305, 306, 0,
      /* 28051 */ 434176, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1846, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1859, 0, 0,
      /* 28081 */ 1860, 0, 0, 900, 900, 5415812, 900, 5448580, 900, 5464964, 900, 5481348, 5563268, 900, 900, 900,
      /* 28097 */ 5636996, 900, 5686148, 900, 900, 5751684, 900, 900, 900, 900, 900, 5874564, 900, 900, 900, 900, 900,
      /* 28114 */ 900, 900, 900, 900, 6464388, 0, 0, 0, 0, 976, 976, 976, 976, 976, 976, 976, 976, 976, 976, 976, 4932560,
      /* 28135 */ 4940752, 976, 976, 976, 976, 976, 4359044, 4858756, 4875140, 4359044, 4359044, 4359044, 4359044,
      /* 28148 */ 4359044, 4359044, 4359044, 4359044, 4359044, 4359044, 4359044, 4359044, 4359044, 5260164, 4359044,
      /* 28159 */ 4359044, 4359044, 4359044, 4359044, 4359044, 4359044, 4359044, 5415812, 4359044, 5448580, 4359044,
      /* 28170 */ 5464964, 4359044, 5481348, 5563268, 4359044, 4359044, 4359044, 5636996, 4359044, 5686148, 4359044,
      /* 28181 */ 4359044, 5751684, 4359044, 4359044, 4359044, 4359044, 4359044, 5874564, 4359044, 4359044, 4359044,
      /* 28192 */ 4359044, 4359044, 4359044, 4359044, 4359044, 4359044, 4359044, 4359044, 6275972, 4359044, 4359044,
      /* 28203 */ 4359044, 4359044, 4359044, 4359044, 5342084, 4359044, 4359044, 4359044, 4359044, 4359044, 4359044,
      /* 28214 */ 4359044, 4359044, 4359044, 4359044, 4359044, 4359044, 5628804, 5653380, 4359044, 5702532, 4359044,
      /* 28225 */ 4359044, 5809028, 4359044, 4359044, 4359044, 4359044, 4359044, 4359044, 4359044, 4907008, 0, 5079040,
      /* 28237 */ 6094848, 0, 0, 0, 4358144, 4907008, 4358144, 5079040, 4358144, 5226496, 4358144, 5742592, 4358144,
      /* 28250 */ 4358144, 4358144, 6094848, 900, 4907908, 900, 5079940, 900, 5227396, 900, 5243780, 900, 900, 900, 900,
      /* 28265 */ 900, 900, 900, 5342084, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 5628804, 5653380,
      /* 28283 */ 900, 5702532, 900, 900, 900, 900, 900, 900, 5211012, 900, 900, 900, 900, 5292932, 900, 900, 900, 900,
      /* 28301 */ 5366660, 900, 900, 900, 5456772, 900, 900, 900, 900, 900, 5555076, 5571460, 5579652, 5620612, 5669764,
      /* 28316 */ 900, 0, 0, 976, 976, 976, 4826064, 976, 976, 976, 976, 976, 976, 976, 976, 976, 976, 976, 976, 976, 976,
      /* 28337 */ 976, 976, 976, 976, 976, 976, 5178320, 976, 976, 976, 976, 976, 5112784, 976, 976, 976, 976, 976,
      /* 28355 */ 5284816, 976, 976, 976, 976, 5473232, 5522384, 976, 976, 976, 976, 5596112, 5710800, 5718992, 976,
      /* 28370 */ 5825488, 5866448, 976, 976, 5923792, 976, 5243856, 976, 976, 976, 976, 976, 976, 976, 5342160, 976, 976,
      /* 28387 */ 976, 976, 976, 976, 976, 976, 976, 976, 976, 976, 5628880, 5653456, 976, 5702608, 976, 976, 976, 976,
      /* 28405 */ 976, 976, 976, 5260240, 976, 976, 976, 976, 976, 976, 976, 976, 5415888, 976, 5448656, 976, 5465040,
      /* 28422 */ 976, 5481424, 5563344, 976, 976, 976, 5637072, 976, 5686224, 976, 976, 5751760, 976, 4358144, 4358144,
      /* 28437 */ 4358144, 4358144, 4358144, 6463488, 0, 0, 0, 0, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900,
      /* 28456 */ 4932484, 4940676, 900, 900, 900, 900, 900, 900, 5055364, 900, 900, 5112708, 900, 900, 900, 900, 900,
      /* 28473 */ 5284740, 900, 900, 900, 900, 5473156, 5522308, 900, 900, 900, 900, 5596036, 5710724, 5718916, 900,
      /* 28488 */ 5825412, 5866372, 900, 900, 5923716, 900, 900, 6022020, 900, 900, 900, 5792644, 5817220, 900, 5858180,
      /* 28503 */ 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 6120324, 900, 6169476, 900, 900, 900,
      /* 28522 */ 900, 900, 6243204, 900, 6292356, 900, 6316932, 976, 5055440, 976, 976, 976, 976, 976, 976, 976, 976,
      /* 28539 */ 5211088, 976, 976, 976, 976, 5293008, 976, 976, 976, 976, 5366736, 976, 976, 976, 5456848, 976, 976,
      /* 28556 */ 976, 976, 976, 5555152, 5571536, 5579728, 5620688, 5669840, 976, 976, 976, 5792720, 5817296, 976,
      /* 28570 */ 5858256, 976, 976, 976, 976, 976, 976, 976, 976, 976, 976, 976, 976, 976, 6120400, 976, 6169552, 976,
      /* 28588 */ 976, 976, 976, 976, 6243280, 976, 6292432, 976, 6317008, 976, 976, 976, 976, 976, 976, 976, 976, 976,
      /* 28606 */ 6464464, 4359044, 4359044, 4359044, 4359044, 4359044, 4359044, 4359044, 4359044, 4359044, 4359044,
      /* 28617 */ 4359044, 4932484, 4940676, 4359044, 4359044, 4359044, 4359044, 4359044, 4358144, 4358144, 4358144,
      /* 28628 */ 4358144, 4358144, 4358144, 0, 900, 900, 900, 900, 900, 900, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4857856, 4874240,
      /* 28649 */ 0, 0, 4923392, 4359044, 5055364, 4359044, 4359044, 4359044, 4359044, 4359044, 4359044, 4359044, 4359044,
      /* 28662 */ 5211012, 4359044, 4359044, 4359044, 4359044, 5292932, 4359044, 4359044, 4359044, 4359044, 5366660,
      /* 28673 */ 4359044, 4359044, 4359044, 5456772, 4359044, 4359044, 4359044, 4359044, 4359044, 5555076, 5571460,
      /* 28684 */ 5579652, 5620612, 5669764, 4359044, 4359044, 4359044, 5792644, 5817220, 4359044, 5858180, 4359044,
      /* 28695 */ 4359044, 4359044, 4359044, 4359044, 4359044, 4359044, 4359044, 4359044, 4359044, 4359044, 4359044,
      /* 28706 */ 4359044, 6120324, 4359044, 6169476, 4359044, 4359044, 4359044, 4359044, 4359044, 6243204, 4359044,
      /* 28717 */ 6292356, 4359044, 6316932, 4359044, 4359044, 4359044, 4359044, 4359044, 4359044, 4359044, 4359044,
      /* 28728 */ 4359044, 6464388, 4358144, 4358144, 4358144, 4358144, 4358144, 900, 900, 900, 900, 900, 0, 0, 0, 0, 0,
      /* 28745 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4931584, 0, 0, 0, 0, 0, 0, 0, 4358144, 6430720, 6438912, 0, 0, 0, 0, 0,
      /* 28772 */ 0, 4785028, 900, 900, 900, 4850564, 900, 900, 900, 900, 900, 4916100, 900, 4957060, 4973444, 900, 900,
      /* 28789 */ 900, 900, 900, 900, 5071748, 900, 900, 5194628, 900, 900, 900, 900, 900, 900, 900, 900, 976, 976, 976,
      /* 28808 */ 976, 976, 5194704, 976, 976, 976, 976, 976, 976, 976, 976, 4359044, 4359044, 4359044, 4359044, 4359044,
      /* 28824 */ 5194628, 4359044, 0, 0, 4785104, 976, 976, 976, 4850640, 976, 976, 976, 976, 976, 4916176, 976, 4957136,
      /* 28841 */ 4973520, 976, 976, 976, 976, 976, 976, 5071824, 976, 976, 976, 976, 976, 976, 976, 5219280, 976, 976,
      /* 28859 */ 6357968, 6382544, 6398928, 4801412, 4809604, 4359044, 4359044, 4891524, 4359044, 4948868, 4359044,
      /* 28870 */ 4359044, 4359044, 5047172, 4359044, 4359044, 4359044, 4359044, 5186436, 4359044, 5235588, 5301124,
      /* 28881 */ 4359044, 4359044, 5407620, 5530500, 4359044, 4359044, 4359044, 4359044, 4359044, 4923392, 4358144,
      /* 28892 */ 4358144, 4358144, 4358144, 4358144, 900, 4924292, 900, 900, 900, 900, 4366336, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 28911 */ 0, 0, 0, 0, 0, 0, 1255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1264, 0, 0, 0, 0, 0, 0, 0, 5268432, 976, 976,
      /* 28938 */ 5309392, 5317584, 976, 976, 976, 5432272, 976, 5489616, 976, 976, 976, 976, 976, 976, 976, 976, 976,
      /* 28955 */ 5800912, 976, 976, 5882832, 976, 976, 976, 976, 976, 976, 976, 976, 976, 976, 976, 976, 976, 976, 976,
      /* 28974 */ 976, 4359044, 4359044, 4359044, 4359044, 4359044, 4359044, 4359044, 4359044, 4359044, 4359044, 4359044,
      /* 28986 */ 4359044, 4359044, 4359044, 4359044, 4359044, 976, 6104016, 976, 976, 976, 6185936, 976, 976, 976,
      /* 29000 */ 6284240, 976, 976, 6333392, 976, 976, 976, 6390736, 976, 976, 6431696, 6439888, 4785028, 4359044,
      /* 29014 */ 4359044, 4359044, 4850564, 4359044, 4359044, 4359044, 4359044, 4359044, 4916100, 4359044, 4957060,
      /* 29025 */ 4973444, 4359044, 4359044, 4359044, 4359044, 4359044, 4359044, 5071748, 4359044, 4359044, 4359044,
      /* 29036 */ 4359044, 4359044, 4359044, 4359044, 5219204, 4359044, 5268356, 4359044, 4359044, 5309316, 5317508,
      /* 29047 */ 4359044, 4359044, 4359044, 5432196, 4359044, 5489540, 4359044, 4359044, 4359044, 4359044, 4359044,
      /* 29058 */ 6054788, 4359044, 4359044, 4359044, 0, 0, 0, 0, 0, 0, 0, 4358144, 4358144, 4358144, 4358144, 4358144,
      /* 29074 */ 5193728, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 900, 900, 900, 5096324, 5104516,
      /* 29087 */ 900, 900, 5202820, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 5890948, 900, 900, 900,
      /* 29105 */ 6030212, 900, 900, 900, 900, 6161284, 900, 900, 900, 900, 6407044, 976, 976, 976, 976, 976, 976, 976,
      /* 29123 */ 976, 4998096, 976, 976, 5039056, 976, 976, 976, 5096400, 5104592, 976, 976, 5202896, 976, 976, 976, 976,
      /* 29140 */ 976, 976, 976, 5891024, 976, 976, 976, 6030288, 976, 976, 976, 976, 6161360, 976, 976, 976, 976, 976,
      /* 29158 */ 976, 976, 6407120, 4359044, 4359044, 4359044, 4359044, 4359044, 4359044, 4359044, 4359044, 4998020,
      /* 29170 */ 4359044, 4358144, 6078464, 6111232, 4358144, 6176768, 6209536, 6234112, 4358144, 4358144, 4358144,
      /* 29181 */ 4358144, 4358144, 4358144, 4358144, 0, 0, 900, 900, 4842372, 900, 900, 900, 4899716, 900, 900, 900, 900,
      /* 29198 */ 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 975, 976, 976, 976, 976, 976,
      /* 29219 */ 976, 976, 976, 976, 976, 976, 976, 976, 976, 976, 976, 976, 976, 976, 6300624, 976, 976, 976, 976, 976,
      /* 29239 */ 976, 976, 976, 976, 976, 976, 5809028, 6038404, 900, 900, 6079364, 6112132, 900, 6177668, 6210436, 900,
      /* 29255 */ 6235012, 900, 900, 900, 900, 900, 900, 900, 0, 0, 976, 976, 4842448, 976, 976, 976, 4899792, 976, 976,
      /* 29274 */ 976, 976, 976, 976, 5874640, 976, 976, 976, 976, 976, 976, 976, 976, 976, 976, 976, 6276048, 976, 976,
      /* 29293 */ 976, 976, 976, 976, 976, 976, 976, 0, 900, 4359044, 4359044, 4359044, 4359044, 4359044, 4359044,
      /* 29308 */ 5112708, 4359044, 4359044, 4359044, 4359044, 4359044, 5284740, 4359044, 4359044, 4359044, 4359044,
      /* 29319 */ 5473156, 5522308, 4359044, 4359044, 4359044, 4359044, 5596036, 5710724, 5718916, 4359044, 5825412,
      /* 29330 */ 5866372, 4359044, 4359044, 5923716, 976, 6022096, 976, 6038480, 976, 976, 6079440, 6112208, 976,
      /* 29343 */ 6177744, 6210512, 976, 6235088, 976, 976, 976, 976, 976, 976, 976, 4359044, 4359044, 4842372, 4359044,
      /* 29358 */ 4359044, 4359044, 4899716, 4359044, 4359044, 4359044, 4359044, 4359044, 4359044, 4359044, 5800836,
      /* 29369 */ 4359044, 4359044, 5882756, 4359044, 4359044, 4359044, 4359044, 4359044, 4359044, 4359044, 4359044,
      /* 29380 */ 4359044, 6103940, 4359044, 4359044, 4359044, 6185860, 4359044, 4359044, 4359044, 6284164, 4359044,
      /* 29391 */ 4359044, 6333316, 4359044, 4359044, 6022020, 4359044, 6038404, 4359044, 4359044, 6079364, 6112132,
      /* 29402 */ 4359044, 6177668, 6210436, 4359044, 6235012, 4359044, 4359044, 4359044, 4359044, 4359044, 4359044,
      /* 29413 */ 4359044, 4358144, 4358144, 4358144, 900, 900, 900, 0, 0, 0, 0, 0, 0, 0, 1760, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 29437 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 139264, 147456, 0, 0, 0, 419, 0, 4358144, 4358144,
      /* 29462 */ 4358144, 5890048, 4358144, 4358144, 4358144, 6029312, 4358144, 4358144, 4358144, 4358144, 6160384,
      /* 29473 */ 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 6406144, 900, 900, 900, 900, 900, 900, 900, 900,
      /* 29488 */ 4998020, 900, 900, 5038980, 4359044, 5038980, 4359044, 4359044, 4359044, 5096324, 5104516, 4359044,
      /* 29500 */ 4359044, 5202820, 4359044, 4359044, 4359044, 4359044, 4359044, 4359044, 4359044, 4359044, 4359044,
      /* 29511 */ 4359044, 4359044, 5890948, 4359044, 4359044, 4359044, 6030212, 4359044, 4359044, 4359044, 4359044,
      /* 29522 */ 6161284, 4359044, 4359044, 4359044, 6226820, 0, 0, 0, 4816896, 4358144, 4358144, 4358144, 4358144,
      /* 29535 */ 6086656, 4817796, 900, 900, 900, 900, 6087556, 4817872, 976, 976, 976, 976, 6087632, 4817796, 4359044,
      /* 29550 */ 4359044, 4359044, 4359044, 6087556, 5087232, 4358144, 4358144, 4358144, 5898240, 4358144, 4358144,
      /* 29561 */ 4358144, 4358144, 4358144, 4358144, 4358144, 6307840, 4358144, 4358144, 6356992, 6381568, 6397952,
      /* 29572 */ 4801412, 4809604, 900, 900, 4891524, 900, 4948868, 900, 900, 900, 5047172, 900, 900, 900, 900, 900,
      /* 29588 */ 6054788, 900, 900, 900, 976, 976, 5014480, 976, 976, 976, 976, 976, 976, 976, 976, 976, 6054864, 976,
      /* 29606 */ 976, 976, 4359044, 4359044, 5014404, 4359044, 4359044, 4359044, 4359044, 4359044, 4359044, 6407044,
      /* 29618 */ 4358144, 4358144, 4358144, 900, 900, 900, 4890624, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5898240, 5963776, 0, 0,
      /* 29638 */ 6193152, 0, 0, 5406720, 6397952, 5186436, 900, 5235588, 5301124, 900, 900, 5407620, 5530500, 900, 900,
      /* 29653 */ 900, 900, 5899140, 900, 900, 900, 900, 900, 900, 900, 900, 6308740, 900, 900, 6357892, 6382468, 6398852,
      /* 29670 */ 4801488, 4809680, 976, 976, 4891600, 976, 4948944, 976, 976, 976, 5047248, 976, 976, 976, 976, 5186512,
      /* 29686 */ 976, 5235664, 5301200, 976, 976, 5407696, 5530576, 976, 976, 976, 976, 5899216, 976, 976, 976, 976, 976,
      /* 29703 */ 976, 976, 976, 6308816, 5899140, 4359044, 4359044, 4359044, 4359044, 4359044, 4359044, 4359044, 4359044,
      /* 29716 */ 6308740, 4359044, 4359044, 6357892, 6382468, 6398852, 5021696, 4358144, 4358144, 5022596, 900, 900, 0,
      /* 29729 */ 4980736, 0, 0, 0, 0, 0, 5373952, 5734400, 6045696, 0, 0, 0, 0, 0, 2771, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 29755 */ 0, 0, 0, 0, 0, 2785, 0, 2786, 0, 0, 0, 0, 0, 0, 0, 0, 1843, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 29787 */ 0, 0, 0, 0, 0, 0, 0, 0, 1263, 0, 0, 0, 0, 0, 0, 0, 0, 4980736, 4358144, 4358144, 4358144, 4358144,
      /* 29809 */ 4358144, 4358144, 4358144, 4358144, 5324800, 5373952, 5537792, 5545984, 5734400, 5971968, 4358144,
      /* 29820 */ 6045696, 4358144, 6070272, 4358144, 4358144, 4358144, 6348800, 900, 4866948, 4883332, 900, 4981636, 900,
      /* 29833 */ 900, 900, 900, 5325700, 5374852, 5538692, 5546884, 5587844, 5735300, 5972868, 900, 6046596, 900,
      /* 29846 */ 6071172, 900, 900, 900, 900, 6349700, 976, 4867024, 4883408, 976, 4981712, 976, 976, 976, 976, 976, 976,
      /* 29863 */ 976, 976, 5325776, 5374928, 5538768, 5546960, 5587920, 5735376, 5972944, 976, 6046672, 976, 6071248,
      /* 29876 */ 976, 976, 976, 976, 6349776, 4359044, 4866948, 4883332, 4359044, 4981636, 4359044, 4359044, 4359044,
      /* 29889 */ 4359044, 4359044, 4359044, 4359044, 4359044, 5325700, 5374852, 5538692, 5546884, 5587844, 5735300,
      /* 29900 */ 5972868, 4359044, 6046596, 4359044, 6071172, 4359044, 4359044, 4359044, 4359044, 6349700, 4358144,
      /* 29911 */ 6144000, 900, 6144900, 0, 4988928, 5005312, 0, 0, 0, 0, 5775360, 0, 0, 0, 3627, 0, 0, 0, 0, 0, 655, 0,
      /* 29933 */ 0, 521, 521, 521, 521, 521, 845, 521, 521, 861, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521,
      /* 29954 */ 521, 57886, 57886, 57886, 57886, 57886, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 29969 */ 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 29984 */ 57909, 57909, 57909, 59499, 57909, 57909, 57909, 57886, 5693440, 0, 6496256, 5144576, 5136384, 0,
      /* 29998 */ 5914624, 4358144, 4358144, 5005312, 4358144, 4358144, 4358144, 5120000, 5136384, 4358144, 4358144,
      /* 30009 */ 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 6324224, 900, 900, 5006212, 900, 900,
      /* 30022 */ 900, 5120900, 5137284, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 6325124, 976, 976, 5006288,
      /* 30039 */ 976, 976, 976, 5120976, 5137360, 976, 976, 976, 976, 976, 976, 976, 976, 976, 976, 6325200, 4359044,
      /* 30056 */ 4359044, 4359044, 6390660, 4359044, 4359044, 6431620, 6439812, 4358144, 4358144, 4358144, 6266880,
      /* 30067 */ 6488064, 900, 900, 900, 6267780, 6488964, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1767, 0, 0, 0, 0, 0,
      /* 30093 */ 1773, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4359044, 5006212, 4359044, 4359044, 4359044, 5120900, 5137284,
      /* 30112 */ 4359044, 4359044, 4359044, 4359044, 4359044, 4359044, 4359044, 4359044, 4359044, 4359044, 6325124,
      /* 30123 */ 5914624, 5915524, 0, 0, 0, 0, 0, 5513216, 5783552, 0, 3627, 0, 0, 0, 0, 0, 0, 2285, 0, 0, 0, 0, 0, 0, 0,
      /* 30148 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1265, 0, 0, 0, 0, 0, 0, 0, 4358144, 4358144,
      /* 30176 */ 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144,
      /* 30187 */ 4358144, 4358144, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900,
      /* 30206 */ 900, 900, 900, 6300548, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 0, 5013504, 0, 0,
      /* 30225 */ 6053888, 0, 0, 0, 0, 6012928, 4358144, 4358144, 5013504, 4358144, 4358144, 4358144, 4358144, 4358144,
      /* 30239 */ 4358144, 4358144, 4358144, 4358144, 6053888, 4358144, 4358144, 900, 900, 5014404, 900, 900, 900, 900,
      /* 30253 */ 6275972, 900, 900, 900, 900, 900, 900, 900, 900, 900, 0, 0, 977, 976, 976, 976, 976, 976, 4858832,
      /* 30272 */ 4875216, 976, 976, 976, 976, 976, 976, 976, 976, 976, 976, 0, 0, 0, 0, 900, 4359044, 4359044, 4359044,
      /* 30291 */ 4359044, 4359044, 4359044, 4359044, 4359044, 4359044, 4359044, 4359044, 4359044, 4359044, 4359044,
      /* 30302 */ 4359044, 4359044, 4359044, 4359044, 6300548, 4359044, 4359044, 4359044, 4359044, 4359044, 4359044,
      /* 30313 */ 4359044, 4359044, 4359044, 4359044, 4359044, 4358144, 4358144, 900, 5743492, 900, 900, 900, 6095748,
      /* 30326 */ 900, 976, 4907984, 976, 5080016, 976, 5227472, 976, 5743568, 976, 976, 976, 6095824, 976, 4359044,
      /* 30341 */ 4907908, 4359044, 5079940, 4359044, 5227396, 4359044, 5743492, 4359044, 4359044, 4359044, 6095748,
      /* 30352 */ 4359044, 5062656, 0, 0, 0, 4358144, 5062656, 4358144, 4358144, 4358144, 4358144, 4358144, 900, 5063556,
      /* 30366 */ 900, 900, 900, 900, 900, 6226820, 976, 5063632, 976, 976, 976, 976, 976, 6226896, 4359044, 5063556,
      /* 30382 */ 4359044, 4359044, 4359044, 4825988, 4359044, 4359044, 4359044, 4359044, 4359044, 4359044, 4359044,
      /* 30393 */ 4359044, 4359044, 4359044, 4359044, 4359044, 4359044, 4359044, 4359044, 4359044, 4359044, 4359044,
      /* 30404 */ 4359044, 4359044, 5178244, 4359044, 4359044, 4359044, 4359044, 4359044, 5243780, 4359044, 0, 5931008,
      /* 30416 */ 4358144, 5332992, 5980160, 4358144, 900, 5333892, 5981060, 900, 976, 5333968, 5981136, 976, 4359044,
      /* 30429 */ 5333892, 5981060, 4359044, 5439488, 5128192, 4358144, 5129092, 900, 5129168, 976, 5129092, 4359044,
      /* 30441 */ 4358144, 900, 976, 4359044, 4358144, 900, 976, 4359044, 6004736, 6005636, 6005712, 6005636, 0, 0, 0, 0,
      /* 30457 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2345, 0, 0, 0, 0, 0, 2351, 0, 0, 0, 1, 24578, 3,
      /* 30488 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 450560, 0, 0, 0, 0, 0, 0,
      /* 30521 */ 450560, 0, 0, 450560, 0, 450560, 450560, 450560, 450560, 450560, 450560, 0, 0, 0, 0, 131072, 0, 0, 0, 0,
      /* 30541 */ 0, 0, 450560, 0, 0, 0, 450560, 0, 450560, 450560, 450560, 450560, 450560, 450560, 450560, 450560,
      /* 30557 */ 450560, 450560, 450560, 450560, 450560, 450560, 450560, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 30580 */ 0, 0, 1824, 0, 0, 0, 0, 0, 0, 1729, 0, 0, 0, 0, 0, 0, 450560, 1, 24578, 3, 0, 0, 4366336, 0, 0, 0, 0, 0,
      /* 30608 */ 301, 302, 0, 4268032, 305, 306, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1848, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 30637 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2359296, 0, 2359296, 0, 0, 0, 2359296, 0, 2359296, 2359296, 2359296,
      /* 30658 */ 2359296, 2359296, 2359296, 4358144, 6291456, 4358144, 6316032, 4358144, 4358144, 4358144, 4358144,
      /* 30669 */ 4358144, 4358144, 4358144, 4358144, 4358144, 6463488, 4358144, 4358144, 4358144, 4358144, 4358144, 0, 0,
      /* 30682 */ 0, 0, 0, 0, 302, 0, 0, 306, 0, 0, 0, 0, 0, 0, 2335, 0, 0, 0, 0, 0, 2339, 0, 0, 0, 0, 0, 0, 0, 2343,
      /* 30711 */ 2344, 0, 0, 0, 0, 0, 2350, 0, 0, 0, 0, 0, 0, 1302, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 30743 */ 0, 0, 521, 521, 521, 521, 521, 2836, 521, 521, 521, 521, 2840, 521, 521, 4358144, 6430720, 6438912, 901,
      /* 30762 */ 0, 0, 0, 901, 0, 4784128, 0, 0, 0, 4849664, 0, 0, 0, 0, 0, 4915200, 0, 4956160, 4972544, 0, 0, 0, 0, 0,
      /* 30786 */ 0, 5070848, 0, 0, 0, 0, 0, 744, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 30818 */ 0, 0, 327, 0, 0, 374, 374, 404, 977, 0, 4784128, 0, 0, 0, 4849664, 0, 0, 0, 0, 0, 4915200, 0, 4956160,
      /* 30841 */ 4972544, 0, 0, 0, 0, 0, 0, 5070848, 0, 0, 0, 0, 0, 0, 0, 5218304, 0, 5267456, 0, 0, 5308416, 5316608, 0,
      /* 30864 */ 0, 0, 5431296, 0, 5488640, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5799936, 0, 0, 5881856, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 30890 */ 4358144, 6078464, 6111232, 4358144, 6176768, 6209536, 6234112, 4358144, 4358144, 4358144, 4358144,
      /* 30901 */ 4358144, 4358144, 4358144, 901, 0, 0, 0, 4841472, 0, 0, 0, 4898816, 0, 0, 0, 0, 0, 0, 0, 0, 0, 521, 521,
      /* 30924 */ 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 3653, 521, 521, 521, 521, 521, 521, 521, 521, 521,
      /* 30944 */ 521, 521, 3218, 521, 521, 0, 0, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 30961 */ 60573, 57886, 60576, 57886, 57886, 57886, 6037504, 0, 0, 6078464, 6111232, 0, 6176768, 6209536, 0,
      /* 30976 */ 6234112, 0, 0, 0, 0, 0, 0, 0, 977, 0, 0, 0, 4841472, 0, 0, 0, 4898816, 0, 0, 0, 0, 0, 0, 0, 0, 6103040,
      /* 31002 */ 0, 0, 0, 6184960, 0, 0, 0, 6283264, 0, 0, 6332416, 0, 0, 0, 6389760, 0, 0, 6430720, 6438912, 0, 0, 0, 0,
      /* 31025 */ 0, 0, 0, 0, 459186, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 459215, 459215, 459215, 459215, 459215, 459215,
      /* 31047 */ 459215, 459215, 459215, 459215, 459215, 459215, 459215, 459215, 459215, 459215, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 31065 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2291, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 459340, 459340,
      /* 31094 */ 459340, 459340, 459340, 459340, 459340, 459340, 459340, 459340, 459340, 459340, 459340, 459340, 459340,
      /* 31107 */ 459340, 459340, 459340, 459340, 459340, 459340, 459340, 459340, 459340, 459340, 459215, 459372, 459215,
      /* 31120 */ 459215, 459372, 1, 24578, 3, 0, 0, 4366336, 0, 0, 0, 0, 0, 301, 302, 0, 4268032, 305, 306, 0, 0, 0, 0,
      /* 31143 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2777, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5480448, 0, 0,
      /* 31175 */ 0, 0, 0, 0, 0, 0, 0, 0, 5840896, 5849088, 0, 1, 24578, 3, 0, 0, 0, 0, 507904, 0, 0, 0, 507904, 0, 0, 0,
      /* 31201 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 507904, 0, 0, 0, 0, 0, 2796, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 31233 */ 0, 2804, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3385, 3386, 0, 0, 0, 0, 3391, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 31264 */ 0, 0, 0, 0, 0, 0, 0, 662, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2779, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 31297 */ 0, 0, 2789, 0, 0, 0, 2793, 0, 0, 0, 0, 131072, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 507904, 507904, 507904,
      /* 31323 */ 507904, 507904, 507904, 507904, 507904, 507904, 507904, 507904, 507904, 507904, 507904, 507904, 507904,
      /* 31336 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2781, 0, 0, 2784, 0, 0, 0, 0, 2788, 0, 0, 0, 0, 0,
      /* 31368 */ 507904, 1, 24578, 3, 0, 0, 4366336, 0, 0, 0, 0, 0, 301, 302, 0, 4268032, 305, 306, 0, 0, 442368, 0, 0,
      /* 31391 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 658, 0, 0, 661, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1225, 0,
      /* 31423 */ 0, 0, 0, 0, 0, 0, 1233, 0, 0, 0, 0, 0, 0, 1, 24578, 3, 0, 0, 0, 0, 0, 516096, 0, 0, 0, 516096, 0, 0, 0,
      /* 31452 */ 0, 0, 0, 516096, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2287, 0, 2288, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2297, 0,
      /* 31482 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 131072, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 516560, 516560, 516560, 516560,
      /* 31508 */ 516560, 516560, 516560, 516560, 516560, 516560, 516560, 516560, 516560, 516560, 516560, 516560, 0, 0, 0,
      /* 31523 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3152, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 516560, 1,
      /* 31554 */ 24578, 0, 0, 0, 4366336, 0, 0, 548864, 0, 0, 301, 302, 0, 4268032, 305, 306, 409600, 0, 0, 0, 0, 0, 0,
      /* 31577 */ 0, 0, 0, 0, 0, 0, 0, 1806, 0, 2340, 0, 0, 0, 0, 0, 0, 0, 0, 2347, 0, 0, 0, 0, 0, 0, 2354, 4358144,
      /* 31604 */ 5005312, 4358144, 4358144, 4358144, 5120000, 5136384, 4358144, 4358144, 4358144, 4358144, 4358144,
      /* 31615 */ 4358144, 4358144, 4358144, 4358144, 4358144, 6324224, 5914624, 5914624, 0, 0, 0, 0, 0, 5513216, 5783552,
      /* 31630 */ 0, 40960, 0, 0, 0, 0, 0, 0, 2747, 0, 2749, 0, 0, 2752, 0, 0, 0, 0, 0, 0, 2757, 0, 0, 0, 2760, 2761, 0,
      /* 31657 */ 0, 0, 0, 0, 0, 0, 0, 521, 521, 521, 521, 521, 521, 855, 521, 521, 521, 521, 521, 874, 521, 521, 521,
      /* 31680 */ 521, 892, 521, 521, 521, 57886, 57886, 57886, 1, 24578, 4227364, 0, 0, 0, 0, 0, 0, 298, 0, 0, 0, 298, 0,
      /* 31703 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1227, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 31735 */ 540672, 0, 0, 540672, 0, 0, 0, 540672, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 31765 */ 0, 0, 1857, 0, 0, 0, 0, 0, 0, 0, 0, 1, 24578, 4227364, 0, 0, 4366336, 0, 0, 0, 0, 0, 301, 302, 0,
      /* 31790 */ 4268032, 305, 306, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3148, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 31820 */ 0, 0, 0, 0, 0, 0, 3393, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4268032, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 31852 */ 0, 0, 0, 0, 0, 499712, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3389, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 31884 */ 0, 0, 0, 0, 0, 0, 2370, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 24578, 3, 155941, 295, 0, 0, 0, 0,
      /* 31914 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 636, 0, 0, 0, 521, 521, 521,
      /* 31945 */ 58754, 901, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 31960 */ 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57909,
      /* 31975 */ 57909, 57909, 57909, 57909, 0, 0, 0, 0, 742, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 32004 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 131072, 0, 0, 0, 0, 0, 0, 437, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 32036 */ 0, 0, 0, 0, 0, 0, 0, 0, 367, 367, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57887, 57887, 57887, 57887, 57887,
      /* 32061 */ 57887, 57887, 57910, 57910, 57887, 57887, 57937, 57887, 57887, 57887, 57887, 57887, 57887, 57887, 57937,
      /* 32076 */ 57937, 57887, 57887, 57887, 57887, 57937, 57937, 57887, 521, 57887, 57887, 57887, 1, 24578, 3, 155941,
      /* 32092 */ 155941, 295, 0, 0, 0, 0, 0, 301, 302, 0, 0, 305, 306, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4399797,
      /* 32120 */ 4399797, 4399797, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 410, 358, 0, 0, 399, 0, 0, 0, 0, 0,
      /* 32147 */ 139264, 147456, 399, 410, 0, 423, 410, 1, 24578, 3, 155942, 295, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 32172 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1236, 0, 0, 0, 1, 24578, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 32204 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 573440, 0, 573440, 573440, 573440, 0, 573440,
      /* 32229 */ 573440, 573440, 573440, 573440, 573440, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3628, 0,
      /* 32254 */ 0, 0, 3631, 0, 0, 0, 0, 0, 0, 0, 0, 3639, 0, 0, 0, 0, 131072, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 573440,
      /* 32283 */ 573440, 573440, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1819, 1820, 0, 1822, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 32311 */ 0, 0, 0, 0, 1836, 0, 0, 0, 0, 573440, 573440, 573440, 573440, 573440, 573440, 573440, 573440, 573440,
      /* 32329 */ 573440, 573440, 573440, 573440, 573440, 573440, 573440, 573440, 573440, 573440, 573440, 573440, 573440,
      /* 32342 */ 573440, 573440, 573440, 573440, 573440, 573440, 573440, 1, 24578, 3, 0, 0, 4366336, 0, 0, 0, 0, 0, 301,
      /* 32361 */ 302, 0, 4268032, 305, 306, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4399798, 311296, 4399798, 0, 0, 0,
      /* 32386 */ 311296, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4276224, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 32416 */ 1260, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1847, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1738,
      /* 32448 */ 0, 5300224, 5234688, 5423104, 0, 0, 0, 0, 5988352, 0, 0, 6135808, 6307840, 0, 5996544, 4800512, 0,
      /* 32465 */ 6356992, 3627, 0, 0, 5496832, 0, 0, 0, 0, 0, 5611520, 0, 0, 0, 0, 0, 0, 0, 1792, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 32492 */ 0, 1801, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1818, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 32525 */ 0, 0, 0, 0, 326, 326, 376, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 24578, 3, 0, 0, 4366336, 0, 0, 0, 0, 0, 630,
      /* 32554 */ 302, 0, 4268032, 633, 306, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2367, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 32584 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 2806, 0, 0, 0, 0, 0, 0, 0, 0, 2814, 0, 0, 0, 0, 0, 0, 0, 131072, 0, 0, 0, 0,
      /* 32615 */ 0, 0, 0, 0, 0, 0, 581632, 0, 0, 0, 581632, 581632, 581632, 581632, 581632, 581632, 581632, 581632,
      /* 32633 */ 581632, 581632, 581632, 581632, 581632, 581632, 581632, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 32656 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 340, 581632, 1, 24578, 3, 0, 0, 4366336, 0, 0, 0, 0, 0,
      /* 32685 */ 301, 302, 0, 4268032, 305, 306, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3172, 0, 521, 521, 521, 521,
      /* 32711 */ 521, 521, 521, 521, 521, 521, 521, 3183, 521, 521, 3187, 521, 521, 6258688, 6447104, 0, 0, 6127616, 0,
      /* 32730 */ 6348800, 5906432, 0, 5537792, 3774, 0, 0, 0, 0, 5939200, 0, 0, 5677056, 6365184, 4866048, 0, 6070272,
      /* 32747 */ 5545984, 5152768, 0, 0, 6144000, 4358144, 4866048, 4882432, 4358144, 4358144, 4358144, 0, 901, 900, 900,
      /* 32762 */ 900, 900, 900, 4858756, 4875140, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900,
      /* 32780 */ 5260164, 900, 900, 900, 900, 900, 900, 900, 900, 6103940, 900, 900, 900, 6185860, 900, 900, 900,
      /* 32797 */ 6284164, 900, 900, 6333316, 900, 900, 900, 6390660, 900, 900, 6431620, 6439812, 0, 0, 0, 0, 5537792,
      /* 32814 */ 5545984, 5586944, 5734400, 5971968, 4358144, 6045696, 4358144, 6070272, 4358144, 4358144, 4358144,
      /* 32825 */ 4358144, 6348800, 4358144, 6144000, 0, 6144000, 0, 4988928, 5005312, 0, 0, 0, 0, 5775360, 0, 0, 0, 3869,
      /* 32843 */ 0, 0, 0, 0, 0, 787, 0, 0, 521, 521, 521, 521, 521, 847, 521, 521, 521, 521, 521, 521, 521, 521, 521,
      /* 32866 */ 521, 521, 521, 521, 521, 521, 57886, 57886, 57886, 57886, 57886, 57909, 57909, 57909, 57909, 57909,
      /* 32882 */ 57909, 57909, 57909, 57909, 57909, 60869, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 32897 */ 57909, 57909, 57909, 57909, 57909, 57909, 57909, 59939, 57909, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 32912 */ 57909, 59946, 57909, 59948, 57909, 59951, 57909, 57909, 4358144, 5005312, 4358144, 4358144, 4358144,
      /* 32925 */ 5120000, 5136384, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144,
      /* 32936 */ 4358144, 6324224, 5914624, 5914624, 0, 0, 0, 0, 0, 5513216, 5783552, 0, 3869, 0, 0, 0, 0, 0, 0, 2822, 0,
      /* 32957 */ 0, 0, 0, 0, 0, 0, 0, 0, 2830, 0, 0, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521,
      /* 32981 */ 1938, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 1387,
      /* 33001 */ 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 0, 310, 311, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 33026 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3638, 0, 0, 0, 0, 0, 131072, 0, 0, 0, 0,
      /* 33058 */ 0, 0, 0, 0, 310, 0, 451, 465, 465, 465, 478, 478, 478, 478, 478, 478, 478, 478, 478, 499, 478, 478, 478,
      /* 33081 */ 478, 517, 478, 478, 478, 517, 478, 478, 478, 478, 478, 478, 522, 57888, 522, 57888, 522, 522, 57888,
      /* 33100 */ 522, 522, 57911, 57888, 522, 522, 57888, 57888, 57888, 57911, 57888, 57888, 57888, 57888, 57888, 57888,
      /* 33116 */ 57888, 57911, 57911, 57888, 57888, 57938, 57888, 57888, 57888, 57888, 57888, 57888, 57888, 57938, 57938,
      /* 33131 */ 57888, 57888, 57888, 57888, 57938, 57938, 57888, 522, 57888, 57888, 57888, 1, 24578, 3, 155941, 155941,
      /* 33147 */ 295, 0, 0, 0, 0, 0, 301, 302, 0, 0, 305, 306, 0, 0, 0, 0, 0, 638, 0, 0, 641, 642, 0, 0, 0, 0, 0, 0, 745,
      /* 33176 */ 0, 0, 0, 0, 0, 0, 751, 0, 0, 0, 0, 0, 0, 0, 0, 761, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1279, 0, 0, 0, 0, 1284,
      /* 33207 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1292, 0, 0, 0, 0, 0, 0, 0, 0, 743, 0, 0, 0, 0, 638, 0, 0, 0, 0, 0,
      /* 33239 */ 0, 0, 0, 0, 0, 758, 0, 0, 0, 0, 764, 0, 0, 768, 0, 0, 0, 0, 0, 0, 3115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3121,
      /* 33270 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1166, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1175, 0, 1177, 1178, 0, 0,
      /* 33301 */ 0, 0, 0, 0, 0, 776, 0, 0, 0, 0, 780, 0, 0, 0, 0, 0, 0, 0, 784, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 641,
      /* 33333 */ 0, 0, 0, 0, 0, 3114, 0, 0, 0, 0, 0, 3118, 0, 0, 0, 0, 0, 0, 0, 3124, 3125, 3126, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 33363 */ 0, 0, 1306, 0, 0, 0, 1310, 0, 0, 0, 0, 1313, 0, 0, 0, 0, 0, 0, 0, 521, 521, 521, 521, 521, 521, 521,
      /* 33389 */ 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 33407 */ 57886, 57886, 57886, 57886, 57886, 61024, 57886, 57886, 0, 824, 825, 0, 0, 0, 0, 780, 521, 521, 834,
      /* 33426 */ 838, 521, 521, 850, 521, 521, 521, 866, 521, 871, 521, 879, 521, 882, 521, 521, 896, 521, 57886, 57886,
      /* 33446 */ 57886, 57886, 57886, 57886, 59898, 57886, 57886, 57886, 0, 0, 0, 0, 57909, 57909, 57909, 57909, 57909,
      /* 33463 */ 57909, 59913, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 59448,
      /* 33478 */ 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 59461, 57909, 57909, 57909,
      /* 33493 */ 57909, 57909, 57909, 57909, 58253, 58257, 57886, 57886, 58269, 57886, 57886, 57886, 58285, 57886, 58290,
      /* 33508 */ 57886, 58298, 57886, 58301, 57886, 57886, 58315, 57886, 0, 57909, 57909, 57909, 58329, 58333, 57909,
      /* 33523 */ 57909, 58345, 57909, 57909, 57909, 58361, 57909, 58366, 57909, 58374, 57909, 58377, 57909, 57909, 58391,
      /* 33538 */ 57909, 0, 0, 0, 0, 58290, 57936, 57936, 57936, 58404, 58408, 57936, 57936, 58420, 57936, 57936, 57936,
      /* 33555 */ 58436, 57936, 58441, 57936, 58449, 57936, 0, 0, 0, 0, 521, 521, 521, 521, 521, 4172, 521, 57886, 57886,
      /* 33574 */ 57886, 57886, 57886, 61522, 57886, 57886, 57909, 57909, 57909, 57909, 57909, 61528, 57909, 57909, 57936,
      /* 33589 */ 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 59544, 57936, 57936, 57936, 57936, 57936,
      /* 33604 */ 57936, 57936, 57936, 57936, 57936, 57936, 59557, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936,
      /* 33619 */ 57936, 57936, 57936, 59545, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936,
      /* 33634 */ 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 59014, 57936, 57936, 57936, 57936, 57936,
      /* 33649 */ 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 58452, 57936, 57936, 58466, 57936, 834, 838,
      /* 33664 */ 1128, 882, 521, 521, 0, 58257, 58253, 58478, 58301, 57886, 57886, 155941, 1138, 0, 0, 1141, 0, 0, 1146,
      /* 33683 */ 0, 0, 0, 0, 0, 0, 0, 0, 6103040, 0, 0, 0, 6184960, 0, 0, 0, 6283264, 0, 0, 6332416, 0, 0, 0, 6389760, 0,
      /* 33708 */ 0, 6430720, 6438912, 977, 0, 0, 0, 0, 0, 1210, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 33737 */ 0, 1231, 0, 0, 0, 0, 0, 0, 0, 0, 377, 0, 362, 0, 0, 0, 0, 0, 0, 0, 0, 0, 362, 0, 0, 0, 0, 139264,
      /* 33765 */ 147456, 0, 0, 0, 0, 0, 57886, 58831, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 33782 */ 57886, 57886, 57886, 50657, 58754, 977, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 33797 */ 57909, 57909, 57909, 57909, 57909, 57909, 59964, 57909, 57909, 57909, 57909, 59969, 57909, 57909, 57909,
      /* 33812 */ 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 1753, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 33835 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 1777, 0, 0, 0, 0, 0, 0, 0, 0, 1188, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 367,
      /* 33866 */ 367, 1199, 0, 0, 0, 0, 0, 0, 0, 0, 0, 688, 0, 0, 0, 0, 367, 367, 367, 0, 0, 697, 0, 0, 0, 0, 0, 0, 0,
      /* 33895 */ 704, 0, 0, 0, 0, 0, 0, 0, 1813, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 33928 */ 0, 0, 0, 0, 0, 2815, 0, 0, 1861, 0, 0, 0, 0, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 1874,
      /* 33952 */ 521, 521, 521, 521, 521, 521, 521, 521, 521, 1887, 521, 521, 521, 521, 521, 521, 0, 0, 0, 0, 57886,
      /* 33973 */ 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 33988 */ 57886, 57886, 57886, 57886, 57886, 57886, 57886, 61044, 57886, 57886, 57886, 57909, 57909, 57909, 57909,
      /* 34003 */ 57909, 521, 521, 521, 521, 521, 1929, 521, 521, 1932, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521,
      /* 34023 */ 1945, 521, 521, 521, 521, 521, 521, 1951, 521, 521, 521, 521, 521, 521, 0, 0, 0, 0, 57886, 57886, 57886,
      /* 34044 */ 57886, 57886, 57886, 57886, 57886, 57886, 57886, 59828, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 34059 */ 57886, 57886, 57886, 57886, 59380, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 34074 */ 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57909, 57909, 57909, 61166, 57909,
      /* 34089 */ 57909, 57909, 61169, 57909, 57909, 57909, 57909, 521, 58754, 1960, 57886, 57886, 57886, 57886, 57886,
      /* 34104 */ 59311, 57886, 57886, 57886, 57886, 57886, 59317, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 34119 */ 57886, 59330, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 60835, 57886, 57886, 57886,
      /* 34134 */ 57886, 57886, 57886, 57886, 57886, 57886, 57886, 60845, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 34149 */ 57886, 57886, 60854, 57886, 50657, 2060, 57909, 57909, 57909, 57909, 57909, 59411, 57909, 57909, 57909,
      /* 34164 */ 57909, 57909, 59417, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 59430, 57909, 57909,
      /* 34179 */ 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 58890, 57909, 57909, 57909, 58893, 57909,
      /* 34194 */ 57909, 57909, 57909, 57909, 57909, 57909, 58900, 57909, 57909, 58904, 57909, 57909, 57909, 57909, 57909,
      /* 34209 */ 57909, 57909, 57909, 59472, 57909, 57909, 59475, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 34224 */ 57909, 57909, 59489, 57909, 57909, 57909, 57909, 57909, 57909, 59495, 57909, 57909, 57909, 57909, 57909,
      /* 34239 */ 57909, 57886, 1, 24578, 3, 155941, 155941, 295, 0, 0, 0, 0, 0, 301, 302, 0, 0, 305, 306, 0, 0, 0, 0, 0,
      /* 34263 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 3413, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3151, 0, 0, 0, 3155,
      /* 34295 */ 0, 3157, 0, 0, 0, 0, 0, 0, 0, 0, 57936, 57936, 57936, 57936, 57936, 59507, 57936, 57936, 57936, 57936,
      /* 34315 */ 57936, 59513, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 59526, 57936, 57936, 57936,
      /* 34330 */ 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 59579, 57936, 57936, 57936, 57936, 57936,
      /* 34345 */ 57936, 59587, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 521, 521, 521, 521,
      /* 34361 */ 521, 57886, 57886, 57886, 57886, 57886, 0, 0, 0, 0, 0, 0, 0, 3105, 0, 0, 0, 0, 0, 0, 57936, 57936,
      /* 34383 */ 59568, 57936, 57936, 59571, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 59585,
      /* 34398 */ 57936, 57936, 57936, 57936, 57936, 57936, 59591, 57936, 57936, 57936, 57936, 57936, 57936, 521, 2256,
      /* 34413 */ 521, 521, 521, 57886, 59605, 57886, 57886, 57886, 2265, 0, 2266, 0, 0, 0, 0, 2268, 0, 2269, 0, 0, 0, 0,
      /* 34435 */ 0, 0, 0, 0, 0, 2275, 0, 0, 0, 0, 0, 0, 791, 0, 521, 521, 521, 521, 521, 521, 521, 521, 859, 521, 521,
      /* 34460 */ 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 57886, 57886, 57886, 57886, 57886, 2265, 0, 2266, 0,
      /* 34479 */ 0, 0, 0, 2268, 0, 2269, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 212992, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 34510 */ 0, 0, 0, 0, 0, 0, 0, 1737, 1738, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 753, 0, 0, 0, 0, 0, 0, 0,
      /* 34542 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 417792, 0, 0, 0, 0, 417792, 0, 0, 0, 0, 0, 309, 0, 309, 0, 0, 0, 0, 2331, 0,
      /* 34571 */ 2333, 0, 0, 0, 0, 0, 0, 0, 0, 1806, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1826, 0,
      /* 34602 */ 1828, 0, 0, 0, 0, 0, 0, 0, 1835, 0, 0, 521, 2464, 521, 521, 521, 521, 0, 0, 0, 0, 57886, 57886, 57886,
      /* 34626 */ 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 59829, 57886, 57886, 59832, 57886, 57886,
      /* 34641 */ 57886, 57886, 57886, 57886, 57886, 57886, 60265, 57886, 57886, 57886, 57886, 60268, 57886, 57886, 60270,
      /* 34656 */ 57886, 60271, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 60280, 57886, 57886, 60284,
      /* 34671 */ 59840, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 34686 */ 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 59860, 57886, 57886, 57886, 57886, 57886,
      /* 34701 */ 57886, 57886, 57886, 57886, 61032, 57886, 57886, 57886, 57886, 57886, 57886, 61038, 57886, 61040, 57886,
      /* 34716 */ 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 34731 */ 57909, 57909, 57909, 57909, 57909, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936,
      /* 34746 */ 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 61089, 57936,
      /* 34761 */ 57936, 57936, 57909, 57909, 57909, 57909, 59929, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 34776 */ 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 34791 */ 59949, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 58886, 57909, 58888, 57909, 57909, 57909,
      /* 34806 */ 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 34821 */ 57909, 57909, 57909, 57936, 57936, 57936, 60375, 57936, 60376, 57936, 57936, 57936, 57936, 57936, 57936,
      /* 34836 */ 57936, 57936, 57936, 60012, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936,
      /* 34851 */ 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 60032, 57936, 57936,
      /* 34866 */ 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 60070, 57936, 57936, 57936, 2405, 521, 521, 521,
      /* 34882 */ 521, 59836, 57886, 57886, 57886, 57886, 0, 0, 0, 0, 0, 0, 0, 0, 521, 521, 521, 521, 521, 521, 521, 521,
      /* 34904 */ 521, 521, 521, 521, 2399, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 2446, 521, 521, 521,
      /* 34924 */ 521, 521, 521, 521, 2452, 521, 521, 521, 521, 521, 521, 2457, 521, 521, 521, 521, 521, 521, 521, 521,
      /* 34944 */ 521, 521, 521, 521, 2847, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521,
      /* 34964 */ 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 2889, 521, 521, 521, 521, 521, 521, 0, 0, 57909,
      /* 34984 */ 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 60315, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 34999 */ 57909, 57909, 57909, 57909, 57909, 60323, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 35014 */ 57909, 57909, 58924, 57909, 57909, 58928, 57909, 57909, 57909, 57909, 57909, 58935, 57909, 57909, 57909,
      /* 35029 */ 58942, 57909, 0, 57886, 57936, 57936, 57936, 57936, 60359, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 35044 */ 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 60370, 57909, 57909, 57909, 57909, 57909, 57936,
      /* 35059 */ 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 60380, 57936, 0, 0, 0, 0, 521, 521, 521, 4170,
      /* 35077 */ 4171, 521, 521, 57886, 57886, 57886, 61520, 61521, 57886, 57886, 57886, 57909, 57909, 57909, 61526,
      /* 35092 */ 61527, 57909, 57909, 57909, 57936, 57936, 57936, 61532, 57936, 57936, 60435, 57936, 57936, 57936, 57936,
      /* 35107 */ 57936, 521, 521, 521, 521, 521, 57886, 57886, 57886, 57886, 57886, 301, 305, 0, 0, 0, 0, 3104, 0, 0, 0,
      /* 35128 */ 3108, 0, 0, 0, 0, 0, 0, 3142, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 35161 */ 0, 262731, 0, 0, 0, 0, 0, 0, 0, 0, 3113, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3123, 0, 0, 0, 0, 0,
      /* 35192 */ 0, 0, 0, 0, 0, 0, 0, 3136, 57909, 60627, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 35211 */ 57909, 60636, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 60644,
      /* 35226 */ 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 61057, 57909, 57909, 57909,
      /* 35241 */ 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 35256 */ 57909, 57909, 61062, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57936,
      /* 35271 */ 57936, 60676, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 60685, 57936, 57936,
      /* 35286 */ 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 60693, 57936, 57936, 57936, 57936,
      /* 35301 */ 57936, 521, 521, 521, 521, 521, 521, 0, 57886, 57886, 57886, 57886, 57886, 57886, 155941, 0, 0, 0, 0, 0,
      /* 35321 */ 0, 0, 0, 0, 0, 0, 0, 0, 1192, 1193, 0, 0, 0, 0, 0, 367, 367, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57936, 57936,
      /* 35350 */ 57936, 57936, 57936, 57936, 57936, 60915, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936,
      /* 35365 */ 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 60933, 57936, 60935, 57936, 57936,
      /* 35380 */ 57936, 57936, 57936, 57936, 57936, 57936, 57936, 60703, 57936, 57936, 57936, 57936, 57936, 57936, 57936,
      /* 35395 */ 57936, 57936, 57936, 57936, 521, 521, 521, 57886, 57886, 57886, 0, 0, 0, 0, 0, 0, 0, 2748, 0, 0, 0, 0,
      /* 35417 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 352256, 0, 352256, 352256, 0, 0, 0, 0,
      /* 35446 */ 521, 3948, 521, 3950, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 57886, 61307, 57886, 61309,
      /* 35465 */ 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 58807, 57886, 57886,
      /* 35480 */ 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 35495 */ 57886, 57886, 59347, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 35510 */ 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 61165, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 35525 */ 57909, 61170, 57909, 57909, 57909, 57909, 61323, 57909, 61325, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 35540 */ 57909, 57909, 57909, 57909, 57909, 57909, 57936, 61339, 57936, 61341, 57936, 57936, 57936, 57936, 57936,
      /* 35555 */ 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 3859, 521, 61204, 57886, 0, 0, 0, 0, 0,
      /* 35573 */ 0, 0, 0, 0, 0, 0, 3627, 0, 0, 0, 0, 0, 4012, 0, 0, 0, 4015, 0, 0, 521, 521, 521, 521, 4020, 521, 521,
      /* 35599 */ 521, 521, 521, 521, 521, 521, 521, 521, 57886, 57886, 57886, 57886, 61377, 57886, 57886, 57886, 57886,
      /* 35616 */ 57886, 57909, 60861, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 35631 */ 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 60352, 57909,
      /* 35646 */ 57909, 57909, 57909, 57909, 57909, 0, 0, 0, 312, 313, 314, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 35672 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2765, 0, 0, 0, 0, 0, 0, 426, 0, 131072, 0, 0, 0, 426, 0, 0, 0, 0, 0,
      /* 35703 */ 426, 452, 0, 0, 0, 452, 452, 452, 452, 452, 452, 452, 452, 452, 452, 452, 452, 452, 516, 452, 516, 516,
      /* 35725 */ 516, 452, 516, 516, 516, 516, 516, 516, 523, 57889, 523, 57889, 523, 523, 57889, 523, 523, 57912, 57889,
      /* 35744 */ 523, 523, 57889, 57889, 57889, 57912, 57889, 57889, 57889, 57889, 57889, 57889, 57889, 57912, 57912,
      /* 35759 */ 57889, 57889, 57939, 57889, 57889, 57889, 57889, 57889, 57889, 57889, 57939, 57939, 57889, 57889, 57889,
      /* 35774 */ 57889, 57939, 57939, 57889, 614, 57889, 57966, 57966, 1, 24578, 3, 155941, 155941, 295, 0, 0, 0, 0, 0,
      /* 35793 */ 301, 302, 0, 0, 305, 306, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 385024, 0, 4358144, 4358144,
      /* 35817 */ 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144,
      /* 35828 */ 4358144, 4358144, 4358144, 4358144, 57909, 57909, 58370, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 35841 */ 57909, 0, 0, 0, 0, 57886, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936,
      /* 35858 */ 57936, 57936, 57936, 58445, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 61199, 57936,
      /* 35873 */ 57936, 57936, 57936, 521, 521, 57886, 57886, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3627, 0, 0, 0, 0, 0, 805,
      /* 35898 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 641, 0, 0, 0, 0, 0, 820, 780, 0, 0, 0, 0, 0, 0, 754, 0, 0,
      /* 35929 */ 754, 0, 0, 0, 0, 0, 754, 754, 0, 0, 815, 0, 0, 0, 0, 0, 0, 0, 0, 0, 754, 0, 0, 0, 0, 0, 0, 2770, 0, 0,
      /* 35959 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2379, 0, 0, 0, 0, 0,
      /* 35991 */ 57909, 57909, 57909, 57909, 57909, 57909, 60312, 57909, 57909, 57909, 57909, 60316, 57909, 57909, 57909,
      /* 36006 */ 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 36021 */ 60345, 57909, 57909, 57909, 57909, 60349, 57909, 57909, 57909, 60354, 57909, 57909, 57909, 57909, 60381,
      /* 36036 */ 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936,
      /* 36051 */ 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936,
      /* 36066 */ 57936, 60432, 57936, 57936, 57936, 57936, 57936, 60436, 57936, 57936, 57936, 521, 521, 521, 521, 521,
      /* 36082 */ 57886, 57886, 57886, 57886, 57886, 301, 305, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3387, 0, 0, 0, 0, 0, 0,
      /* 36108 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2807, 0, 0, 0, 0, 0, 2812, 0, 0, 0, 0, 0, 57886, 61381, 57886,
      /* 36137 */ 61383, 57886, 57886, 61385, 57886, 57886, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 61395,
      /* 36152 */ 57909, 61397, 57909, 57909, 61399, 57909, 57909, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 0, 0,
      /* 36168 */ 0, 0, 0, 0, 0, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 57886, 57886, 57886, 57886,
      /* 36189 */ 57886, 57886, 57936, 61409, 57936, 61411, 57936, 57936, 61413, 57936, 57936, 0, 0, 0, 0, 0, 0, 0, 521,
      /* 36208 */ 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 57886, 57886, 57886, 57886, 57886, 0, 0, 0,
      /* 36228 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2271, 0, 0, 0, 0, 0, 0, 0, 0, 0, 350, 351, 352, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 36260 */ 0, 0, 0, 0, 0, 0, 0, 0, 367, 0, 295, 0, 319, 319, 427, 428, 131072, 435, 428, 436, 427, 435, 436, 0,
      /* 36284 */ 315, 436, 448, 453, 466, 466, 466, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 501, 501, 501, 514,
      /* 36305 */ 514, 515, 515, 501, 515, 515, 515, 501, 515, 515, 515, 515, 515, 515, 524, 57890, 524, 57890, 524, 524,
      /* 36325 */ 57890, 524, 524, 57913, 57890, 524, 524, 57890, 57890, 57890, 57913, 57890, 57890, 57890, 57890, 57890,
      /* 36341 */ 57890, 57890, 57913, 57913, 57890, 57890, 57940, 57890, 57890, 57890, 57890, 57890, 57890, 57890, 57940,
      /* 36356 */ 57940, 57890, 57890, 57890, 57890, 57940, 57940, 57890, 615, 57965, 57965, 57965, 1, 24578, 3, 155941,
      /* 36372 */ 155941, 295, 0, 0, 0, 0, 0, 301, 302, 0, 0, 305, 306, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 401408,
      /* 36400 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1198, 367, 367, 0, 0, 1201, 0, 0, 0, 1204, 0,
      /* 36430 */ 1206, 0, 679, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 367, 367, 367, 695, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 36460 */ 0, 0, 0, 0, 5242880, 0, 0, 0, 0, 0, 5603328, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57909, 57909, 57909,
      /* 36486 */ 57909, 57909, 58378, 57909, 57909, 57909, 57909, 0, 0, 0, 0, 57886, 57936, 57936, 57936, 57936, 57936,
      /* 36503 */ 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 59553, 57936, 57936,
      /* 36518 */ 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 58453, 57936, 57936,
      /* 36533 */ 57936, 57936, 521, 521, 521, 883, 521, 521, 0, 57886, 57886, 57886, 58302, 57886, 57886, 155941, 1138,
      /* 36550 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3411, 0, 0, 0, 3415, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 36582 */ 521, 57886, 521, 57886, 521, 521, 57886, 521, 521, 57909, 57886, 521, 521, 57886, 57886, 57886, 57909,
      /* 36599 */ 521, 521, 521, 58754, 901, 57886, 57886, 58758, 57886, 57886, 58762, 57886, 57886, 57886, 57886, 57886,
      /* 36615 */ 57886, 57886, 57886, 58776, 57886, 58781, 57886, 57886, 58785, 57886, 57886, 58788, 57886, 57886, 57886,
      /* 36630 */ 57886, 57886, 57886, 58279, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 36645 */ 57886, 0, 57909, 57909, 58322, 57909, 57909, 57909, 57909, 57909, 57909, 58355, 57909, 57909, 57909,
      /* 36660 */ 58876, 57909, 57909, 58880, 57909, 57909, 58883, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 36675 */ 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 36690 */ 57909, 58902, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57936, 58951, 57936, 57936, 57936, 57936,
      /* 36705 */ 57936, 57936, 57936, 57936, 58965, 57936, 58970, 57936, 57936, 58974, 57936, 57936, 58977, 57936, 57936,
      /* 36720 */ 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 521, 521, 57886,
      /* 36735 */ 57886, 3861, 0, 0, 0, 3863, 0, 0, 0, 0, 0, 0, 3627, 3870, 0, 1723, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 36763 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 385, 521, 521, 521, 1927, 1928, 521, 521, 521,
      /* 36791 */ 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521,
      /* 36812 */ 521, 521, 521, 521, 2433, 521, 521, 521, 521, 58754, 0, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 36830 */ 57886, 57886, 57886, 57886, 57886, 57886, 59320, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 36845 */ 57886, 59332, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57909, 57909, 61494, 57909, 61495, 57909,
      /* 36860 */ 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57936, 57936, 61502, 57936, 61503, 57936, 57936, 57936,
      /* 36875 */ 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 60018, 57936, 60020, 57936, 57936, 57936, 57936,
      /* 36890 */ 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 60396,
      /* 36905 */ 57936, 57936, 57936, 57936, 57936, 57936, 57936, 60401, 57936, 57936, 57936, 57936, 57936, 57886, 57886,
      /* 36920 */ 59370, 59371, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 36935 */ 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 36950 */ 0, 0, 0, 0, 50657, 0, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 36967 */ 57909, 57909, 59420, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 59432, 57909, 57909,
      /* 36982 */ 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 59446, 57909, 57909, 57909, 59450, 57909, 57909,
      /* 36997 */ 59455, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 37012 */ 59990, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 59998, 57936, 57936, 57936, 57936, 57936, 57936,
      /* 37027 */ 57936, 57936, 57936, 57909, 59470, 59471, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 37042 */ 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 37057 */ 57909, 57909, 57909, 57909, 57886, 1, 24578, 3, 155941, 155941, 295, 0, 0, 0, 0, 0, 301, 302, 0, 0, 305,
      /* 37078 */ 306, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 643, 0, 0, 0, 0, 0, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521,
      /* 37105 */ 521, 521, 521, 521, 521, 521, 521, 3447, 521, 521, 521, 521, 521, 521, 521, 521, 521, 1341, 521, 521,
      /* 37125 */ 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521,
      /* 37145 */ 3200, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 57886, 61016,
      /* 37165 */ 57886, 57886, 57886, 61019, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 59566, 59567,
      /* 37180 */ 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936,
      /* 37195 */ 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 521, 521,
      /* 37210 */ 521, 57886, 57886, 57886, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2304, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 37239 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3162, 0, 0, 521, 2437, 521, 521, 521, 521, 521,
      /* 37268 */ 521, 521, 521, 521, 521, 521, 521, 521, 2450, 521, 521, 521, 521, 521, 2454, 2455, 521, 521, 521, 521,
      /* 37288 */ 521, 521, 521, 521, 521, 1374, 521, 1376, 521, 521, 521, 521, 521, 521, 521, 1389, 521, 521, 521, 521,
      /* 37308 */ 521, 521, 521, 521, 521, 521, 521, 1404, 57886, 57886, 57886, 57886, 59869, 57886, 57886, 57886, 57886,
      /* 37325 */ 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 59882, 57886, 57886, 57886, 57886, 57886,
      /* 37340 */ 59886, 59887, 59888, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 58800, 57886, 57886, 57886, 57886,
      /* 37355 */ 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 37370 */ 58822, 57886, 57886, 57886, 57886, 0, 0, 0, 2744, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 37397 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 114688, 0, 0, 57886, 57886, 57886, 60288, 57886, 57886, 57886, 57886,
      /* 37419 */ 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 37434 */ 57886, 57886, 57886, 57886, 57886, 0, 2962, 0, 0, 0, 0, 0, 826, 0, 0, 521, 521, 521, 521, 521, 849, 521,
      /* 37456 */ 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 57886, 57886, 57886, 57886, 57886,
      /* 37475 */ 57909, 57909, 57909, 60863, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 37490 */ 57909, 57909, 57909, 60875, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 37505 */ 59447, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 37520 */ 57909, 57909, 57909, 57909, 57909, 57909, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936,
      /* 37535 */ 57936, 57936, 60672, 3137, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 37565 */ 0, 0, 0, 0, 0, 1837, 0, 0, 0, 3166, 0, 0, 3169, 0, 0, 0, 0, 0, 0, 0, 3173, 521, 521, 521, 521, 521, 521,
      /* 37592 */ 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 2451, 521, 521, 521, 521, 521, 521, 521, 521,
      /* 37612 */ 521, 521, 521, 521, 521, 521, 3379, 0, 0, 0, 0, 0, 0, 0, 3383, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 37641 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3422, 0, 0, 0, 0, 0, 0, 3429, 521, 3458, 3459, 521, 521, 521, 521, 521,
      /* 37667 */ 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 37685 */ 57886, 57886, 57886, 57886, 60827, 57886, 1, 24578, 3, 155941, 155941, 295, 0, 0, 0, 0, 0, 301, 302, 0,
      /* 37705 */ 0, 305, 306, 0, 0, 0, 0, 0, 0, 0, 640, 0, 0, 0, 0, 0, 0, 0, 695, 521, 521, 521, 521, 521, 521, 521, 521,
      /* 37732 */ 521, 521, 521, 521, 521, 521, 521, 521, 883, 521, 521, 521, 521, 57886, 57886, 57886, 57886, 57886, 0,
      /* 37751 */ 0, 0, 0, 2267, 0, 1142, 0, 0, 0, 0, 2270, 0, 1147, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1795, 0, 0, 0, 0, 0, 0,
      /* 37781 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1809, 57909, 60884, 57909, 60886, 57909, 57909, 57909, 57909,
      /* 37804 */ 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57936,
      /* 37819 */ 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 60000, 57936, 57936, 57936, 57936, 57936,
      /* 37834 */ 57936, 57936, 60911, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936,
      /* 37849 */ 57936, 57936, 57936, 57936, 57936, 60926, 57936, 60928, 57936, 57936, 57936, 57936, 57936, 57936, 57936,
      /* 37864 */ 57936, 57936, 57936, 57936, 57936, 57936, 60045, 60046, 57936, 57936, 57936, 57936, 57936, 57936, 60053,
      /* 37879 */ 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 61072, 57909, 57909, 57909, 57909,
      /* 37894 */ 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936,
      /* 37909 */ 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 59595, 57936, 57936,
      /* 37924 */ 57936, 1881, 521, 4010, 0, 4011, 0, 0, 0, 0, 0, 0, 0, 521, 4018, 521, 4019, 521, 521, 521, 4023, 521,
      /* 37946 */ 521, 521, 521, 521, 521, 521, 57886, 61375, 57886, 61376, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 37962 */ 60264, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 60269, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 37977 */ 57886, 60275, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 60283, 57886, 61380, 57886, 57886, 57886,
      /* 37992 */ 57886, 57886, 57886, 57886, 57886, 57909, 61389, 57909, 61390, 57909, 57909, 57909, 61394, 57909, 57909,
      /* 38007 */ 57909, 57909, 57909, 57909, 57909, 57909, 57936, 61403, 57936, 61404, 57936, 57936, 57936, 57936, 57936,
      /* 38022 */ 57936, 57936, 57936, 57936, 57936, 60388, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936,
      /* 38037 */ 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 521, 521, 521,
      /* 38052 */ 57886, 57886, 57886, 0, 0, 3376, 0, 0, 61408, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 0,
      /* 38070 */ 0, 0, 0, 0, 0, 0, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 57886, 57886, 57886,
      /* 38092 */ 57886, 57886, 0, 0, 0, 1710, 0, 0, 0, 0, 0, 0, 1717, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2338, 0, 0,
      /* 38121 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2294, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 521,
      /* 38154 */ 521, 521, 4213, 57886, 57886, 57886, 61559, 57909, 57909, 57909, 61561, 57936, 57936, 57936, 61563, 0,
      /* 38170 */ 521, 521, 57886, 57886, 57909, 57909, 57936, 57936, 521, 57886, 57909, 57936, 521, 521, 521, 521, 521,
      /* 38187 */ 521, 0, 2471, 0, 0, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 38204 */ 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 59858, 57886, 57886, 57886, 57886,
      /* 38219 */ 57886, 57886, 57886, 57886, 57886, 0, 0, 376, 0, 131072, 0, 0, 0, 376, 0, 0, 438, 444, 0, 376, 454, 467,
      /* 38241 */ 467, 467, 480, 480, 480, 480, 480, 480, 480, 480, 480, 480, 502, 502, 502, 502, 502, 502, 502, 502, 502,
      /* 38262 */ 502, 502, 502, 502, 502, 502, 525, 57891, 525, 57891, 525, 525, 57891, 525, 525, 57914, 57891, 525, 525,
      /* 38281 */ 57891, 57891, 57891, 57914, 57891, 57891, 57891, 57891, 57891, 57891, 57891, 57914, 57914, 57891, 57891,
      /* 38296 */ 57941, 57891, 57891, 57891, 57891, 57891, 57891, 57891, 57941, 57941, 57891, 57891, 57891, 57891, 57941,
      /* 38311 */ 57941, 57891, 525, 57891, 57891, 57891, 1, 24578, 3, 155941, 155941, 295, 0, 0, 0, 0, 0, 301, 302, 0, 0,
      /* 38332 */ 305, 306, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 229376, 0, 491520, 524288, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 38360 */ 0, 0, 0, 0, 0, 0, 0, 0, 725, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1180, 1181, 0, 0, 0, 0, 0, 0,
      /* 38392 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 367, 367, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 719, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 38425 */ 0, 729, 0, 0, 0, 0, 0, 0, 0, 0, 0, 738, 0, 0, 1166, 0, 1298, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1284, 0, 0, 0,
      /* 38455 */ 1312, 1180, 0, 0, 0, 0, 0, 0, 0, 0, 521, 521, 1321, 521, 521, 521, 0, 0, 0, 0, 0, 0, 57886, 60241,
      /* 38479 */ 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 38494 */ 57886, 57886, 57886, 57886, 57886, 57886, 58814, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 38509 */ 57886, 57886, 521, 521, 521, 521, 521, 1371, 521, 521, 1373, 521, 521, 521, 521, 1378, 521, 521, 521,
      /* 38528 */ 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 1403, 521, 521, 521, 521, 521, 521,
      /* 38548 */ 521, 521, 3196, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 3203, 521, 521, 521, 521, 521,
      /* 38568 */ 521, 521, 521, 521, 521, 521, 1902, 521, 521, 521, 521, 521, 521, 521, 521, 1913, 521, 521, 521, 521,
      /* 38588 */ 521, 521, 521, 521, 521, 521, 521, 1935, 521, 521, 521, 1941, 521, 521, 521, 521, 521, 521, 521, 521,
      /* 38608 */ 521, 1950, 521, 521, 521, 521, 1956, 521, 521, 521, 521, 58754, 901, 57886, 57886, 58759, 57886, 57886,
      /* 38626 */ 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 58786,
      /* 38641 */ 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 61247, 57886, 57886, 57909, 57909, 57909,
      /* 38656 */ 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 61263, 57909,
      /* 38671 */ 57909, 57936, 57909, 57909, 57909, 57909, 58881, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 38686 */ 57909, 57909, 57909, 57909, 57909, 57909, 57909, 58896, 57909, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 38701 */ 58905, 57909, 57909, 58907, 57909, 57909, 57909, 57909, 58912, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 38716 */ 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 58937, 57909, 57909, 57909, 57909,
      /* 38731 */ 0, 58812, 57936, 57936, 58948, 57936, 0, 0, 0, 0, 521, 521, 4169, 521, 521, 521, 4173, 57886, 57886,
      /* 38750 */ 61519, 57886, 57886, 57886, 61523, 57886, 57909, 57909, 61525, 57909, 57909, 57909, 61529, 57909, 57936,
      /* 38765 */ 57936, 61531, 57936, 0, 0, 0, 0, 4168, 521, 521, 521, 521, 521, 521, 61518, 57886, 57886, 57886, 57886,
      /* 38784 */ 57886, 57886, 57886, 61524, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 61530, 57936, 57936, 57936,
      /* 38799 */ 57936, 57936, 57936, 57936, 57936, 57936, 57936, 61274, 57936, 57936, 57936, 57936, 57936, 57936, 57936,
      /* 38814 */ 521, 57886, 0, 3938, 0, 0, 3941, 0, 0, 0, 3627, 0, 0, 0, 0, 0, 521, 521, 521, 521, 521, 521, 521, 521,
      /* 38838 */ 521, 521, 521, 521, 521, 521, 521, 521, 521, 1883, 521, 521, 521, 521, 521, 521, 521, 521, 521, 2876,
      /* 38858 */ 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521,
      /* 38879 */ 521, 57886, 60819, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57936, 57936,
      /* 38894 */ 57936, 57936, 57936, 57936, 57936, 58999, 57936, 57936, 59001, 57936, 57936, 57936, 57936, 59007, 57936,
      /* 38909 */ 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936,
      /* 38924 */ 59519, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 59530, 57936, 57936, 57936, 57936,
      /* 38939 */ 57936, 59032, 57936, 57936, 57936, 57936, 521, 521, 521, 521, 521, 521, 57886, 57886, 57886, 57886,
      /* 38955 */ 57886, 57886, 1138, 1705, 0, 0, 0, 0, 1712, 0, 0, 0, 0, 0, 0, 0, 0, 521, 521, 521, 521, 521, 521, 521,
      /* 38979 */ 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 2410, 521, 521, 521, 2259,
      /* 38999 */ 57886, 57886, 57886, 57886, 59608, 2265, 0, 2266, 0, 0, 0, 0, 2268, 0, 2269, 0, 0, 0, 0, 0, 2272, 0, 0,
      /* 39022 */ 0, 0, 0, 0, 0, 0, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521,
      /* 39045 */ 521, 521, 521, 2408, 521, 521, 521, 521, 521, 521, 521, 521, 2416, 521, 521, 521, 521, 521, 521, 521,
      /* 39065 */ 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 1397,
      /* 39085 */ 521, 521, 521, 521, 521, 57886, 59893, 57886, 59895, 57886, 57886, 57886, 57886, 57886, 57886, 0, 0, 0,
      /* 39103 */ 0, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 59916, 57909, 57909, 57909, 57909,
      /* 39118 */ 59920, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 59958, 57909, 57909, 57909, 57909, 57909,
      /* 39133 */ 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 59971, 57909, 57909, 57909, 57909, 57909, 59975,
      /* 39148 */ 59976, 59977, 57909, 57909, 57909, 57909, 57909, 57909, 59982, 57909, 59984, 57909, 57909, 57909, 57909,
      /* 39163 */ 57909, 57909, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 59999, 57936, 57936, 57936,
      /* 39178 */ 57936, 60003, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 60683, 57936, 57936,
      /* 39193 */ 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936,
      /* 39208 */ 57936, 57936, 57936, 57936, 521, 3369, 521, 57886, 60716, 57886, 0, 0, 0, 0, 0, 57936, 57936, 57936,
      /* 39226 */ 57936, 57936, 60065, 57936, 60067, 57936, 57936, 57936, 57936, 57936, 57936, 521, 521, 521, 521, 521,
      /* 39242 */ 57886, 57886, 57886, 57886, 57886, 2739, 2266, 0, 2740, 2269, 0, 0, 0, 0, 0, 0, 3622, 0, 0, 0, 0, 0, 0,
      /* 39265 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 415, 415, 0, 0, 0, 0, 0, 60285, 57886, 57886,
      /* 39294 */ 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 39309 */ 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 0, 2962, 0, 0, 0, 0, 0, 1156,
      /* 39327 */ 1157, 1158, 1159, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 791, 0, 0, 0, 0,
      /* 39358 */ 0, 0, 0, 791, 0, 0, 57909, 57909, 57909, 60310, 57909, 60311, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 39376 */ 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 39391 */ 57909, 57909, 57909, 59460, 57909, 57909, 57909, 57909, 57909, 59467, 57909, 521, 521, 3191, 521, 521,
      /* 39407 */ 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 3204, 521,
      /* 39427 */ 521, 521, 521, 521, 521, 521, 3210, 57886, 57886, 57886, 60582, 57886, 57886, 57886, 57886, 57886,
      /* 39443 */ 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 39458 */ 57886, 60596, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 60606, 57886, 57886, 57886, 57886,
      /* 39473 */ 57886, 57886, 57886, 57886, 0, 0, 57909, 57909, 57909, 57909, 60617, 57909, 57909, 57909, 57909, 57909,
      /* 39489 */ 57909, 60624, 57909, 57886, 60602, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 39504 */ 57886, 57886, 57886, 57886, 57886, 2962, 0, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 39519 */ 57909, 57909, 57909, 57909, 57909, 57909, 61182, 57909, 57909, 57936, 57936, 57936, 57936, 57936, 57936,
      /* 39534 */ 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 58975, 57936, 57936, 57936, 57936, 57936,
      /* 39549 */ 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 58990, 57909, 57909, 57909, 57909,
      /* 39564 */ 60651, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 39579 */ 57909, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936,
      /* 39594 */ 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 60680, 57936, 57936, 57936,
      /* 39609 */ 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936,
      /* 39624 */ 57936, 57936, 57936, 60694, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 61273, 57936,
      /* 39639 */ 61275, 57936, 57936, 57936, 57936, 57936, 57936, 521, 57886, 0, 0, 0, 0, 0, 0, 0, 0, 3627, 0, 0, 0, 0,
      /* 39661 */ 0, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 1878, 1879, 521, 521, 521, 521,
      /* 39681 */ 1886, 521, 521, 521, 521, 521, 521, 521, 521, 1337, 521, 1342, 521, 521, 1346, 521, 521, 1349, 521, 521,
      /* 39701 */ 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 1380, 521, 521, 521, 521, 521, 521,
      /* 39721 */ 521, 521, 521, 521, 1396, 521, 521, 521, 521, 521, 57936, 57936, 57936, 57936, 57936, 60700, 57936,
      /* 39738 */ 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 521,
      /* 39753 */ 521, 521, 57886, 57886, 57886, 0, 0, 0, 0, 0, 0, 3768, 0, 0, 0, 0, 57909, 61073, 57909, 57909, 57909,
      /* 39774 */ 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936,
      /* 39789 */ 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 60030, 57936, 57936,
      /* 39804 */ 57936, 57936, 57936, 0, 521, 521, 521, 521, 521, 521, 3953, 521, 521, 521, 521, 521, 521, 521, 521,
      /* 39823 */ 57886, 57886, 57886, 57886, 57886, 57886, 61312, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 39838 */ 57886, 57886, 2557, 0, 0, 0, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 39854 */ 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 39869 */ 57909, 57909, 57909, 57909, 57909, 59466, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 61328,
      /* 39884 */ 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57936, 57936, 57936, 57936, 57936, 57936,
      /* 39899 */ 61344, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 0, 0, 0, 0, 0, 0, 0, 521, 521,
      /* 39918 */ 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 57886, 57886, 57886, 57886, 57886, 61382, 57886,
      /* 39936 */ 57886, 57886, 57886, 57886, 57886, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 61396,
      /* 39951 */ 57909, 57909, 57909, 57909, 57909, 57909, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936,
      /* 39966 */ 61080, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936,
      /* 39981 */ 61090, 57936, 57936, 57936, 57936, 61410, 57936, 57936, 57936, 57936, 57936, 57936, 0, 0, 0, 0, 0, 0, 0,
      /* 40000 */ 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 57886, 57886, 57886, 57886, 57886,
      /* 40018 */ 2265, 1706, 2266, 0, 0, 0, 0, 2268, 1713, 2269, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1243, 0, 0, 0,
      /* 40046 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2353, 0, 0, 330, 0, 0, 0, 0, 0, 0, 375, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 40078 */ 0, 0, 0, 0, 0, 330, 0, 139264, 147456, 0, 0, 0, 0, 0, 0, 0, 1842, 0, 0, 1845, 0, 0, 0, 0, 0, 0, 1851,
      /* 40105 */ 1852, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1845, 0, 0, 0, 0, 0, 131072, 0, 0, 0, 0, 0, 329, 0, 0, 0, 0, 455,
      /* 40135 */ 468, 468, 468, 481, 481, 481, 481, 492, 494, 481, 481, 492, 481, 503, 503, 503, 503, 518, 503, 503, 503,
      /* 40156 */ 518, 503, 503, 503, 503, 503, 503, 526, 57892, 526, 57892, 526, 526, 57892, 526, 526, 57915, 57892, 526,
      /* 40175 */ 526, 57892, 57892, 57892, 57915, 57892, 57892, 57892, 57892, 57892, 57892, 57892, 57915, 57915, 57892,
      /* 40190 */ 57892, 57942, 57892, 57892, 57892, 57892, 57892, 57892, 57892, 57942, 57942, 57892, 57892, 57892, 57892,
      /* 40205 */ 57942, 57942, 57892, 526, 57892, 57892, 57892, 1, 24578, 3, 155941, 155941, 295, 0, 0, 0, 0, 0, 301,
      /* 40224 */ 302, 0, 0, 305, 306, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2310144, 0, 0, 0, 0, 0, 0, 0, 2310144,
      /* 40252 */ 2310144, 0, 0, 0, 0, 0, 0, 0, 0, 2310144, 0, 0, 0, 0, 0, 651, 652, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 663,
      /* 40280 */ 664, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 676, 677, 678, 0, 0, 0, 682, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 367,
      /* 40310 */ 367, 367, 0, 0, 0, 0, 0, 0, 700, 701, 0, 0, 0, 0, 0, 707, 0, 0, 0, 0, 0, 3141, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 40340 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 450560, 450560, 0, 0, 0, 0, 0, 711, 0, 713, 0,
      /* 40370 */ 0, 0, 0, 0, 0, 720, 0, 0, 0, 724, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2756, 0, 0, 0, 0, 0,
      /* 40402 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 742, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 752, 0, 0, 0, 0, 0, 0, 759, 0,
      /* 40435 */ 0, 0, 765, 766, 0, 0, 0, 0, 0, 0, 0, 2308, 0, 0, 0, 0, 2313, 2314, 0, 0, 2316, 2317, 0, 0, 0, 0, 0, 0,
      /* 40463 */ 0, 0, 0, 0, 0, 0, 0, 0, 270336, 0, 0, 0, 0, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144,
      /* 40482 */ 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 0, 0,
      /* 40495 */ 0, 0, 0, 0, 0, 0, 0, 0, 301, 0, 0, 305, 0, 0, 4857856, 4874240, 0, 0, 4923392, 0, 0, 0, 775, 0, 777, 0,
      /* 40521 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 789, 0, 794, 0, 797, 0, 0, 0, 0, 0, 0, 777, 0, 789, 0, 803, 0, 0,
      /* 40552 */ 0, 0, 797, 809, 0, 0, 0, 0, 0, 809, 809, 812, 0, 0, 0, 777, 0, 0, 0, 0, 0, 821, 0, 0, 0, 0, 0, 0, 806,
      /* 40581 */ 0, 0, 806, 0, 0, 0, 0, 0, 806, 806, 0, 0, 0, 0, 786, 0, 0, 0, 0, 0, 0, 822, 782, 0, 0, 0, 0, 0, 775, 0,
      /* 40611 */ 0, 0, 821, 521, 521, 835, 521, 841, 521, 521, 856, 521, 521, 867, 521, 872, 521, 521, 881, 884, 889,
      /* 40632 */ 521, 897, 521, 57886, 57886, 57886, 57886, 57886, 57886, 60291, 57886, 57886, 57886, 57886, 57886,
      /* 40647 */ 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 40662 */ 57886, 0, 2962, 0, 0, 58254, 57886, 58260, 57886, 57886, 58275, 57886, 57886, 58286, 57886, 58291,
      /* 40678 */ 57886, 57886, 58300, 58303, 58308, 57886, 58316, 57886, 0, 57909, 57909, 57909, 58330, 57909, 58336,
      /* 40693 */ 57909, 57909, 58351, 57909, 57909, 58362, 57909, 58367, 57909, 57909, 58376, 58379, 58384, 57909, 58392,
      /* 40708 */ 57909, 0, 0, 0, 0, 58291, 57936, 57936, 57936, 58405, 57936, 58411, 57936, 57936, 58426, 57936, 57936,
      /* 40725 */ 58437, 57936, 58442, 57936, 57936, 58451, 58454, 58459, 57936, 58467, 57936, 835, 521, 521, 1129, 889,
      /* 40741 */ 521, 0, 57886, 58254, 57886, 58479, 58308, 57886, 155941, 1138, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 40763 */ 2326528, 0, 0, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144,
      /* 40776 */ 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 0, 0, 1153, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 40795 */ 1163, 0, 0, 0, 0, 0, 0, 0, 1170, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1051, 0, 0, 0, 4358144, 4358144,
      /* 40821 */ 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144,
      /* 40832 */ 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 6299648, 4358144, 4358144,
      /* 40843 */ 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 0,
      /* 40855 */ 1209, 0, 0, 0, 0, 0, 0, 0, 0, 1218, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1235, 0, 0, 1187, 0,
      /* 40886 */ 0, 0, 0, 0, 3434, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521,
      /* 40908 */ 521, 521, 521, 3451, 521, 521, 521, 521, 521, 521, 0, 0, 0, 0, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 40928 */ 57886, 57886, 57886, 59827, 57886, 57886, 57886, 57886, 59831, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 40943 */ 57886, 57886, 58801, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 58810, 57886, 57886, 58812, 57886,
      /* 40958 */ 57886, 57886, 57886, 58817, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 61388, 57909,
      /* 40973 */ 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 61402,
      /* 40988 */ 57936, 57936, 57936, 57936, 57936, 57936, 0, 0, 0, 0, 742, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1258, 0,
      /* 41013 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5857280, 0, 6463488, 4939776, 0, 0, 5455872, 0, 0, 0, 0, 0, 0, 0,
      /* 41040 */ 0, 6062080, 6463488, 0, 5398528, 0, 521, 521, 521, 521, 1328, 521, 521, 521, 521, 521, 521, 1343, 521,
      /* 41059 */ 521, 521, 1348, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 1365, 521,
      /* 41079 */ 1407, 521, 58754, 901, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 58767,
      /* 41094 */ 57886, 57886, 57886, 57886, 57886, 57886, 58782, 57886, 57886, 57886, 58787, 57886, 57886, 57886, 57886,
      /* 41109 */ 57886, 57886, 57886, 58839, 57886, 57886, 57886, 57886, 57886, 57886, 50657, 58754, 977, 57909, 57909,
      /* 41124 */ 57909, 58855, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 58869, 57909, 57909, 57909,
      /* 41139 */ 58877, 57909, 57909, 57909, 58882, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 41154 */ 57909, 57909, 57909, 57909, 57909, 58899, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 41169 */ 57909, 0, 0, 0, 0, 57886, 57936, 57936, 57936, 57936, 57936, 57936, 58419, 57936, 57936, 57936, 57936,
      /* 41186 */ 57936, 57936, 57936, 57936, 57936, 57936, 57936, 59003, 57936, 59005, 57936, 57936, 57936, 57936, 57936,
      /* 41201 */ 57936, 57936, 59018, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936,
      /* 41216 */ 60704, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 521, 521, 521, 57886, 57886, 57886, 0, 0,
      /* 41233 */ 0, 0, 0, 57936, 57936, 57936, 57936, 57936, 57936, 58956, 57936, 57936, 57936, 57936, 57936, 57936,
      /* 41249 */ 58971, 57936, 57936, 57936, 58976, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936,
      /* 41264 */ 57936, 57936, 57936, 57936, 521, 521, 521, 521, 521, 57886, 57886, 57886, 57886, 57886, 0, 0, 0, 0, 0,
      /* 41283 */ 0, 2741, 0, 57936, 58993, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936,
      /* 41299 */ 57936, 57936, 57936, 57936, 59009, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936,
      /* 41314 */ 59025, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 61101, 57936, 57936, 57936,
      /* 41329 */ 57936, 521, 521, 521, 57886, 57886, 57886, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 690, 691, 0, 367, 367, 367,
      /* 41353 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 703, 0, 0, 0, 0, 0, 57936, 57936, 57936, 59036, 57936, 521, 521, 521, 521,
      /* 41377 */ 521, 521, 57886, 57886, 57886, 57886, 57886, 57886, 1138, 1705, 0, 0, 0, 0, 1712, 0, 0, 0, 0, 1719, 0,
      /* 41398 */ 1721, 0, 0, 0, 0, 0, 3621, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3632, 0, 0, 0, 3635, 3636,
      /* 41428 */ 0, 0, 0, 0, 0, 0, 393678, 0, 393678, 393678, 393678, 393678, 393678, 393678, 393678, 393678, 393678,
      /* 41445 */ 393678, 393678, 393678, 393678, 393678, 393678, 393678, 393678, 393678, 393678, 393678, 393678, 0,
      /* 41458 */ 393678, 393678, 0, 1754, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1770, 0, 0, 0, 0, 0, 1776, 0, 0,
      /* 41486 */ 1779, 0, 1781, 0, 0, 0, 0, 0, 0, 3642, 0, 3644, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521,
      /* 41509 */ 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 2854, 521, 521, 521, 521, 521, 521, 521,
      /* 41529 */ 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 1943, 1944, 521, 521, 521, 521, 521, 521, 521, 521,
      /* 41549 */ 521, 521, 521, 521, 521, 0, 0, 1787, 1788, 0, 0, 0, 0, 0, 0, 0, 0, 1797, 1798, 0, 0, 0, 0, 0, 0, 1804,
      /* 41575 */ 0, 0, 1806, 0, 0, 0, 0, 0, 0, 0, 0, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521,
      /* 41599 */ 521, 521, 521, 888, 521, 521, 521, 521, 57886, 57886, 57886, 1810, 1811, 1812, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 41621 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1830, 1831, 0, 1832, 1833, 0, 0, 0, 0, 0, 0, 1186, 0, 0, 0, 0, 0, 0,
      /* 41651 */ 0, 0, 0, 0, 0, 0, 0, 367, 367, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 810, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 41684 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 3395, 0, 0, 3397, 0, 0, 0, 0, 0, 0, 0, 0, 1863, 1721, 1721, 1865, 521, 1867,
      /* 41711 */ 521, 1868, 1869, 521, 1871, 521, 521, 521, 1875, 521, 521, 521, 521, 521, 521, 521, 521, 521, 1888, 521,
      /* 41731 */ 521, 521, 521, 1892, 521, 521, 521, 521, 1896, 521, 1898, 521, 521, 521, 521, 521, 521, 521, 521, 521,
      /* 41751 */ 521, 1908, 1909, 1911, 521, 521, 521, 521, 521, 521, 521, 1919, 1920, 521, 1922, 521, 521, 521, 521,
      /* 41770 */ 521, 521, 521, 521, 3667, 521, 521, 521, 521, 521, 521, 521, 521, 57886, 57886, 57886, 57886, 57886,
      /* 41788 */ 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 60611, 57886, 57886, 0, 0, 57909,
      /* 41804 */ 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 60622, 57909, 60625, 521, 1925, 1926,
      /* 41819 */ 521, 521, 521, 521, 521, 521, 521, 1934, 521, 1936, 521, 1939, 521, 521, 521, 521, 521, 1946, 521, 521,
      /* 41839 */ 1948, 521, 521, 521, 521, 521, 521, 521, 521, 521, 3197, 3198, 521, 521, 521, 521, 3201, 521, 521, 521,
      /* 41859 */ 521, 521, 521, 521, 521, 521, 521, 3206, 521, 521, 521, 3209, 521, 521, 58754, 0, 59307, 57886, 59309,
      /* 41878 */ 57886, 59310, 57886, 59312, 57886, 59314, 57886, 57886, 57886, 59318, 57886, 57886, 57886, 57886, 57886,
      /* 41893 */ 57886, 57886, 57886, 57886, 59331, 57886, 57886, 57886, 57886, 59335, 57886, 1, 24578, 3, 155941,
      /* 41908 */ 156275, 295, 0, 0, 0, 0, 0, 301, 302, 0, 0, 305, 306, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 483328,
      /* 41936 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2341, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 41968 */ 57886, 57886, 57886, 59339, 57886, 59341, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 41983 */ 57886, 59351, 59352, 59354, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 59362, 59363, 57886, 59365,
      /* 41998 */ 57886, 57886, 57886, 57886, 57886, 58799, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 42013 */ 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 42028 */ 57886, 58829, 59368, 59369, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 59377, 57886, 59379, 57886,
      /* 42043 */ 59382, 57886, 57886, 57886, 57886, 57886, 59390, 57886, 57886, 59392, 57886, 57886, 57886, 57886, 57886,
      /* 42058 */ 57886, 57886, 57886, 57886, 57886, 2558, 0, 0, 0, 57909, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 42074 */ 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 60371, 57909, 57909, 57909,
      /* 42089 */ 57936, 57936, 57936, 57936, 57936, 57936, 60377, 57936, 57936, 57936, 57936, 50657, 0, 59407, 57909,
      /* 42104 */ 59409, 57909, 59410, 57909, 59412, 57909, 59414, 57909, 57909, 57909, 59418, 57909, 57909, 57909, 57909,
      /* 42119 */ 57909, 57909, 57909, 57909, 57909, 59431, 57909, 57909, 57909, 57909, 59435, 57909, 57909, 57909, 57909,
      /* 42134 */ 57909, 57909, 57909, 58916, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 42149 */ 57909, 57909, 57909, 57909, 57909, 57909, 57909, 0, 57886, 57936, 57936, 57936, 57936, 57936, 521, 1335,
      /* 42165 */ 521, 521, 521, 521, 58774, 57886, 57886, 57886, 57886, 57886, 1138, 0, 0, 1709, 0, 0, 0, 0, 1716, 0, 0,
      /* 42186 */ 0, 0, 0, 0, 0, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 3882, 521, 3884, 521, 521, 521, 521,
      /* 42208 */ 521, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 59847, 57886, 57886, 57886, 57886, 57886,
      /* 42223 */ 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 42238 */ 57886, 57886, 57886, 57886, 60277, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57909, 57909, 59439,
      /* 42253 */ 57909, 59441, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 59451, 59452, 59454,
      /* 42268 */ 57909, 57909, 57909, 57909, 57909, 57909, 57909, 59462, 59463, 57909, 59465, 57909, 57909, 59468, 59469,
      /* 42283 */ 57909, 57909, 57909, 57909, 57909, 57909, 57909, 59477, 57909, 59479, 57909, 59482, 57909, 57909, 57909,
      /* 42298 */ 57909, 57909, 59490, 57909, 57909, 59492, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 42313 */ 57886, 57886, 57886, 57886, 57886, 60290, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 42328 */ 57886, 57886, 60299, 57886, 57886, 57886, 60302, 57886, 57886, 57886, 57886, 57886, 57886, 0, 0, 0, 0,
      /* 42345 */ 0, 0, 1214, 0, 0, 0, 0, 0, 0, 0, 0, 1223, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1238, 59503,
      /* 42374 */ 57936, 59505, 57936, 59506, 57936, 59508, 57936, 59510, 57936, 57936, 57936, 59514, 57936, 57936, 57936,
      /* 42389 */ 57936, 57936, 57936, 57936, 57936, 57936, 59527, 57936, 57936, 57936, 57936, 59531, 57936, 57936, 57936,
      /* 42404 */ 57936, 57936, 521, 521, 521, 521, 521, 521, 57886, 57886, 57886, 57886, 57886, 57886, 1138, 0, 1707, 0,
      /* 42422 */ 0, 0, 0, 1714, 0, 0, 0, 0, 0, 0, 0, 0, 3170, 0, 0, 0, 0, 0, 0, 521, 521, 521, 521, 521, 521, 521, 521,
      /* 42449 */ 521, 521, 3182, 521, 3185, 521, 521, 521, 521, 59535, 57936, 59537, 57936, 57936, 57936, 57936, 57936,
      /* 42466 */ 57936, 57936, 57936, 57936, 57936, 59547, 59548, 59550, 57936, 57936, 57936, 57936, 57936, 57936, 57936,
      /* 42481 */ 59558, 59559, 57936, 57936, 59561, 57936, 57936, 59564, 59565, 57936, 57936, 57936, 57936, 57936, 57936,
      /* 42496 */ 57936, 59573, 57936, 59575, 57936, 59578, 57936, 57936, 57936, 57936, 57936, 59586, 57936, 57936, 59588,
      /* 42511 */ 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 521, 1926, 521, 2258, 521, 57886, 59369,
      /* 42527 */ 57886, 59607, 57886, 2265, 0, 2266, 0, 0, 0, 0, 2268, 0, 2269, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2276, 0, 0,
      /* 42553 */ 2279, 2280, 0, 0, 0, 2284, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 42585 */ 0, 0, 2790, 0, 0, 0, 0, 2303, 0, 0, 0, 0, 2307, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 42616 */ 2323, 0, 0, 0, 0, 2327, 0, 0, 0, 0, 0, 3873, 0, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521,
      /* 42640 */ 521, 521, 521, 521, 521, 521, 521, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 58803, 57886,
      /* 42657 */ 57886, 57886, 57886, 58808, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 58816, 57886,
      /* 42672 */ 57886, 57886, 58823, 58825, 57886, 57886, 57886, 0, 2356, 0, 0, 0, 0, 0, 0, 0, 0, 2365, 0, 0, 0, 0, 0,
      /* 42695 */ 0, 0, 0, 0, 0, 0, 0, 2375, 0, 0, 0, 0, 0, 0, 0, 0, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521,
      /* 42721 */ 521, 521, 521, 875, 521, 521, 521, 521, 521, 521, 521, 57886, 57886, 57886, 2412, 521, 2414, 521, 521,
      /* 42740 */ 521, 521, 521, 521, 521, 2420, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521,
      /* 42760 */ 521, 521, 521, 521, 521, 521, 521, 1357, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521,
      /* 42780 */ 521, 521, 521, 521, 2441, 2442, 521, 521, 521, 521, 521, 521, 2449, 521, 521, 521, 521, 521, 521, 521,
      /* 42800 */ 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 1383, 521, 521, 521, 521, 521, 521, 521, 521, 521,
      /* 42820 */ 521, 521, 1400, 521, 521, 521, 2463, 521, 521, 2466, 2467, 521, 0, 0, 0, 0, 57886, 57886, 57886, 57886,
      /* 42840 */ 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 59833, 57886, 59835,
      /* 42855 */ 57886, 57886, 57886, 57886, 57886, 57886, 60585, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 42870 */ 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 60599,
      /* 42885 */ 57886, 57886, 57886, 57886, 57886, 59843, 57886, 59845, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 42900 */ 59851, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 42915 */ 57886, 57886, 57886, 57886, 60300, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 0, 0,
      /* 42931 */ 0, 0, 57886, 57886, 57886, 57886, 59896, 57886, 57886, 59899, 59900, 57886, 0, 0, 0, 0, 57909, 57909,
      /* 42949 */ 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 59922,
      /* 42964 */ 57909, 57909, 57909, 57909, 57909, 57909, 58388, 57909, 57909, 57909, 0, 0, 0, 0, 57886, 57936, 57936,
      /* 42981 */ 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936,
      /* 42996 */ 521, 521, 57886, 57886, 0, 0, 0, 3862, 0, 0, 3865, 0, 0, 0, 0, 3627, 0, 0, 59924, 57909, 57909, 57909,
      /* 43018 */ 57909, 57909, 57909, 59932, 57909, 59934, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 59940, 57909,
      /* 43033 */ 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57936, 59991,
      /* 43048 */ 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936,
      /* 43063 */ 57936, 60707, 57936, 57936, 57936, 57936, 521, 521, 521, 57886, 57886, 57886, 0, 0, 0, 0, 0, 60007,
      /* 43081 */ 57936, 57936, 57936, 57936, 57936, 57936, 60015, 57936, 60017, 57936, 57936, 57936, 57936, 57936, 57936,
      /* 43096 */ 57936, 60023, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936,
      /* 43111 */ 57936, 521, 521, 521, 521, 521, 57886, 57886, 57886, 57886, 57886, 2739, 2266, 0, 2740, 2269, 0, 0, 0,
      /* 43130 */ 521, 2868, 521, 521, 521, 521, 2872, 521, 521, 521, 2877, 521, 521, 521, 521, 521, 521, 521, 521, 2885,
      /* 43150 */ 521, 521, 521, 521, 521, 521, 521, 2890, 521, 521, 521, 521, 521, 521, 0, 0, 0, 0, 57886, 57886, 59820,
      /* 43171 */ 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 43186 */ 57886, 57886, 57886, 57886, 58811, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 43201 */ 57886, 57886, 57886, 57886, 57886, 60259, 57886, 60261, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 43216 */ 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 60278,
      /* 43231 */ 57886, 57886, 57886, 57886, 60282, 57886, 57886, 57886, 57886, 57886, 60605, 57886, 57886, 57886, 57886,
      /* 43246 */ 57886, 57886, 57886, 57886, 57886, 57886, 57886, 0, 0, 57909, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 43262 */ 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 60319, 57909, 57909, 57909, 57909, 57909,
      /* 43277 */ 60324, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57886, 57886, 60287, 57886, 57886, 57886, 57886,
      /* 43292 */ 57886, 57886, 57886, 57886, 60295, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 60301, 57886,
      /* 43307 */ 57886, 57886, 57886, 57886, 57886, 57886, 0, 2962, 0, 0, 0, 0, 0, 1185, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 43332 */ 0, 0, 0, 367, 367, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1732, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 43364 */ 0, 0, 0, 0, 0, 0, 0, 1856, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 43388 */ 57909, 57909, 60314, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 43403 */ 57909, 57909, 57909, 60326, 57909, 60328, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 60365,
      /* 43418 */ 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57936, 57936, 57936,
      /* 43433 */ 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 61082, 57936, 57936, 57936, 57936, 57936,
      /* 43448 */ 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57909, 57909, 57909, 57909, 60362, 57909,
      /* 43463 */ 57909, 57909, 57909, 57909, 57909, 57909, 57909, 60368, 57909, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 43478 */ 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 60379, 57936, 57936, 57936, 57936, 57936, 57936,
      /* 43493 */ 57936, 57936, 58959, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 58978, 57936, 57936,
      /* 43508 */ 57936, 57936, 57936, 57936, 57936, 57936, 57936, 58988, 57936, 57936, 57936, 57936, 57936, 57936, 57936,
      /* 43523 */ 57936, 57936, 58960, 58967, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 58980, 57936, 58982,
      /* 43538 */ 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 60417, 57936, 57936,
      /* 43553 */ 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936,
      /* 43568 */ 57936, 57936, 60424, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936,
      /* 43583 */ 57936, 57936, 57936, 57936, 57936, 60410, 57936, 57936, 57936, 57936, 60414, 57936, 57936, 57936, 60419,
      /* 43598 */ 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 60427, 57936, 57936, 57936, 57936, 57936, 57936,
      /* 43613 */ 57936, 57936, 521, 521, 521, 521, 521, 57886, 57886, 57886, 57886, 57886, 0, 0, 0, 0, 0, 3103, 0, 0,
      /* 43633 */ 3106, 3107, 0, 0, 3110, 3111, 60433, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 521, 521, 521,
      /* 43650 */ 521, 521, 57886, 57886, 57886, 57886, 57886, 301, 305, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6275072, 0,
      /* 43673 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 728, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 43707 */ 3140, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 278528, 0,
      /* 43739 */ 0, 0, 0, 0, 0, 3167, 3168, 0, 0, 0, 0, 0, 0, 0, 0, 0, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521,
      /* 43765 */ 521, 521, 521, 521, 521, 521, 3189, 60580, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 43781 */ 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 60593, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 43796 */ 57886, 57886, 57886, 57886, 57886, 57886, 57886, 60600, 57909, 57909, 57909, 60629, 57909, 57909, 57909,
      /* 43811 */ 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 60642, 57909,
      /* 43826 */ 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 58925, 57909, 57909, 57909,
      /* 43841 */ 57909, 57909, 58933, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 0, 57886, 57936, 57936, 57936,
      /* 43856 */ 57936, 57909, 57909, 60649, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 43871 */ 57909, 57909, 57909, 57909, 57909, 57909, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936,
      /* 43886 */ 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 60678, 57936, 57936, 57936,
      /* 43901 */ 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 60691, 57936,
      /* 43916 */ 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 60044, 57936, 57936, 57936,
      /* 43931 */ 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936,
      /* 43946 */ 57936, 521, 57886, 3937, 0, 3939, 0, 0, 0, 0, 0, 3627, 3943, 0, 3945, 57936, 57936, 57936, 60698, 57936,
      /* 43966 */ 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936,
      /* 43981 */ 57936, 521, 521, 521, 57886, 57886, 57886, 0, 0, 0, 0, 0, 0, 0, 2368, 521, 521, 521, 521, 521, 521, 521,
      /* 44003 */ 521, 521, 521, 521, 2398, 521, 521, 2401, 521, 521, 521, 521, 521, 521, 2409, 521, 521, 3403, 0, 0, 0,
      /* 44024 */ 0, 3405, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3419, 0, 0, 0, 0, 3424, 3425, 0, 3427, 0, 0, 0, 0,
      /* 44054 */ 0, 1197, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1286, 0, 0, 0, 0, 1314, 0, 0, 0, 0, 0, 0, 521, 521, 521, 521, 521,
      /* 44082 */ 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 3452, 521, 521,
      /* 44102 */ 521, 521, 3430, 0, 0, 0, 3433, 521, 521, 521, 521, 521, 521, 3440, 521, 521, 521, 521, 521, 3444, 521,
      /* 44123 */ 521, 521, 521, 521, 521, 521, 3450, 521, 521, 521, 521, 521, 3456, 60828, 57886, 57886, 57886, 57886,
      /* 44141 */ 57886, 57886, 57886, 60834, 57886, 57886, 57886, 57886, 57886, 60840, 57886, 57886, 60843, 57886, 57886,
      /* 44156 */ 57886, 57886, 57886, 57886, 57886, 57886, 60850, 60852, 57886, 57886, 57886, 57886, 57886, 57886, 58282,
      /* 44171 */ 58284, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 0, 57909, 57909,
      /* 44186 */ 58327, 57909, 57909, 57909, 57909, 57909, 57909, 58358, 58360, 57909, 60856, 57886, 60858, 60859, 57886,
      /* 44201 */ 57909, 57909, 57909, 57909, 57909, 57909, 60866, 57909, 57909, 57909, 57909, 57909, 60870, 57909, 57909,
      /* 44216 */ 57909, 57909, 57909, 57909, 57909, 60876, 57909, 57909, 57909, 57909, 57909, 60882, 57909, 57909, 60885,
      /* 44231 */ 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 60892, 60894, 57909, 57909, 57909, 57909, 60898,
      /* 44246 */ 57909, 60900, 60901, 57909, 57936, 57936, 57936, 57936, 57936, 57936, 60908, 57936, 57936, 57936, 57936,
      /* 44261 */ 57936, 57936, 57936, 57936, 57936, 57936, 61200, 57936, 57936, 57936, 521, 521, 57886, 57886, 0, 0, 0,
      /* 44278 */ 0, 0, 0, 0, 0, 3866, 3867, 0, 3627, 0, 3871, 57936, 57936, 60912, 57936, 57936, 57936, 57936, 57936,
      /* 44297 */ 57936, 57936, 60918, 57936, 57936, 57936, 57936, 57936, 60924, 57936, 57936, 60927, 57936, 57936, 57936,
      /* 44312 */ 57936, 57936, 57936, 57936, 57936, 60934, 60936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936,
      /* 44327 */ 59000, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936,
      /* 44342 */ 59020, 57936, 57936, 57936, 57936, 57936, 59028, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936,
      /* 44357 */ 59542, 57936, 57936, 57936, 59546, 57936, 57936, 59551, 57936, 57936, 57936, 57936, 57936, 57936, 57936,
      /* 44372 */ 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 60048, 57936, 57936, 57936, 57936, 57936,
      /* 44387 */ 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 60940, 57936, 60942,
      /* 44402 */ 60943, 57936, 521, 521, 3602, 57886, 57886, 60949, 0, 0, 0, 0, 0, 0, 3611, 0, 0, 3614, 0, 0, 0, 0, 0, 0,
      /* 44426 */ 0, 0, 0, 521, 521, 521, 521, 521, 521, 521, 3649, 3650, 521, 521, 521, 521, 3654, 3655, 521, 521, 521,
      /* 44447 */ 521, 521, 3659, 521, 521, 521, 521, 3662, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521,
      /* 44467 */ 521, 521, 57886, 57886, 57886, 61018, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 61023, 57886,
      /* 44482 */ 57886, 57886, 57886, 57886, 57886, 60833, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 60841,
      /* 44497 */ 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 44512 */ 60855, 57909, 57909, 57909, 57909, 57909, 57909, 61052, 57909, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 44527 */ 57909, 57909, 57909, 57909, 57909, 57909, 57909, 61063, 57909, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 44542 */ 57909, 61071, 57909, 57909, 57909, 57909, 57909, 57909, 58914, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 44557 */ 57909, 57909, 57909, 57909, 58930, 57909, 57909, 57909, 57909, 57909, 57909, 58941, 57909, 0, 57886,
      /* 44572 */ 57936, 57936, 57936, 57936, 57936, 521, 521, 521, 521, 521, 521, 57886, 57886, 57886, 57886, 57886,
      /* 44588 */ 57886, 1138, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 367, 367, 367, 0, 0, 0, 303104, 0, 0, 0, 0, 0, 0,
      /* 44617 */ 0, 0, 0, 0, 0, 57886, 57886, 61240, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 44634 */ 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 61256, 57909, 57909, 57909, 57909, 57909,
      /* 44649 */ 57909, 57909, 57909, 57909, 57936, 57936, 57936, 61076, 57936, 57936, 57936, 57936, 57936, 57936, 57936,
      /* 44664 */ 61081, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936,
      /* 44679 */ 61092, 57886, 57886, 57886, 61440, 57886, 61442, 57886, 57886, 57886, 57886, 61447, 61448, 61449, 61450,
      /* 44694 */ 57909, 57909, 57909, 61453, 57909, 61455, 57909, 57909, 57909, 57909, 61460, 61461, 61462, 61463, 57936,
      /* 44709 */ 57936, 57936, 61466, 57936, 61468, 57936, 57936, 57936, 57936, 61473, 0, 0, 0, 0, 0, 0, 0, 521, 521,
      /* 44728 */ 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 44745 */ 57886, 61031, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 44760 */ 57886, 57886, 57886, 57886, 57886, 57909, 57909, 57909, 57909, 57909, 61392, 57909, 57909, 57909, 57909,
      /* 44775 */ 57909, 57909, 57909, 57909, 57909, 57909, 57936, 57936, 57936, 57936, 57936, 61406, 57936, 57936, 57936,
      /* 44790 */ 61535, 57936, 0, 0, 0, 521, 521, 521, 521, 521, 521, 57886, 57886, 57886, 57886, 57886, 57886, 57909,
      /* 44808 */ 57909, 57909, 57909, 57909, 57909, 57936, 57936, 57936, 57936, 57936, 57936, 0, 0, 0, 521, 521, 521,
      /* 44825 */ 521, 521, 521, 57886, 57886, 57886, 57886, 57886, 57886, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 44840 */ 57936, 57936, 57936, 57936, 57936, 57936, 0, 0, 0, 521, 521, 521, 521, 4198, 521, 57886, 57886, 57886,
      /* 44858 */ 57886, 61546, 57886, 57909, 57909, 57909, 57909, 61550, 57909, 57936, 57936, 57936, 57936, 61554, 57936,
      /* 44873 */ 0, 371, 371, 0, 429, 131072, 371, 429, 429, 332, 371, 429, 0, 0, 429, 449, 429, 0, 0, 0, 429, 488, 488,
      /* 44896 */ 488, 493, 488, 488, 488, 493, 488, 429, 429, 429, 429, 429, 429, 429, 429, 429, 429, 429, 429, 429, 429,
      /* 44917 */ 429, 527, 57893, 527, 57893, 527, 527, 57893, 527, 527, 57916, 57893, 527, 527, 57893, 57893, 57893,
      /* 44934 */ 57916, 57893, 57893, 57893, 57893, 57893, 57893, 57893, 57916, 57916, 57893, 57893, 57943, 57893, 57893,
      /* 44949 */ 57893, 57893, 57893, 57893, 57893, 57943, 57943, 57893, 57893, 57893, 57893, 57943, 57943, 57893, 527,
      /* 44964 */ 57893, 57893, 57893, 1, 24578, 3, 155941, 155941, 295, 0, 0, 0, 0, 0, 301, 302, 0, 0, 305, 306, 0, 0, 0,
      /* 44987 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6275072, 0, 0, 0, 0, 0, 0, 0, 0, 4399798, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 45018 */ 0, 0, 773, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 773, 0, 0, 0,
      /* 45051 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 773, 0, 0, 0, 521, 828, 521, 521, 521, 521, 521, 521, 860,
      /* 45078 */ 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 57886, 57886, 58246, 1295, 0, 0, 0, 0, 0, 0,
      /* 45100 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 521, 521, 521, 521, 521, 521, 521, 521,
      /* 45128 */ 2839, 521, 521, 521, 521, 521, 521, 1326, 521, 521, 521, 521, 521, 1338, 521, 521, 521, 521, 521, 521,
      /* 45148 */ 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 2430, 521, 521,
      /* 45168 */ 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 58754, 901, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 45186 */ 57886, 57886, 58765, 57886, 57886, 57886, 57886, 57886, 58777, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 45201 */ 57886, 57886, 57886, 57886, 57886, 57886, 59381, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 45216 */ 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 61041, 57886, 57886, 57886,
      /* 45231 */ 57886, 57886, 57886, 57886, 57909, 57909, 57909, 57909, 57909, 57936, 57936, 57936, 57936, 58954, 57936,
      /* 45246 */ 57936, 57936, 57936, 57936, 58966, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936,
      /* 45261 */ 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 521, 521, 521, 57886,
      /* 45276 */ 57886, 57886, 0, 3375, 0, 0, 0, 57909, 57909, 57909, 59954, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 45293 */ 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 45308 */ 57909, 57909, 57909, 57909, 57909, 57909, 57909, 60355, 57909, 57909, 57909, 57936, 57936, 57936, 60037,
      /* 45323 */ 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936,
      /* 45338 */ 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 59026, 57936,
      /* 45353 */ 57936, 57936, 0, 0, 4212, 521, 521, 521, 61558, 57886, 57886, 57886, 61560, 57909, 57909, 57909, 61562,
      /* 45370 */ 57936, 57936, 57936, 0, 521, 521, 57886, 57886, 57909, 57909, 57936, 57936, 521, 57886, 57909, 57936,
      /* 45386 */ 521, 521, 521, 521, 521, 521, 521, 521, 3793, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521,
      /* 45406 */ 521, 521, 521, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 60607, 57886,
      /* 45421 */ 57886, 60610, 57886, 57886, 60613, 0, 0, 60614, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 45437 */ 57909, 57909, 57909, 57909, 57909, 60637, 60638, 57909, 57909, 57909, 57909, 60641, 57909, 57909, 57909,
      /* 45452 */ 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 60647, 0, 0, 0, 430, 131072, 0, 430, 430, 0, 0,
      /* 45471 */ 430, 439, 0, 430, 0, 430, 469, 469, 469, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482,
      /* 45492 */ 482, 482, 482, 528, 57894, 528, 57894, 528, 528, 57894, 528, 528, 57917, 57894, 528, 528, 57894, 57894,
      /* 45510 */ 57894, 57917, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57917, 57917, 57894, 57894, 57944, 57894,
      /* 45525 */ 57894, 57894, 57894, 57894, 57894, 57894, 57944, 57944, 57894, 57894, 57894, 57894, 57944, 57944, 57894,
      /* 45540 */ 528, 57894, 57894, 57894, 1, 24578, 3, 155941, 155941, 295, 0, 0, 0, 0, 0, 301, 302, 0, 0, 305, 306, 0,
      /* 45562 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6275072, 0, 0, 0, 0, 0, 0, 0, 367, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 45594 */ 0, 521, 58754, 1961, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 45610 */ 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 45625 */ 57886, 57886, 0, 0, 2561, 0, 50657, 2061, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 45642 */ 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 45657 */ 57909, 57909, 57909, 57909, 57909, 57909, 59950, 57909, 57909, 2302, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 45679 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2326, 0, 0, 0, 0, 0, 1213, 0, 1215, 0, 0, 0, 0, 0, 0, 0,
      /* 45711 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 139264, 147456, 0, 0, 0, 420, 0, 0, 0, 0, 0, 2385,
      /* 45741 */ 0, 0, 0, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521,
      /* 45763 */ 521, 521, 521, 521, 521, 1949, 521, 521, 521, 521, 521, 521, 521, 0, 3138, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 45788 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3158, 0, 0, 0, 0, 0, 0, 0, 0, 1731, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 45821 */ 0, 0, 0, 0, 0, 0, 1747, 0, 0, 1750, 0, 0, 521, 521, 521, 3213, 521, 521, 521, 521, 521, 521, 521, 521,
      /* 45845 */ 521, 521, 0, 0, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 45861 */ 57886, 57886, 57886, 57886, 50657, 58754, 977, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 45876 */ 57909, 57909, 57909, 57909, 57909, 58868, 57909, 0, 0, 3404, 0, 0, 0, 0, 0, 3407, 0, 3409, 0, 0, 3412,
      /* 45897 */ 0, 0, 0, 0, 0, 3417, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6275072, 0, 0, 0, 0, 0, 0, 0, 4399797, 4399797,
      /* 45925 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 521, 521, 521, 521, 3460, 521, 521, 521, 521, 521, 521, 521, 521, 3468,
      /* 45949 */ 521, 521, 3471, 521, 521, 521, 60818, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 45965 */ 57886, 57886, 58296, 57886, 57886, 57886, 57886, 58314, 57886, 57886, 0, 57909, 57909, 58325, 57909,
      /* 45980 */ 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57886, 60857, 57886, 57886, 57886, 60860, 57909,
      /* 45995 */ 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 46010 */ 57909, 57909, 57909, 57909, 60877, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 46025 */ 59959, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 46040 */ 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57936, 60664, 57936, 57936, 57936, 57936, 57936, 57936,
      /* 46055 */ 57936, 57936, 57936, 57936, 57909, 57909, 57909, 57909, 57909, 60887, 57909, 57909, 57909, 57909, 57909,
      /* 46070 */ 57909, 57909, 57909, 57909, 60896, 57909, 57909, 60899, 57909, 57909, 57909, 60902, 57936, 57936, 57936,
      /* 46085 */ 57936, 57936, 57936, 57936, 57936, 57936, 0, 0, 0, 0, 0, 0, 0, 521, 521, 521, 521, 521, 521, 521, 521,
      /* 46106 */ 521, 521, 521, 4089, 521, 57886, 57886, 57886, 60938, 57936, 57936, 60941, 57936, 57936, 57936, 521,
      /* 46122 */ 521, 521, 57886, 57886, 57886, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3615, 0, 0, 0, 0, 0, 0, 0, 393, 0, 0,
      /* 46150 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3159, 3160, 0, 0, 0, 0, 0, 521,
      /* 46181 */ 521, 521, 521, 3663, 521, 3665, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 57886, 57886, 61017,
      /* 46200 */ 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 59850, 57886, 57886,
      /* 46215 */ 57886, 57886, 57886, 57886, 57886, 57886, 59857, 57886, 59859, 57886, 59862, 57886, 57886, 57886, 57886,
      /* 46230 */ 57886, 57886, 57886, 57886, 57886, 57886, 61029, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 46245 */ 61035, 57886, 61037, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57909,
      /* 46260 */ 57909, 61046, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 58917, 57909, 57909, 57909, 57909, 57909,
      /* 46275 */ 57909, 57909, 57909, 57909, 57909, 57909, 58934, 57909, 57909, 57909, 57909, 57909, 57909, 0, 57886,
      /* 46290 */ 57936, 57936, 57936, 58949, 57936, 61093, 57936, 61095, 57936, 57936, 57936, 57936, 57936, 57936, 57936,
      /* 46305 */ 57936, 57936, 57936, 57936, 521, 521, 521, 57886, 57886, 57886, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 46328 */ 0, 0, 0, 0, 0, 0, 521, 521, 521, 521, 521, 521, 3791, 521, 521, 521, 521, 521, 521, 521, 521, 3797, 521,
      /* 46351 */ 521, 521, 521, 521, 521, 521, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 46367 */ 58804, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 46382 */ 57886, 58819, 57886, 57886, 57886, 57886, 57886, 57886, 61153, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 46397 */ 57886, 57886, 57886, 61159, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57909, 57909, 57909,
      /* 46412 */ 57909, 57909, 57909, 57909, 57909, 57909, 57909, 61172, 57909, 57909, 57909, 57909, 57909, 57909, 58915,
      /* 46427 */ 57909, 57909, 58922, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 58936, 57909,
      /* 46442 */ 57909, 57909, 57909, 57909, 0, 57886, 57936, 57936, 57936, 57936, 57936, 521, 1336, 521, 521, 521, 521,
      /* 46459 */ 58775, 57886, 57886, 57886, 57886, 57886, 1138, 0, 0, 0, 0, 1711, 0, 0, 0, 0, 1718, 0, 0, 0, 0, 0, 0,
      /* 46482 */ 1247, 1248, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1155, 1154, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2799, 0, 0, 0,
      /* 46512 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3630, 0, 0, 0, 0, 0, 0, 0, 3637, 0, 0, 57936,
      /* 46542 */ 57936, 57936, 57936, 57936, 61197, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 521, 521,
      /* 46557 */ 57886, 57886, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3627, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3782, 0,
      /* 46587 */ 0, 521, 521, 521, 521, 0, 0, 0, 0, 683, 684, 0, 0, 0, 0, 689, 0, 0, 0, 367, 367, 367, 0, 0, 0, 0, 0, 0,
      /* 46615 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 530, 57896, 530, 57896, 530, 530, 57896, 530, 530, 57919, 57896, 530, 530,
      /* 46637 */ 57896, 57896, 57896, 57919, 57886, 58258, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 46652 */ 57886, 57886, 57886, 57886, 57886, 57886, 57886, 58317, 0, 57909, 57909, 57909, 57909, 58334, 57909,
      /* 46667 */ 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 59481, 57909, 57909, 57909, 57909,
      /* 46682 */ 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 46697 */ 57886, 57936, 57936, 57936, 57936, 58468, 521, 839, 521, 521, 521, 898, 0, 58258, 57886, 57886, 57886,
      /* 46714 */ 57886, 58317, 155941, 1138, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1219, 1220, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 46741 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6299648, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5808128, 0, 0, 0, 1211, 0, 0,
      /* 46771 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1230, 0, 0, 0, 0, 0, 0, 0, 0, 0, 521, 521, 521, 3647,
      /* 46801 */ 521, 521, 521, 521, 521, 521, 521, 3652, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 2421,
      /* 46821 */ 521, 521, 521, 2424, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521,
      /* 46841 */ 2895, 0, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 46856 */ 57886, 57886, 57886, 60842, 57886, 60844, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 46871 */ 57886, 57886, 57886, 57886, 0, 0, 1839, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1853, 0, 0, 0,
      /* 46898 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 1307, 1308, 0, 0, 1154, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 521, 1319, 521, 521,
      /* 46927 */ 521, 1958, 58754, 0, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 46943 */ 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 46958 */ 57886, 57886, 0, 2962, 0, 0, 386, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 401, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 46988 */ 0, 0, 0, 0, 0, 0, 0, 0, 412, 0, 0, 0, 0, 0, 0, 412, 139264, 147456, 0, 0, 0, 421, 0, 333, 0, 0, 0, 0, 0,
      /* 47017 */ 0, 0, 0, 0, 0, 0, 0, 333, 0, 0, 0, 0, 0, 0, 0, 0, 333, 0, 0, 139264, 147456, 0, 0, 0, 0, 0, 0, 0, 2773,
      /* 47046 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3634, 0, 0, 0, 0, 0, 0, 424,
      /* 47079 */ 424, 0, 0, 131072, 424, 0, 0, 0, 424, 0, 440, 0, 0, 424, 334, 470, 470, 470, 483, 483, 483, 483, 483,
      /* 47102 */ 483, 483, 483, 483, 483, 504, 512, 512, 512, 512, 519, 512, 512, 512, 519, 512, 512, 512, 512, 512, 512,
      /* 47123 */ 529, 57895, 529, 57895, 529, 529, 57895, 529, 529, 57918, 57895, 529, 529, 57895, 57895, 57895, 57918,
      /* 47140 */ 57895, 57895, 57895, 57895, 57895, 57895, 57895, 57918, 57918, 57895, 57895, 57945, 57895, 57895, 57895,
      /* 47155 */ 57895, 57895, 57895, 57895, 57945, 57945, 57895, 57895, 57895, 57895, 57945, 57945, 57895, 529, 57895,
      /* 47170 */ 57895, 57895, 1, 24578, 3, 155941, 155941, 295, 0, 0, 0, 0, 0, 301, 302, 0, 0, 305, 306, 0, 0, 0, 0, 0,
      /* 47194 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 1734, 0, 0, 0, 0, 0, 0, 0, 0, 1741, 0, 0, 1744, 1745, 1746, 0, 1748, 1749, 0,
      /* 47222 */ 0, 0, 822, 0, 0, 0, 0, 0, 0, 0, 521, 521, 521, 521, 842, 521, 851, 521, 521, 521, 521, 521, 521, 521,
      /* 47246 */ 521, 521, 521, 521, 521, 521, 899, 57886, 57886, 57886, 57886, 57886, 57886, 61244, 57886, 57886, 57886,
      /* 47263 */ 61248, 57886, 57909, 57909, 57909, 57909, 57909, 57909, 61254, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 47278 */ 61260, 57909, 57909, 57909, 61264, 57909, 57936, 57886, 57886, 58261, 57886, 58270, 57886, 57886, 57886,
      /* 47293 */ 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 58318, 0, 57909, 57909, 57909,
      /* 47308 */ 57909, 57909, 58337, 57909, 58346, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 58887,
      /* 47323 */ 58889, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 47338 */ 57909, 57909, 57909, 57909, 57909, 57909, 57909, 60661, 57909, 57936, 57936, 57936, 57936, 57936, 57936,
      /* 47353 */ 57936, 57936, 60669, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 58469, 521, 521, 521, 521, 1130,
      /* 47369 */ 899, 0, 57886, 57886, 57886, 57886, 58480, 58318, 155941, 1138, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 47391 */ 1764, 1765, 1766, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2319, 2320, 0, 0, 0, 0, 0, 0,
      /* 47421 */ 0, 0, 0, 0, 0, 521, 521, 521, 521, 521, 521, 1331, 521, 521, 521, 521, 521, 521, 521, 521, 521, 1350,
      /* 47443 */ 521, 521, 521, 521, 521, 521, 521, 521, 521, 1360, 521, 521, 521, 521, 521, 521, 0, 0, 0, 0, 57886,
      /* 47464 */ 57886, 57886, 57886, 57886, 57886, 57886, 59825, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 47479 */ 57886, 57886, 57886, 59837, 57886, 57886, 521, 1408, 521, 58754, 901, 57886, 57886, 57886, 57886, 57886,
      /* 47495 */ 57886, 57886, 57886, 57886, 57886, 57886, 57886, 58770, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 47510 */ 57886, 57886, 58789, 57886, 57886, 57886, 57886, 57886, 57886, 59342, 59343, 57886, 57886, 57886, 57886,
      /* 47525 */ 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 47540 */ 57886, 57886, 57886, 57886, 57886, 57886, 59360, 57886, 57886, 57886, 57886, 57886, 59367, 57886, 57886,
      /* 47555 */ 58833, 57886, 57886, 57886, 57886, 57886, 58840, 57886, 57886, 57886, 58847, 57886, 50657, 58754, 977,
      /* 47570 */ 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 58865, 57909, 57909,
      /* 47585 */ 57909, 57909, 57909, 57909, 57909, 58919, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 47600 */ 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 0, 57886, 57936, 57936, 57936, 57936,
      /* 47615 */ 57936, 57936, 57936, 57936, 57936, 57936, 60042, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936,
      /* 47630 */ 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 521, 521,
      /* 47645 */ 3370, 57886, 57886, 60717, 0, 0, 0, 0, 0, 57936, 57936, 57936, 59037, 57936, 521, 521, 521, 521, 521,
      /* 47664 */ 521, 57886, 57886, 57886, 57886, 57886, 57886, 1138, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1796, 0,
      /* 47688 */ 0, 0, 0, 0, 0, 0, 1803, 0, 1805, 0, 0, 0, 1807, 0, 739, 0, 0, 0, 0, 1838, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 47718 */ 0, 0, 0, 0, 0, 1850, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1836, 1924, 521, 521, 521, 521, 521, 521,
      /* 47746 */ 521, 521, 1933, 521, 521, 521, 521, 521, 521, 1942, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521,
      /* 47766 */ 1952, 1954, 521, 521, 521, 0, 0, 0, 0, 0, 0, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 47785 */ 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 47800 */ 57886, 57886, 59861, 57886, 57886, 57886, 57886, 57886, 57886, 521, 58754, 0, 57886, 57886, 57886,
      /* 47815 */ 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 47830 */ 57886, 57886, 59328, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 61033, 57886,
      /* 47845 */ 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 47860 */ 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57936,
      /* 47875 */ 57936, 57936, 57936, 57936, 57936, 57936, 50657, 0, 57909, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 47890 */ 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 59428, 57909,
      /* 47905 */ 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 0, 0, 0, 0, 57886, 57936, 57936, 58397,
      /* 47922 */ 57936, 57936, 57936, 57936, 57936, 57936, 58430, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936,
      /* 47937 */ 57936, 57936, 57936, 57936, 57936, 59572, 57936, 57936, 57936, 57936, 57936, 57936, 59581, 57936, 57936,
      /* 47952 */ 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 59592, 59594, 57936, 57936, 57936, 57936, 521,
      /* 47967 */ 521, 521, 0, 0, 2472, 0, 0, 0, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 47985 */ 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 59885, 57886,
      /* 48000 */ 57886, 57886, 57886, 59889, 57886, 57886, 57886, 2329, 0, 0, 0, 0, 0, 0, 0, 0, 2337, 0, 0, 0, 0, 0, 0,
      /* 48023 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3128, 0, 0, 0, 0, 0, 0, 0, 0, 521, 521, 2465, 521,
      /* 48053 */ 521, 521, 0, 0, 0, 0, 57886, 57886, 57886, 57886, 57886, 57886, 59824, 57886, 57886, 57886, 57886,
      /* 48070 */ 57886, 57886, 57886, 57886, 57886, 57886, 57886, 59836, 57886, 57886, 57886, 57886, 57886, 57886, 61492,
      /* 48085 */ 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 61500, 57936, 57936,
      /* 48100 */ 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 59583, 59584, 57936,
      /* 48115 */ 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 2255, 521,
      /* 48130 */ 59925, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 48145 */ 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 48160 */ 57909, 57909, 60358, 59953, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 48175 */ 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 59972, 57909, 57909,
      /* 48190 */ 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 59935, 57909, 59937, 57909, 57909, 57909,
      /* 48205 */ 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 48220 */ 60660, 57909, 57909, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 60671, 57936,
      /* 48235 */ 60008, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936,
      /* 48250 */ 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936,
      /* 48265 */ 57936, 57936, 59598, 521, 521, 60036, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936,
      /* 48280 */ 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 60055,
      /* 48295 */ 57936, 57936, 57936, 57936, 57936, 57936, 57936, 0, 0, 0, 0, 0, 4132, 0, 521, 521, 521, 521, 521, 521,
      /* 48315 */ 521, 521, 521, 521, 521, 521, 57886, 57886, 57886, 57886, 57886, 57886, 0, 0, 0, 2769, 0, 0, 2772, 0, 0,
      /* 48336 */ 0, 0, 0, 0, 2776, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2787, 0, 0, 0, 0, 0, 0, 0, 394, 0, 0, 0, 0, 0, 0, 0,
      /* 48368 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 319488, 319488, 0, 0, 0, 0, 0, 0, 2795, 0, 0, 0,
      /* 48398 */ 0, 2797, 0, 0, 0, 0, 0, 0, 0, 2801, 2802, 0, 0, 2805, 0, 0, 2808, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1161, 0,
      /* 48427 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 315, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2818, 0,
      /* 48460 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2828, 0, 0, 0, 0, 521, 2832, 521, 521, 521, 521, 521, 521, 521, 521,
      /* 48487 */ 521, 521, 521, 2878, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521,
      /* 48507 */ 521, 521, 521, 521, 1356, 521, 521, 521, 1359, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521,
      /* 48527 */ 521, 521, 2873, 521, 521, 521, 521, 521, 521, 2880, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521,
      /* 48547 */ 2888, 521, 521, 521, 2891, 521, 521, 521, 0, 0, 0, 0, 0, 0, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 48567 */ 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 60253, 57886, 57886, 57886,
      /* 48582 */ 57886, 57886, 57886, 57886, 61493, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 48597 */ 57909, 57909, 61501, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936,
      /* 48612 */ 57936, 60921, 57936, 60923, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 60930, 57936, 57936, 60932,
      /* 48627 */ 57936, 57936, 57936, 57936, 57936, 0, 0, 57909, 60308, 57909, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 48643 */ 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 48658 */ 57909, 57909, 57909, 57909, 57909, 60331, 57936, 57936, 60407, 57936, 57936, 57936, 57936, 57936, 57936,
      /* 48673 */ 57936, 60415, 57936, 57936, 57936, 57936, 57936, 57936, 60422, 57936, 57936, 57936, 57936, 57936, 57936,
      /* 48688 */ 57936, 57936, 57936, 57936, 57936, 60431, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 59574,
      /* 48703 */ 57936, 57936, 57936, 59580, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 59590, 57936,
      /* 48718 */ 57936, 57936, 57936, 59596, 57936, 57936, 521, 521, 521, 0, 901, 57886, 57886, 57886, 57886, 57886,
      /* 48734 */ 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 48749 */ 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 59864, 57886, 57886, 57886, 57936, 60434, 57936,
      /* 48764 */ 57936, 57936, 57936, 57936, 57936, 3094, 521, 521, 521, 521, 60441, 57886, 57886, 57886, 57886, 0, 0, 0,
      /* 48782 */ 0, 3102, 0, 0, 0, 0, 0, 0, 0, 0, 0, 521, 521, 3646, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521,
      /* 48806 */ 521, 521, 521, 521, 521, 521, 3658, 521, 521, 521, 3112, 0, 0, 0, 0, 0, 0, 0, 3116, 0, 0, 0, 0, 0, 0, 0,
      /* 48832 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 3130, 3131, 0, 0, 0, 0, 0, 0, 0, 3143, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 48864 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 333, 334, 335, 0, 0, 0, 0, 0, 3211, 521, 521, 521, 521, 521, 521, 521,
      /* 48891 */ 3215, 521, 521, 521, 521, 521, 0, 0, 57886, 57886, 57886, 60567, 57886, 57886, 57886, 57886, 57886,
      /* 48908 */ 60572, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 61246, 57886, 57886, 57886, 61249, 57909,
      /* 48923 */ 57909, 57909, 57909, 61253, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 61262, 57909,
      /* 48938 */ 57909, 57909, 61265, 60601, 57886, 60603, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 60608,
      /* 48953 */ 57886, 57886, 57886, 57886, 57886, 0, 0, 57909, 57909, 57909, 60616, 57909, 57909, 57909, 57909, 57909,
      /* 48969 */ 60621, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 60654, 57909, 57909, 57909, 57909, 57909,
      /* 48984 */ 57909, 57909, 57909, 57909, 57909, 57909, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936,
      /* 48999 */ 57936, 57936, 57936, 57936, 57936, 57936, 57936, 61086, 57936, 57936, 57936, 57936, 57936, 57936, 57936,
      /* 49014 */ 57936, 57936, 57936, 57909, 57909, 57909, 60650, 57909, 60652, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 49029 */ 57909, 57909, 60657, 57909, 57909, 57909, 57909, 57909, 57936, 57936, 57936, 60665, 57936, 57936, 57936,
      /* 49044 */ 57936, 57936, 60670, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 60041, 57936, 57936, 57936,
      /* 49059 */ 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 60054, 57936, 57936, 57936, 57936,
      /* 49074 */ 57936, 60058, 60059, 60060, 57936, 60696, 57936, 57936, 57936, 60699, 57936, 60701, 57936, 57936, 57936,
      /* 49089 */ 57936, 57936, 57936, 57936, 57936, 60706, 57936, 57936, 57936, 57936, 57936, 521, 521, 521, 57886,
      /* 49104 */ 57886, 57886, 3374, 0, 0, 3377, 3378, 521, 521, 521, 521, 521, 521, 3462, 521, 521, 521, 521, 521, 521,
      /* 49124 */ 521, 521, 521, 521, 521, 521, 521, 57886, 57886, 57886, 57886, 60822, 57886, 57886, 57886, 57886, 60826,
      /* 49141 */ 57886, 57886, 57886, 57886, 57886, 58835, 57886, 57886, 57886, 57886, 57886, 57886, 58846, 57886, 50657,
      /* 49156 */ 58754, 977, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 58862, 57909, 57909,
      /* 49171 */ 57909, 57909, 57909, 57909, 57909, 57909, 57909, 58394, 0, 0, 0, 0, 57886, 57936, 57936, 57936, 57936,
      /* 49188 */ 57936, 58412, 57936, 58421, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 0, 0, 0, 0,
      /* 49205 */ 0, 0, 0, 521, 521, 521, 521, 521, 521, 521, 4085, 521, 4087, 521, 521, 521, 57886, 57886, 57886, 57936,
      /* 49225 */ 57936, 57936, 57936, 57936, 57936, 57936, 60916, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936,
      /* 49240 */ 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 60931, 57936, 57936, 57936, 57936, 57936, 57936,
      /* 49255 */ 57936, 521, 521, 521, 57886, 57886, 57886, 0, 0, 0, 3608, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 49281 */ 1194, 0, 1196, 0, 0, 367, 367, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3619, 3620, 0, 0, 0, 0, 0, 0, 0,
      /* 49310 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3633, 0, 0, 0, 0, 0, 0, 0, 0, 1793, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 49343 */ 0, 0, 0, 1806, 0, 0, 0, 0, 0, 0, 0, 0, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521,
      /* 49368 */ 521, 521, 521, 521, 521, 521, 521, 521, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 60825, 57886,
      /* 49385 */ 57886, 57886, 57886, 521, 521, 3787, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521,
      /* 49404 */ 521, 3798, 521, 521, 521, 521, 521, 57886, 57886, 57886, 57886, 57886, 57886, 61149, 57886, 57886,
      /* 49420 */ 57886, 57886, 57886, 58836, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 50657, 58754, 977,
      /* 49435 */ 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 58861, 57909, 57909, 57909, 58870, 57909,
      /* 49450 */ 57936, 57936, 57936, 57936, 57936, 57936, 57936, 61198, 57936, 57936, 57936, 57936, 57936, 57936, 521,
      /* 49465 */ 521, 57886, 57886, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3627, 0, 0, 3777, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 49494 */ 0, 0, 0, 521, 521, 521, 521, 521, 521, 4022, 521, 521, 521, 521, 521, 521, 521, 521, 57886, 57886,
      /* 49514 */ 57886, 57886, 57886, 57886, 61379, 0, 521, 521, 521, 521, 521, 521, 521, 521, 3955, 521, 3957, 3958,
      /* 49532 */ 521, 3960, 521, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 61314, 57886, 61316, 61317,
      /* 49547 */ 57886, 61319, 57886, 61321, 61488, 57886, 61489, 57886, 57886, 57886, 57886, 57909, 57909, 57909, 57909,
      /* 49562 */ 57909, 57909, 61496, 57909, 61497, 57909, 57909, 57909, 57909, 57936, 57936, 57936, 57936, 57936, 57936,
      /* 49577 */ 61504, 57936, 61505, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 58961, 57936, 57936,
      /* 49592 */ 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936,
      /* 49607 */ 57936, 57936, 57936, 57936, 57936, 59019, 57936, 57936, 59023, 57936, 57936, 57936, 57936, 57936, 59030,
      /* 49622 */ 0, 0, 521, 521, 521, 521, 57886, 57886, 57886, 57886, 57909, 57909, 57909, 57909, 57936, 57936, 57936,
      /* 49639 */ 57936, 0, 521, 521, 57886, 57886, 57909, 57909, 57936, 57936, 4224, 61569, 61570, 61571, 521, 521, 521,
      /* 49656 */ 521, 521, 521, 521, 1332, 1339, 521, 521, 521, 521, 521, 521, 521, 521, 1352, 521, 1354, 521, 521, 521,
      /* 49676 */ 521, 521, 521, 521, 521, 521, 521, 521, 521, 2422, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521,
      /* 49696 */ 521, 521, 521, 521, 521, 521, 521, 521, 521, 0, 0, 57886, 60566, 57886, 57886, 57886, 57886, 57886,
      /* 49714 */ 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 58307, 57886, 57886, 57886, 57886, 0,
      /* 49729 */ 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57896, 57896, 57896,
      /* 49744 */ 57896, 57896, 57896, 57896, 57919, 57919, 57896, 57896, 57946, 57896, 57896, 57896, 57896, 57896, 57896,
      /* 49759 */ 57896, 57946, 57946, 57896, 57896, 57896, 57896, 57946, 57946, 57896, 530, 57896, 57896, 57896, 1,
      /* 49774 */ 24578, 3, 155941, 155941, 295, 0, 0, 0, 0, 0, 301, 302, 0, 0, 305, 306, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 49801 */ 0, 0, 0, 2312, 0, 0, 0, 2315, 0, 0, 0, 0, 0, 2321, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57909, 58909, 57909,
      /* 49828 */ 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 49843 */ 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 0, 57886, 57936, 57936, 57936, 57936, 57936,
      /* 49858 */ 521, 521, 521, 521, 521, 521, 57886, 57886, 57886, 57886, 57886, 57886, 1138, 1705, 1706, 0, 0, 0, 1712,
      /* 49877 */ 1713, 0, 0, 0, 0, 0, 0, 0, 0, 687, 0, 0, 0, 0, 0, 367, 367, 367, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 49908 */ 0, 0, 1253, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521,
      /* 49934 */ 521, 521, 521, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 49949 */ 57886, 57886, 57886, 57886, 0, 383, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 339, 0, 0, 0, 0, 0, 0,
      /* 49977 */ 0, 0, 0, 0, 0, 0, 0, 0, 2366, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 367, 367, 0,
      /* 50009 */ 0, 0, 0, 0, 1162, 0, 0, 0, 0, 0, 0, 405, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 405, 0, 0, 0, 0, 0, 0, 0,
      /* 50041 */ 383, 0, 139264, 147456, 0, 405, 0, 0, 405, 0, 0, 0, 431, 131072, 0, 431, 431, 0, 0, 431, 0, 445, 431, 0,
      /* 50065 */ 431, 471, 471, 471, 484, 484, 484, 484, 484, 484, 484, 484, 484, 484, 484, 484, 484, 484, 484, 531,
      /* 50085 */ 57897, 531, 57897, 531, 531, 57897, 531, 531, 57920, 57897, 531, 531, 57897, 57897, 57897, 57920, 57897,
      /* 50102 */ 57897, 57897, 57897, 57897, 57897, 57897, 57920, 57920, 57897, 57897, 57947, 57897, 57897, 57897, 57897,
      /* 50117 */ 57897, 57897, 57897, 57947, 57947, 57897, 57897, 57897, 57897, 57947, 57947, 57897, 531, 57897, 57897,
      /* 50132 */ 57897, 1, 24578, 3, 155941, 155941, 295, 0, 0, 0, 0, 0, 301, 302, 0, 0, 305, 306, 0, 0, 0, 0, 0, 0, 0,
      /* 50157 */ 0, 0, 0, 0, 0, 0, 0, 2775, 0, 0, 0, 0, 0, 2780, 0, 2782, 2783, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1157, 0,
      /* 50187 */ 0, 0, 0, 0, 0, 0, 1159, 0, 0, 0, 0, 0, 0, 1266, 0, 0, 0, 0, 1271, 654, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 50217 */ 654, 0, 654, 0, 0, 0, 0, 813, 0, 0, 0, 654, 0, 0, 0, 0, 0, 0, 0, 0, 0, 521, 3645, 521, 521, 521, 3648,
      /* 50244 */ 521, 521, 521, 521, 521, 521, 521, 521, 521, 3656, 521, 521, 521, 521, 521, 521, 521, 0, 0, 0, 0, 733,
      /* 50266 */ 654, 0, 0, 521, 829, 521, 521, 521, 844, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 885, 521,
      /* 50287 */ 521, 521, 521, 57886, 57886, 58247, 57886, 57886, 57886, 58263, 57886, 57886, 57886, 57886, 57886,
      /* 50302 */ 57886, 57886, 57886, 57886, 57886, 58304, 57886, 57886, 57886, 57886, 0, 57909, 57909, 58323, 57909,
      /* 50317 */ 57909, 57909, 58339, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 59987, 57909,
      /* 50332 */ 57909, 57909, 57936, 57936, 57936, 57936, 57936, 57936, 59996, 57936, 57936, 57936, 57936, 57936, 57936,
      /* 50347 */ 57936, 57936, 57936, 57936, 57936, 57936, 57936, 60391, 57936, 60393, 57936, 57936, 57936, 57936, 57936,
      /* 50362 */ 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 60022, 57936, 57936, 57936,
      /* 50377 */ 57936, 57936, 57936, 57936, 57936, 60029, 57936, 60031, 57936, 60034, 57936, 57936, 57909, 57909, 57909,
      /* 50392 */ 57909, 57909, 58380, 57909, 57909, 57909, 57909, 0, 0, 0, 0, 57886, 57936, 57936, 58398, 57936, 57936,
      /* 50409 */ 57936, 58414, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 60390,
      /* 50424 */ 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936,
      /* 50439 */ 57936, 57936, 57936, 57936, 60710, 57936, 521, 521, 521, 57886, 57886, 57886, 0, 0, 0, 0, 0, 58455,
      /* 50457 */ 57936, 57936, 57936, 57936, 521, 521, 521, 885, 521, 521, 0, 57886, 57886, 57886, 58304, 57886, 57886,
      /* 50474 */ 293, 1138, 0, 0, 1142, 0, 0, 1147, 0, 0, 0, 0, 0, 0, 0, 521, 521, 521, 521, 521, 521, 521, 521, 521,
      /* 50498 */ 521, 521, 521, 521, 521, 521, 521, 3888, 521, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 50515 */ 58841, 57886, 57886, 57886, 57886, 57886, 50657, 58754, 977, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 50530 */ 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 60639, 57909, 57909, 57909, 57909, 57909,
      /* 50545 */ 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 59965, 57909, 57909, 57909,
      /* 50560 */ 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 0, 0, 0, 1154, 1155,
      /* 50577 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3133, 0, 0, 0, 0, 0,
      /* 50611 */ 0, 1155, 0, 0, 0, 0, 0, 0, 1280, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 760, 0,
      /* 50643 */ 0, 763, 0, 0, 767, 0, 0, 0, 0, 521, 521, 521, 58754, 901, 57886, 58757, 57886, 57886, 57886, 57886,
      /* 50663 */ 57886, 57886, 57886, 57886, 57886, 57886, 57886, 58771, 58778, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 50678 */ 57886, 57886, 58791, 57886, 58793, 57886, 57886, 57886, 57886, 57886, 60831, 57886, 57886, 57886, 57886,
      /* 50693 */ 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 50708 */ 60849, 57886, 60851, 57886, 57886, 57886, 57886, 57886, 57886, 58278, 57886, 57886, 57886, 57886, 57886,
      /* 50723 */ 57886, 57886, 57886, 57886, 57886, 57886, 57886, 0, 57909, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 50738 */ 57909, 57909, 58354, 57909, 57909, 58908, 57909, 58910, 57909, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 50753 */ 58923, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 58938, 57909, 57909,
      /* 50768 */ 57909, 0, 57886, 57936, 58946, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 60068, 57936,
      /* 50783 */ 57936, 60071, 60072, 57936, 2404, 521, 2731, 521, 521, 59835, 57886, 60080, 57886, 57886, 2739, 2266, 0,
      /* 50800 */ 2740, 2269, 0, 0, 0, 0, 0, 0, 4014, 0, 4016, 0, 521, 521, 521, 521, 521, 4021, 521, 521, 521, 521, 521,
      /* 50823 */ 521, 521, 521, 521, 57886, 57886, 57886, 57886, 57886, 61378, 57886, 57936, 59033, 57936, 57936, 57936,
      /* 50839 */ 521, 1332, 521, 1389, 521, 521, 58771, 57886, 57886, 58828, 57886, 57886, 1138, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 50860 */ 0, 0, 0, 0, 0, 0, 3146, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3156, 0, 0, 0, 0, 3161, 0, 0, 0, 3163, 0, 1724,
      /* 50889 */ 1725, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2342912,
      /* 50921 */ 0, 0, 0, 521, 521, 521, 521, 521, 521, 1930, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521,
      /* 50943 */ 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 1957, 521, 58754, 1961, 57886, 57886, 57886,
      /* 50962 */ 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 59321, 59322, 57886, 57886,
      /* 50977 */ 57886, 57886, 59329, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57909, 57909, 57909,
      /* 50992 */ 57909, 61391, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57936, 57936,
      /* 51007 */ 57936, 57936, 61405, 57936, 57936, 50657, 2061, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 51022 */ 57909, 57909, 57909, 57909, 57909, 57909, 59421, 59422, 57909, 57909, 57909, 57909, 59429, 57909, 57909,
      /* 51037 */ 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 0, 0, 0, 741, 57886, 57936, 57936, 57936, 57936,
      /* 51054 */ 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 59520, 57936,
      /* 51069 */ 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57909, 57909,
      /* 51084 */ 57909, 57909, 59473, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 51099 */ 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 59501, 57909, 57886,
      /* 51114 */ 57886, 57886, 57886, 57886, 60832, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 51129 */ 57886, 57886, 57886, 57886, 57886, 57886, 60847, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 51144 */ 57886, 57886, 58843, 57886, 57886, 57886, 50657, 58754, 977, 57909, 58852, 57909, 57909, 57909, 57909,
      /* 51159 */ 57909, 57909, 57909, 57909, 57909, 57909, 57909, 58866, 58873, 57936, 57936, 57936, 57936, 57936, 59540,
      /* 51174 */ 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936,
      /* 51189 */ 57936, 57936, 57936, 57936, 57936, 59560, 57936, 57936, 57936, 57936, 57936, 521, 521, 521, 521, 521,
      /* 51205 */ 521, 0, 57886, 57886, 57886, 57886, 57886, 57886, 155941, 1138, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 51227 */ 2800, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2809, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57936, 57936, 57936, 59569, 57936,
      /* 51252 */ 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936,
      /* 51267 */ 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 59597, 57936, 521, 521, 521, 0, 2895, 0, 0, 0,
      /* 51285 */ 0, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 51300 */ 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 59359, 57886, 57886, 57886, 57886,
      /* 51315 */ 57886, 57886, 57886, 0, 2330, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2346, 0, 0,
      /* 51344 */ 0, 0, 0, 0, 0, 0, 521, 521, 521, 521, 521, 521, 521, 521, 521, 2397, 521, 521, 521, 521, 521, 521, 521,
      /* 51367 */ 521, 521, 521, 521, 521, 521, 521, 0, 0, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 51385 */ 57886, 57886, 57886, 57886, 57886, 57886, 57886, 61162, 57886, 57886, 57886, 57909, 57909, 57909, 57909,
      /* 51400 */ 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 59866, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 51415 */ 57886, 57886, 57886, 57886, 57886, 57886, 57886, 59878, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 51430 */ 59884, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 59890, 57886, 57886, 57886, 57886, 57886, 61030,
      /* 51445 */ 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 61036, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 51460 */ 57886, 57886, 57886, 57886, 57886, 57886, 57909, 57909, 57909, 57909, 57909, 57909, 61393, 57909, 57909,
      /* 51475 */ 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57936, 57936, 57936, 57936, 57936, 57936, 61407, 57909,
      /* 51490 */ 57909, 57909, 57909, 59955, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 51505 */ 57909, 57909, 59967, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 59973, 57909, 57909, 57909, 57909,
      /* 51520 */ 57909, 57909, 57909, 57909, 57909, 57909, 60366, 57909, 57909, 57909, 60369, 57909, 57909, 57909, 57909,
      /* 51535 */ 57909, 57909, 57936, 60373, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 0, 0, 0, 0,
      /* 51552 */ 0, 0, 0, 521, 521, 521, 521, 4083, 521, 521, 521, 521, 521, 521, 521, 521, 57886, 57886, 57886, 57909,
      /* 51572 */ 57909, 59979, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57936, 57936,
      /* 51587 */ 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936,
      /* 51602 */ 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 60430, 57936, 57936, 57936, 57936,
      /* 51617 */ 57936, 57936, 57936, 57936, 60038, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936,
      /* 51632 */ 57936, 57936, 57936, 60050, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 60056, 57936, 57936, 57936,
      /* 51647 */ 57936, 57936, 521, 521, 521, 521, 521, 521, 0, 57886, 57886, 57886, 57886, 57886, 57886, 155941, 1138,
      /* 51664 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 1149, 0, 0, 57936, 57936, 60062, 57936, 57936, 57936, 57936, 57936, 57936,
      /* 51685 */ 57936, 57936, 57936, 57936, 57936, 521, 521, 521, 521, 521, 57886, 57886, 57886, 57886, 57886, 0, 0, 0,
      /* 51703 */ 0, 0, 0, 0, 0, 0, 0, 0, 3109, 0, 0, 60258, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 51723 */ 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 51738 */ 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 59865, 3164, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 51760 */ 0, 0, 521, 521, 521, 521, 521, 521, 521, 521, 3180, 521, 521, 521, 521, 521, 521, 3188, 521, 521, 521,
      /* 51781 */ 521, 521, 521, 521, 1333, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521,
      /* 51801 */ 521, 521, 521, 521, 521, 521, 521, 521, 521, 2858, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521,
      /* 51821 */ 57909, 57909, 60628, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 51836 */ 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 51851 */ 57909, 57909, 61070, 57909, 57909, 57936, 57936, 57936, 60677, 57936, 57936, 57936, 57936, 57936, 57936,
      /* 51866 */ 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936,
      /* 51881 */ 57936, 57936, 57936, 57936, 57936, 57936, 57936, 59027, 57936, 57936, 57936, 57936, 57936, 57936, 57936,
      /* 51896 */ 57936, 57936, 57936, 61099, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 521, 521, 521, 57886,
      /* 51911 */ 57886, 57886, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3171, 0, 0, 0, 521, 3175, 521, 521, 521, 521, 521, 521,
      /* 51936 */ 521, 521, 521, 521, 521, 521, 521, 521, 521, 0, 2472, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 51954 */ 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 59349, 57886, 57886, 57886, 57886, 57886,
      /* 51969 */ 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 61039, 57886, 57886,
      /* 51984 */ 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57909, 57909, 57909, 57909, 57909, 57886, 57886, 57886,
      /* 51999 */ 57886, 61441, 57886, 61443, 57886, 57886, 57886, 57886, 57909, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 52014 */ 61454, 57909, 61456, 57909, 57909, 57909, 57909, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 521,
      /* 52029 */ 521, 521, 57886, 57886, 57886, 0, 0, 3607, 0, 3609, 0, 0, 0, 3613, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1733,
      /* 52054 */ 0, 0, 0, 1736, 0, 0, 1739, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 335872, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 52085 */ 0, 0, 0, 0, 139264, 147456, 0, 0, 335872, 0, 0, 61467, 57936, 61469, 57936, 57936, 57936, 57936, 0, 0,
      /* 52105 */ 0, 0, 0, 0, 0, 4134, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 61485, 57886, 57886, 57886,
      /* 52126 */ 57886, 57886, 57886, 57886, 59846, 57886, 59848, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 52141 */ 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 60273,
      /* 52156 */ 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 0, 388, 340, 0, 0, 0, 0, 0,
      /* 52175 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2351104, 0, 0, 0, 0, 0,
      /* 52206 */ 131072, 0, 0, 0, 0, 0, 0, 441, 0, 0, 0, 456, 472, 472, 472, 456, 456, 456, 456, 456, 456, 456, 456, 456,
      /* 52230 */ 456, 505, 505, 505, 505, 505, 505, 505, 505, 505, 505, 505, 505, 505, 505, 505, 532, 57898, 532, 57898,
      /* 52250 */ 532, 532, 57898, 532, 532, 57921, 57898, 532, 532, 57898, 57898, 57898, 57921, 57898, 57898, 57898,
      /* 52266 */ 57898, 57898, 57898, 57898, 57921, 57921, 57898, 57898, 57948, 57898, 57898, 57898, 57898, 57898, 57898,
      /* 52281 */ 57898, 57948, 57948, 57898, 57898, 57898, 57898, 57948, 57948, 57898, 532, 57898, 57898, 57898, 1,
      /* 52296 */ 24578, 3, 155941, 156275, 295, 0, 0, 0, 0, 0, 301, 302, 0, 0, 305, 306, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 52323 */ 0, 0, 0, 3410, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 212992, 0, 0, 0, 0, 0,
      /* 52354 */ 212992, 212992, 212992, 212992, 212992, 655, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 655, 0, 655, 0, 0, 0, 0, 0,
      /* 52378 */ 0, 0, 0, 655, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57886, 57886,
      /* 52409 */ 57886, 58264, 57886, 57886, 58280, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 52424 */ 57886, 57886, 0, 57909, 57909, 57909, 57909, 57909, 57909, 58340, 57909, 57909, 58356, 57909, 57909,
      /* 52439 */ 57909, 57909, 57909, 57909, 57909, 59444, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 52454 */ 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 59464, 57909, 57909, 57909, 57909,
      /* 52469 */ 57909, 57909, 57909, 57909, 57909, 58921, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 52484 */ 57909, 57909, 57909, 57909, 57909, 57909, 57909, 0, 57886, 57936, 57936, 57936, 57936, 57936, 521, 521,
      /* 52500 */ 521, 521, 521, 521, 57886, 57886, 57886, 57886, 57886, 57886, 1138, 1705, 0, 0, 0, 0, 1712, 0, 0, 0, 0,
      /* 52521 */ 0, 0, 0, 1722, 0, 1241, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 52554 */ 0, 0, 0, 1293, 0, 0, 0, 0, 0, 1299, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1315, 0, 0, 0, 0, 0,
      /* 52586 */ 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521,
      /* 52607 */ 521, 521, 521, 1890, 521, 521, 521, 521, 521, 521, 521, 521, 1372, 521, 521, 521, 521, 521, 521, 521,
      /* 52627 */ 521, 521, 521, 521, 521, 521, 521, 1391, 521, 521, 521, 521, 521, 1399, 521, 521, 521, 521, 521, 521, 0,
      /* 52648 */ 0, 0, 0, 57886, 59819, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 52664 */ 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 59357, 57886, 57886, 57886, 57886, 57886,
      /* 52679 */ 57886, 57886, 57886, 57886, 57886, 57886, 521, 521, 521, 58754, 901, 57886, 57886, 57886, 57886, 57886,
      /* 52695 */ 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 58772, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 52710 */ 57886, 57886, 57886, 57886, 57886, 57886, 57886, 58848, 50657, 58754, 977, 58851, 57909, 57909, 57909,
      /* 52725 */ 57909, 57909, 58858, 57909, 57909, 57909, 57909, 58864, 57909, 57909, 57909, 58830, 57886, 57886, 57886,
      /* 52740 */ 57886, 57886, 58838, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 50657, 58754, 977, 57909, 57909,
      /* 52755 */ 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 58867, 57909, 57909, 57909,
      /* 52770 */ 57909, 57909, 57909, 60631, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 52785 */ 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 60645, 57909, 57909, 57909, 57909,
      /* 52800 */ 57909, 57909, 57909, 57909, 59985, 57909, 57909, 59988, 59989, 57909, 57936, 57936, 57936, 57936, 57936,
      /* 52815 */ 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 60005, 57936, 0, 0, 1755,
      /* 52831 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 338, 339, 0, 521,
      /* 52864 */ 58754, 0, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 52879 */ 57886, 57886, 57886, 59323, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 59334, 57886,
      /* 52894 */ 57886, 57886, 57886, 57886, 58837, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 50657, 58754,
      /* 52909 */ 977, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 52924 */ 57909, 61058, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 61064, 57909, 61066, 57909, 57909,
      /* 52939 */ 57909, 57909, 57909, 57909, 50657, 0, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 52954 */ 57909, 57909, 57909, 57909, 57909, 57909, 57909, 59423, 57909, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 52969 */ 57909, 57909, 59434, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 61178, 57909, 57909, 57909,
      /* 52984 */ 57909, 57909, 57909, 57909, 57909, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936,
      /* 52999 */ 61191, 57936, 57936, 57936, 57936, 57936, 521, 521, 521, 521, 521, 521, 57886, 57886, 57886, 57886,
      /* 53015 */ 57886, 57886, 1138, 1705, 0, 0, 0, 0, 1712, 0, 0, 0, 0, 0, 0, 0, 0, 349, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 53043 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 367, 0, 295, 0, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 59541,
      /* 53064 */ 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 59552, 57936, 57936, 57936, 57936, 57936, 57936,
      /* 53079 */ 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 61279, 57936, 57936, 521, 57886, 0, 0, 0,
      /* 53096 */ 3940, 0, 0, 0, 0, 3627, 0, 0, 0, 0, 0, 2282, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 53128 */ 0, 0, 2298, 2299, 0, 0, 0, 0, 0, 0, 0, 3382, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 53160 */ 0, 0, 0, 0, 0, 139264, 147456, 0, 0, 0, 0, 0, 2355, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 53190 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2328, 521, 2413, 521, 521, 521, 521, 521, 521, 521, 521, 521,
      /* 53216 */ 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521,
      /* 53237 */ 521, 2866, 57886, 57886, 57886, 57886, 59844, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 53252 */ 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 53267 */ 57886, 57886, 57886, 57886, 58824, 57886, 57886, 57886, 57886, 57909, 57909, 57909, 59928, 57909, 57909,
      /* 53282 */ 57909, 57909, 59933, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 53297 */ 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57936, 57936, 57936, 57936,
      /* 53312 */ 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 60011, 57936, 57936, 57936,
      /* 53327 */ 57936, 60016, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936,
      /* 53342 */ 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 58985, 57936, 57936, 57936, 57936,
      /* 53357 */ 57936, 57936, 57936, 57936, 0, 0, 0, 3380, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 53385 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 4284416, 0, 0, 57886, 60829, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 53406 */ 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 53421 */ 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 59366, 57886, 57936, 57936, 57936, 60913, 57936,
      /* 53436 */ 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936,
      /* 53451 */ 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 59562, 57936, 57936,
      /* 53466 */ 57936, 0, 521, 521, 521, 521, 3951, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 57886, 57886,
      /* 53485 */ 57886, 57886, 61310, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 59875,
      /* 53500 */ 57886, 57886, 57886, 57886, 59880, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 53515 */ 57886, 57886, 57886, 57886, 57886, 50657, 58754, 977, 57909, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 53530 */ 58859, 57909, 57909, 57909, 58863, 57909, 57909, 58874, 57909, 57909, 57909, 57909, 61326, 57909, 57909,
      /* 53545 */ 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57936, 57936, 57936, 57936, 61342, 57936,
      /* 53560 */ 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 59004, 57936, 57936, 57936,
      /* 53575 */ 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936,
      /* 53590 */ 57936, 60689, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 61508,
      /* 53605 */ 0, 0, 0, 0, 521, 521, 521, 521, 521, 521, 521, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 53624 */ 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57936, 57936, 57936, 57936, 57936, 521, 1333,
      /* 53639 */ 521, 521, 1698, 521, 58772, 57886, 57886, 57886, 59047, 57886, 1138, 0, 0, 1708, 0, 0, 0, 0, 1715, 0, 0,
      /* 53660 */ 0, 0, 0, 0, 0, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 3883, 521, 521, 521, 521, 521,
      /* 53682 */ 521, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 59344, 57886, 57886, 57886, 57886, 57886,
      /* 53697 */ 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 59364,
      /* 53712 */ 57886, 57886, 57886, 341, 342, 343, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 53741 */ 0, 0, 367, 341, 295, 0, 0, 0, 0, 0, 4013, 0, 0, 0, 0, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521,
      /* 53766 */ 521, 4027, 521, 521, 4029, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 59376, 57886, 57886,
      /* 53782 */ 57886, 57886, 57886, 57886, 59385, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 53797 */ 59396, 59398, 57886, 57886, 57886, 57886, 0, 0, 0, 389, 390, 392, 342, 0, 0, 0, 0, 0, 0, 341, 0, 0, 0,
      /* 53820 */ 0, 341, 0, 0, 0, 342, 0, 0, 0, 0, 0, 0, 0, 0, 0, 639, 748, 749, 750, 0, 0, 0, 0, 0, 756, 757, 0, 0, 0,
      /* 53849 */ 0, 0, 0, 0, 0, 769, 770, 0, 772, 0, 0, 0, 389, 0, 0, 0, 0, 0, 0, 342, 0, 0, 0, 389, 0, 0, 0, 0, 0, 342,
      /* 53879 */ 389, 0, 0, 0, 139264, 147456, 0, 0, 0, 422, 0, 0, 0, 0, 0, 245760, 0, 0, 0, 245760, 0, 0, 245760,
      /* 53902 */ 245760, 245760, 0, 0, 0, 0, 0, 245760, 0, 245760, 245760, 0, 0, 0, 245760, 245760, 0, 0, 245760, 0, 0,
      /* 53923 */ 0, 0, 131072, 0, 0, 0, 341, 0, 0, 0, 446, 0, 341, 0, 473, 473, 473, 473, 489, 489, 489, 489, 489, 489,
      /* 53947 */ 489, 489, 489, 473, 473, 473, 473, 473, 473, 473, 473, 473, 473, 473, 473, 473, 473, 473, 533, 57899,
      /* 53967 */ 533, 57899, 533, 533, 57899, 533, 533, 57922, 57899, 533, 533, 57899, 57899, 57899, 57922, 57899, 57899,
      /* 53984 */ 57899, 57899, 57899, 57899, 57899, 57922, 57922, 57899, 57935, 57949, 57935, 57935, 57935, 57935, 57935,
      /* 53999 */ 57935, 57935, 57949, 57949, 57935, 57935, 57935, 57935, 57949, 57949, 57935, 533, 57899, 57899, 57899,
      /* 54014 */ 1, 24578, 3, 155941, 155941, 295, 0, 0, 0, 0, 0, 301, 302, 0, 0, 305, 306, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 54041 */ 0, 0, 0, 0, 344064, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 139264, 147456, 0, 0, 344064, 0, 0, 0, 710,
      /* 54068 */ 0, 0, 0, 0, 0, 0, 0, 718, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 331, 332, 0,
      /* 54101 */ 0, 0, 0, 0, 0, 0, 0, 802, 0, 660, 0, 779, 0, 0, 0, 0, 0, 779, 802, 0, 802, 800, 0, 0, 0, 814, 0, 0, 0,
      /* 54130 */ 656, 817, 0, 779, 0, 0, 0, 0, 0, 823, 0, 0, 0, 0, 783, 656, 827, 0, 521, 830, 521, 521, 521, 846, 521,
      /* 54155 */ 521, 862, 521, 521, 521, 521, 876, 521, 521, 521, 521, 894, 521, 521, 57886, 57886, 58248, 57886, 57886,
      /* 54174 */ 57886, 58265, 57886, 57886, 58281, 57886, 57886, 57886, 57886, 58295, 57886, 57886, 57886, 57886, 58313,
      /* 54189 */ 57886, 57886, 0, 57909, 57909, 58324, 57909, 57909, 57909, 58341, 57909, 57909, 58357, 57909, 57909,
      /* 54204 */ 57909, 57909, 57909, 57909, 57909, 59476, 57909, 57909, 57909, 57909, 57909, 57909, 59485, 57909, 57909,
      /* 54219 */ 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 59496, 59498, 57909, 57909, 57909, 57909, 57886,
      /* 54234 */ 57909, 57909, 58371, 57909, 57909, 57909, 57909, 58389, 57909, 57909, 0, 0, 0, 0, 57886, 57936, 57936,
      /* 54251 */ 58399, 57936, 57936, 57936, 58416, 57936, 57936, 58432, 57936, 57936, 57936, 57936, 58446, 57936, 57936,
      /* 54266 */ 57936, 57936, 57936, 57936, 57936, 57936, 60412, 57936, 57936, 60416, 57936, 57936, 57936, 57936, 57936,
      /* 54281 */ 57936, 57936, 57936, 57936, 60425, 57936, 57936, 57936, 60428, 60429, 57936, 57936, 57936, 57936, 57936,
      /* 54296 */ 521, 521, 521, 521, 521, 521, 0, 57886, 57886, 57886, 57886, 57886, 57886, 155941, 1138, 0, 0, 1143, 0,
      /* 54315 */ 0, 1148, 0, 0, 0, 0, 0, 0, 0, 521, 521, 521, 521, 521, 521, 521, 521, 521, 3881, 521, 521, 521, 521,
      /* 54338 */ 521, 521, 521, 521, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 58802, 57886, 57886, 57886,
      /* 54354 */ 58806, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 54369 */ 57886, 57886, 57886, 57886, 57886, 2962, 0, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 54384 */ 57909, 57909, 57909, 60623, 57909, 57936, 57936, 58464, 57936, 57936, 521, 521, 521, 521, 521, 521, 0,
      /* 54401 */ 57886, 57886, 57886, 57886, 57886, 57886, 155941, 1138, 0, 301, 0, 0, 305, 0, 0, 0, 0, 0, 0, 0, 0, 1816,
      /* 54423 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 740, 0, 0, 0,
      /* 54457 */ 0, 1274, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1286, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 540,
      /* 54488 */ 57906, 540, 57906, 540, 540, 57906, 540, 540, 57929, 57906, 540, 540, 57906, 57906, 57906, 57929, 521,
      /* 54505 */ 521, 521, 58754, 901, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 54520 */ 57886, 57886, 58773, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 54535 */ 57886, 59348, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 59361, 57886,
      /* 54550 */ 57886, 57886, 57886, 57886, 57886, 57886, 58797, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 54565 */ 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 54580 */ 57886, 57886, 58821, 57886, 57886, 57886, 57886, 57886, 57886, 59374, 57886, 57886, 57886, 57886, 57886,
      /* 54595 */ 57886, 57886, 57886, 59386, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 59397,
      /* 54610 */ 57886, 57886, 57886, 57886, 57886, 57886, 57886, 61444, 57886, 57886, 57886, 57909, 57909, 57909, 57909,
      /* 54625 */ 57909, 57909, 57909, 57909, 57909, 57909, 61457, 57909, 57909, 57909, 57936, 57936, 57936, 57936, 57936,
      /* 54640 */ 57936, 57936, 57936, 521, 3095, 521, 521, 521, 57886, 60442, 57886, 57886, 57886, 0, 0, 3100, 3101, 0,
      /* 54658 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 3627, 0, 3776, 0, 0, 0, 0, 3780, 0, 0, 0, 0, 0, 0, 0, 0, 3783, 0, 521, 521,
      /* 54687 */ 521, 3785, 0, 0, 0, 0, 1814, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 54719 */ 0, 0, 0, 221645, 221645, 221645, 221645, 521, 58754, 0, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 54736 */ 57886, 57886, 57886, 59316, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 59327, 57886, 57886,
      /* 54751 */ 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 59345, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 54766 */ 57886, 57886, 59356, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 54781 */ 59876, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 54796 */ 57886, 57886, 57886, 57886, 57886, 0, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 54811 */ 57909, 57909, 57909, 50657, 0, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 54826 */ 59416, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 59427, 57909, 57909, 57909, 57909, 57909,
      /* 54841 */ 57909, 57909, 57909, 57909, 57909, 0, 0, 0, 0, 57886, 57936, 57936, 57936, 57936, 57936, 57936, 57936,
      /* 54858 */ 57936, 57936, 58429, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 521, 521, 521, 521, 521, 2440,
      /* 54874 */ 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521,
      /* 54895 */ 521, 2459, 521, 521, 521, 0, 0, 0, 0, 0, 0, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 54914 */ 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 60252, 57886, 57886, 57886, 57886, 57886, 60257,
      /* 54929 */ 59892, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 0, 0, 0, 0, 57909, 57909, 57909,
      /* 54946 */ 59910, 57909, 59912, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 54961 */ 57909, 60340, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 54976 */ 57909, 57909, 57909, 57909, 57909, 61060, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 54991 */ 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 59981, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 55006 */ 57909, 57909, 57909, 57936, 57936, 57936, 59993, 57936, 59995, 57936, 57936, 57936, 57936, 57936, 57936,
      /* 55021 */ 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 60686, 60687, 57936, 57936, 57936, 57936, 60690,
      /* 55036 */ 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936,
      /* 55051 */ 60064, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 521, 521, 521, 521, 521, 57886,
      /* 55067 */ 57886, 57886, 57886, 57886, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2274, 0, 0, 0, 0, 0,
      /* 55095 */ 0, 0, 2820, 0, 0, 0, 0, 2823, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2831, 0, 521, 521, 521, 521, 521, 521, 521,
      /* 55121 */ 521, 521, 521, 521, 521, 521, 521, 3961, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 55138 */ 57886, 57886, 57886, 57886, 57886, 61320, 57886, 521, 2842, 521, 521, 2845, 2846, 521, 521, 521, 521,
      /* 55155 */ 521, 2851, 521, 2853, 521, 521, 521, 521, 2857, 521, 521, 521, 521, 521, 521, 521, 521, 521, 2863, 521,
      /* 55175 */ 521, 521, 0, 0, 0, 0, 0, 0, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 55194 */ 57886, 57886, 57886, 57886, 60251, 57886, 57886, 60254, 60255, 57886, 57886, 57886, 57886, 57886, 57909,
      /* 55209 */ 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 55224 */ 57909, 57909, 57909, 57909, 57909, 57909, 60878, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 55239 */ 57909, 59445, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 59456, 57909, 57909, 57909, 57909,
      /* 55254 */ 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 61336, 57909, 57936, 57936, 57936,
      /* 55269 */ 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 61352, 57936, 521, 521,
      /* 55284 */ 521, 521, 521, 2871, 521, 521, 521, 521, 521, 521, 2879, 521, 521, 521, 521, 521, 2884, 521, 521, 521,
      /* 55304 */ 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 1904, 521, 521, 521, 521, 521, 521, 521, 521, 521,
      /* 55324 */ 521, 521, 521, 521, 521, 521, 521, 521, 521, 1353, 1355, 521, 521, 521, 521, 521, 521, 521, 521, 521,
      /* 55344 */ 521, 521, 521, 57886, 57886, 60260, 57886, 60262, 57886, 57886, 57886, 57886, 60266, 57886, 57886,
      /* 55359 */ 57886, 57886, 57886, 57886, 57886, 57886, 57886, 60272, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 55374 */ 57886, 57886, 60281, 57886, 57886, 57886, 57886, 57886, 59373, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 55389 */ 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 55404 */ 57886, 57886, 57886, 59401, 57886, 57886, 57886, 57886, 57886, 60289, 57886, 57886, 57886, 57886, 57886,
      /* 55419 */ 60294, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 55434 */ 57886, 57886, 57886, 0, 0, 0, 0, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 55451 */ 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 55466 */ 57909, 57909, 57909, 60330, 57909, 0, 0, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 55482 */ 57909, 57909, 57909, 57909, 57909, 57909, 60318, 57909, 57909, 60321, 60322, 57909, 57909, 57909, 57909,
      /* 55497 */ 57909, 60327, 57909, 60329, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 60336, 57909, 57909, 57909,
      /* 55512 */ 57909, 57909, 57909, 57909, 60342, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 60350, 57909, 57909,
      /* 55527 */ 57909, 57909, 57909, 57909, 60357, 57909, 57909, 57909, 60333, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 55542 */ 57909, 57909, 57909, 60339, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 60348, 57909,
      /* 55557 */ 57909, 57909, 57909, 57909, 57909, 60356, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 60632, 57909,
      /* 55572 */ 57909, 60635, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 55587 */ 57909, 57909, 57909, 57909, 57909, 60646, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 60889, 57909,
      /* 55602 */ 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57936, 57936,
      /* 55617 */ 57936, 57936, 60906, 57936, 57936, 57936, 57936, 60910, 57909, 57909, 57909, 60361, 57909, 57909, 57909,
      /* 55632 */ 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57936,
      /* 55647 */ 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 61192, 57936, 57936, 57936, 57936,
      /* 55662 */ 57936, 57936, 57936, 60383, 57936, 57936, 60386, 60387, 57936, 57936, 57936, 57936, 57936, 60392, 57936,
      /* 55677 */ 60394, 57936, 57936, 57936, 57936, 60398, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936,
      /* 55692 */ 60404, 0, 0, 3139, 0, 0, 0, 0, 0, 0, 0, 3145, 0, 3147, 0, 0, 0, 3150, 0, 0, 3153, 0, 0, 0, 0, 0, 0, 0,
      /* 55720 */ 0, 0, 0, 0, 0, 450560, 450560, 0, 0, 450560, 450560, 450560, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 55746 */ 1799, 0, 0, 0, 0, 0, 0, 0, 0, 1806, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3165, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 55778 */ 0, 3174, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 2882, 521, 521,
      /* 55799 */ 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 2892, 521, 521, 521, 521, 521, 3192, 521, 521,
      /* 55819 */ 3195, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 3205, 521,
      /* 55839 */ 521, 521, 521, 521, 521, 521, 521, 2443, 521, 521, 521, 521, 2448, 521, 521, 521, 521, 521, 521, 521,
      /* 55859 */ 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 1906, 521, 521, 521, 521, 521, 521, 521, 521,
      /* 55879 */ 521, 521, 521, 521, 521, 521, 521, 521, 1940, 521, 521, 521, 521, 521, 521, 1947, 521, 521, 521, 521,
      /* 55899 */ 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 3214, 521, 521, 3217, 521, 521, 3220, 0, 0,
      /* 55920 */ 60565, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 55935 */ 57886, 58302, 57886, 57886, 57886, 57886, 0, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 55950 */ 57909, 57909, 57909, 57909, 57886, 57886, 57886, 57886, 60583, 57886, 57886, 60586, 57886, 57886, 57886,
      /* 55965 */ 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 55980 */ 60597, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 59871, 57886, 57886, 57886, 57886, 57886, 59877,
      /* 55995 */ 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 56010 */ 57886, 57886, 57886, 2962, 0, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 56025 */ 57909, 57909, 57909, 0, 0, 3431, 0, 0, 521, 521, 3436, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521,
      /* 56046 */ 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 3453, 521, 3455, 521, 521, 521, 521, 521, 521, 521,
      /* 56066 */ 1334, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 1358, 521, 521, 521, 521,
      /* 56086 */ 521, 521, 521, 521, 521, 2419, 521, 521, 521, 521, 521, 521, 521, 521, 2426, 521, 2428, 521, 2431, 521,
      /* 56106 */ 521, 521, 521, 521, 521, 521, 521, 521, 2444, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521,
      /* 56126 */ 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 1392, 521, 521, 521, 521, 521, 521, 521, 521,
      /* 56146 */ 521, 521, 521, 521, 521, 521, 3461, 521, 521, 3463, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521,
      /* 56166 */ 521, 57886, 57886, 60820, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 59378,
      /* 56181 */ 57886, 57886, 57886, 59384, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 59394, 57886,
      /* 56196 */ 57886, 57886, 57886, 59400, 57886, 57886, 57909, 57909, 57909, 57909, 57909, 57909, 60888, 57909, 57909,
      /* 56211 */ 60890, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57936, 57936,
      /* 56226 */ 60904, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 521, 3601, 521, 57886, 60948, 57886, 0, 0, 0, 0,
      /* 56244 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 306, 0, 0, 0, 0, 0, 0, 306, 0, 0, 0, 0, 0, 521, 521, 521,
      /* 56275 */ 521, 521, 3664, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 57886, 57886, 57886, 57886,
      /* 56293 */ 57886, 57886, 57886, 61020, 61021, 57886, 57886, 57886, 57886, 61025, 61026, 57909, 57909, 61049, 61050,
      /* 56308 */ 57909, 57909, 57909, 57909, 61054, 61055, 57909, 57909, 57909, 57909, 57909, 61059, 57909, 57909, 57909,
      /* 56323 */ 57909, 57909, 57909, 57909, 57909, 61065, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 56338 */ 57909, 57909, 59960, 57909, 57909, 57909, 57909, 57909, 59966, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 56353 */ 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 60341, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 56368 */ 57909, 57909, 57909, 57909, 57909, 60353, 57909, 57909, 57909, 57909, 57909, 57936, 57936, 61094, 57936,
      /* 56383 */ 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 521, 521, 521, 57886,
      /* 56398 */ 57886, 57886, 0, 0, 3764, 0, 0, 0, 0, 0, 0, 0, 0, 521, 521, 521, 521, 521, 521, 2394, 521, 521, 521,
      /* 56421 */ 521, 521, 521, 521, 521, 521, 521, 521, 2406, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521,
      /* 56441 */ 521, 3792, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 57886, 57886,
      /* 56460 */ 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 59849, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 56475 */ 59854, 57886, 59856, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 56490 */ 60267, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 56505 */ 57886, 57886, 57886, 57886, 57886, 61163, 57886, 57886, 57909, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 56520 */ 57909, 57909, 57909, 57909, 57909, 57886, 57886, 61154, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 56535 */ 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57909, 57909, 57909, 57909, 57909,
      /* 56550 */ 57909, 57909, 57909, 57909, 57909, 57909, 61173, 57886, 57886, 57886, 57886, 61242, 57886, 57886, 57886,
      /* 56565 */ 57886, 57886, 57886, 57886, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 56580 */ 61258, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57936, 57936, 61075, 57936, 57936, 57936, 57936,
      /* 56595 */ 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 61087, 57936, 57936,
      /* 56610 */ 57936, 57936, 57936, 57936, 57936, 0, 0, 0, 0, 0, 0, 0, 521, 521, 521, 521, 521, 521, 4137, 521, 4138,
      /* 56631 */ 521, 521, 521, 57886, 57886, 57886, 57886, 57886, 57886, 0, 521, 521, 3949, 521, 521, 521, 521, 3954,
      /* 56649 */ 521, 521, 521, 521, 3959, 521, 521, 57886, 57886, 61308, 57886, 57886, 57886, 57886, 61313, 57886,
      /* 56665 */ 57886, 57886, 57886, 61318, 57886, 57886, 57886, 57886, 57886, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 56680 */ 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 60873, 57909, 57909, 57909,
      /* 56695 */ 57909, 57909, 57909, 57909, 57909, 57909, 57909, 0, 0, 0, 0, 57886, 57936, 57936, 57936, 57936, 57936,
      /* 56712 */ 57936, 58418, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 58969, 57936,
      /* 56727 */ 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936,
      /* 56742 */ 57936, 57936, 57936, 57936, 59012, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936,
      /* 56757 */ 57936, 59029, 57936, 57909, 57909, 61324, 57909, 57909, 57909, 57909, 61329, 57909, 57909, 57909, 57909,
      /* 56772 */ 61334, 57909, 57909, 57909, 57936, 57936, 61340, 57936, 57936, 57936, 57936, 61345, 57936, 57936, 57936,
      /* 56787 */ 57936, 61350, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 58962, 57936, 57936, 57936,
      /* 56802 */ 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 58986, 57936, 57936, 57936,
      /* 56817 */ 57936, 57936, 57936, 57936, 521, 521, 521, 57886, 57886, 57886, 0, 3606, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 56839 */ 0, 0, 0, 0, 0, 0, 0, 0, 1740, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57886, 57886, 57886, 57886, 61384,
      /* 56866 */ 57886, 57886, 61386, 57886, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 56881 */ 61398, 57909, 57909, 61400, 57909, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 3600, 521, 521,
      /* 56896 */ 60947, 57886, 57886, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3617, 3618, 0, 0, 57936, 57936, 57936,
      /* 56921 */ 57936, 61412, 57936, 57936, 61414, 57936, 0, 0, 0, 0, 0, 0, 0, 521, 521, 521, 521, 521, 521, 521, 521,
      /* 56942 */ 521, 521, 521, 521, 521, 57886, 57886, 57886, 57886, 57886, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 56958 */ 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 60872, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 56973 */ 57909, 57909, 57909, 57909, 57909, 57909, 57909, 59449, 57909, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 56988 */ 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 58932, 57909, 57909, 57909,
      /* 57003 */ 57909, 57909, 57909, 57909, 57909, 0, 57886, 57936, 57936, 57936, 57936, 61533, 57936, 57936, 57936, 0,
      /* 57019 */ 0, 0, 521, 521, 521, 521, 521, 521, 57886, 57886, 57886, 57886, 57886, 57886, 57909, 57909, 57909,
      /* 57036 */ 57909, 57909, 57909, 57936, 57936, 57936, 57936, 57936, 57936, 0, 0, 0, 521, 4195, 521, 521, 521, 521,
      /* 57054 */ 57886, 61543, 57886, 57886, 57886, 57886, 57909, 61547, 57909, 57909, 57909, 57909, 57936, 61551, 57936,
      /* 57069 */ 57936, 57936, 57936, 0, 0, 0, 521, 521, 4196, 4197, 521, 521, 57886, 57886, 61544, 61545, 57886, 57886,
      /* 57087 */ 57909, 57909, 61548, 61549, 57909, 57909, 57936, 57936, 61552, 61553, 57936, 57936, 0, 57886, 57909,
      /* 57102 */ 57936, 4232, 61577, 61578, 61579, 521, 57886, 57909, 57936, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 57126 */ 0, 0, 0, 0, 0, 0, 1261, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 344, 345, 346, 347, 348, 0, 0, 0, 0, 0,
      /* 57156 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 367, 0, 295, 0, 0, 0, 0, 0, 245760, 245760, 245760, 245760,
      /* 57183 */ 245760, 245760, 0, 0, 0, 0, 0, 0, 0, 245760, 245760, 245760, 0, 0, 0, 0, 139264, 147456, 245760, 245760,
      /* 57203 */ 0, 0, 245760, 0, 0, 0, 245760, 245760, 0, 0, 0, 0, 0, 0, 245760, 0, 0, 0, 0, 0, 0, 245760, 0, 0, 245760,
      /* 57228 */ 0, 0, 245760, 0, 0, 245760, 0, 245760, 245760, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 57256 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 737, 0, 0, 0, 348, 347, 131072, 346, 347, 347, 348, 346, 347, 0, 346,
      /* 57282 */ 347, 450, 457, 474, 474, 474, 485, 485, 485, 491, 485, 485, 491, 491, 485, 491, 506, 506, 506, 506, 506,
      /* 57303 */ 506, 506, 506, 506, 506, 506, 506, 506, 506, 506, 534, 57900, 534, 57900, 534, 534, 57900, 534, 534,
      /* 57322 */ 57923, 57900, 534, 534, 57900, 57900, 57900, 57923, 57900, 57900, 57900, 57900, 57900, 57900, 57900,
      /* 57337 */ 57923, 57923, 57900, 57900, 57950, 57900, 57900, 57900, 57900, 57900, 57900, 57900, 57950, 57950, 57900,
      /* 57352 */ 57900, 57900, 57900, 57950, 57950, 57900, 534, 57900, 57900, 57900, 1, 24578, 3, 155941, 155941, 295, 0,
      /* 57369 */ 0, 0, 0, 0, 301, 302, 0, 0, 305, 306, 0, 0, 0, 0, 0, 0, 639, 0, 0, 0, 0, 644, 645, 646, 647, 648, 649,
      /* 57396 */ 650, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 665, 666, 0, 668, 669, 0, 0, 0, 0, 0, 675, 0, 0, 0, 0, 0,
      /* 57427 */ 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 1881, 521, 521, 521,
      /* 57447 */ 521, 521, 521, 521, 521, 521, 521, 1375, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521,
      /* 57467 */ 521, 521, 521, 521, 521, 521, 521, 521, 521, 1914, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521,
      /* 57487 */ 709, 0, 0, 712, 0, 714, 0, 716, 0, 0, 0, 0, 0, 0, 0, 0, 0, 726, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 57518 */ 0, 499712, 0, 0, 0, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144,
      /* 57532 */ 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 57550 */ 301, 0, 302, 305, 0, 306, 4857856, 4874240, 0, 0, 4923392, 0, 0, 0, 0, 757, 0, 0, 778, 0, 0, 0, 0, 0, 0,
      /* 57575 */ 0, 0, 0, 785, 0, 0, 0, 0, 0, 796, 0, 0, 685, 0, 0, 0, 757, 0, 0, 0, 0, 0, 278528, 278528, 0, 0, 0, 0, 0,
      /* 57604 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1176, 0, 0, 0, 0, 0, 685, 816, 816, 0, 0,
      /* 57636 */ 0, 0, 0, 521, 521, 836, 840, 843, 521, 852, 521, 521, 521, 868, 870, 873, 521, 521, 521, 886, 890, 521,
      /* 57658 */ 521, 521, 57886, 57886, 57886, 57886, 57886, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 57673 */ 57909, 57909, 57909, 57909, 57909, 60871, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 57688 */ 57909, 57909, 57909, 57909, 58892, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 57703 */ 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 60372, 57909, 57909, 57936, 57936, 57936, 57936,
      /* 57718 */ 57936, 57936, 57936, 57936, 57936, 57936, 57936, 58255, 58259, 58262, 57886, 58271, 57886, 57886, 57886,
      /* 57733 */ 58287, 58289, 58292, 57886, 57886, 57886, 58305, 58309, 57886, 57886, 57886, 0, 57909, 57909, 57909,
      /* 57748 */ 58331, 58335, 58338, 57909, 58347, 57909, 57909, 57909, 58363, 58365, 58368, 57909, 57909, 57909, 58381,
      /* 57763 */ 58385, 57909, 57909, 57909, 0, 0, 0, 0, 58396, 57936, 57936, 57936, 58406, 58410, 58413, 57936, 58422,
      /* 57780 */ 57936, 57936, 57936, 58438, 58440, 58443, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936,
      /* 57795 */ 58963, 57936, 57936, 57936, 57936, 58973, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936,
      /* 57810 */ 57936, 57936, 57936, 57936, 57936, 57936, 58989, 57936, 58456, 58460, 57936, 57936, 57936, 836, 1127,
      /* 57825 */ 521, 886, 890, 1131, 0, 58476, 58255, 57886, 58305, 58309, 58481, 155941, 1138, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 57846 */ 0, 0, 0, 0, 540672, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 139264, 147456, 0, 0, 540672, 0, 0, 1366,
      /* 57872 */ 521, 521, 1370, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 1381, 521, 521, 1388, 521, 521,
      /* 57892 */ 521, 521, 521, 521, 521, 521, 521, 521, 1402, 521, 521, 521, 0, 2895, 0, 0, 0, 0, 57886, 57886, 57886,
      /* 57913 */ 57886, 57886, 57886, 57886, 57886, 57886, 60248, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 57928 */ 57886, 57886, 57886, 60256, 57886, 521, 521, 521, 58754, 901, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 57944 */ 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 57959 */ 57886, 57886, 57886, 57886, 57886, 58795, 57886, 57886, 57886, 58798, 57886, 57886, 57886, 57886, 57886,
      /* 57974 */ 57886, 57886, 58805, 57886, 57886, 58809, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 57989 */ 57886, 57886, 58820, 57886, 57886, 58827, 57886, 57886, 57886, 57886, 57886, 59897, 57886, 57886, 57886,
      /* 58004 */ 57886, 0, 0, 0, 0, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 58021 */ 59918, 57909, 57909, 59921, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 58885, 57909, 57909, 57909,
      /* 58036 */ 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 58898, 57909, 57909, 57909, 57909, 58903,
      /* 58051 */ 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 59480, 57909, 57909, 57909, 57909,
      /* 58066 */ 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 58081 */ 57909, 57886, 57936, 57936, 58994, 57936, 57936, 58998, 57936, 57936, 57936, 57936, 57936, 57936, 57936,
      /* 58096 */ 57936, 57936, 57936, 57936, 59010, 57936, 57936, 59017, 57936, 57936, 57936, 57936, 57936, 57936, 57936,
      /* 58111 */ 57936, 57936, 57936, 59031, 521, 1894, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 1903, 521, 521,
      /* 58130 */ 521, 1907, 521, 521, 1912, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 2447, 521, 521,
      /* 58150 */ 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 2458, 521, 521, 521, 521, 521, 58754, 0,
      /* 58170 */ 57886, 59308, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 59315, 57886, 57886, 57886, 57886, 57886,
      /* 58185 */ 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 61164,
      /* 58200 */ 57886, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 59337, 57886,
      /* 58215 */ 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 59346, 57886, 57886, 57886, 59350, 57886,
      /* 58230 */ 57886, 59355, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 58245 */ 61160, 57886, 57886, 57886, 57886, 57886, 57886, 57909, 57909, 57909, 57909, 57909, 57909, 61168, 57909,
      /* 58260 */ 57909, 57909, 57909, 57909, 50657, 0, 57909, 59408, 57909, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 58275 */ 59415, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 58290 */ 57909, 57909, 57909, 57909, 57909, 59437, 57936, 59504, 57936, 57936, 57936, 57936, 57936, 57936, 57936,
      /* 58305 */ 59511, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936,
      /* 58320 */ 57936, 57936, 57936, 57936, 57936, 59533, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 60681,
      /* 58335 */ 57936, 57936, 60684, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936,
      /* 58350 */ 57936, 57936, 57936, 57936, 57936, 57936, 60695, 57936, 0, 0, 0, 0, 2305, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 58373 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 352256, 352256, 352256, 352256, 521, 521, 521,
      /* 58398 */ 2438, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521,
      /* 58418 */ 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 2865, 521, 2794, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 58443 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2381, 2894, 521, 521, 0, 0, 0, 2896, 0,
      /* 58472 */ 1961, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 58487 */ 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 59393, 57886, 57886, 57886, 57886, 57886,
      /* 58502 */ 57886, 57886, 57886, 0, 2061, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 58517 */ 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 58532 */ 57909, 57909, 57909, 57909, 57909, 59974, 57909, 57909, 57909, 57909, 57936, 57936, 57936, 57936, 57936,
      /* 58547 */ 60437, 57936, 57936, 521, 521, 521, 521, 521, 57886, 57886, 57886, 57886, 57886, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 58568 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1727, 0, 0, 0, 0, 0, 0, 521, 521, 521, 521, 3789,
      /* 58597 */ 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 61146, 57886,
      /* 58617 */ 57886, 57886, 57886, 57886, 57886, 57886, 61151, 57886, 61239, 57886, 57886, 57886, 57886, 57886, 61245,
      /* 58632 */ 57886, 57886, 57886, 57886, 57909, 57909, 57909, 61251, 57909, 57909, 57909, 57909, 61255, 57909, 57909,
      /* 58647 */ 57909, 57909, 57909, 61261, 57909, 57909, 57909, 57909, 57936, 0, 0, 4166, 0, 521, 521, 521, 521, 521,
      /* 58665 */ 521, 521, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57909, 57909, 57909, 57909, 57909,
      /* 58680 */ 57909, 57909, 57909, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 59577, 57936,
      /* 58695 */ 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936,
      /* 58710 */ 57936, 57936, 57936, 521, 521, 521, 57886, 57886, 57886, 0, 0, 0, 0, 3766, 0, 0, 0, 0, 0, 3769, 57936,
      /* 58731 */ 57936, 61267, 57936, 57936, 57936, 57936, 61271, 57936, 57936, 57936, 57936, 57936, 61277, 57936, 57936,
      /* 58746 */ 57936, 57936, 521, 57886, 0, 0, 0, 0, 0, 0, 0, 0, 3627, 0, 0, 0, 0, 0, 521, 521, 521, 521, 521, 521,
      /* 58770 */ 521, 521, 521, 521, 521, 521, 521, 521, 521, 1880, 521, 521, 521, 521, 521, 521, 521, 521, 521, 1891,
      /* 58790 */ 521, 0, 521, 521, 521, 521, 521, 3952, 521, 521, 521, 3956, 521, 521, 521, 521, 521, 57886, 57886,
      /* 58809 */ 57886, 57886, 57886, 61311, 57886, 57886, 57886, 61315, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 58824 */ 57886, 61387, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 58839 */ 57909, 57909, 61401, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 60043,
      /* 58854 */ 57936, 57936, 57936, 57936, 57936, 60049, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936,
      /* 58869 */ 57936, 57936, 57936, 57936, 57936, 521, 521, 57886, 57886, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3627, 0, 0,
      /* 58892 */ 57909, 57909, 57909, 57909, 57909, 61327, 57909, 57909, 57909, 61331, 57909, 57909, 57909, 57909, 57909,
      /* 58907 */ 57909, 57936, 57936, 57936, 57936, 57936, 61343, 57936, 57936, 57936, 61347, 57936, 57936, 57936, 57936,
      /* 58922 */ 57936, 57936, 57936, 57936, 57936, 57936, 57936, 61102, 57936, 57936, 57936, 521, 521, 521, 57886,
      /* 58937 */ 57886, 57886, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 728, 0, 788, 0, 0, 0, 0, 0, 0, 0, 0, 788, 0, 0, 0, 0, 0,
      /* 58967 */ 0, 0, 0, 0, 0, 0, 521, 521, 521, 521, 57886, 57886, 57886, 57886, 57909, 57909, 57909, 57909, 57936,
      /* 58986 */ 57936, 57936, 57936, 0, 521, 521, 57886, 57886, 57909, 57909, 57936, 57936, 521, 57886, 57909, 57936,
      /* 59002 */ 4228, 61573, 61574, 61575, 521, 57886, 57909, 57936, 521, 57886, 57909, 57936, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 59022 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1742, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 391, 0, 0, 0,
      /* 59054 */ 395, 391, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 363, 364, 365, 366, 0, 0,
      /* 59084 */ 367, 0, 295, 0, 0, 349, 0, 407, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 407, 0, 0, 0, 0, 0, 0, 407, 0, 349, 0,
      /* 59113 */ 139264, 147456, 0, 0, 0, 0, 0, 0, 0, 3643, 0, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521,
      /* 59135 */ 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 2887, 521, 521, 521, 521, 521, 521, 521,
      /* 59155 */ 521, 521, 0, 0, 0, 0, 131072, 0, 0, 0, 0, 0, 0, 442, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 59185 */ 500, 507, 507, 507, 507, 507, 507, 507, 507, 507, 507, 507, 507, 507, 507, 507, 535, 57901, 535, 57901,
      /* 59205 */ 535, 535, 57901, 535, 535, 57924, 57901, 535, 535, 57901, 57901, 57901, 57924, 57901, 57901, 57901,
      /* 59221 */ 57901, 57901, 57901, 57901, 57924, 57924, 57901, 57901, 57951, 57901, 57901, 57901, 57901, 57901, 57901,
      /* 59236 */ 57901, 57951, 57951, 57901, 57901, 57901, 57901, 57951, 57951, 57901, 616, 57901, 57967, 57967, 1,
      /* 59251 */ 24578, 3, 155941, 155941, 295, 0, 0, 0, 0, 0, 301, 302, 0, 0, 305, 306, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 59278 */ 0, 0, 0, 2351104, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1228, 0, 0, 0, 0, 0, 0, 0,
      /* 59310 */ 0, 1237, 0, 0, 0, 672, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 59343 */ 0, 0, 0, 2300, 0, 57909, 57909, 58372, 57909, 57909, 57909, 57909, 58390, 57909, 57909, 0, 0, 0, 0,
      /* 59362 */ 57886, 57936, 57936, 58400, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936,
      /* 59377 */ 58447, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 60917, 57936, 57936, 57936, 57936, 57936,
      /* 59392 */ 57936, 57936, 57936, 60925, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936,
      /* 59407 */ 57936, 57936, 57936, 521, 521, 57886, 57886, 0, 0, 0, 0, 0, 3864, 0, 0, 0, 0, 0, 3627, 0, 0, 57936,
      /* 59429 */ 57936, 58465, 57936, 57936, 521, 521, 521, 521, 521, 521, 0, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 59446 */ 155941, 1138, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2311, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 59477 */ 0, 2325, 0, 0, 0, 0, 1242, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 59509 */ 0, 0, 0, 0, 0, 367, 367, 0, 0, 0, 0, 1203, 1161, 0, 0, 0, 0, 0, 0, 1273, 1160, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 59538 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 318, 0, 0, 0, 521, 521, 521, 58754, 901,
      /* 59567 */ 57886, 57886, 57886, 58760, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 58774, 57886,
      /* 59582 */ 57886, 57886, 57886, 58784, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 59873, 59874,
      /* 59597 */ 57886, 57886, 57886, 57886, 57886, 57886, 59881, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 59612 */ 57886, 57886, 57886, 57886, 57886, 57886, 0, 0, 977, 57909, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 59628 */ 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 58929, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 59643 */ 57909, 57909, 57909, 57909, 0, 57886, 57936, 57936, 57936, 57936, 57909, 57909, 57909, 58879, 57909,
      /* 59658 */ 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 58895,
      /* 59673 */ 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 60656, 57909,
      /* 59688 */ 57909, 60659, 57909, 57909, 60662, 60663, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936,
      /* 59703 */ 57936, 57936, 0, 0, 0, 1756, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 59734 */ 0, 0, 0, 337, 0, 0, 0, 1785, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1800, 0, 0, 0, 0, 0, 0, 0,
      /* 59765 */ 1243, 0, 0, 0, 0, 0, 0, 0, 0, 2286, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 59798 */ 1173, 0, 0, 0, 0, 0, 0, 0, 0, 521, 521, 521, 521, 521, 521, 521, 2418, 521, 521, 521, 521, 521, 521,
      /* 59821 */ 2423, 521, 2425, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 1379, 521,
      /* 59841 */ 521, 521, 521, 521, 521, 521, 1393, 521, 521, 521, 521, 521, 521, 521, 521, 1405, 521, 521, 2869, 521,
      /* 59861 */ 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521,
      /* 59882 */ 521, 521, 521, 521, 521, 521, 521, 521, 2435, 2436, 57936, 57936, 57936, 57936, 57936, 57936, 60411,
      /* 59899 */ 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936,
      /* 59914 */ 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 59529, 57936, 57936, 57936, 57936,
      /* 59929 */ 57936, 57936, 0, 0, 0, 3432, 0, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521,
      /* 59950 */ 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 1398, 521, 521, 521, 521, 521, 0, 3872,
      /* 59971 */ 0, 0, 0, 0, 0, 521, 3875, 521, 521, 3877, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521,
      /* 59993 */ 521, 57886, 61234, 57886, 57886, 61236, 57886, 57886, 57886, 57886, 57886, 60263, 57886, 57886, 57886,
      /* 60008 */ 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 60023 */ 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 60279, 57886, 57886, 57886, 57886, 57886, 61266,
      /* 60038 */ 57936, 57936, 61268, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936,
      /* 60053 */ 57936, 57936, 521, 57886, 0, 0, 0, 0, 0, 0, 0, 0, 3627, 0, 3944, 0, 0, 0, 0, 0, 417792, 0, 417792, 0, 0,
      /* 60078 */ 0, 0, 309, 0, 0, 0, 0, 0, 417792, 0, 417792, 0, 0, 0, 0, 139264, 147456, 417792, 0, 0, 0, 417792, 0, 0,
      /* 60102 */ 0, 0, 417792, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 417792, 0, 0, 417792, 0, 0, 417792, 0,
      /* 60129 */ 417792, 418100, 3946, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 57886,
      /* 60148 */ 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 60163 */ 59383, 57886, 57886, 57886, 57886, 57886, 57886, 59391, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 60178 */ 57886, 57886, 57886, 787, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 787, 0, 787, 0, 0, 0, 0, 0, 0, 0, 0, 787, 0, 0,
      /* 60206 */ 0, 0, 0, 0, 0, 0, 0, 1160, 0, 0, 0, 0, 1165, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 460, 0,
      /* 60238 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 2335231, 2335197, 2335231, 2335231, 57886, 57886, 57886, 58266, 57886, 57886,
      /* 60257 */ 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 0, 57909,
      /* 60272 */ 57909, 57909, 57909, 57909, 57909, 58342, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 60287 */ 57909, 60891, 57909, 60893, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57936, 57936,
      /* 60302 */ 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 60019, 57936, 57936, 57936, 57936,
      /* 60317 */ 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936,
      /* 60332 */ 60025, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 521, 58754,
      /* 60347 */ 1962, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 60362 */ 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 60377 */ 2557, 2962, 0, 0, 50657, 2062, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 60393 */ 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 60408 */ 57909, 57909, 57909, 57909, 57909, 61068, 57909, 57909, 57909, 57909, 57936, 57936, 57936, 60408, 57936,
      /* 60423 */ 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936,
      /* 60438 */ 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 59021, 57936, 57936,
      /* 60453 */ 57936, 57936, 57936, 57936, 57936, 57886, 61028, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 60468 */ 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 60483 */ 57886, 57886, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 0, 0,
      /* 60499 */ 0, 350, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 345, 0, 0,
      /* 60532 */ 0, 0, 0, 352, 350, 131072, 0, 350, 350, 352, 0, 350, 0, 0, 350, 352, 350, 0, 0, 0, 350, 350, 350, 350,
      /* 60556 */ 350, 350, 350, 350, 498, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 536,
      /* 60577 */ 57902, 536, 57902, 536, 536, 57902, 536, 536, 57925, 57902, 536, 536, 57902, 57902, 57902, 57925, 57902,
      /* 60594 */ 57902, 57902, 57902, 57902, 57902, 57902, 57925, 57925, 57902, 57902, 57952, 57902, 57902, 57902, 57902,
      /* 60609 */ 57902, 57902, 57902, 57952, 57952, 57902, 57902, 57902, 57902, 57952, 57952, 57902, 536, 57902, 57902,
      /* 60624 */ 57902, 1, 24578, 3, 155941, 155941, 295, 0, 0, 0, 0, 0, 301, 302, 0, 0, 305, 306, 0, 0, 0, 0, 0, 0, 0,
      /* 60649 */ 0, 0, 0, 0, 0, 0, 0, 2751, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 791, 0, 0, 0,
      /* 60682 */ 0, 0, 0, 0, 0, 0, 0, 0, 674, 0, 0, 0, 0, 0, 0, 673, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 798,
      /* 60715 */ 799, 0, 0, 0, 0, 0, 0, 0, 521, 521, 837, 521, 521, 521, 853, 857, 521, 521, 521, 521, 521, 878, 880,
      /* 60738 */ 521, 521, 891, 521, 521, 521, 57886, 57886, 58250, 0, 751, 0, 0, 804, 0, 0, 0, 0, 0, 804, 0, 657, 0, 0,
      /* 60762 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 819, 0, 0, 0, 0, 0, 0, 0, 521, 521, 521, 521, 521, 521, 3879, 521, 521,
      /* 60789 */ 521, 521, 521, 521, 3885, 521, 521, 521, 521, 57886, 57886, 57886, 57886, 57886, 57886, 61238, 58256,
      /* 60806 */ 57886, 57886, 57886, 58272, 58276, 57886, 57886, 57886, 57886, 57886, 58297, 58299, 57886, 57886, 58310,
      /* 60821 */ 57886, 57886, 57886, 0, 57909, 57909, 58326, 58332, 57909, 57909, 57909, 58348, 58352, 57909, 57909,
      /* 60836 */ 57909, 57909, 57909, 57909, 57909, 57909, 61330, 57909, 61332, 61333, 57909, 61335, 57909, 61337, 57936,
      /* 60851 */ 57936, 57936, 57936, 57936, 57936, 57936, 57936, 61346, 57936, 61348, 61349, 57936, 61351, 57936, 61353,
      /* 60866 */ 57909, 57909, 58373, 58375, 57909, 57909, 58386, 57909, 57909, 57909, 0, 0, 0, 0, 57886, 57936, 57936,
      /* 60883 */ 58401, 58407, 57936, 57936, 57936, 58423, 58427, 57936, 57936, 57936, 57936, 57936, 58448, 58450, 57936,
      /* 60898 */ 0, 4165, 0, 4167, 521, 521, 521, 521, 521, 521, 521, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 60916 */ 57886, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57936, 57936, 57936, 57936, 57936, 521,
      /* 60931 */ 1695, 521, 1697, 521, 521, 59044, 57886, 57886, 59046, 57886, 57886, 1138, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 60953 */ 0, 1720, 0, 0, 57936, 58461, 57936, 57936, 57936, 837, 521, 880, 521, 891, 521, 0, 57886, 58256, 58299,
      /* 60972 */ 57886, 58310, 57886, 155941, 1138, 0, 301, 0, 0, 305, 0, 0, 0, 0, 0, 0, 0, 0, 2309, 0, 0, 0, 0, 0, 0, 0,
      /* 60998 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3396, 0, 0, 0, 0, 0, 0, 0, 1208, 0, 0, 0, 0, 0, 0, 0,
      /* 61031 */ 0, 0, 0, 0, 0, 0, 1222, 0, 1224, 0, 0, 0, 0, 1229, 0, 0, 0, 0, 1234, 0, 0, 0, 0, 0, 0, 0, 3874, 521,
      /* 61059 */ 521, 521, 521, 3878, 521, 521, 521, 521, 521, 521, 521, 521, 521, 3887, 521, 521, 61233, 57886, 57886,
      /* 61078 */ 57886, 57886, 61237, 57886, 1406, 521, 521, 58754, 901, 57886, 57886, 57886, 57886, 58761, 57886, 57886,
      /* 61094 */ 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 61109 */ 57886, 57886, 58792, 58794, 57886, 57886, 57886, 57886, 58273, 58277, 58283, 57886, 58288, 57886, 57886,
      /* 61124 */ 57886, 57886, 57886, 58306, 57886, 57886, 57886, 57886, 0, 57909, 57909, 58328, 57909, 57909, 57909,
      /* 61139 */ 57909, 58349, 58353, 58359, 57909, 58364, 57886, 58832, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 61154 */ 57886, 58844, 58845, 57886, 57886, 50657, 58754, 977, 57909, 57909, 57909, 57909, 58856, 57909, 57909,
      /* 61169 */ 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 0, 0, 0, 0, 57886, 57936, 57936, 57936, 57936,
      /* 61186 */ 57936, 57936, 58415, 57936, 57936, 58431, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57909, 57909,
      /* 61201 */ 57909, 57909, 57909, 58913, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 58927, 57909, 57909, 57909,
      /* 61216 */ 57909, 57909, 57909, 57909, 57909, 58939, 58940, 57909, 57909, 0, 57886, 57936, 57936, 57936, 57936,
      /* 61231 */ 57936, 57936, 57936, 57936, 57936, 57936, 59512, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936,
      /* 61246 */ 59523, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936,
      /* 61261 */ 60021, 57936, 57936, 57936, 57936, 57936, 57936, 60026, 57936, 60028, 57936, 57936, 57936, 57936, 57936,
      /* 61276 */ 57936, 57936, 57936, 58950, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936,
      /* 61291 */ 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 58981, 58983, 57936, 57936, 57936, 57936, 57936,
      /* 61306 */ 57936, 57936, 57936, 57936, 57936, 57936, 57936, 61202, 57936, 521, 521, 57886, 57886, 0, 0, 0, 0, 0, 0,
      /* 61325 */ 0, 0, 0, 0, 0, 3627, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3781, 0, 0, 0, 0, 0, 0, 521, 521, 521, 521, 57936,
      /* 61353 */ 59034, 59035, 57936, 57936, 521, 521, 1696, 521, 521, 1699, 57886, 57886, 59045, 57886, 57886, 59048,
      /* 61369 */ 1138, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2774, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 61402 */ 0, 0, 0, 0, 730, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1789, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 61435 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 507904, 507904, 507904, 507904, 0, 1773, 0, 0, 0, 0, 0, 0,
      /* 61462 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1855, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2825, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 61495 */ 521, 521, 521, 521, 521, 521, 2837, 521, 521, 521, 521, 521, 521, 521, 521, 521, 1895, 521, 521, 521,
      /* 61515 */ 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521,
      /* 61536 */ 521, 521, 521, 521, 521, 1955, 521, 521, 521, 58754, 0, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 61554 */ 59313, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 61569 */ 57886, 57886, 57886, 57886, 57886, 57886, 57886, 58813, 57886, 58815, 57886, 57886, 57886, 57886, 57886,
      /* 61584 */ 57886, 57886, 58828, 57886, 57886, 57886, 59338, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 61599 */ 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 61614 */ 57886, 57886, 57886, 57886, 57886, 57886, 59399, 57886, 57886, 57886, 50657, 0, 57909, 57909, 57909,
      /* 61629 */ 57909, 57909, 57909, 57909, 59413, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 61644 */ 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57936, 57936, 57936,
      /* 61659 */ 57936, 57936, 57936, 57936, 60909, 57936, 57936, 57909, 59438, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 61674 */ 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 61689 */ 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 0, 57886, 57936, 57936, 57936, 57936,
      /* 61704 */ 57936, 57936, 57936, 57936, 57936, 57936, 57936, 59509, 57936, 57936, 57936, 57936, 57936, 57936, 57936,
      /* 61719 */ 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936,
      /* 61734 */ 57936, 59534, 0, 0, 0, 2332, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 61765 */ 0, 0, 0, 367, 0, 0, 0, 0, 0, 0, 2358, 0, 2360, 2361, 2362, 0, 2364, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2372,
      /* 61793 */ 0, 0, 0, 0, 2377, 2378, 0, 0, 0, 0, 0, 0, 0, 49716, 49716, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 61823 */ 0, 0, 0, 0, 327680, 327680, 327680, 327680, 2382, 0, 0, 0, 0, 0, 0, 0, 2388, 521, 521, 521, 521, 521,
      /* 61845 */ 521, 2395, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 1905, 521,
      /* 61865 */ 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 1918, 521, 521, 521, 521, 521, 521, 521, 521, 521,
      /* 61885 */ 2439, 521, 521, 521, 521, 521, 2445, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521,
      /* 61905 */ 521, 521, 521, 521, 521, 521, 521, 521, 3801, 521, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 61922 */ 57886, 57886, 0, 0, 0, 0, 2745, 2746, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 61952 */ 0, 0, 0, 0, 0, 2359296, 367, 0, 0, 0, 521, 521, 2843, 521, 521, 521, 521, 521, 2848, 521, 521, 521, 521,
      /* 61975 */ 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 2864, 521, 521, 521, 0,
      /* 61996 */ 2895, 0, 0, 0, 0, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 60247, 57886, 57886, 57886,
      /* 62013 */ 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 50657, 58754, 977, 57909,
      /* 62028 */ 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 59487,
      /* 62043 */ 59488, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 62058 */ 57886, 57936, 57936, 57936, 57936, 57936, 60384, 57936, 57936, 57936, 57936, 57936, 60389, 57936, 57936,
      /* 62073 */ 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936,
      /* 62088 */ 57936, 57936, 57936, 59016, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936,
      /* 62103 */ 60405, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936,
      /* 62118 */ 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936,
      /* 62133 */ 57936, 57936, 60033, 57936, 57936, 57936, 57936, 57936, 57936, 61269, 57936, 57936, 57936, 57936, 57936,
      /* 62148 */ 57936, 57936, 57936, 57936, 61278, 57936, 57936, 57936, 521, 57886, 0, 0, 0, 0, 0, 0, 0, 0, 3627, 0, 0,
      /* 62169 */ 0, 0, 0, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 3446, 521, 521, 521, 521,
      /* 62191 */ 521, 521, 521, 521, 521, 521, 521, 521, 1937, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521,
      /* 62211 */ 521, 521, 521, 521, 521, 521, 521, 521, 1385, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521,
      /* 62231 */ 521, 521, 521, 521, 57936, 61534, 57936, 57936, 4192, 0, 4194, 521, 521, 521, 521, 521, 521, 57886,
      /* 62249 */ 57886, 57886, 57886, 57886, 57886, 57909, 57909, 57909, 57909, 57909, 57909, 57936, 57936, 57936, 57936,
      /* 62264 */ 57936, 57936, 0, 4193, 0, 521, 521, 521, 521, 521, 521, 57886, 57886, 57886, 57886, 57886, 57886, 57909,
      /* 62282 */ 57909, 57909, 57909, 57909, 57909, 57936, 57936, 57936, 57936, 57936, 57936, 0, 4211, 0, 521, 521, 521,
      /* 62299 */ 521, 57886, 57886, 57886, 57886, 57909, 57909, 57909, 57909, 57936, 57936, 57936, 57936, 0, 521, 521,
      /* 62315 */ 57886, 57886, 57909, 57909, 57936, 57936, 521, 57886, 57909, 57936, 521, 521, 521, 521, 521, 521, 521,
      /* 62332 */ 1335, 521, 521, 521, 521, 1345, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521,
      /* 62352 */ 521, 1361, 521, 521, 521, 0, 0, 0, 0, 0, 0, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 60246,
      /* 62371 */ 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 62386 */ 0, 0, 0, 0, 57909, 57909, 57909, 57909, 59911, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 62403 */ 57909, 57909, 57909, 57909, 57909, 58926, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 62418 */ 57909, 57909, 57909, 0, 57886, 57936, 57936, 57936, 57936, 0, 0, 0, 0, 370, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 62441 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 378, 0, 0, 0, 0, 370, 0, 0, 0, 0, 0, 4358144, 4358144, 4358144,
      /* 62466 */ 4825088, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144,
      /* 62477 */ 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 5177344, 4358144,
      /* 62488 */ 4358144, 4358144, 0, 0, 0, 0, 0, 0, 302, 0, 0, 0, 302, 0, 0, 306, 0, 0, 0, 306, 0, 0, 0, 4931584, 0, 0,
      /* 62514 */ 0, 0, 0, 0, 0, 0, 747, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 771, 0, 387, 0,
      /* 62546 */ 353, 0, 0, 0, 0, 0, 396, 397, 0, 398, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 398, 0, 0, 403, 0, 0, 0, 0, 0, 0,
      /* 62577 */ 0, 557056, 557056, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3129, 0, 0,
      /* 62607 */ 0, 0, 0, 0, 0, 370, 378, 406, 0, 0, 0, 370, 0, 0, 353, 0, 0, 0, 370, 0, 409, 411, 0, 370, 398, 0, 0,
      /* 62634 */ 370, 378, 0, 139264, 147456, 398, 409, 0, 0, 409, 0, 0, 0, 432, 131072, 0, 432, 432, 0, 0, 432, 0, 411,
      /* 62657 */ 432, 0, 458, 0, 0, 0, 486, 486, 486, 486, 486, 486, 486, 486, 486, 486, 508, 508, 508, 508, 520, 508,
      /* 62679 */ 508, 508, 520, 508, 508, 508, 508, 508, 508, 537, 57903, 537, 57903, 537, 537, 57903, 537, 537, 57926,
      /* 62698 */ 57903, 537, 537, 57903, 57903, 57903, 57926, 57903, 57903, 57903, 57903, 57903, 57903, 57903, 57926,
      /* 62713 */ 57926, 57903, 57903, 57953, 57903, 57903, 57903, 57903, 57903, 57903, 57903, 57953, 57953, 57903, 57903,
      /* 62728 */ 57903, 57903, 57953, 57953, 57903, 617, 57903, 57968, 57968, 1, 24578, 3, 155941, 155941, 295, 0, 0, 0,
      /* 62746 */ 0, 0, 301, 302, 0, 0, 305, 306, 0, 0, 0, 636, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4017, 521, 521, 521, 521,
      /* 62773 */ 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 61374, 57886, 57886, 57886, 57886, 57886, 57886, 0, 0,
      /* 62792 */ 774, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 793, 0, 0, 0, 0, 0, 0, 0, 774, 0, 0, 0, 0, 0,
      /* 62825 */ 1276, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1288, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3625, 0, 0, 0, 0,
      /* 62857 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 305, 0, 0, 0, 0, 0, 0, 305, 0, 0, 0, 0, 0, 0, 0, 793, 0, 0,
      /* 62890 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 687, 0, 0, 0, 774, 0, 0, 0, 0, 793, 0, 0, 0, 0, 0, 0, 0, 793, 0, 0, 0, 0,
      /* 62921 */ 774, 0, 793, 0, 521, 832, 521, 521, 521, 521, 521, 521, 863, 865, 521, 521, 521, 521, 521, 521, 521,
      /* 62942 */ 521, 521, 521, 521, 57886, 57886, 58251, 1151, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1164, 0, 0, 0, 0, 0,
      /* 62968 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2342, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1182, 0, 0, 0,
      /* 63001 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 367, 367, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1207, 1296, 0, 0, 0, 0,
      /* 63032 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1290, 1316, 1317, 0, 1290, 521, 521, 521, 521, 521,
      /* 63059 */ 521, 0, 0, 0, 0, 57886, 57886, 57886, 57886, 59822, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 63076 */ 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 0, 0, 0, 0, 59907, 57909, 57909,
      /* 63093 */ 57909, 57909, 57909, 57909, 57909, 59915, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 63108 */ 521, 1325, 521, 521, 521, 1329, 521, 521, 1340, 521, 521, 1344, 521, 521, 521, 521, 521, 521, 521, 521,
      /* 63128 */ 521, 521, 521, 521, 521, 521, 521, 521, 521, 1363, 521, 521, 521, 0, 2895, 0, 0, 0, 0, 57886, 57886,
      /* 63149 */ 57886, 57886, 57886, 57886, 60245, 57886, 57886, 57886, 57886, 60249, 57886, 57886, 57886, 57886, 57886,
      /* 63164 */ 57886, 57886, 57886, 57886, 57886, 57886, 58294, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 0,
      /* 63179 */ 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 59483, 57909,
      /* 63194 */ 57909, 57909, 57909, 57909, 57909, 59491, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 63209 */ 57909, 57886, 521, 1367, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521,
      /* 63229 */ 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 2893, 521, 521, 521, 58754,
      /* 63249 */ 901, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 58764, 57886, 57886, 57886, 58768, 57886, 57886,
      /* 63264 */ 58779, 57886, 57886, 58783, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 60588,
      /* 63279 */ 60589, 57886, 57886, 57886, 57886, 60592, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 63294 */ 57886, 57886, 60598, 57886, 57886, 57886, 57909, 57909, 58878, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 63309 */ 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 58897, 57909, 57909, 57909,
      /* 63324 */ 58901, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 60367, 57909, 57909,
      /* 63339 */ 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936,
      /* 63354 */ 57936, 57936, 57936, 57936, 59515, 57936, 57936, 57936, 57936, 59521, 57936, 57936, 57936, 57936, 57936,
      /* 63369 */ 57936, 57936, 57936, 57936, 57936, 59532, 57936, 57936, 57936, 57936, 57936, 57936, 58953, 57936, 57936,
      /* 63384 */ 57936, 58957, 57936, 57936, 58968, 57936, 57936, 58972, 57936, 57936, 57936, 57936, 57936, 57936, 57936,
      /* 63399 */ 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 58991, 57936, 57936, 57936, 58995,
      /* 63414 */ 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936,
      /* 63429 */ 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 60399, 57936,
      /* 63444 */ 57936, 57936, 57936, 57936, 57936, 57936, 0, 0, 0, 1726, 1727, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 63469 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 516560, 516560, 516560, 516560, 0, 1786, 0, 0, 0, 0, 0, 0, 0,
      /* 63496 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1808, 0, 0, 0, 0, 0, 5111808, 0, 0, 0, 0,
      /* 63528 */ 0, 5283840, 0, 0, 0, 0, 5472256, 5521408, 0, 0, 0, 0, 5595136, 5709824, 5718016, 0, 5824512, 5865472, 0,
      /* 63547 */ 0, 5922816, 0, 0, 6021120, 0, 521, 58754, 0, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 63564 */ 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 59324, 57886, 57886, 57886, 57886, 57886,
      /* 63579 */ 57886, 57886, 57886, 57886, 57886, 57886, 60837, 57886, 60839, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 63594 */ 57886, 60846, 57886, 57886, 60848, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 50657, 0, 57909,
      /* 63609 */ 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 63624 */ 57909, 59424, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 63639 */ 61181, 57909, 57909, 57909, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936,
      /* 63654 */ 57936, 57936, 57936, 57936, 60047, 57936, 57936, 57936, 57936, 60052, 57936, 57936, 57936, 57936, 57936,
      /* 63669 */ 57936, 57936, 57936, 57936, 57936, 57936, 57909, 57909, 57909, 57909, 57909, 59442, 59443, 57909, 57909,
      /* 63684 */ 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 63699 */ 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57936, 57936, 57936, 57936, 57936, 60907, 57936,
      /* 63714 */ 57936, 57936, 57936, 57936, 57936, 57936, 59538, 59539, 57936, 57936, 57936, 57936, 57936, 57936, 57936,
      /* 63729 */ 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936,
      /* 63744 */ 57936, 57936, 57936, 57936, 57936, 59556, 57936, 57936, 57936, 57936, 57936, 57936, 59563, 57936, 57936,
      /* 63759 */ 521, 521, 521, 59324, 57886, 57886, 57886, 57886, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 63785 */ 0, 0, 0, 0, 0, 0, 0, 139264, 147456, 0, 0, 318, 0, 0, 0, 0, 0, 2384, 0, 0, 2387, 0, 521, 521, 2390, 521,
      /* 63811 */ 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521,
      /* 63831 */ 57886, 57886, 57886, 57886, 57886, 60823, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 59867, 59868,
      /* 63846 */ 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 59879, 57886, 57886,
      /* 63861 */ 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 59891, 57909,
      /* 63876 */ 57909, 57909, 57909, 57909, 59956, 59957, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 63891 */ 57909, 57909, 57909, 59968, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 63906 */ 57909, 58891, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 63921 */ 57909, 57909, 57909, 57909, 57909, 57909, 59457, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 63936 */ 57909, 57909, 57909, 57909, 57909, 57909, 57909, 59980, 57909, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 63951 */ 57909, 57909, 57909, 57936, 57936, 59992, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936,
      /* 63966 */ 57936, 57936, 57936, 57936, 57936, 57936, 521, 521, 57886, 57886, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3868,
      /* 63987 */ 3627, 0, 0, 57936, 57936, 57936, 57936, 57936, 60039, 60040, 57936, 57936, 57936, 57936, 57936, 57936,
      /* 64003 */ 57936, 57936, 57936, 57936, 57936, 57936, 60051, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936,
      /* 64018 */ 57936, 57936, 57936, 57936, 57936, 57936, 60705, 57936, 57936, 60708, 57936, 57936, 60711, 3368, 521,
      /* 64033 */ 521, 60715, 57886, 57886, 0, 0, 0, 0, 0, 57936, 57936, 57936, 60063, 57936, 57936, 57936, 57936, 57936,
      /* 64051 */ 57936, 57936, 57936, 57936, 57936, 521, 521, 521, 2732, 2733, 57886, 57886, 57886, 60081, 60082, 0, 0,
      /* 64068 */ 1710, 0, 0, 1717, 0, 0, 0, 0, 0, 1728, 1729, 0, 0, 0, 0, 0, 1735, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 64098 */ 0, 0, 0, 0, 0, 0, 360, 361, 0, 0, 0, 0, 0, 0, 0, 367, 0, 295, 0, 0, 0, 0, 2821, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 64129 */ 0, 2827, 0, 0, 0, 0, 0, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521,
      /* 64152 */ 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 2460, 521, 2462, 57886, 60286, 57886,
      /* 64171 */ 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 64186 */ 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 0, 0, 0, 0, 57909, 57909, 57909,
      /* 64203 */ 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 59919, 57909, 57909, 57909, 57909,
      /* 64218 */ 57936, 60406, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 60418, 57936,
      /* 64233 */ 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936,
      /* 64248 */ 57936, 57936, 59011, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936,
      /* 64263 */ 57936, 521, 521, 521, 521, 521, 3194, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521,
      /* 64283 */ 521, 521, 521, 521, 521, 521, 521, 521, 3207, 521, 521, 521, 521, 521, 521, 0, 0, 0, 0, 59818, 57886,
      /* 64304 */ 57886, 57886, 57886, 57886, 57886, 57886, 59826, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 64319 */ 57886, 57886, 57886, 57886, 57886, 60590, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 64334 */ 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 0, 0, 57909, 60615, 57909, 57909,
      /* 64350 */ 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 60648, 57909, 57909, 57909, 57909, 57909,
      /* 64365 */ 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57936,
      /* 64380 */ 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 60002, 57936, 57936,
      /* 64395 */ 57936, 57936, 57936, 60697, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936,
      /* 64410 */ 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 521, 521, 521, 57886, 57886, 57886, 0, 0, 0, 0,
      /* 64428 */ 0, 0, 0, 6152192, 0, 0, 0, 6316032, 0, 196608, 0, 0, 5816320, 6291456, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 64453 */ 0, 0, 0, 2754, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1168, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 64486 */ 0, 0, 0, 57936, 57936, 57936, 57936, 57936, 61097, 57936, 57936, 57936, 57936, 57936, 57936, 57936,
      /* 64502 */ 57936, 57936, 521, 521, 3760, 57886, 57886, 61106, 3763, 0, 0, 0, 0, 3767, 0, 0, 0, 0, 0, 0, 315, 316,
      /* 64524 */ 317, 318, 319, 320, 321, 322, 323, 324, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1167, 0, 0, 0,
      /* 64552 */ 0, 1171, 0, 0, 1174, 0, 0, 0, 0, 0, 0, 0, 521, 521, 521, 3788, 521, 521, 521, 521, 521, 521, 521, 521,
      /* 64576 */ 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 57886, 57886, 57886, 61147, 57886, 57886, 57886,
      /* 64594 */ 61150, 57886, 57886, 57886, 57886, 58274, 57886, 57886, 57886, 57886, 57886, 58293, 57886, 57886, 57886,
      /* 64609 */ 57886, 58311, 57886, 57886, 57886, 0, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 58350, 57909,
      /* 64624 */ 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 59478, 57909, 57909, 57909, 59484, 57909, 57909,
      /* 64639 */ 57909, 57909, 57909, 57909, 57909, 57909, 57909, 59494, 57909, 57909, 57909, 57909, 59500, 57909, 57909,
      /* 64654 */ 57886, 57886, 57886, 57886, 61241, 57886, 61243, 57886, 57886, 57886, 57886, 57886, 57886, 57909, 57909,
      /* 64669 */ 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 61257, 57909, 61259, 57909, 57909, 57909, 57909,
      /* 64684 */ 57909, 57909, 57936, 61074, 57936, 57936, 57936, 61077, 57936, 57936, 57936, 57936, 57936, 57936, 57936,
      /* 64699 */ 57936, 57936, 61085, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936,
      /* 64714 */ 57936, 59516, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 59528, 57936, 57936, 57936,
      /* 64729 */ 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 61470, 57936, 57936, 57936, 0, 4130, 0, 0, 0, 0,
      /* 64747 */ 0, 521, 521, 4135, 521, 4136, 521, 521, 521, 521, 521, 521, 521, 57886, 57886, 61486, 57886, 61487,
      /* 64765 */ 57886, 57886, 57886, 57886, 59340, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 64780 */ 57886, 57886, 59353, 57886, 57886, 57886, 59358, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 64795 */ 57886, 57886, 0, 0, 0, 0, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 59914, 57909, 57909, 57909,
      /* 64812 */ 57909, 57909, 57909, 57909, 57909, 57909, 57909, 0, 0, 0, 0, 57886, 57936, 57936, 57936, 57936, 57936,
      /* 64829 */ 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 60709, 57936,
      /* 64844 */ 57936, 521, 521, 521, 57886, 57886, 57886, 0, 0, 0, 0, 0, 0, 0, 0, 0, 131072, 0, 0, 0, 0, 0, 0, 0, 358,
      /* 64869 */ 0, 0, 0, 475, 475, 475, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 509, 509, 513, 513, 513, 513, 509, 513, 513, 513,
      /* 64895 */ 509, 513, 513, 513, 513, 513, 513, 538, 57904, 538, 57904, 538, 538, 57904, 538, 538, 57927, 57904, 538,
      /* 64914 */ 538, 57904, 57904, 57904, 57927, 57904, 57904, 57904, 57904, 57904, 57904, 57904, 57927, 57927, 57904,
      /* 64929 */ 57904, 57954, 57904, 57904, 57904, 57904, 57904, 57904, 57904, 57954, 57954, 57904, 57904, 57904, 57904,
      /* 64944 */ 57954, 57954, 57904, 618, 57904, 57969, 57969, 1, 24578, 3, 155941, 155941, 295, 0, 0, 0, 0, 0, 301,
      /* 64963 */ 302, 0, 0, 305, 306, 0, 0, 0, 0, 637, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1305, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 64994 */ 0, 0, 0, 0, 1288, 0, 521, 521, 1320, 521, 1323, 0, 680, 681, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 367, 367,
      /* 65021 */ 367, 0, 0, 0, 0, 0, 0, 0, 0, 702, 0, 0, 0, 0, 0, 0, 0, 521, 521, 521, 3876, 521, 521, 521, 521, 3880,
      /* 65047 */ 521, 521, 521, 521, 521, 3886, 521, 521, 521, 57886, 57886, 57886, 61235, 57886, 57886, 57886, 658, 0,
      /* 65065 */ 637, 0, 0, 0, 0, 0, 0, 781, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 790, 0, 795, 0, 0, 0, 0, 0, 0, 637, 0, 0, 781,
      /* 65096 */ 521, 833, 521, 521, 521, 521, 854, 858, 864, 521, 869, 521, 521, 521, 521, 521, 887, 521, 521, 521, 521,
      /* 65117 */ 57886, 57886, 58252, 0, 790, 0, 795, 0, 781, 0, 807, 0, 0, 0, 0, 807, 0, 0, 0, 0, 0, 637, 0, 0, 0, 0, 0,
      /* 65144 */ 0, 0, 0, 781, 0, 0, 0, 0, 0, 0, 1277, 0, 1162, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 65176 */ 0, 0, 0, 0, 670, 0, 0, 0, 0, 0, 0, 0, 0, 57909, 57909, 57909, 57909, 57909, 58382, 57909, 57909, 57909,
      /* 65198 */ 57909, 0, 0, 0, 0, 57886, 57936, 57936, 58403, 57936, 57936, 57936, 57936, 58424, 58428, 58434, 57936,
      /* 65215 */ 58439, 57936, 57936, 57936, 57936, 57936, 521, 521, 521, 521, 521, 521, 0, 57886, 57886, 57886, 57886,
      /* 65232 */ 57886, 57886, 155941, 1138, 0, 0, 1142, 0, 0, 1147, 0, 0, 0, 0, 0, 0, 0, 311, 0, 0, 0, 0, 0, 310, 0,
      /* 65257 */ 310, 311, 0, 310, 310, 311, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 310, 408, 311, 0, 0, 0, 0, 0, 0, 311, 413,
      /* 65285 */ 0, 0, 139264, 147456, 0, 0, 0, 0, 0, 58457, 57936, 57936, 57936, 57936, 521, 521, 521, 887, 521, 521, 0,
      /* 65306 */ 57886, 57886, 57886, 58306, 57886, 57886, 155941, 1138, 0, 301, 0, 0, 305, 0, 0, 0, 0, 0, 0, 0, 0, 2336,
      /* 65328 */ 0, 0, 0, 0, 1806, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2292, 2293, 0, 2295, 2296, 0,
      /* 65358 */ 0, 0, 0, 0, 0, 0, 0, 0, 1152, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1169, 0, 0, 0, 0, 0, 0,
      /* 65391 */ 0, 0, 0, 0, 0, 1179, 0, 0, 0, 1183, 1184, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 367, 367, 0, 0,
      /* 65421 */ 0, 1202, 0, 0, 0, 0, 0, 0, 0, 686, 0, 0, 0, 0, 0, 0, 367, 367, 367, 0, 0, 0, 0, 0, 699, 0, 0, 0, 0, 0,
      /* 65451 */ 0, 0, 0, 708, 0, 0, 1243, 0, 0, 0, 0, 0, 0, 1251, 0, 0, 0, 0, 0, 1256, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 65482 */ 1267, 0, 0, 0, 0, 0, 0, 1301, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 521, 521, 521,
      /* 65513 */ 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 0, 0, 0, 0, 1275, 0, 0, 1152, 0,
      /* 65536 */ 0, 0, 1281, 0, 1283, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1291, 0, 0, 0, 0, 0, 0, 0, 0, 521, 521, 521, 521, 521,
      /* 65564 */ 2393, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 2405, 521, 521, 521, 521, 521, 521, 0,
      /* 65584 */ 1297, 1256, 0, 1281, 1300, 0, 1303, 0, 0, 0, 1183, 0, 0, 0, 0, 1311, 0, 0, 0, 0, 0, 1311, 0, 0, 1202,
      /* 65609 */ 1311, 1318, 521, 521, 521, 521, 521, 521, 0, 0, 0, 2473, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 65627 */ 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 65642 */ 57886, 61043, 57886, 57886, 57886, 57886, 57909, 57909, 57909, 57909, 57909, 1324, 521, 521, 521, 521,
      /* 65658 */ 1330, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 1351, 521, 521, 521, 521, 521, 521, 521, 521,
      /* 65678 */ 521, 521, 521, 521, 1364, 521, 521, 521, 0, 2895, 0, 0, 0, 0, 57886, 57886, 57886, 60243, 57886, 60244,
      /* 65698 */ 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 65713 */ 57886, 57886, 0, 0, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 65729 */ 57909, 521, 521, 1369, 521, 521, 521, 521, 521, 521, 521, 521, 521, 1377, 521, 521, 521, 1384, 1386,
      /* 65748 */ 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 2881, 521, 521, 521, 521, 521,
      /* 65768 */ 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 3202, 521, 521, 521, 521, 521, 521, 521,
      /* 65788 */ 521, 521, 521, 521, 521, 3208, 521, 521, 521, 521, 1409, 58754, 901, 58756, 57886, 57886, 57886, 57886,
      /* 65806 */ 57886, 58763, 57886, 57886, 57886, 57886, 58769, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 65821 */ 57886, 57886, 58790, 57886, 57886, 57886, 57886, 57886, 57886, 59870, 57886, 57886, 57886, 57886, 57886,
      /* 65836 */ 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 65851 */ 57886, 57886, 57886, 57886, 57886, 58818, 57886, 57886, 57886, 57886, 57886, 57886, 57909, 57909, 57909,
      /* 65866 */ 58911, 57909, 57909, 57909, 58918, 58920, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 65881 */ 57909, 57909, 57909, 57909, 57909, 57909, 57909, 58943, 0, 58944, 58945, 57936, 57936, 57936, 57936,
      /* 65896 */ 57936, 57936, 57936, 57936, 57936, 59543, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936,
      /* 65911 */ 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 58984, 57936,
      /* 65926 */ 57936, 57936, 58987, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 58952, 57936, 57936, 57936, 57936,
      /* 65941 */ 58958, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 58979, 57936, 57936, 57936,
      /* 65956 */ 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 58992, 57936, 57936, 57936, 57936, 58997,
      /* 65971 */ 57936, 57936, 57936, 57936, 57936, 59002, 57936, 57936, 57936, 59006, 57936, 57936, 57936, 59013, 59015,
      /* 65986 */ 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 60922,
      /* 66001 */ 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936,
      /* 66016 */ 57936, 57936, 60395, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936,
      /* 66031 */ 57936, 57936, 57936, 57936, 57936, 57936, 59038, 521, 521, 521, 521, 521, 521, 57886, 57886, 57886,
      /* 66047 */ 57886, 57886, 57886, 1138, 0, 0, 0, 1710, 0, 0, 0, 0, 1717, 0, 0, 0, 0, 0, 0, 362, 0, 0, 0, 0, 0, 0, 0,
      /* 66074 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 734, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1757, 0, 0, 0,
      /* 66107 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1775, 0, 0, 0, 0, 0, 0, 0, 1783, 1784, 0, 0, 0, 0, 1840, 1841,
      /* 66137 */ 0, 0, 0, 1844, 0, 0, 0, 0, 0, 1849, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 581632, 0, 0, 0, 0,
      /* 66168 */ 0, 0, 0, 0, 0, 0, 0, 581632, 0, 581632, 581632, 0, 1862, 0, 1864, 1840, 521, 521, 521, 521, 521, 521,
      /* 66190 */ 521, 521, 521, 521, 521, 1876, 521, 521, 521, 521, 1882, 521, 521, 521, 521, 521, 521, 521, 521, 521,
      /* 66210 */ 521, 2850, 521, 2852, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521,
      /* 66230 */ 521, 521, 521, 2427, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 1893, 521, 521, 521,
      /* 66250 */ 521, 1897, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 1910, 521, 521, 521, 1915, 521,
      /* 66270 */ 521, 521, 521, 521, 521, 521, 521, 521, 2849, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521,
      /* 66290 */ 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 2429, 521, 521, 521, 521, 521, 521, 521, 521,
      /* 66310 */ 521, 521, 521, 58754, 0, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 66326 */ 57886, 59319, 57886, 57886, 57886, 57886, 59325, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 66341 */ 57886, 57886, 59336, 50657, 0, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 66356 */ 57909, 57909, 59419, 57909, 57909, 57909, 57909, 59425, 57909, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 66371 */ 57909, 57909, 57909, 59436, 57909, 57909, 57909, 57909, 57909, 57909, 60653, 57909, 57909, 57909, 57909,
      /* 66386 */ 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57936, 57936, 57936, 57936, 57936, 57936,
      /* 66401 */ 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936,
      /* 66416 */ 57936, 57936, 57936, 57936, 61091, 57936, 57909, 57909, 57909, 59440, 57909, 57909, 57909, 57909, 57909,
      /* 66431 */ 57909, 57909, 57909, 57909, 57909, 57909, 57909, 59453, 57909, 57909, 57909, 59458, 57909, 57909, 57909,
      /* 66446 */ 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 59936, 57909, 57909, 57909, 57909, 57909,
      /* 66461 */ 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 59942,
      /* 66476 */ 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57936, 59536, 57936,
      /* 66491 */ 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 59549, 57936, 57936, 57936,
      /* 66506 */ 59554, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936,
      /* 66521 */ 521, 2730, 521, 521, 521, 57886, 60079, 57886, 57886, 57886, 0, 0, 0, 0, 0, 0, 0, 0, 2257, 521, 521,
      /* 66542 */ 59604, 57886, 59606, 57886, 57886, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2277,
      /* 66569 */ 2278, 0, 0, 0, 0, 0, 5210112, 0, 5365760, 0, 5554176, 5570560, 5578752, 0, 5668864, 0, 0, 5791744, 0, 0,
      /* 66589 */ 0, 0, 0, 0, 0, 0, 0, 0, 6201344, 6242304, 6250496, 0, 0, 0, 0, 0, 521, 521, 521, 521, 521, 521, 521,
      /* 66612 */ 521, 521, 521, 3443, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521,
      /* 66632 */ 1382, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 0, 0, 2383, 0, 0, 0, 0,
      /* 66655 */ 0, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 2403, 521, 521, 2407,
      /* 66676 */ 521, 521, 521, 2411, 57886, 57886, 59842, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 66692 */ 57886, 57886, 59852, 57886, 57886, 57886, 59855, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 66707 */ 57886, 57886, 57886, 57886, 57886, 60609, 57886, 57886, 57886, 57886, 0, 0, 57909, 57909, 57909, 57909,
      /* 66723 */ 57909, 60618, 57909, 60619, 57909, 57909, 57909, 57909, 57909, 57886, 57886, 59894, 57886, 57886, 57886,
      /* 66738 */ 57886, 57886, 57886, 57886, 0, 0, 2561, 0, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 66754 */ 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 59923, 57909, 57909, 59927, 57909, 57909,
      /* 66769 */ 57909, 59931, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 59941, 57909,
      /* 66784 */ 57909, 57909, 59944, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 66799 */ 61180, 57909, 57909, 57909, 57909, 57936, 57936, 57936, 57936, 57936, 61186, 57936, 57936, 57936, 61190,
      /* 66814 */ 57936, 57936, 57936, 57936, 57936, 59978, 57909, 57909, 57909, 57909, 57909, 59983, 57909, 57909, 57909,
      /* 66829 */ 57909, 57909, 57909, 57909, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936,
      /* 66844 */ 57936, 57936, 57936, 57936, 57936, 57936, 60006, 57936, 57936, 60010, 57936, 57936, 57936, 60014, 57936,
      /* 66859 */ 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 60024, 57936, 57936, 57936, 60027,
      /* 66874 */ 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 0, 0, 0, 0, 4076, 0, 4078, 521, 521, 521,
      /* 66893 */ 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 57886, 57886, 57886, 60061, 57936, 57936, 57936,
      /* 66910 */ 57936, 57936, 60066, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 521, 521, 521, 521, 521, 57886,
      /* 66926 */ 57886, 57886, 57886, 57886, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2273, 0, 0, 0, 0, 0, 0,
      /* 66954 */ 0, 0, 2743, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2753, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 66987 */ 3629, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2819, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2826, 0, 0, 0, 0, 0, 0,
      /* 67019 */ 521, 521, 2833, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 3465, 3467, 521, 521, 521, 3470, 521,
      /* 67039 */ 3472, 3473, 521, 57886, 57886, 57886, 57886, 57886, 57886, 60824, 57886, 57886, 57886, 57886, 57886,
      /* 67054 */ 2841, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 2856, 521, 521,
      /* 67074 */ 521, 521, 2859, 521, 521, 2861, 521, 2862, 521, 521, 521, 521, 521, 521, 0, 0, 2472, 0, 57886, 57886,
      /* 67094 */ 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 67109 */ 59834, 57886, 57886, 59838, 57886, 521, 521, 521, 521, 2870, 521, 521, 2874, 521, 521, 521, 521, 521,
      /* 67127 */ 521, 521, 521, 521, 2883, 521, 521, 521, 2886, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 3669,
      /* 67147 */ 521, 521, 521, 521, 521, 521, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 67163 */ 57886, 57886, 57886, 57886, 57886, 50657, 58754, 977, 57909, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 67178 */ 57909, 58860, 57909, 57909, 57909, 57909, 57909, 58872, 0, 0, 57909, 57909, 60309, 57909, 57909, 57909,
      /* 67194 */ 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 60317, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 67209 */ 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 61183, 57909, 57936, 57936, 57936, 57936,
      /* 67224 */ 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 60420, 57936, 57936, 57936,
      /* 67239 */ 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 59008, 57936,
      /* 67254 */ 57936, 57936, 57936, 57936, 57936, 57936, 59022, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57909,
      /* 67269 */ 60332, 57909, 57909, 57909, 57909, 60335, 57909, 57909, 60337, 57909, 60338, 57909, 57909, 57909, 57909,
      /* 67284 */ 57909, 57909, 57909, 57909, 57909, 60347, 57909, 57909, 60351, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 67299 */ 57909, 57909, 57909, 57909, 57909, 60655, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57936,
      /* 67314 */ 57936, 57936, 57936, 60666, 57936, 57936, 57936, 57936, 57936, 57936, 60673, 57909, 57909, 60360, 57909,
      /* 67329 */ 57909, 57909, 60363, 60364, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 67344 */ 57909, 57909, 57936, 57936, 60374, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 521, 521,
      /* 67359 */ 3096, 521, 521, 57886, 57886, 60443, 57886, 57886, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 450560,
      /* 67382 */ 450560, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 139264, 147456, 0, 0, 450560, 0, 0, 57936, 57936, 57936,
      /* 67405 */ 60382, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936,
      /* 67420 */ 57936, 57936, 60397, 57936, 57936, 57936, 57936, 60400, 57936, 57936, 60402, 57936, 60403, 57936, 57936,
      /* 67435 */ 57936, 57936, 57936, 57936, 57936, 57936, 61272, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936,
      /* 67450 */ 57936, 521, 57886, 0, 0, 0, 0, 0, 0, 0, 3942, 3627, 0, 0, 0, 0, 0, 371, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 67479 */ 0, 0, 0, 0, 0, 0, 371, 0, 0, 0, 379, 381, 0, 0, 0, 0, 0, 521, 521, 521, 521, 521, 521, 521, 521, 521,
      /* 67505 */ 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 1885, 521, 521, 521, 521, 521, 521, 521, 521, 521,
      /* 67525 */ 3794, 521, 521, 521, 3795, 3796, 521, 521, 521, 521, 521, 521, 521, 521, 57886, 57886, 57886, 57886,
      /* 67543 */ 57886, 57886, 57886, 57886, 57886, 57886, 0, 2559, 0, 0, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 67559 */ 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 67574 */ 57909, 57909, 60325, 57909, 57909, 57909, 57909, 57909, 57909, 3190, 521, 521, 521, 3193, 521, 521, 521,
      /* 67591 */ 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521,
      /* 67612 */ 521, 521, 521, 1917, 521, 521, 521, 521, 521, 57886, 60581, 57886, 57886, 57886, 60584, 57886, 57886,
      /* 67629 */ 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 60594, 57886, 57886, 57886, 57886,
      /* 67644 */ 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 60838, 57886, 57886, 57886, 57886, 57886,
      /* 67659 */ 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 0,
      /* 67674 */ 2561, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 67689 */ 57909, 57909, 57909, 60630, 57909, 57909, 57909, 60633, 57909, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 67704 */ 57909, 57909, 57909, 57909, 57909, 60643, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 67719 */ 57909, 0, 0, 0, 0, 57886, 57936, 57936, 57936, 57936, 57936, 57936, 58417, 57936, 57936, 57936, 57936,
      /* 67736 */ 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 60920, 57936, 57936, 57936, 57936, 57936, 57936,
      /* 67751 */ 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 521, 57886,
      /* 67766 */ 0, 0, 0, 0, 0, 0, 0, 0, 3627, 0, 0, 0, 60674, 57936, 57936, 57936, 57936, 60679, 57936, 57936, 57936,
      /* 67787 */ 60682, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 60692, 57936,
      /* 67802 */ 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 4072, 4073, 0, 0, 0, 0, 0, 4079, 4080, 4081,
      /* 67820 */ 521, 521, 521, 4084, 521, 4086, 521, 521, 521, 521, 61435, 61436, 61437, 3457, 521, 521, 521, 521, 521,
      /* 67839 */ 521, 521, 521, 521, 521, 521, 521, 521, 3469, 521, 521, 521, 521, 521, 57886, 57886, 57886, 60821,
      /* 67857 */ 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 60587, 57886, 57886, 57886, 57886, 57886,
      /* 67872 */ 57886, 57886, 57886, 57886, 57886, 57886, 57886, 60595, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 67887 */ 57886, 57886, 57886, 0, 2560, 0, 0, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 67903 */ 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 60640, 57909, 57909, 57909, 57909, 57909,
      /* 67918 */ 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 60883, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 67933 */ 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 60897, 57909, 57909, 57909, 57909, 57909,
      /* 67948 */ 57936, 57936, 57936, 60905, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936,
      /* 67963 */ 61201, 57936, 57936, 521, 521, 57886, 57886, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3627, 0, 0, 0, 0, 0, 0, 0,
      /* 67989 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3784, 521, 521, 521, 57936, 60939, 57936, 57936, 57936, 57936, 57936, 521,
      /* 68011 */ 521, 521, 57886, 57886, 57886, 0, 0, 0, 0, 0, 3610, 0, 0, 0, 0, 0, 0, 0, 3616, 0, 0, 0, 0, 0, 0, 372, 0,
      /* 68038 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 377, 0, 0, 0, 0, 0, 0, 0, 0, 2824, 2782, 0, 0, 0, 0, 0,
      /* 68070 */ 2829, 0, 0, 0, 521, 521, 521, 521, 521, 521, 521, 2838, 521, 521, 521, 521, 521, 0, 0, 0, 3640, 3641, 0,
      /* 68093 */ 0, 0, 0, 521, 521, 521, 521, 521, 521, 521, 521, 521, 3651, 521, 521, 521, 521, 521, 521, 521, 521, 521,
      /* 68115 */ 521, 521, 521, 521, 3671, 521, 521, 521, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 68132 */ 57886, 57886, 57886, 57886, 57886, 57886, 60612, 57886, 0, 0, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 68148 */ 57909, 57909, 60620, 57909, 57909, 57909, 57909, 521, 3661, 521, 521, 521, 521, 521, 3666, 521, 3668,
      /* 68165 */ 521, 521, 521, 521, 521, 521, 521, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 61022,
      /* 68182 */ 57886, 57886, 57886, 57886, 57886, 57886, 57886, 60292, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 68197 */ 57886, 57886, 57886, 57886, 57886, 57886, 57886, 60303, 57886, 57886, 57886, 57886, 57886, 0, 2962, 0,
      /* 68213 */ 0, 57909, 57909, 57909, 57909, 61051, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 68228 */ 57909, 57909, 57909, 57909, 57909, 61061, 57909, 57909, 57909, 57909, 57909, 57909, 61067, 57909, 61069,
      /* 68243 */ 57909, 57909, 57909, 57909, 57909, 57909, 57909, 58884, 57909, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 68258 */ 57909, 57909, 58894, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 68273 */ 57909, 57909, 59938, 57909, 57909, 57909, 57909, 57909, 57909, 59943, 57909, 59945, 57909, 57909, 57909,
      /* 68288 */ 57909, 57909, 57909, 57909, 57909, 57936, 57936, 57936, 57936, 61096, 57936, 61098, 57936, 57936, 57936,
      /* 68303 */ 57936, 57936, 57936, 57936, 57936, 521, 521, 521, 57886, 57886, 57886, 0, 0, 0, 3765, 0, 0, 0, 0, 0, 0,
      /* 68324 */ 0, 0, 2363, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2374, 0, 0, 0, 0, 0, 0, 0, 0, 0, 656, 0, 0, 659, 660,
      /* 68355 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 671, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3770, 0, 0, 0, 0, 0, 0, 0, 3627, 0, 0, 0,
      /* 68387 */ 0, 0, 3779, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521,
      /* 68413 */ 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 3786, 521, 521, 521, 3790, 521, 521,
      /* 68433 */ 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 3799, 521, 521, 521, 57886, 57886, 57886, 57886,
      /* 68452 */ 57886, 61148, 57886, 57886, 57886, 57886, 57886, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 60867,
      /* 68467 */ 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 68482 */ 57909, 60880, 57909, 57909, 61152, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 68497 */ 57886, 57886, 57886, 57886, 61161, 57886, 57886, 57886, 57886, 57909, 57909, 57909, 57909, 57909, 61167,
      /* 68512 */ 57909, 57909, 57909, 61171, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 61053, 57909, 57909, 57909,
      /* 68527 */ 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 68542 */ 57909, 57909, 57909, 57909, 57909, 57909, 59459, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 68557 */ 61438, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 61446, 57886, 57909, 57909, 57909, 61451,
      /* 68572 */ 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 61459, 57909, 57936, 57936, 57936, 61464, 57936,
      /* 68587 */ 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 59576, 57936, 57936, 57936, 57936, 57936, 57936,
      /* 68602 */ 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 521,
      /* 68617 */ 521, 521, 521, 521, 57886, 57886, 57886, 57886, 57886, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57936,
      /* 68641 */ 57936, 57936, 57936, 57936, 61472, 57936, 0, 0, 0, 0, 4131, 0, 4133, 521, 521, 521, 521, 521, 521, 521,
      /* 68661 */ 521, 521, 4139, 4140, 521, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 61445, 57886, 57886,
      /* 68677 */ 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 61458, 57909, 57909, 57936,
      /* 68692 */ 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 60919, 57936, 57936, 57936, 57936,
      /* 68707 */ 57936, 57936, 57936, 57936, 57936, 57936, 60929, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936,
      /* 68722 */ 57936, 0, 0, 0, 0, 0, 0, 0, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 4088, 521, 521, 57886,
      /* 68744 */ 57886, 57886, 57886, 57886, 57886, 61490, 61491, 57886, 57886, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 68759 */ 57909, 57909, 57909, 61498, 61499, 57909, 57909, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936,
      /* 68774 */ 57936, 61506, 61507, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 61415, 0, 0, 4074, 4075, 0,
      /* 68791 */ 0, 0, 521, 521, 521, 4082, 521, 521, 521, 521, 521, 521, 521, 521, 4090, 57886, 57886, 57886, 57886,
      /* 68810 */ 57886, 57909, 57909, 57909, 57909, 57909, 60865, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 68825 */ 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 61184, 57936,
      /* 68840 */ 57936, 57936, 57936, 57936, 57936, 57936, 61189, 57936, 57936, 57936, 57936, 57936, 57936, 0, 0, 521,
      /* 68856 */ 521, 521, 521, 57886, 57886, 57886, 57886, 57909, 57909, 57909, 57909, 57936, 57936, 57936, 57936, 0,
      /* 68872 */ 521, 4220, 57886, 61565, 57909, 61566, 57936, 61567, 521, 57886, 57909, 57936, 521, 521, 521, 521, 521,
      /* 68889 */ 521, 521, 1899, 1900, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521,
      /* 68909 */ 521, 521, 521, 521, 521, 521, 521, 3800, 521, 521, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 68926 */ 57886, 57886, 425, 425, 0, 0, 131072, 425, 0, 0, 0, 425, 0, 0, 447, 0, 425, 0, 476, 476, 476, 0, 0, 361,
      /* 68950 */ 361, 361, 495, 361, 361, 361, 361, 476, 476, 476, 476, 476, 476, 476, 476, 476, 476, 476, 476, 476, 476,
      /* 68971 */ 476, 539, 57905, 539, 57905, 539, 539, 57905, 539, 539, 57928, 57905, 539, 539, 57905, 57905, 57905,
      /* 68988 */ 57928, 57905, 57905, 57905, 57905, 57905, 57905, 57905, 57928, 57928, 57905, 57905, 57955, 57905, 57905,
      /* 69003 */ 57905, 57905, 57905, 57905, 57905, 57955, 57955, 57905, 57905, 57905, 57905, 57955, 57955, 57905, 539,
      /* 69018 */ 57905, 57905, 57905, 1, 24578, 3, 155941, 155941, 295, 0, 0, 0, 0, 0, 301, 302, 0, 0, 305, 306, 0, 0, 0,
      /* 69041 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 376832, 0, 376832, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 69072 */ 0, 0, 0, 1854, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57909, 58369, 57909, 57909, 57909, 57909, 58387, 57909,
      /* 69095 */ 57909, 57909, 0, 0, 0, 0, 58293, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 58425, 57936, 57936,
      /* 69112 */ 57936, 57936, 57936, 58444, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 60069, 57936,
      /* 69127 */ 57936, 57936, 57936, 2729, 521, 521, 521, 521, 60078, 57886, 57886, 57886, 57886, 2739, 2266, 0, 2740,
      /* 69144 */ 2269, 0, 0, 2742, 57936, 58462, 57936, 57936, 57936, 521, 521, 521, 521, 892, 521, 0, 57886, 57886,
      /* 69162 */ 57886, 57886, 58311, 57886, 155941, 1138, 0, 1139, 0, 0, 1144, 0, 0, 0, 0, 0, 1150, 0, 0, 0, 0, 0,
      /* 69184 */ 5341184, 0, 5652480, 0, 0, 0, 0, 4759552, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 69212 */ 1827, 0, 0, 0, 0, 0, 0, 0, 1834, 0, 0, 0, 0, 0, 0, 1244, 0, 0, 0, 0, 1249, 0, 0, 0, 1253, 0, 0, 0, 0, 0,
      /* 69242 */ 0, 0, 1253, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 466944, 0, 0, 0, 0, 0, 0, 0, 0, 1825, 0, 0, 0, 0, 0, 0, 0,
      /* 69273 */ 0, 0, 0, 0, 0, 353, 354, 355, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 367, 0, 295, 0, 521, 521, 521,
      /* 69301 */ 1327, 521, 521, 521, 1336, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521,
      /* 69321 */ 521, 521, 521, 521, 521, 521, 521, 521, 521, 2895, 0, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 69339 */ 57886, 57886, 57886, 57886, 60574, 57886, 57886, 60578, 57886, 521, 521, 521, 58754, 901, 57886, 57886,
      /* 69355 */ 57886, 57886, 57886, 57886, 57886, 57886, 57886, 58766, 57886, 57886, 57886, 58775, 57886, 57886, 57886,
      /* 69370 */ 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 61034, 57886, 57886, 57886, 57886,
      /* 69385 */ 57886, 57886, 57886, 57886, 61042, 57886, 57886, 57886, 57886, 57886, 57886, 57909, 57909, 57909, 61047,
      /* 69400 */ 57909, 57936, 57936, 57936, 57936, 57936, 58955, 57936, 57936, 57936, 58964, 57936, 57936, 57936, 57936,
      /* 69415 */ 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936,
      /* 69430 */ 57936, 57936, 57936, 59555, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 521,
      /* 69445 */ 521, 521, 521, 521, 521, 521, 1931, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521,
      /* 69465 */ 521, 521, 521, 521, 521, 521, 1953, 521, 521, 521, 521, 521, 521, 0, 2470, 0, 0, 57886, 57886, 57886,
      /* 69485 */ 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 69500 */ 57886, 57886, 57886, 59839, 521, 58754, 0, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 69515 */ 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 69530 */ 57886, 57886, 59333, 57886, 57886, 57886, 57886, 57886, 57909, 57909, 57909, 57909, 60864, 57909, 57909,
      /* 69545 */ 57909, 57909, 60868, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 60874, 57909, 57909, 57909, 57909,
      /* 69560 */ 57909, 57909, 57909, 57909, 57909, 57909, 0, 0, 0, 0, 57886, 57936, 57936, 58402, 57936, 57936, 57936,
      /* 69577 */ 57936, 57936, 57936, 58433, 58435, 57936, 57936, 57936, 57936, 57936, 57936, 50657, 0, 57909, 57909,
      /* 69592 */ 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 69607 */ 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 59433, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 69622 */ 57909, 57909, 57909, 59986, 57909, 57909, 57909, 57909, 57936, 57936, 57936, 57936, 57936, 57936, 57936,
      /* 69637 */ 57936, 57936, 57936, 57936, 57936, 60001, 57936, 57936, 60004, 57936, 57936, 57909, 57909, 57909, 57909,
      /* 69652 */ 57909, 59474, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 59486, 57909, 57909, 57909, 57909,
      /* 69667 */ 57909, 57909, 57909, 57909, 57909, 57909, 59497, 57909, 57909, 57909, 57909, 57909, 57886, 57886, 57886,
      /* 69682 */ 57886, 59372, 57886, 57886, 59375, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 69697 */ 59389, 57886, 57886, 57886, 57886, 57886, 57886, 59395, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 69712 */ 57886, 59872, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 69727 */ 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 60304, 57886, 57886, 57886,
      /* 69742 */ 0, 2962, 0, 0, 57936, 57936, 57936, 57936, 59570, 57936, 57936, 57936, 57936, 57936, 57936, 57936,
      /* 69758 */ 57936, 59582, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 59593, 57936, 57936,
      /* 69773 */ 57936, 57936, 57936, 521, 521, 521, 521, 521, 521, 0, 57886, 57886, 57886, 57886, 57886, 57886, 293,
      /* 69790 */ 1138, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3119, 0, 3120, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 69821 */ 3135, 0, 0, 0, 0, 2283, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 69854 */ 2301, 0, 0, 0, 0, 2359, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 69887 */ 336, 0, 0, 0, 0, 57886, 59841, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 69904 */ 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 69919 */ 57886, 57886, 57886, 57886, 57886, 59863, 57886, 57886, 57886, 57909, 57909, 57909, 57909, 57909, 59930,
      /* 69934 */ 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 69949 */ 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 0, 57886, 57936, 57936,
      /* 69964 */ 58947, 57936, 57936, 57936, 57936, 57936, 57936, 60013, 57936, 57936, 57936, 57936, 57936, 57936, 57936,
      /* 69979 */ 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936,
      /* 69994 */ 57936, 57936, 57936, 57936, 59589, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 521, 521, 0,
      /* 70010 */ 0, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 60313, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 70025 */ 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 70040 */ 57909, 58931, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 0, 57886, 57936, 57936, 57936,
      /* 70055 */ 57936, 60626, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 70070 */ 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 70085 */ 57909, 57909, 57909, 1259, 57886, 57936, 57936, 57936, 57936, 57936, 60675, 57936, 57936, 57936, 57936,
      /* 70100 */ 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936,
      /* 70115 */ 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 59524, 57936, 57936, 57936,
      /* 70130 */ 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57886, 57886, 57886, 61155, 57886, 57886, 57886,
      /* 70145 */ 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57909, 57909,
      /* 70160 */ 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 70175 */ 57909, 57909, 57936, 61174, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 70190 */ 57909, 57909, 57909, 57909, 57909, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936,
      /* 70205 */ 57936, 57936, 61193, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 61100, 57936, 57936, 57936,
      /* 70220 */ 57936, 57936, 57936, 521, 521, 521, 57886, 57886, 57886, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1162, 0, 0, 0,
      /* 70244 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 367, 367, 0, 0, 0, 0, 0, 0, 0, 1205, 0, 0, 57936,
      /* 70274 */ 57936, 57936, 57936, 61471, 57936, 57936, 0, 0, 0, 0, 0, 0, 0, 521, 521, 521, 521, 521, 521, 521, 521,
      /* 70295 */ 521, 521, 521, 521, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57909, 57909, 57886, 57886, 57936,
      /* 70311 */ 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57936, 57936, 57886, 57886, 57886, 57886, 57936, 57936,
      /* 70326 */ 57886, 521, 57886, 57886, 57886, 372, 372, 0, 0, 131072, 372, 0, 0, 0, 372, 0, 0, 0, 0, 372, 0, 0, 0, 0,
      /* 70350 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57906, 57906,
      /* 70380 */ 57906, 57906, 57906, 57906, 57906, 57929, 57929, 57906, 57906, 57956, 57906, 57906, 57906, 57906, 57906,
      /* 70395 */ 57906, 57906, 57956, 57956, 57906, 57906, 57906, 57906, 57956, 57956, 57906, 540, 57906, 57906, 57906,
      /* 70410 */ 1, 24578, 3, 155941, 155941, 295, 0, 0, 0, 0, 0, 301, 302, 0, 0, 305, 306, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 70437 */ 0, 0, 0, 0, 2334720, 0, 2334720, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 521, 521, 521,
      /* 70466 */ 2834, 2835, 521, 521, 521, 521, 521, 521, 521, 521, 57886, 57886, 57886, 58267, 57886, 57886, 57886,
      /* 70483 */ 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 0, 57909, 57909,
      /* 70498 */ 57909, 57909, 57909, 57909, 58343, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 70513 */ 61179, 57909, 57909, 57909, 57909, 57909, 57909, 57936, 57936, 57936, 57936, 57936, 57936, 61187, 57936,
      /* 70528 */ 57936, 57936, 57936, 57936, 57936, 57936, 57936, 521, 521, 521, 521, 521, 57886, 57886, 57886, 57886,
      /* 70544 */ 57886, 301, 305, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1282, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 70575 */ 0, 0, 0, 0, 0, 2758, 2759, 0, 0, 2762, 0, 2764, 0, 0, 0, 0, 0, 521, 521, 521, 58754, 901, 57886, 57886,
      /* 70599 */ 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 58780, 57886,
      /* 70614 */ 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 0, 0, 0, 0, 57909, 57909, 59909,
      /* 70631 */ 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 70646 */ 60658, 57909, 57909, 57909, 57909, 57936, 57936, 57936, 57936, 57936, 60667, 57936, 60668, 57936, 57936,
      /* 70661 */ 57936, 57936, 58875, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 70676 */ 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 70691 */ 57909, 57909, 57909, 57909, 59947, 57909, 57909, 57909, 57909, 57909, 0, 0, 0, 3771, 0, 3772, 0, 0, 0,
      /* 70710 */ 0, 3627, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 521, 521, 521, 521, 521, 521, 521, 521, 521,
      /* 70738 */ 521, 521, 521, 521, 521, 521, 521, 3657, 521, 521, 521, 521, 521, 521, 0, 0, 0, 363, 0, 0, 0, 0, 0, 0,
      /* 70762 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 367, 0, 0, 245760, 0, 0, 0, 363, 0, 0,
      /* 70794 */ 0, 0, 0, 0, 0, 0, 0, 0, 363, 0, 364, 0, 0, 0, 0, 363, 0, 0, 0, 139264, 147456, 0, 0, 0, 0, 0, 0, 653,
      /* 70822 */ 654, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1858, 0, 0, 0, 0, 0, 0,
      /* 70855 */ 0, 0, 0, 433, 131072, 0, 433, 433, 0, 0, 433, 0, 364, 433, 0, 459, 0, 0, 0, 487, 487, 490, 490, 490,
      /* 70879 */ 490, 496, 497, 490, 490, 510, 510, 510, 510, 510, 510, 510, 510, 510, 510, 510, 510, 510, 510, 510, 541,
      /* 70900 */ 57907, 541, 57907, 541, 541, 57907, 541, 541, 57930, 57907, 541, 541, 57907, 57907, 57907, 57930, 57907,
      /* 70917 */ 57907, 57907, 57907, 57907, 57907, 57907, 57930, 57930, 57907, 57907, 57957, 57907, 57907, 57907, 57907,
      /* 70932 */ 57907, 57907, 57907, 57957, 57957, 57907, 57907, 57907, 57907, 57957, 57957, 57907, 619, 57907, 57970,
      /* 70947 */ 57970, 1, 24578, 3, 155941, 155941, 295, 0, 0, 0, 0, 0, 301, 302, 0, 0, 305, 306, 0, 0, 0, 0, 0, 0, 0,
      /* 70972 */ 0, 0, 0, 0, 0, 0, 0, 1762, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1239, 1806,
      /* 71004 */ 0, 0, 0, 0, 1246, 1246, 0, 0, 57909, 57909, 57909, 57909, 57909, 58383, 57909, 57909, 57909, 57909, 0,
      /* 71023 */ 0, 0, 0, 57886, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936,
      /* 71039 */ 57936, 57936, 57936, 57936, 57936, 60688, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936,
      /* 71054 */ 57936, 57936, 57936, 57936, 57936, 57936, 58458, 57936, 57936, 57936, 57936, 521, 521, 521, 888, 521,
      /* 71070 */ 521, 0, 57886, 57886, 57886, 58307, 57886, 57886, 155941, 1138, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 71092 */ 1794, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1806, 0, 0, 0, 0, 0, 0, 0, 0, 1272, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 71124 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3402, 2768, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 71157 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2318336, 57909, 57909, 57909,
      /* 71184 */ 57909, 57909, 60334, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 71199 */ 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 60344,
      /* 71214 */ 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57886,
      /* 71229 */ 57886, 57886, 58268, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 71244 */ 57886, 57886, 57886, 0, 57909, 57909, 57909, 57909, 57909, 57909, 58344, 57909, 57909, 57909, 57909,
      /* 71259 */ 57909, 57909, 57909, 57909, 57909, 58393, 0, 0, 0, 0, 57886, 57936, 57936, 57936, 57936, 58409, 57936,
      /* 71276 */ 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 59517, 59518,
      /* 71291 */ 57936, 57936, 57936, 57936, 59525, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936,
      /* 71306 */ 57936, 1240, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 71338 */ 0, 2792, 0, 521, 1368, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521,
      /* 71359 */ 521, 521, 521, 521, 521, 521, 1395, 521, 521, 521, 521, 521, 521, 521, 521, 2875, 521, 521, 521, 521,
      /* 71379 */ 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 57886,
      /* 71399 */ 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 71414 */ 57886, 57886, 58834, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 50657, 58754,
      /* 71429 */ 977, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 71444 */ 57909, 60895, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57936, 60903, 57936, 57936, 57936, 57936,
      /* 71459 */ 57936, 57936, 57936, 57936, 57936, 57936, 57936, 58996, 57936, 57936, 57936, 57936, 57936, 57936, 57936,
      /* 71474 */ 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936,
      /* 71489 */ 59024, 57936, 57936, 57936, 57936, 57936, 521, 521, 521, 521, 521, 521, 0, 57886, 57886, 57886, 57886,
      /* 71506 */ 57886, 57886, 155941, 1138, 0, 301, 0, 0, 305, 0, 0, 0, 0, 0, 0, 0, 0, 1216, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 71533 */ 0, 0, 0, 0, 0, 0, 1232, 0, 0, 0, 0, 0, 0, 0, 0, 1304, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 71566 */ 0, 521, 521, 521, 521, 521, 3178, 521, 3179, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521,
      /* 71587 */ 521, 521, 521, 2469, 0, 0, 0, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 71604 */ 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 59883, 57886, 57886,
      /* 71619 */ 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 521, 521, 521, 2844, 521, 521, 521, 521,
      /* 71636 */ 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521,
      /* 71657 */ 521, 521, 521, 521, 2434, 521, 521, 57936, 57936, 57936, 57936, 57936, 57936, 60385, 57936, 57936,
      /* 71673 */ 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936,
      /* 71688 */ 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 59522, 57936, 57936, 57936, 57936, 57936, 57936,
      /* 71703 */ 57936, 57936, 57936, 57936, 57936, 57936, 57936, 0, 0, 0, 640, 0, 0, 0, 0, 521, 521, 521, 521, 521, 521,
      /* 71724 */ 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 893, 521, 521, 521, 57886, 57886, 57886, 57886,
      /* 71743 */ 57886, 57909, 57909, 60862, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 71758 */ 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 60879, 57909, 60881, 57909, 57936, 58463,
      /* 71773 */ 57936, 57936, 57936, 1126, 521, 521, 521, 893, 521, 0, 57886, 58477, 57886, 57886, 58312, 57886, 155941,
      /* 71790 */ 1138, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1817, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 71823 */ 0, 0, 0, 402, 0, 0, 0, 0, 0, 0, 0, 0, 331, 521, 58754, 0, 57886, 57886, 57886, 57886, 57886, 57886,
      /* 71845 */ 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 59326, 57886, 57886,
      /* 71860 */ 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 0, 0, 0, 0, 57909, 59908, 57909, 57909, 57909,
      /* 71877 */ 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 60343, 57909,
      /* 71892 */ 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 50657,
      /* 71907 */ 0, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 71922 */ 57909, 57909, 57909, 57909, 59426, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 71937 */ 57909, 57909, 59961, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 71952 */ 57909, 57909, 57909, 57909, 57909, 57909, 57909, 60346, 57909, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 71967 */ 57909, 57909, 57909, 57909, 57909, 521, 521, 521, 521, 2415, 521, 2417, 521, 521, 521, 521, 521, 521,
      /* 71985 */ 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 2432,
      /* 72005 */ 521, 521, 521, 521, 521, 521, 2867, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521,
      /* 72025 */ 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 1923,
      /* 72045 */ 57936, 57936, 57936, 57936, 60409, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936,
      /* 72060 */ 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936,
      /* 72075 */ 57936, 57936, 60423, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936, 57936,
      /* 72090 */ 57936, 3660, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 57886,
      /* 72109 */ 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 0, 0,
      /* 72125 */ 0, 2562, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57909,
      /* 72140 */ 57909, 57909, 57909, 57909, 57909, 57936, 57936, 57936, 61185, 57936, 57936, 57936, 61188, 57936, 57936,
      /* 72155 */ 57936, 57936, 57936, 57936, 57936, 0, 0, 0, 0, 131072, 0, 0, 0, 0, 0, 0, 443, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 72181 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 667, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2310144, 0, 0,
      /* 72211 */ 2310144, 0, 0, 0, 0, 0, 0, 0, 2310144, 0, 2310144, 0, 0, 0, 0, 0, 0, 2310144, 2310560, 2310560, 0,
      /* 72232 */ 2310144, 0, 0, 2310144, 0, 0, 0, 0, 0, 0, 2310144, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2310144, 0, 0, 0, 0, 0,
      /* 72259 */ 0, 2310144, 0, 0, 0, 0, 0, 0, 654, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 72291 */ 0, 0, 0, 2310144, 0, 367, 0, 0, 0, 0, 0, 0, 0, 2310560, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 72321 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 380, 0, 383, 0, 0, 0, 0, 0, 0, 2310144, 0, 0, 0, 2310144, 0, 0, 0, 0,
      /* 72350 */ 0, 2310144, 0, 0, 2310144, 0, 0, 2310144, 0, 2310144, 2310144, 0, 2310144, 0, 2310144, 2310144, 0, 0, 0,
      /* 72369 */ 0, 0, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 3445, 521, 521, 521, 521, 521,
      /* 72390 */ 521, 521, 521, 521, 521, 521, 521, 521, 1347, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521,
      /* 72410 */ 521, 521, 521, 521, 1362, 521, 521, 2310144, 0, 0, 2310733, 2310733, 2310733, 2310733, 2310733, 2310733,
      /* 72426 */ 2310733, 2310733, 2310733, 2310733, 2310733, 2310733, 2310733, 2310733, 2310733, 2310733, 2310733,
      /* 72437 */ 2310733, 2310733, 2310733, 2310733, 2310733, 2310733, 2310733, 2310733, 2310144, 2310733, 2310144,
      /* 72448 */ 2310144, 2310733, 1, 24578, 3, 0, 0, 4366336, 0, 0, 0, 0, 0, 301, 302, 0, 4268032, 305, 306, 0, 0, 0, 0,
      /* 72471 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2310, 0, 0, 0, 0, 0, 0, 0, 0, 2318, 0, 0, 0, 0, 0, 2322, 0, 0, 2324, 0, 0,
      /* 72502 */ 0, 0, 0, 0, 0, 0, 6275072, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4857856, 4874240, 0, 0, 0,
      /* 72531 */ 0, 0, 0, 0, 0, 521, 521, 521, 839, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521,
      /* 72554 */ 521, 521, 898, 57886, 57886, 57886, 0, 0, 0, 0, 131072, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 460, 2335197,
      /* 72577 */ 2335197, 2335197, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 2335231, 2335231, 2335231, 2335231,
      /* 72593 */ 2335231, 2335231, 2335231, 2335231, 2335231, 2335231, 2335231, 2335231, 2335231, 2335231, 2335231, 0, 0,
      /* 72606 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3392, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3399, 3400, 0, 3401, 0,
      /* 72636 */ 2335231, 1, 24578, 3, 0, 0, 4366336, 0, 0, 0, 0, 0, 301, 302, 0, 4268032, 305, 306, 0, 0, 0, 0, 0, 0, 0,
      /* 72661 */ 0, 0, 0, 0, 0, 0, 0, 2750, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2763, 0, 0, 0, 0, 0, 2767, 0, 0,
      /* 72693 */ 0, 0, 417, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2359296, 0, 2359296, 2359296, 2359296, 2359296, 2359296,
      /* 72713 */ 2359296, 2359296, 2359296, 2359296, 2359296, 2359296, 2359296, 2359296, 2359296, 2359296, 0, 0, 0, 0, 0,
      /* 72728 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3416, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2359296, 1, 24578,
      /* 72758 */ 3, 0, 0, 4366336, 0, 0, 0, 0, 0, 301, 302, 0, 4268032, 305, 306, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 72786 */ 0, 2798, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2813, 0, 0, 0, 0, 2367488, 0, 0, 4268032, 0,
      /* 72815 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 367, 0, 295, 0, 0, 0,
      /* 72848 */ 0, 0, 6275072, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 976, 0, 0, 0, 0, 0, 4857856, 4874240, 0, 0, 0, 0, 0, 0,
      /* 72876 */ 0, 0, 521, 521, 521, 2391, 2392, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521,
      /* 72897 */ 521, 521, 521, 521, 521, 2855, 521, 521, 521, 521, 521, 521, 521, 2860, 521, 521, 521, 521, 521, 521,
      /* 72917 */ 521, 521, 0, 1, 24578, 3, 155941, 155941, 295, 0, 0, 0, 0, 0, 301, 302, 0, 0, 305, 306, 0, 0, 0, 0, 0,
      /* 72942 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 3117, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3134, 0, 0,
      /* 72974 */ 212992, 0, 0, 0, 0, 0, 4366336, 0, 0, 0, 0, 0, 0, 0, 0, 4268032, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 73003 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 382, 0, 0, 6258688, 6447104, 0, 0, 6127616, 0, 6348800,
      /* 73029 */ 5906432, 0, 5537792, 0, 0, 0, 0, 0, 5939200, 0, 0, 5677056, 6365184, 4866048, 0, 6070272, 5545984,
      /* 73046 */ 5152768, 0, 0, 6144000, 4358144, 4866048, 4882432, 4358144, 4358144, 4358144, 0, 1411, 0, 0, 0, 0, 0,
      /* 73063 */ 4857856, 4874240, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5259264, 0, 0, 0, 0, 0, 0, 0, 0, 4358144,
      /* 73088 */ 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144,
      /* 73099 */ 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 900, 900, 900, 5537792,
      /* 73112 */ 5545984, 5586944, 5734400, 5971968, 4358144, 6045696, 4358144, 6070272, 4358144, 4358144, 4358144,
      /* 73123 */ 4358144, 6348800, 4358144, 6144000, 0, 6144000, 0, 4988928, 5005312, 0, 0, 0, 0, 5775360, 0, 0, 0, 0, 0,
      /* 73142 */ 0, 0, 750, 808, 0, 0, 0, 750, 0, 0, 811, 692, 0, 0, 0, 816, 0, 0, 0, 818, 0, 0, 0, 685, 692, 0, 0,
      /* 73169 */ 4358144, 5005312, 4358144, 4358144, 4358144, 5120000, 5136384, 4358144, 4358144, 4358144, 4358144,
      /* 73180 */ 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 6324224, 5914624, 5914624, 0, 0, 0, 0, 0, 5513216,
      /* 73195 */ 5783552, 0, 0, 0, 0, 0, 0, 656, 0, 779, 0, 0, 0, 0, 0, 0, 0, 783, 0, 0, 0, 0, 792, 0, 0, 0, 0, 0, 800,
      /* 73224 */ 0, 783, 0, 0
    ];

    private static EXPECTED: number[] =
    [
      /*    0 */ 166, 182, 211, 1104, 242, 1452, 1467, 273, 289, 712, 1117, 319, 349, 333, 365, 381, 397, 413, 195, 1866,
      /*   20 */ 2240, 2243, 2234, 2234, 2234, 2234, 2234, 2234, 2234, 2234, 2234, 2234, 2234, 429, 445, 461, 477, 2088,
      /*   38 */ 226, 493, 2075, 939, 621, 523, 543, 1716, 559, 575, 591, 607, 1422, 650, 666, 1822, 697, 1565, 634, 728,
      /*   58 */ 738, 754, 796, 812, 828, 844, 860, 876, 892, 908, 924, 955, 2180, 985, 681, 2211, 1015, 1044, 1028, 1060,
      /*   78 */ 1090, 1133, 1320, 1149, 1165, 1551, 1181, 1197, 1213, 1229, 1259, 1904, 1365, 1375, 999, 969, 1762, 1289,
      /*   96 */ 1305, 1336, 1351, 1488, 1391, 1407, 1504, 1623, 1520, 1536, 1581, 1273, 1610, 1639, 1655, 1671, 2118,
      /*  113 */ 2149, 1687, 1703, 1437, 507, 1732, 1748, 1778, 1074, 780, 1809, 1838, 1854, 1890, 1920, 1936, 1952, 1968,
      /*  131 */ 1984, 2000, 2016, 2032, 2061, 257, 2104, 303, 2045, 767, 1793, 1594, 2134, 1243, 2165, 2196, 2227, 2234,
      /*  149 */ 1874, 1479, 2234, 2234, 2234, 2234, 2234, 2234, 2234, 2234, 2234, 2234, 2234, 2234, 2234, 2234, 536,
      /*  166 */ 2259, 2263, 2271, 2271, 2271, 2265, 2269, 2271, 2272, 2276, 2279, 2286, 2282, 2290, 2294, 2298, 2302,
      /*  183 */ 2306, 2310, 2381, 2790, 2790, 4003, 4941, 2790, 2791, 2314, 3074, 2982, 2790, 2790, 2790, 2687, 2790,
      /*  200 */ 5013, 2790, 2790, 2790, 2790, 2790, 2790, 2790, 2827, 2790, 2571, 3537, 4080, 2436, 2320, 2443, 2466,
      /*  217 */ 2326, 2336, 2790, 2790, 2790, 2343, 2790, 2790, 2349, 3841, 2707, 2790, 2734, 2759, 2790, 2790, 2790,
      /*  234 */ 2790, 4756, 2738, 2790, 2790, 2790, 2790, 4767, 2321, 2390, 2466, 2466, 2466, 2466, 2355, 2361, 2790,
      /*  251 */ 2790, 2790, 2790, 2790, 2371, 4535, 2790, 2696, 4816, 2790, 2790, 2790, 2697, 4817, 2790, 2790, 2790,
      /*  268 */ 4822, 4790, 2790, 2790, 3017, 3842, 2448, 2790, 2790, 3537, 4079, 4079, 4079, 4079, 4079, 4099, 2436,
      /*  285 */ 2436, 2436, 2436, 2436, 2387, 2321, 2321, 2321, 2321, 2321, 2459, 2466, 2466, 2466, 2466, 2466, 2332,
      /*  302 */ 2401, 2790, 2790, 2762, 4873, 2790, 2790, 2790, 2790, 2820, 4885, 2790, 2790, 2790, 2790, 3243, 4891,
      /*  319 */ 3542, 4079, 4079, 4079, 4097, 2436, 2436, 2436, 2436, 2458, 2321, 2321, 2321, 2331, 2466, 2466, 2426,
      /*  336 */ 2790, 2790, 3074, 4076, 4079, 4079, 2396, 2436, 2482, 2321, 2321, 2464, 2466, 2466, 2411, 2790, 2790,
      /*  353 */ 4535, 2790, 4077, 4079, 4079, 2480, 2436, 2436, 2457, 2321, 2321, 2420, 2467, 2428, 2834, 3536, 4079,
      /*  370 */ 2434, 2436, 2441, 2321, 2465, 2332, 2447, 4095, 4081, 2437, 2376, 2466, 2452, 4078, 2436, 2321, 2466,
      /*  387 */ 4335, 4081, 2456, 2463, 2422, 4080, 2482, 2463, 2471, 4098, 2483, 2331, 2478, 2329, 2487, 2491, 2474,
      /*  404 */ 2495, 2498, 2508, 2512, 2519, 2519, 2519, 2515, 2525, 2519, 2521, 2529, 2536, 2532, 2540, 2544, 2548,
      /*  421 */ 2552, 2556, 2560, 4697, 2790, 2790, 2790, 4729, 2790, 4591, 2584, 2858, 2790, 2790, 2790, 3364, 2591,
      /*  438 */ 2790, 3610, 2603, 2609, 2613, 2617, 2621, 2625, 2628, 2632, 2636, 4053, 2702, 2790, 2790, 2790, 2790,
      /*  455 */ 3877, 2642, 2648, 2892, 4432, 2646, 2915, 2367, 2654, 3828, 2813, 2790, 2652, 3406, 2659, 2664, 2790,
      /*  472 */ 2790, 2790, 2790, 2790, 2671, 4434, 2580, 4063, 2790, 2676, 2680, 2790, 2790, 2790, 3867, 2684, 2790,
      /*  489 */ 2790, 2790, 3868, 2685, 2750, 2790, 2790, 2790, 2790, 2756, 2760, 2790, 2790, 2790, 2790, 2790, 2880,
      /*  506 */ 2666, 2790, 2790, 2777, 4228, 3359, 2851, 4232, 4238, 2790, 4246, 4420, 4253, 3266, 4258, 4264, 3443,
      /*  523 */ 2790, 4721, 2782, 2790, 2790, 2790, 3228, 3232, 2790, 2790, 2790, 2790, 4105, 2790, 2790, 2790, 2790,
      /*  540 */ 2790, 2790, 3903, 3876, 2788, 4641, 2790, 2790, 2790, 3307, 2790, 2790, 2790, 4640, 2818, 2790, 2790,
      /*  557 */ 3306, 2795, 2935, 2812, 2790, 2790, 2744, 2790, 3875, 3239, 2817, 2790, 4088, 2790, 2790, 2824, 2790,
      /*  574 */ 3502, 2818, 2790, 3007, 2790, 3959, 3750, 2960, 2745, 3748, 2790, 4626, 2790, 4622, 2667, 2940, 2842,
      /*  591 */ 3754, 2902, 4615, 2840, 3753, 3753, 3753, 4616, 2838, 4624, 4624, 3006, 3753, 2841, 2903, 2719, 3291,
      /*  608 */ 3292, 3752, 2941, 2998, 3000, 2847, 2790, 2790, 2790, 2790, 2790, 3322, 3326, 2790, 2790, 2790, 3241,
      /*  625 */ 4802, 2775, 4735, 2782, 2790, 2790, 2790, 4802, 3231, 2790, 2790, 2790, 2771, 4780, 3110, 4601, 2790,
      /*  642 */ 3607, 2790, 3763, 3555, 2886, 2973, 2790, 3980, 2790, 3666, 2790, 4542, 2416, 2884, 2890, 2896, 2907,
      /*  659 */ 4569, 2911, 2790, 2919, 5035, 2790, 2913, 2925, 2790, 4599, 2686, 2790, 3665, 2790, 4541, 3125, 4330,
      /*  676 */ 4429, 2929, 2934, 2939, 3953, 2790, 2790, 4197, 3440, 2790, 2790, 2790, 2790, 4592, 3426, 2790, 2790,
      /*  693 */ 2790, 2790, 2790, 4860, 2951, 2790, 3324, 2790, 2790, 3609, 3761, 2790, 4016, 2955, 2741, 2842, 2790,
      /*  710 */ 4742, 2959, 2790, 2790, 4535, 2790, 2790, 4096, 4079, 4079, 4079, 4079, 2435, 2436, 2436, 2436, 2436,
      /*  727 */ 2437, 2980, 2790, 2790, 2790, 2790, 2802, 2989, 2790, 2790, 2790, 2790, 2801, 2988, 2790, 2790, 2790,
      /*  744 */ 4818, 4810, 3928, 2790, 3608, 3761, 2316, 2993, 3004, 2790, 3011, 3032, 2790, 2790, 2790, 4503, 3015,
      /*  761 */ 2790, 2790, 2790, 2790, 3011, 3032, 2790, 2790, 2790, 2790, 2790, 3026, 4920, 2790, 2790, 2790, 2790,
      /*  778 */ 3025, 4919, 2790, 2790, 2790, 2790, 2790, 4355, 3755, 4359, 2790, 2790, 3354, 3059, 4366, 4372, 4240,
      /*  795 */ 2834, 4504, 3016, 2790, 2790, 3635, 3927, 3023, 3031, 4541, 3436, 3037, 3854, 3044, 2790, 2790, 3451,
      /*  812 */ 3049, 2790, 2790, 3024, 3043, 2790, 2790, 2801, 3048, 2790, 2790, 3053, 3064, 3031, 4492, 3071, 2975,
      /*  829 */ 3079, 2790, 3470, 3088, 2790, 3421, 3079, 2790, 2801, 3098, 2790, 4152, 3102, 3109, 2574, 3114, 3122,
      /*  846 */ 2790, 4585, 3124, 2790, 3129, 2790, 4584, 3123, 2790, 4154, 3033, 3133, 4950, 3518, 3142, 4948, 4952,
      /*  863 */ 3148, 2790, 4155, 3156, 3188, 3160, 3150, 4950, 3167, 3186, 3174, 3174, 3174, 3180, 3184, 3192, 3192,
      /*  880 */ 3196, 3200, 3175, 3209, 3433, 3213, 3176, 3861, 3217, 3221, 4494, 3225, 3236, 3247, 2790, 2790, 2790,
      /*  897 */ 2790, 3914, 2790, 2790, 3253, 3263, 3403, 3170, 3479, 3270, 3274, 3278, 3282, 3285, 3285, 3286, 2790,
      /*  914 */ 2790, 3913, 2790, 3549, 3337, 3848, 3342, 3290, 3496, 2655, 3296, 3300, 3311, 3318, 4953, 3330, 4637,
      /*  931 */ 2790, 3320, 2790, 2790, 3659, 2790, 2790, 3336, 2790, 2790, 4722, 2770, 2790, 2790, 2790, 2790, 4722,
      /*  948 */ 2770, 2790, 2790, 2790, 2790, 2790, 4190, 3341, 3484, 3460, 3144, 3346, 3363, 3369, 2976, 3375, 2790,
      /*  965 */ 2790, 2790, 3383, 3388, 2790, 2790, 2790, 3472, 2790, 2790, 2790, 4413, 2790, 4305, 3786, 4825, 2790,
      /*  982 */ 2790, 2364, 2790, 3482, 3486, 2790, 3416, 3420, 2790, 4591, 3425, 2790, 2790, 2790, 2790, 2672, 3430,
      /*  999 */ 2790, 2790, 2790, 3769, 2790, 2790, 2790, 2790, 3471, 3736, 2790, 2790, 2790, 2790, 3776, 2790, 3469,
      /* 1016 */ 2790, 2790, 2790, 2790, 4198, 3468, 2790, 2790, 2790, 2790, 4198, 3468, 2790, 2790, 2790, 2790, 2921,
      /* 1033 */ 3506, 2790, 2790, 2790, 4591, 3513, 2790, 2790, 2790, 3724, 2660, 2790, 4124, 3542, 3476, 3490, 3494,
      /* 1050 */ 3634, 3500, 2790, 2921, 3506, 2790, 2790, 2790, 2790, 3512, 3517, 3522, 2833, 3204, 2790, 3527, 2790,
      /* 1067 */ 2790, 2790, 4249, 2790, 2790, 2790, 3526, 2790, 2790, 2790, 3821, 2761, 2790, 2790, 2790, 2790, 4347,
      /* 1084 */ 2686, 2790, 2790, 2790, 2790, 4351, 2790, 4248, 2790, 2790, 2790, 3531, 3517, 3412, 2790, 2790, 4987,
      /* 1101 */ 2790, 2790, 2563, 2790, 2790, 2790, 4094, 4079, 4079, 4079, 4079, 2435, 2436, 2436, 2436, 2397, 2321,
      /* 1118 */ 2321, 2321, 2321, 2321, 2464, 2466, 2466, 2466, 2466, 2393, 2405, 2790, 2790, 2833, 2790, 4987, 2790,
      /* 1135 */ 2790, 4422, 2790, 2790, 4126, 4322, 3032, 2790, 4987, 2790, 3390, 4989, 2790, 2605, 2730, 2790, 3541,
      /* 1152 */ 3547, 4788, 3547, 2566, 2566, 2566, 4894, 4014, 4014, 4014, 4788, 2832, 3553, 2315, 4875, 2567, 4015,
      /* 1169 */ 4896, 2830, 2899, 3559, 3560, 3564, 2790, 2790, 2790, 2790, 2790, 3615, 3614, 2790, 2790, 4465, 3917,
      /* 1186 */ 2585, 3619, 3625, 3737, 4266, 4915, 3629, 3649, 4306, 3633, 3639, 3647, 3653, 2790, 2790, 4691, 3658,
      /* 1203 */ 2790, 4464, 3916, 2790, 3663, 2722, 3670, 3674, 4193, 4196, 2790, 3690, 2790, 2790, 2790, 2382, 3694,
      /* 1220 */ 2790, 2790, 2790, 2383, 3695, 2790, 2790, 2790, 2339, 3143, 2790, 2790, 2790, 4517, 2790, 2965, 4474,
      /* 1237 */ 4719, 4065, 4703, 2578, 3699, 3704, 2790, 2790, 3118, 2790, 2790, 2790, 4999, 2790, 4869, 4984, 5004,
      /* 1254 */ 2752, 2790, 2790, 3118, 2790, 4317, 3723, 2790, 2790, 2790, 2790, 4391, 3711, 2790, 2790, 2790, 2790,
      /* 1271 */ 3716, 3847, 2790, 2790, 3259, 2790, 2790, 2790, 2790, 2790, 3258, 2783, 2790, 2790, 2790, 2790, 3258,
      /* 1288 */ 2783, 3791, 2725, 2790, 3795, 2790, 2790, 3803, 2790, 2790, 3810, 2790, 2790, 2638, 2790, 4782, 3202,
      /* 1305 */ 2716, 3818, 2790, 3795, 2790, 4584, 3812, 2790, 2351, 2790, 2790, 3811, 2790, 3825, 3838, 2790, 2790,
      /* 1322 */ 4988, 2790, 3725, 4875, 2790, 2414, 2790, 3535, 4942, 2790, 2430, 2790, 4323, 4014, 3846, 3205, 3847,
      /* 1339 */ 4039, 2790, 2713, 2790, 3852, 3683, 3067, 3104, 2790, 3685, 4305, 3685, 3915, 3915, 3105, 3683, 3683,
      /* 1356 */ 3683, 3066, 3331, 3105, 3332, 3331, 3332, 3684, 3256, 2790, 2790, 3371, 3735, 2790, 2790, 2790, 2790,
      /* 1373 */ 3421, 3742, 2790, 2790, 2790, 2790, 2790, 3741, 2790, 2790, 2790, 2790, 3746, 2790, 3759, 2703, 3621,
      /* 1390 */ 4113, 3881, 3885, 3889, 3893, 3894, 3898, 3902, 2790, 2790, 3162, 2790, 2790, 3643, 2983, 4501, 4562,
      /* 1407 */ 3907, 3765, 4282, 3921, 2790, 4554, 4022, 2790, 3925, 3932, 4556, 3936, 2790, 4242, 3941, 2790, 2855,
      /* 1424 */ 2784, 3943, 4375, 4402, 2862, 2866, 2870, 2874, 2874, 2875, 2879, 2819, 3325, 2790, 2778, 2790, 4182,
      /* 1441 */ 4960, 4187, 2504, 5007, 4203, 4207, 4211, 4215, 4219, 4222, 4224, 2790, 2790, 4077, 4079, 4079, 4079,
      /* 1458 */ 4079, 4079, 2396, 2436, 2436, 2436, 2436, 2436, 2375, 2321, 2321, 2321, 2322, 2466, 2466, 2466, 2466,
      /* 1475 */ 2466, 2332, 2357, 2380, 2790, 2790, 2790, 2790, 2790, 2790, 2790, 2790, 3204, 2790, 2790, 2790, 2790,
      /* 1492 */ 2790, 2790, 2790, 2790, 3163, 2790, 2790, 2746, 3858, 4848, 4930, 3872, 3642, 4579, 2727, 4118, 2315,
      /* 1509 */ 3764, 3947, 3951, 2790, 2790, 3814, 3957, 2790, 2790, 2790, 3967, 3350, 2984, 2729, 3978, 3548, 3984,
      /* 1526 */ 3961, 2790, 2790, 3813, 3988, 2790, 2790, 2790, 2790, 3686, 4027, 2790, 2790, 2790, 2790, 3257, 4051,
      /* 1543 */ 2790, 3074, 2790, 2790, 4299, 3993, 2790, 4007, 2790, 2984, 2790, 3568, 3575, 4260, 3583, 3587, 3591,
      /* 1560 */ 3594, 3597, 3600, 3601, 3605, 2790, 2790, 2790, 4750, 2964, 2790, 2790, 2790, 2790, 2969, 2761, 2790,
      /* 1577 */ 2790, 2790, 2790, 4743, 2790, 4834, 2790, 3348, 4604, 4013, 4070, 4311, 4020, 2790, 2790, 2790, 4026,
      /* 1594 */ 2790, 2790, 2790, 2790, 3578, 4964, 2790, 2790, 2790, 2790, 4969, 2790, 2790, 2790, 2790, 3579, 2790,
      /* 1611 */ 4031, 2790, 4037, 2790, 4043, 2789, 4333, 4571, 4021, 2790, 2790, 4362, 2790, 2790, 2790, 2790, 3968,
      /* 1628 */ 4183, 2790, 2790, 4271, 3972, 4033, 2790, 2790, 4832, 2790, 2796, 2790, 4360, 3993, 2790, 2790, 2790,
      /* 1645 */ 2790, 4049, 2790, 2790, 2790, 2790, 4361, 2761, 4510, 4241, 4057, 4254, 4773, 4069, 4439, 2790, 2790,
      /* 1662 */ 4976, 2790, 2790, 2790, 4457, 2761, 2790, 2790, 4485, 3989, 2790, 2790, 4456, 4074, 3731, 4836, 4254,
      /* 1679 */ 4085, 4092, 3707, 2790, 4060, 2790, 2790, 4060, 4147, 4132, 4140, 4134, 4843, 2501, 4130, 4921, 4921,
      /* 1696 */ 4921, 4291, 4135, 4132, 4132, 4132, 4139, 4922, 4135, 4144, 4922, 4923, 4133, 4159, 4169, 4171, 4166,
      /* 1713 */ 4163, 4175, 4178, 2790, 2790, 2790, 2800, 2790, 2746, 3958, 4087, 2818, 2790, 3314, 2806, 2790, 3502,
      /* 1730 */ 2818, 2790, 2790, 4270, 3039, 4275, 2790, 2790, 2790, 4279, 3358, 2850, 4286, 4295, 2790, 3397, 3607,
      /* 1747 */ 4303, 4310, 2790, 2790, 4965, 4315, 2790, 2790, 2790, 3378, 4321, 2790, 2790, 2790, 3379, 2790, 2790,
      /* 1764 */ 3472, 2790, 2790, 2790, 2345, 3847, 2790, 2790, 3471, 3736, 2790, 4603, 2790, 4305, 2790, 4812, 4327,
      /* 1781 */ 4339, 2790, 2790, 3352, 3356, 2996, 4343, 3937, 4297, 4995, 4476, 2843, 2790, 3025, 4927, 2790, 2790,
      /* 1798 */ 4934, 2406, 2599, 4938, 5023, 4946, 2790, 2790, 2790, 2790, 4957, 4381, 4359, 2790, 2790, 2790, 3806,
      /* 1815 */ 4389, 2790, 2790, 2790, 2790, 3963, 4396, 2790, 2790, 2790, 2946, 2790, 2790, 2790, 3712, 2947, 2790,
      /* 1832 */ 2790, 2790, 4234, 3973, 2790, 2790, 2790, 3962, 4395, 2790, 2790, 2790, 2790, 3962, 4395, 3755, 4359,
      /* 1849 */ 2790, 3056, 3060, 4368, 3960, 4535, 4377, 2790, 2790, 2790, 2808, 4400, 2790, 2790, 2790, 2790, 4406,
      /* 1866 */ 2790, 2790, 2790, 2790, 2790, 2790, 2790, 4708, 2790, 2790, 2790, 2790, 2790, 2790, 2790, 2790, 2790,
      /* 1883 */ 3152, 3203, 2790, 2790, 2790, 2790, 2790, 3963, 4411, 2790, 2790, 2790, 2807, 4407, 4446, 2790, 4417,
      /* 1900 */ 2942, 4426, 3654, 3761, 2790, 2790, 3720, 2790, 2790, 2790, 2790, 2790, 3729, 2790, 4472, 2790, 2586,
      /* 1917 */ 3787, 3138, 2790, 4862, 4438, 2790, 2790, 2807, 4451, 2790, 2790, 2790, 4443, 2790, 2790, 2790, 4450,
      /* 1934 */ 4689, 3400, 2942, 4455, 4536, 4484, 2790, 4461, 2790, 2790, 4469, 2790, 2790, 4480, 2790, 2790, 3779,
      /* 1951 */ 4523, 4489, 4498, 3654, 4483, 2790, 4508, 2790, 5040, 4002, 2790, 4514, 2790, 2790, 4521, 4525, 4529,
      /* 1968 */ 4540, 4384, 4590, 4385, 2790, 4514, 2790, 4547, 4551, 2790, 3997, 4560, 4566, 3999, 4575, 3995, 4009,
      /* 1985 */ 4009, 4009, 4583, 4589, 4001, 4001, 4596, 3680, 4608, 4879, 4613, 4620, 4609, 4877, 2407, 3782, 4792,
      /* 2002 */ 4793, 2790, 2790, 2790, 2790, 2790, 2790, 2790, 3018, 4630, 4634, 4645, 4649, 4653, 4657, 4661, 4665,
      /* 2019 */ 4669, 4672, 4676, 4679, 4683, 2790, 2790, 2790, 3017, 4695, 4542, 4761, 4701, 4577, 4906, 4707, 4712,
      /* 2036 */ 4716, 4727, 2790, 3832, 2594, 3075, 4733, 3830, 4739, 2790, 2790, 2790, 3019, 4842, 2597, 4900, 4904,
      /* 2053 */ 4853, 4912, 2790, 2790, 2790, 2790, 2790, 3027, 4747, 4754, 4760, 4765, 4771, 4777, 4786, 4797, 4801,
      /* 2070 */ 2790, 2790, 2790, 2790, 4807, 2790, 2790, 3876, 4543, 4150, 2930, 2766, 2790, 2790, 2790, 2790, 2790,
      /* 2087 */ 4723, 2790, 2790, 2790, 2691, 2790, 2790, 2790, 3094, 2695, 2701, 2790, 2790, 2790, 2790, 3508, 2790,
      /* 2104 */ 4840, 2406, 4847, 4803, 4111, 4852, 4857, 4914, 2790, 2790, 2790, 2790, 2696, 4866, 2790, 2790, 3910,
      /* 2121 */ 2790, 2790, 4686, 4531, 4887, 3772, 3082, 3706, 2790, 4289, 2790, 3974, 3915, 4973, 2790, 4980, 4984,
      /* 2138 */ 5018, 4907, 4994, 2790, 2790, 2801, 4830, 2790, 2790, 2790, 5000, 2790, 3091, 2790, 2790, 4103, 4533,
      /* 2155 */ 4109, 3084, 2790, 4117, 4908, 2790, 3303, 2790, 4122, 3249, 2790, 4999, 2790, 2790, 4828, 2790, 2790,
      /* 2172 */ 3571, 2790, 5011, 5017, 5022, 2790, 2790, 3799, 2790, 3384, 3389, 2790, 2790, 5029, 3394, 2790, 2790,
      /* 2189 */ 2790, 2790, 4881, 2790, 3543, 3449, 3410, 3116, 5028, 2790, 3798, 2790, 2790, 5027, 3365, 3864, 2790,
      /* 2206 */ 4990, 2790, 4045, 2790, 2710, 2790, 3447, 4603, 3455, 3459, 3700, 3677, 2790, 2790, 3464, 2790, 2790,
      /* 2223 */ 2790, 2790, 2790, 4199, 5033, 3136, 2790, 4383, 5039, 2587, 3834, 2790, 2790, 2790, 2790, 2790, 2790,
      /* 2240 */ 2790, 2790, 2790, 2790, 2790, 2790, 2790, 2790, 2790, 2790, 2578, 2790, 2790, 2790, 2790, 2790, 2790,
      /* 2257 */ 2790, 2790, 6090, 6563, 5044, 5057, 5054, 6594, 6596, 6596, 6596, 6591, 5074, 6595, 6596, 6596, 6596,
      /* 2274 */ 6596, 5087, 5061, 5074, 6596, 6596, 5067, 5062, 6596, 5078, 5084, 5080, 5066, 6594, 6163, 5071, 5091,
      /* 2291 */ 5094, 5094, 5094, 5095, 5099, 5099, 5103, 5107, 5114, 5111, 5118, 5122, 5134, 5137, 5129, 5130, 5127,
      /* 2308 */ 5125, 5141, 5145, 6561, 6446, 5234, 5173, 5635, 5635, 5635, 5219, 5598, 5503, 5251, 5251, 5251, 5251,
      /* 2325 */ 5252, 5196, 5267, 6248, 5502, 5251, 5251, 5196, 5196, 5196, 5266, 5202, 5212, 5632, 5635, 5050, 6519,
      /* 2342 */ 6509, 5635, 6818, 5635, 5635, 5146, 5150, 6535, 5218, 5635, 5635, 5147, 5154, 5196, 5267, 5268, 5502,
      /* 2359 */ 5213, 5214, 5232, 5214, 5631, 5635, 5146, 5151, 5635, 5155, 5619, 6297, 5635, 6532, 6536, 5244, 5250,
      /* 2376 */ 5251, 5251, 5251, 5295, 5631, 5633, 5635, 5635, 5635, 5049, 6518, 5502, 5502, 5293, 5251, 5251, 5226,
      /* 2393 */ 5196, 5196, 6247, 5270, 5502, 5502, 5502, 5504, 5268, 5502, 5214, 5633, 5282, 5635, 5635, 5635, 5273,
      /* 2410 */ 6084, 5196, 5267, 5271, 5635, 5166, 5635, 5635, 5749, 5219, 5251, 5296, 5196, 5196, 5306, 5635, 5196,
      /* 2427 */ 5265, 5269, 5273, 5635, 5635, 5165, 5635, 6247, 5268, 5502, 5502, 5502, 5502, 5251, 5502, 5251, 5251,
      /* 2444 */ 5251, 5186, 5193, 5272, 5635, 5635, 6261, 5635, 5298, 5635, 5635, 6262, 5502, 5502, 5294, 5251, 5251,
      /* 2461 */ 5251, 5296, 5251, 5251, 5264, 5196, 5196, 5196, 5196, 5265, 5196, 5197, 5635, 6245, 5269, 5293, 5296,
      /* 2478 */ 5306, 6246, 6247, 5502, 5502, 5502, 5292, 5251, 5251, 5196, 6255, 6247, 5270, 5292, 5251, 5264, 5197,
      /* 2495 */ 5198, 5302, 5297, 5312, 5312, 5304, 5635, 5179, 5635, 5643, 5168, 5635, 6860, 5329, 5590, 5333, 5336,
      /* 2512 */ 5339, 5343, 5362, 5419, 5347, 5351, 5404, 5419, 5419, 5419, 5419, 5368, 5384, 5393, 5355, 5359, 5418,
      /* 2529 */ 5367, 5372, 5346, 5420, 5381, 5390, 5397, 5377, 5386, 5419, 5376, 5401, 5416, 5424, 5428, 5430, 5430,
      /* 2546 */ 5434, 5436, 5440, 5473, 5444, 5446, 5365, 5407, 5450, 5454, 5458, 5466, 5464, 5466, 5462, 5470, 5477,
      /* 2563 */ 5635, 5181, 6353, 5635, 5219, 5635, 5635, 5219, 5635, 7266, 5635, 5904, 5635, 6256, 6080, 5635, 6853,
      /* 2580 */ 5635, 5635, 5169, 5672, 6820, 5635, 5635, 5635, 5275, 5635, 5635, 7112, 6346, 7172, 5635, 5220, 7282,
      /* 2597 */ 5635, 5273, 5642, 5635, 5635, 6879, 5246, 5891, 5635, 5635, 5182, 6258, 5523, 6083, 6080, 5977, 6569,
      /* 2614 */ 5635, 6877, 6875, 6150, 5527, 5530, 5531, 5535, 5538, 5542, 5547, 5545, 5551, 5553, 5554, 5558, 5561,
      /* 2631 */ 5569, 5562, 5566, 5562, 5572, 5574, 5578, 5635, 6820, 6222, 5635, 5975, 5635, 5635, 6702, 6210, 5614,
      /* 2648 */ 5635, 5635, 5189, 5635, 5635, 6773, 5656, 5635, 5635, 5635, 5307, 5668, 5635, 5635, 5635, 5315, 6779,
      /* 2665 */ 5662, 5666, 5635, 5635, 5635, 5582, 5675, 5635, 5635, 5635, 5320, 5679, 6567, 5635, 5683, 5691, 5698,
      /* 2682 */ 5706, 5734, 5699, 5707, 6568, 5635, 5635, 5635, 5491, 6736, 5694, 5700, 5708, 5162, 5635, 5635, 5635,
      /* 2699 */ 5513, 7310, 6318, 5664, 5635, 5635, 5635, 5277, 5746, 5635, 5712, 5635, 5274, 5273, 5635, 5274, 6223,
      /* 2716 */ 5635, 5275, 5635, 6695, 5635, 5635, 6694, 5823, 6568, 5635, 5322, 5635, 5635, 5910, 5635, 5635, 5635,
      /* 2733 */ 6618, 5236, 5635, 5717, 6739, 6745, 5731, 6568, 5635, 5324, 5635, 6335, 5811, 5635, 5635, 5635, 5675,
      /* 2750 */ 5701, 5732, 5635, 5635, 5318, 5635, 5635, 6736, 6740, 6744, 5730, 5734, 5635, 5635, 5635, 5514, 5768,
      /* 2767 */ 5701, 5775, 6568, 5776, 5635, 5635, 5635, 5615, 5747, 7254, 5635, 5635, 5512, 6989, 5208, 6448, 5733,
      /* 2784 */ 5635, 5635, 5635, 5625, 5788, 7253, 5635, 5635, 5635, 5635, 5159, 5797, 5635, 5635, 5635, 5638, 6319,
      /* 2801 */ 5635, 5635, 5635, 5640, 6027, 5799, 5635, 5635, 5635, 5646, 5650, 6805, 5635, 5635, 5635, 5655, 5805,
      /* 2818 */ 5798, 5635, 5635, 5635, 5636, 5515, 5803, 6804, 6568, 5635, 5496, 5048, 5635, 5219, 6618, 5635, 5635,
      /* 2835 */ 5635, 6260, 5635, 5583, 5635, 5635, 5819, 6695, 5635, 5635, 5635, 5724, 5819, 5635, 5821, 5819, 5635,
      /* 2852 */ 5635, 6934, 6878, 5756, 5815, 5829, 5635, 5508, 5204, 5664, 5842, 5846, 5854, 5858, 5862, 5866, 5866,
      /* 2869 */ 5868, 5870, 5870, 5870, 5870, 5874, 5874, 5874, 5874, 5877, 5879, 5635, 5635, 5635, 5738, 7116, 5885,
      /* 2886 */ 5635, 6258, 6080, 5635, 5899, 5917, 5635, 5635, 5594, 5635, 5324, 5635, 5635, 6618, 5635, 6618, 5635,
      /* 2903 */ 5582, 5635, 5635, 5819, 5921, 5635, 5635, 5487, 7303, 5485, 5635, 6834, 5635, 5635, 5612, 5635, 6832,
      /* 2920 */ 5932, 5635, 5635, 5635, 7178, 5635, 6696, 5635, 5937, 5325, 5635, 5635, 5635, 5761, 5969, 5635, 5635,
      /* 2937 */ 5635, 5804, 5984, 5635, 5635, 5635, 5819, 5635, 5850, 6339, 5992, 5606, 5635, 5635, 5635, 6696, 5635,
      /* 2954 */ 5938, 5635, 6256, 6930, 6081, 6015, 5635, 5635, 5635, 5895, 6016, 5635, 5635, 5635, 5902, 5640, 5999,
      /* 2971 */ 6005, 6011, 6261, 5635, 6095, 5635, 5635, 6088, 6289, 6037, 6042, 5635, 5635, 5635, 7255, 5635, 5635,
      /* 2988 */ 6027, 6032, 6038, 6043, 5635, 5635, 6256, 5635, 6082, 5635, 5820, 5635, 5820, 5635, 5635, 5821, 6261,
      /* 3005 */ 6335, 6695, 5635, 5635, 6692, 6568, 5923, 7028, 6032, 6058, 6033, 6059, 5635, 5635, 5635, 5908, 7128,
      /* 3022 */ 7132, 6613, 5635, 5635, 5635, 5923, 5517, 6786, 6790, 5635, 6564, 5635, 5635, 5635, 5907, 6260, 6318,
      /* 3039 */ 5635, 5635, 5635, 7259, 6072, 6033, 6064, 5635, 5635, 7027, 6032, 6063, 6564, 5635, 5635, 6260, 6261,
      /* 3056 */ 5636, 6988, 7255, 5678, 5635, 6082, 5635, 5821, 5945, 5412, 5635, 5635, 5635, 7285, 5635, 5635, 6257,
      /* 3073 */ 6081, 6261, 5635, 5635, 5635, 5221, 6071, 6711, 6064, 5635, 5635, 6838, 5635, 5589, 6617, 6072, 6712,
      /* 3090 */ 6065, 5635, 5635, 6844, 5635, 5635, 6851, 6568, 6070, 6710, 6063, 6564, 5943, 6983, 5635, 5635, 5635,
      /* 3107 */ 7286, 5635, 5756, 5635, 5635, 5635, 5943, 6260, 6094, 5635, 5635, 5635, 7332, 5720, 5635, 6821, 6073,
      /* 3124 */ 6109, 5635, 5635, 5635, 5956, 5635, 6099, 6107, 6066, 6256, 6081, 6337, 5635, 5635, 6852, 5635, 5320,
      /* 3141 */ 5635, 6075, 6079, 5635, 5635, 5635, 5958, 5635, 6820, 7158, 6077, 5635, 5635, 5635, 7346, 5635, 6131,
      /* 3158 */ 6821, 6074, 6076, 5635, 5635, 6820, 6708, 6127, 5635, 5635, 7156, 5634, 5905, 5635, 5228, 6053, 5274,
      /* 3175 */ 6116, 6079, 5635, 6981, 6142, 7156, 5822, 5635, 7157, 6118, 5635, 5635, 6115, 6078, 5635, 5635, 6114,
      /* 3192 */ 6078, 5635, 5635, 6115, 6078, 5635, 5674, 5285, 5674, 6117, 5635, 5635, 5636, 5635, 5635, 5635, 6221,
      /* 3209 */ 6118, 5635, 5635, 6116, 6139, 6079, 5635, 6139, 7083, 5674, 6617, 7134, 5635, 7134, 5635, 7134, 5635,
      /* 3226 */ 6616, 6614, 5635, 5635, 6878, 5764, 6744, 6449, 5734, 5635, 5287, 6614, 6614, 6614, 7253, 5635, 5674,
      /* 3243 */ 5635, 5635, 5512, 5516, 5635, 6392, 6392, 5635, 5636, 5642, 6257, 5635, 6085, 7286, 5635, 5635, 5635,
      /* 3260 */ 6481, 6485, 5733, 6255, 6840, 6147, 5635, 5635, 6940, 6946, 7286, 6617, 6879, 6154, 6160, 6167, 6156,
      /* 3277 */ 6171, 6175, 6179, 6183, 6184, 6189, 6189, 6185, 6193, 6193, 6193, 6193, 6196, 7276, 5635, 5583, 5635,
      /* 3294 */ 5635, 5582, 6208, 5635, 5635, 6214, 6197, 5278, 6228, 5635, 5635, 6975, 5635, 5635, 7001, 5769, 5797,
      /* 3311 */ 5308, 5635, 6961, 5635, 5635, 7001, 5770, 6236, 5635, 5980, 6254, 5635, 5635, 5636, 5945, 5412, 5951,
      /* 3328 */ 5635, 5635, 6252, 5635, 5635, 5635, 6053, 5635, 6255, 6086, 6855, 6868, 5635, 6399, 5635, 6614, 5635,
      /* 3345 */ 5635, 6273, 5635, 5635, 5638, 5964, 6676, 5635, 5635, 5636, 6988, 6994, 5635, 5678, 5635, 6081, 5635,
      /* 3362 */ 5819, 5972, 5635, 5635, 5635, 6082, 6085, 5635, 6281, 5635, 5635, 5640, 6573, 6802, 5206, 6295, 5635,
      /* 3379 */ 5635, 7007, 7016, 7041, 5635, 7144, 6290, 6803, 5207, 5207, 6296, 5635, 5635, 5635, 6084, 6291, 5771,
      /* 3396 */ 6995, 5635, 5635, 7034, 5635, 5635, 7152, 5635, 5635, 7253, 5635, 5635, 6954, 5657, 5635, 7252, 6400,
      /* 3413 */ 5635, 6670, 5635, 6259, 6209, 5635, 5639, 6347, 5635, 5635, 5635, 6088, 6309, 6301, 6325, 6329, 5635,
      /* 3430 */ 6310, 6302, 6326, 6079, 5635, 6982, 5907, 5635, 6258, 6081, 6311, 6801, 6327, 5635, 5635, 7257, 6960,
      /* 3447 */ 6255, 6086, 6856, 6869, 5635, 5635, 5640, 7027, 6400, 5635, 6735, 7277, 6693, 5635, 6671, 5635, 5635,
      /* 3464 */ 5320, 6310, 6323, 6327, 6324, 6328, 5635, 5635, 5635, 6089, 5149, 5153, 6086, 6866, 6567, 5635, 5635,
      /* 3481 */ 7287, 6616, 5635, 6879, 7278, 5582, 5635, 6769, 6564, 5635, 7252, 6400, 5288, 6079, 6695, 6669, 5635,
      /* 3498 */ 5635, 6201, 5635, 6344, 5635, 5635, 5674, 5805, 6351, 6357, 5635, 5635, 5676, 5635, 6820, 7179, 6366,
      /* 3515 */ 6329, 5635, 5260, 5635, 5635, 5635, 6122, 6399, 5635, 5635, 6671, 5635, 6259, 6365, 7255, 5635, 6021,
      /* 3532 */ 5635, 5635, 5315, 5167, 5635, 5635, 5635, 6247, 6247, 6619, 5635, 5635, 5635, 6255, 6086, 5635, 6620,
      /* 3549 */ 5635, 5635, 5635, 6256, 5219, 5635, 5635, 6619, 5904, 5748, 6771, 6620, 6618, 5635, 7096, 6618, 6618,
      /* 3566 */ 6618, 6770, 5901, 5511, 6370, 5635, 5635, 7333, 5721, 5635, 7255, 7154, 5635, 5635, 7349, 5518, 7319,
      /* 3583 */ 6209, 6384, 5635, 6372, 5985, 6719, 6390, 6396, 6404, 6408, 6411, 6413, 6417, 6418, 6418, 6422, 6424,
      /* 3600 */ 6425, 6429, 6429, 6429, 6429, 6430, 6429, 5635, 5635, 5755, 5635, 5635, 5635, 5888, 5635, 6604, 7326,
      /* 3617 */ 5635, 5635, 5635, 6616, 5635, 6692, 5635, 5824, 6457, 6568, 5635, 6852, 5635, 6948, 5635, 6949, 6455,
      /* 3634 */ 5635, 5635, 5635, 6261, 6260, 5635, 6462, 6456, 5635, 5637, 5640, 6675, 7115, 5635, 6467, 5635, 5658,
      /* 3651 */ 6453, 5635, 6463, 5635, 5635, 5635, 6262, 7328, 5635, 5635, 5635, 6267, 5277, 6615, 5635, 5635, 5755,
      /* 3668 */ 5818, 5635, 6819, 5635, 5635, 6494, 6473, 5635, 6477, 5635, 5638, 6346, 5635, 5635, 7275, 5635, 5635,
      /* 3685 */ 7287, 5635, 5635, 5635, 6480, 5635, 6498, 6507, 6513, 6518, 6508, 6514, 5635, 5635, 6523, 5635, 5635,
      /* 3702 */ 5635, 6315, 5635, 6540, 5635, 5635, 5783, 5635, 5635, 6554, 5635, 5635, 5635, 6339, 5635, 6263, 6549,
      /* 3719 */ 6503, 5635, 6547, 5176, 6553, 5635, 5635, 5635, 6334, 5635, 6558, 7327, 5635, 5635, 5784, 5635, 6578,
      /* 3736 */ 5153, 5635, 5635, 5635, 6439, 6088, 6574, 6579, 5154, 5635, 5635, 6583, 5635, 5635, 5894, 5810, 5635,
      /* 3753 */ 5635, 5581, 5635, 5635, 5635, 5725, 6054, 5637, 5635, 5635, 5900, 5635, 5635, 5635, 5904, 5635, 6088,
      /* 3770 */ 6588, 5153, 5635, 5638, 6826, 7252, 6088, 5148, 5152, 5635, 5640, 7087, 6772, 6084, 6772, 6084, 5275,
      /* 3787 */ 5635, 6694, 5904, 6338, 5277, 6693, 5635, 5825, 5635, 6821, 6600, 5635, 5640, 7334, 5907, 5635, 5635,
      /* 3804 */ 6822, 6224, 5635, 5644, 5648, 6102, 5635, 6821, 6223, 5635, 5635, 5635, 6479, 6762, 5824, 5635, 5321,
      /* 3821 */ 5635, 5647, 7054, 7038, 5635, 7255, 5637, 5635, 5654, 5635, 5635, 5222, 7284, 5635, 5635, 5276, 5635,
      /* 3838 */ 5277, 6695, 6337, 6260, 5635, 5635, 5635, 5256, 6220, 5154, 5635, 5635, 5635, 6399, 5638, 6692, 5635,
      /* 3855 */ 5635, 5923, 6072, 5638, 7024, 6610, 5635, 5674, 6141, 5635, 5635, 6854, 5635, 5635, 6878, 5693, 5699,
      /* 3872 */ 7255, 6216, 6771, 5635, 5677, 5635, 5635, 5635, 5587, 5911, 6624, 5628, 6630, 6638, 6641, 6645, 6648,
      /* 3889 */ 6656, 6656, 6656, 6656, 6651, 6652, 6652, 6652, 6660, 6660, 6660, 6660, 6662, 6666, 5635, 5635, 5635,
      /* 3906 */ 6566, 6048, 5635, 5622, 5635, 5686, 5838, 5635, 5686, 6053, 5635, 5635, 5635, 5985, 5635, 5589, 6694,
      /* 3923 */ 5939, 6617, 5912, 6686, 5635, 5635, 5944, 5411, 6052, 6691, 5635, 5635, 6756, 6701, 5635, 5635, 5635,
      /* 3940 */ 6567, 6125, 6772, 5635, 5635, 5987, 5635, 5635, 6723, 6729, 7278, 6695, 6734, 5635, 5635, 5991, 5605,
      /* 3957 */ 6749, 5635, 5635, 5635, 6615, 5635, 5635, 5635, 5645, 5649, 5635, 6480, 6763, 6750, 5635, 6764, 5607,
      /* 3974 */ 5635, 5635, 5635, 5835, 5635, 6717, 5635, 5635, 6026, 6031, 5608, 5635, 6730, 6143, 6483, 6487, 6568,
      /* 3991 */ 5635, 5635, 6486, 5734, 5635, 5635, 6133, 6881, 5635, 5635, 6133, 7095, 5635, 5635, 5635, 6816, 6204,
      /* 4008 */ 6203, 5635, 5635, 6134, 6772, 5909, 5635, 5635, 5635, 6620, 5635, 5597, 6879, 6795, 5635, 5635, 5635,
      /* 4025 */ 6685, 6480, 6484, 6488, 5635, 5635, 6616, 6615, 5635, 5635, 6204, 6202, 5274, 6126, 5635, 5635, 6220,
      /* 4042 */ 6224, 7347, 6777, 5635, 5635, 6230, 5635, 5635, 6230, 6485, 5733, 5635, 5635, 6054, 5204, 5635, 7269,
      /* 4059 */ 6772, 5635, 5687, 5952, 5635, 5713, 5635, 5635, 5276, 6615, 5635, 6277, 5635, 5635, 6619, 6809, 5734,
      /* 4076 */ 5635, 5635, 6246, 6247, 6247, 6247, 6247, 5270, 5502, 7114, 5635, 7254, 5635, 5674, 5805, 5798, 6276,
      /* 4093 */ 5748, 5635, 5635, 6255, 6247, 6247, 6247, 5269, 5502, 5502, 5835, 6053, 5635, 5635, 6318, 6568, 5635,
      /* 4110 */ 7347, 7114, 5635, 5635, 6819, 5321, 5635, 6845, 5635, 5635, 5635, 6716, 5635, 6974, 5635, 5635, 6333,
      /* 4127 */ 5635, 6256, 5317, 6285, 5635, 5635, 6966, 5635, 5635, 6965, 5635, 5635, 6257, 5635, 6961, 6053, 5635,
      /* 4144 */ 5635, 6967, 5635, 6255, 5589, 6617, 5635, 5753, 5635, 5635, 5323, 5635, 6113, 5634, 5904, 5635, 6256,
      /* 4161 */ 6961, 6053, 6255, 6965, 6965, 6965, 5635, 6967, 6965, 5635, 6965, 5635, 6258, 6967, 6965, 7286, 6269,
      /* 4178 */ 5741, 5741, 5741, 6053, 6849, 5635, 5635, 5635, 6754, 5635, 7342, 6334, 5635, 5780, 6568, 5635, 5492,
      /* 4195 */ 6542, 6492, 5635, 5635, 5635, 6307, 6311, 6324, 6936, 6083, 6873, 5319, 6886, 6892, 6890, 6896, 6900,
      /* 4212 */ 6900, 6902, 6908, 6906, 6906, 6908, 6916, 6915, 6912, 6920, 6921, 6921, 6921, 6921, 6925, 6928, 5208,
      /* 4229 */ 5635, 5635, 6855, 6526, 6380, 5635, 5635, 6340, 5993, 6565, 5635, 5635, 6617, 5635, 5635, 5635, 6706,
      /* 4246 */ 5635, 6239, 5635, 5635, 6364, 7154, 5635, 6242, 5635, 5635, 5637, 5965, 5635, 6953, 5635, 5635, 6376,
      /* 4263 */ 5635, 5635, 6958, 5635, 5635, 6443, 5589, 7258, 5635, 5635, 5635, 6760, 5635, 6971, 5635, 6979, 6987,
      /* 4280 */ 6993, 6329, 5635, 5832, 6260, 6680, 6878, 5791, 6543, 5635, 5836, 5635, 5635, 6284, 5635, 5635, 6567,
      /* 4297 */ 5635, 6616, 5635, 5635, 6469, 6482, 6999, 5635, 5639, 5635, 5635, 5635, 6461, 5725, 5635, 5635, 5635,
      /* 4314 */ 6768, 7012, 7040, 5635, 5635, 6547, 6501, 7041, 5635, 5635, 5635, 6769, 5635, 7008, 7017, 7042, 5635,
      /* 4331 */ 5848, 5748, 6255, 5483, 5635, 5635, 6245, 6247, 5635, 7021, 5933, 6053, 5904, 6935, 6879, 5792, 5644,
      /* 4348 */ 5648, 7055, 7046, 5645, 7052, 7056, 7047, 5646, 7053, 7057, 7048, 5724, 5635, 5635, 5635, 6783, 6486,
      /* 4365 */ 5734, 5820, 5635, 5904, 6935, 6879, 5748, 6879, 5793, 5635, 6566, 5635, 5757, 5635, 5635, 5724, 5756,
      /* 4382 */ 5635, 5277, 5635, 5635, 5635, 7176, 7094, 7061, 7048, 5635, 5635, 6548, 6502, 5649, 6103, 7067, 7048,
      /* 4399 */ 5635, 7061, 6564, 5635, 5635, 6568, 5635, 5646, 5650, 7066, 7124, 5635, 7065, 7123, 5635, 5635, 6584,
      /* 4416 */ 5635, 5635, 6987, 7154, 5635, 5881, 5635, 5635, 6365, 5635, 6878, 5318, 6615, 5635, 5899, 5962, 5635,
      /* 4433 */ 5602, 5635, 5635, 5188, 5635, 7077, 5635, 5635, 5635, 6794, 5647, 7076, 7069, 5635, 5900, 6053, 5726,
      /* 4450 */ 5646, 7075, 7068, 5635, 5635, 6879, 5635, 5635, 5635, 6799, 6809, 5635, 7176, 7081, 5635, 5901, 7114,
      /* 4467 */ 6434, 5635, 5635, 7176, 7089, 5635, 5902, 5511, 6435, 5635, 5635, 5757, 5274, 5635, 6088, 7088, 5635,
      /* 4484 */ 5902, 5635, 5635, 5635, 6800, 5635, 6088, 7154, 5635, 5903, 5635, 5906, 6616, 6614, 5820, 5904, 6880,
      /* 4501 */ 5635, 5908, 5635, 5635, 5924, 7029, 6033, 5640, 7178, 5635, 5635, 6614, 5635, 5635, 6088, 7093, 5635,
      /* 4518 */ 5908, 6605, 7327, 7177, 7095, 5635, 5901, 5902, 5635, 5640, 6218, 5821, 6880, 5635, 5635, 6615, 6616,
      /* 4535 */ 5635, 5635, 6259, 5635, 5635, 6259, 5635, 5903, 5635, 5635, 5635, 5745, 5640, 7178, 6772, 5238, 5635,
      /* 4552 */ 7100, 6880, 5635, 5913, 6687, 5635, 6700, 5635, 5635, 6135, 5635, 5635, 6681, 5635, 5635, 6820, 7094,
      /* 4569 */ 5635, 5928, 5635, 5635, 5608, 6878, 5635, 7100, 6881, 5635, 7115, 5635, 5635, 7254, 7106, 5635, 5635,
      /* 4586 */ 5635, 6821, 6073, 6820, 7275, 5635, 5635, 5635, 6820, 6309, 6133, 7095, 6880, 5635, 5943, 5410, 5949,
      /* 4603 */ 5635, 5635, 5635, 7252, 5635, 5635, 7120, 5635, 5635, 7273, 7120, 6878, 5635, 5635, 6693, 5635, 5635,
      /* 4620 */ 5635, 7274, 5635, 5635, 6695, 5635, 5635, 5819, 5809, 5635, 7138, 5635, 6963, 5905, 6209, 5635, 6961,
      /* 4637 */ 5635, 5979, 6253, 5635, 5635, 7002, 6744, 5798, 5240, 5635, 6021, 5499, 7109, 5673, 5635, 7142, 5635,
      /* 4654 */ 6962, 6021, 6964, 6625, 6022, 7174, 7271, 7149, 7162, 7166, 7170, 7183, 7187, 7191, 7194, 7202, 7197,
      /* 4671 */ 7198, 7206, 7208, 7212, 7218, 7217, 7213, 7222, 7232, 7232, 7225, 7231, 7227, 7236, 7240, 5635, 5985,
      /* 4688 */ 5837, 5635, 5723, 5635, 5635, 6602, 6606, 7128, 7132, 5904, 5635, 5910, 5481, 7100, 7241, 5635, 5635,
      /* 4705 */ 6695, 5824, 6360, 5635, 5635, 5635, 6853, 6259, 6079, 5635, 6529, 7245, 7247, 7251, 5635, 5986, 5635,
      /* 4722 */ 5635, 5763, 6743, 5702, 5776, 5635, 7263, 5635, 5635, 6725, 5492, 7283, 7255, 5635, 5635, 6737, 5769,
      /* 4739 */ 7291, 5635, 7292, 5635, 5997, 6003, 6009, 6015, 5635, 7296, 7130, 5635, 5998, 6004, 6010, 5907, 5903,
      /* 4756 */ 5635, 5635, 6737, 6741, 5635, 6086, 5641, 5635, 5635, 5635, 7100, 5635, 5635, 6738, 6742, 6879, 5635,
      /* 4773 */ 7114, 5635, 7252, 5635, 5635, 6853, 6855, 5635, 6020, 5635, 5635, 5635, 7254, 5635, 6337, 5635, 5635,
      /* 4790 */ 6770, 5635, 6772, 5635, 6086, 6084, 5635, 5635, 6259, 5635, 7301, 6386, 5635, 5635, 5635, 6878, 5635,
      /* 4807 */ 5512, 7309, 6633, 5635, 6047, 5635, 5635, 5635, 7256, 7310, 6634, 5635, 5635, 5635, 6882, 5635, 7307,
      /* 4824 */ 7311, 6338, 6853, 5320, 5635, 5640, 7334, 5722, 5635, 5635, 6821, 6126, 5635, 5635, 6021, 6772, 7128,
      /* 4841 */ 7132, 5258, 5635, 5635, 5635, 6966, 5642, 5635, 5635, 7101, 5635, 6850, 5635, 6336, 5635, 6260, 5635,
      /* 4858 */ 6261, 7102, 5985, 6334, 5635, 5635, 5644, 7073, 7315, 7319, 6338, 5635, 6080, 5906, 5903, 7316, 6788,
      /* 4875 */ 5635, 5635, 6772, 5635, 6084, 7095, 5635, 5635, 5686, 5635, 7317, 6789, 5635, 5635, 6813, 5635, 7318,
      /* 4892 */ 6790, 6770, 6769, 5635, 5635, 6619, 5635, 6769, 6820, 5635, 5635, 6881, 7115, 5635, 6852, 6855, 5635,
      /* 4909 */ 5635, 5635, 6845, 5635, 6718, 6694, 5635, 5635, 5635, 6942, 6786, 6790, 5635, 5635, 5635, 6967, 5635,
      /* 4926 */ 5635, 6786, 6790, 6770, 6769, 7254, 5635, 7101, 5635, 7297, 7132, 5258, 7113, 5635, 5635, 6819, 5635,
      /* 4943 */ 5635, 5635, 5166, 6379, 5048, 5635, 5635, 6821, 6074, 6078, 5635, 5635, 5635, 5978, 7350, 5519, 7320,
      /* 4960 */ 5635, 6081, 5678, 6626, 7319, 5635, 5635, 5635, 7006, 7348, 5517, 6786, 6617, 5635, 6772, 6771, 5635,
      /* 4977 */ 6084, 6303, 6488, 5635, 7324, 5906, 5903, 5635, 6085, 5641, 5635, 6084, 6352, 5635, 5635, 5635, 6231,
      /* 4994 */ 5047, 5635, 5635, 5635, 7033, 5635, 7348, 7335, 5903, 5635, 6879, 5635, 6851, 5678, 5909, 6855, 6864,
      /* 5011 */ 5635, 7340, 5635, 5635, 6829, 5635, 6087, 5635, 6881, 5635, 6852, 6819, 6850, 5635, 5635, 6261, 7332,
      /* 5028 */ 7336, 5635, 5635, 5635, 7145, 5635, 6232, 5635, 5635, 6833, 5635, 5274, 5635, 5635, 5635, 7177, 0, 0,
      /* 5046 */ 1075838976, 2097152, 16384, 0, 0, 0, 62, 64, 4194560, 4196352, 270532608, 2097152, 2097152, 268435456,
      /* 5060 */ 4194432, 541065216, 541065216, 541065216, 541065216, 4194304, 4194304, 4196352, -1606418432, -1606418432,
      /* 5070 */ 541065216, 541065216, 4194304, 4198144, 541065216, 541065216, -2143289344, -2143289344, 8425488, 4194304,
      /* 5080 */ 4194304, 4194304, 541065216, 37748736, 4194304, 541065216, 4194304, 4194304, 4194432, 37748736,
      /* 5090 */ -1606418432, 742391808, 239075328, 775946240, 171966464, 171966464, 171966464, 171966464, 239075328,
      /* 5099 */ 171966464, 775946240, 239075328, 239075328, 775946240, 775946240, 775946240, 4718592, 64, 4718592,
      /* 5109 */ 2097216, 4720640, 4194400, 4194368, -2142763008, 541589504, 4194368, 541589504, 541589504, 541065280,
      /* 5119 */ 4194368, 4194368, 541065312, 541065280, -2143289280, 4194368, -2143285440, -1605890240, -2142761152,
      /* 5128 */ -2109731008, -1606414528, -2143285440, -2143285440, -2143285440, -1605890240, -1606414528, -1606414528,
      /* 5136 */ -2143285440, -2143285408, -2143285440, -2143285440, -2142761152, 776470528, -1908404416, 775946304,
      /* 5144 */ 775946304, -1908404416, 2, 4, 8, 16, 512, 1024, 16777216, 33554432, 402653184, 0, 0, 0, -1979711488, 0,
      /* 5160 */ 8192, 8392704, 0, 0x80000000, 16777216, 0, 0, 1536, 32768, 0, 0, 128, 196608, 0, 16384, 1536, 1792, 8192,
      /* 5178 */ 16384, 131072, 131072, 0, 0, 64, 1536, 32768, 96, 96, 0, 0, 0x80000000, 16, 0, 0, 1536, 64, 524352,
      /* 5197 */ 524352, 524352, 524352, 0, 524288, 64, 64, 262144, 1048576, 4194304, 16777216, 33554432, 67108864,
      /* 5210 */ 134217728, 536870912, 0, 128, 128, 128, 128, 2048, 1536, 1024, 0, 0, 0, 15, 208, 15360, 96, 96, 0, 64,
      /* 5230 */ 64, 16392, 64, 1048576, 128, 128, 0, 256, 8192, 0, 8192, 0, 33554432, 0, 1024, 1024, 0, 0, 0x80000000,
      /* 5249 */ 65536, 32, 96, 96, 96, 96, 64, 0, 8388608, 4096, 0, 0, 8192, 2097152, 0x80000000, 96, 524352, 524352,
      /* 5267 */ 524352, 524288, 524288, 524288, 64, 64, 64, 0, 0, 0, 8, 0, 0, 0, 11, 64, 64, 128, 2048, 0, 4096, 0, 0,
      /* 5290 */ 131072, 128, 64, 64, 64, 96, 96, 96, 524352, 524352, 524288, 64, 524288, 64, 64, 96, 524352, 0, 0, 0, 18,
      /* 5311 */ 33554432, 64, 96, 524352, 524288, 0, 64, 0, 2097152, 0, 0, 4, 16, 0, 0, 16, 8388608, 0, 0, 4096,
      /* 5331 */ 536870912, 1073741824, 0, 4, 32, 32, 4, 1073872896, 32, 40, 96, 160, 1056, 262176, 1048608, 2097184, 32,
      /* 5348 */ 32, 32, 524320, 32, 1073872896, 40, 262176, 1120, 96, 4195360, 6291488, 2097184, 2097184, 4194336,
      /* 5362 */ 4194336, 536870944, 32, 32, 40, 262176, 32, 32, 40, 262184, 1120, 96, 6292512, 4195360, 56, 262184, 40,
      /* 5379 */ 262184, 40, 0, 4, 262184, 40, 40, 40, 40, 4195104, 6292512, 4196128, 32, 262184, 34, 34, 40, 48, 42, 32,
      /* 5399 */ 32, 327155712, 34, 1056, 1056, 32, 96, 32, 32, 41, 262184, 32, 64, 512, 2048, 16384, 67108864, 42, 1056,
      /* 5418 */ 4194336, 32, 32, 32, 32, 56, 2098208, 42, 4457568, -326784344, -322851160, -322851160, -322698144,
      /* 5431 */ -322698144, -322698144, -322698144, -322695456, -322695456, -322695456, -322695456, -322597152,
      /* 5439 */ -320598176, -322597152, -322597144, -321548576, -320598168, -321548568, -322597144, 32, 0, 96, 32, 42,
      /* 5451 */ 224, 40, 262176, 42, 106, 293601323, 293601323, 293863467, 293699627, 293617707, 293716011, 297896507,
      /* 5463 */ 293964347, 293702267, 297896507, 293702203, 293702203, 293702203, 293702203, 293964347, 297896507,
      /* 5472 */ 297896507, -322597144, -322588952, -321548568, -322588952, -37744981, -322597144, -321548568, -37482773,
      /* 5481 */ 0, 131072, 1048576, 2097152, 0, 0, -1744830464, 0, -1744830464, 0, 318767104, 0, 0, 0, 48, 0, 1,
      /* 5498 */ 285212672, 0, 0, 2048, 64, 64, 64, 64, 32, 96, 0, 32, 64, 65536, 0, 0, 1, 2, 12, 16, 64, 128, 1024, 2048,
      /* 5522 */ 4096, 0, 2, 65536, 262656, 5242880, -1842937664, 201330721, 201330721, -2111369023, -2111369023,
      /* 5533 */ -2111369023, -2111369023, -2111369023, -2111369023, -2111360575, -2111369023, -2111369023, -1977151295,
      /* 5541 */ -1977151293, -1910042431, -1893265183, -2111368509, -1893265183, -1893265183, -1893265183, -1893265183,
      /* 5549 */ -2111368509, -1893265183, -1893265183, -553689472, -553656704, -553689472, -553689472, -553656704,
      /* 5557 */ -553656704, -553656704, -553656704, -553656704, -553656704, -553656672, -553656672, -553656672,
      /* 5565 */ -553656672, -553656672, -553656670, -553656608, -553656672, -553656664, -553656664, -553656672,
      /* 5573 */ -553656670, -553656672, -553656672, -536912159, -553656671, -536879391, -536879391, -536879391, 0, 0,
      /* 5583 */ 2048, 4194304, 0, 0, 0, 262656, 0, 0, 0, 536870912, 1073741824, 458880, 2097152, -1845493760, 0, 0, 4096,
      /* 5600 */ 2097152, 0, 0, 1, 4096, 201326592, 805306368, -1073741824, 0, 0, 0, 24576, 471424, 0, -2113929216, 0, 0,
      /* 5617 */ 0, 220, -1912602624, 18874368, 463488, 0, 0, 9216, 0, 0, 16384, 8192, 8192, 32768, 2048, 2048, 2048,
      /* 5634 */ 2048, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 3, 4, 16, 224, 256, 512, 32768, 0, 1040000, 15728640,
      /* 5657 */ -570425344, 0, 0, 0, 254, 4194304, 16777216, 33554432, 268435456, 536870912, 0x80000000, 0, 0,
      /* 5670 */ -570425344, 32505856, 2097152, 301989888, 0, 0, 0, 512, 0, 0, 0, 256, 12288, 0, 167772160, 234881024, 0,
      /* 5687 */ 0, 16384, 32768, 50331648, 0, 128, 512, 7168, 16384, 32768, 196608, 16384, 196608, 786432, 1048576,
      /* 5702 */ 2097152, 4194304, 8388608, 33554432, 2097152, 4194304, 8388608, 503316480, 1073741824, 0x80000000, 0,
      /* 5713 */ 4096, 201326592, 0, 0, 0, 167772160, 234881024, 128, 1024, 4096, 8192, 0, 0, 8192, 268435456, 0, 0,
      /* 5730 */ 4194304, 8388608, 234881024, 268435456, 1073741824, 0x80000000, 0, 0, 1048576, 4194304, 33554432,
      /* 5741 */ 268435456, 268435456, 268435456, 268435456, 0, 128, 131072, 2097152, 0, 0, 0, 520, 0, 201326592, 0, 0, 0,
      /* 5758 */ 1073741824, 0, 0, 0, 134217728, 128, 512, 3072, 16384, 32768, 3072, 16384, 131072, 524288, 1048576,
      /* 5773 */ 4194304, 16777216, 33554432, 201326592, 268435456, 1073741824, 0x80000000, 1048576, 4194304, 268435456,
      /* 5783 */ 536870912, 131072, 0, 0, 131072, 0, 131072, 2097152, 0, 0, 16384, 2097152, 0, 0, 2097152, 4194304,
      /* 5799 */ 134217728, 0x80000000, 0, 0, 0, 512, 3072, 131072, 524288, 1048576, 131072, 524288, 4194304, 0x80000000,
      /* 5813 */ 0, 0, 0, 16384, 16384, 18432, 0, 0, 0, 2048, 0, 0, 4096, 1048576, 0, 0, 67108864, 1073741824,
      /* 5831 */ 0x80000000, 0, 0, 29696, 0, 0, 32768, 50331648, 268435456, 0x80000000, 0, 0, 1, 1, 18952, 1024, 0, 65,
      /* 5849 */ 1024, 0, 4096, 32768, 0, 1024, 18952, 65, 268436480, 2101248, 524288, 1024, 19017, -1744550912, 8388624,
      /* 5864 */ 8388624, 8388624, -1739308032, -1739308032, -1739308032, -1739308032, -1736162288, -1736162288,
      /* 5872 */ -1736162288, -1736162288, -7868466, -7868466, -7868466, -7868466, -7868450, -7868450, -7868450, 0, 0, 0,
      /* 5884 */ 1610612736, 1024, 0, 2101248, 0, 0, 262144, 65536, 262144, 262144, 0, 0, 2048, 131072, 524288, 585, 0, 0,
      /* 5902 */ 0, 8192, 0, 0, 0, 4096, 0, 0, 0, 32, 0, 0, 0, 44, 64576, 0, 1024, 278528, -1744830464, 5521408,
      /* 5922 */ -1744830464, 0, 0, 2, 12, 64, 0, 1040, 8667136, -1744830464, -67108864, 0, 0, 0, 9728, 0, 2014, 0, 0, 0,
      /* 5942 */ 13312, 0, 1, 4, 8, 32, 64, 16384, 67108864, 134217728, 268435456, 0x80000000, 0, 0, 520, 1024, 0, 0, 2,
      /* 5961 */ 16, 0, 278528, 0, 0, 2, 67108864, 16384, 0, 5242880, 0x80000000, 0, 0, 327680, 0, 0, 328192, 0, 0, 0,
      /* 5981 */ 118, 577408, 22020096, 1040, 0, 0, 0, 16384, 0, 67108864, 1998, 518144, 8388608, 50331648, 201326592,
      /* 5996 */ 805306368, 0, 2, 204, 768, 1024, 10240, 1024, 10240, 16384, 32768, 458752, 8388608, 458752, 8388608,
      /* 6011 */ 50331648, 67108864, 134217728, 805306368, 134217728, 805306368, 1073741824, 0x80000000, 0, 220, 0, 0, 0,
      /* 6024 */ 32768, 33554436, 2, 12, 192, 768, 1024, 1024, 2048, 8192, 16384, 32768, 458752, 32768, 458752, 50331648,
      /* 6040 */ 67108864, 134217728, 134217728, 805306368, 1073741824, 0, 0, 208, 0, 0, 0, 34816, 67108864, 268435456, 0,
      /* 6055 */ 0, 0, 65536, 458752, 50331648, 67108864, 805306368, 1073741824, 458752, 50331648, 67108864, 536870912,
      /* 6067 */ 1073741824, 0, 0, 4, 8, 64, 128, 512, 2048, 196608, 262144, 33554432, 536870912, 0, 0, 0, 262144, 0, 0,
      /* 6086 */ 0, 64, 0, 0, 2, 4, 8, 262144, 0, 1048576, 4194304, 0, 0, 4, 8, 128, 512, 1024, 32768, 65536, 131072,
      /* 6107 */ 2048, 196608, 262144, 50331648, 536870912, 1073741824, 1, 4, 8, 512, 2048, 131072, 33554432, 536870912,
      /* 6121 */ 0, 0, 4, 8, 512, 2048, 8192, 32768, 8388608, 0, 524288, 262144, 0, 0, 4, 64, 128, 8388608, 0, 512, 2048,
      /* 6142 */ 131072, 536870912, 0, 0, 4194304, 8192, 2097152, 268435456, 0x80000000, 16, 33554432, -2147418112,
      /* 6154 */ 537395200, 537395200, 0, 4196352, 537427968, 4196352, 0, 537395200, 4196352, 4196352, 276901888, 8540160,
      /* 6166 */ -1606418432, 32768, 537395200, 4196352, 1082130432, 51380242, 51380242, 51380242, 22022147, 22349827,
      /* 6176 */ 22349827, 22349827, 22366219, 22349843, 22349827, 22349827, 22366219, 22349827, 55576594, 55576594,
      /* 6186 */ 55576594, 55576594, 1062785014, 324012114, 55576594, 55576594, 55576594, 1062785014, 1062785014,
      /* 6195 */ 1062785014, 1062785014, 0, 0, 0, 329728, 557056, 0, 0, 0, 393216, 0, 0, 17825792, 33554432, 0, 0, 0,
      /* 6213 */ 462976, 3, 22020096, 0, 0, 4, 134217728, 0, 0, 8, 16, 512, 402653184, 0, 0, 346112, 19, 0, 0, 8, 64, 0,
      /* 6235 */ 0, 0, 82, 301989888, 0, 0, 393232, 0, 0, 393240, 0, 0, 524288, 524288, 524288, 524288, 0, 577408,
      /* 6253 */ 22020096, 1040187392, 0, 0, 0, 524288, 0, 0, 0, 16, 0, 0, 0, 6, 16384, 32768, 268435456, 0, 268435456, 0,
      /* 6273 */ 1048576, 16777216, 33554432, 0, 0, 524288, 1048576, 2097152, 0, 80, 268435456, 0, 0, 524288, 536870912,
      /* 6288 */ 0, 112, 128, 256, 3584, 16384, 32768, 134217728, 805306368, 0, 0, 0, 1007232, 256, 1536, 2048, 16384,
      /* 6305 */ 32768, 262144, 0, 4, 16, 32, 64, 128, 256, 1536, 0, 16, 33554432, 0, 0, 1048576, 4194304, 0x80000000,
      /* 6323 */ 1536, 16384, 32768, 524288, 4194304, 33554432, 134217728, 536870912, 0, 0, 0, 32768, 0, 0, 0, 1048576, 0,
      /* 6340 */ 0, 0, 1998, 518144, 1, 0, 0, 65536, 262144, 0, 0, 256, 1536, 32768, 524288, 0, 0, 4194304, 134217728,
      /* 6359 */ 536870912, 0, 0, 1114112, 1073741824, 16, 64, 1536, 32768, 524288, 4194304, 67174400, 33554432,
      /* 6372 */ 1073741824, 0, 67174400, 0, 0, 16384, 1073741824, 0, 0, 2097152, 0, 1572864, 0, 1073741824, 16384, 0,
      /* 6388 */ 4194304, 0, 8, 0, 131072, 0, 131072, 0, 8, 131072, 131072, 134217728, 4096, 0, 8, 0, 8, 131072, 4194304,
      /* 6407 */ -2146430976, 131072, 134217736, 16908320, 547389524, 547389524, 555909216, 555909216, 555909216,
      /* 6416 */ 555909216, 564297840, 564297844, 564297844, 564297844, 564297844, 564297844, 564297844, 1001055742,
      /* 6425 */ 1001056254, 1001055742, 1001055742, 1001056254, 1001056254, 1001056254, 1001056254, 1001056254,
      /* 6433 */ 1001055742, 1, 0, 67108864, 1073741824, 0, 84, 2129920, 8388608, 536870912, 0, 96, 2260992, 0, 0,
      /* 6448 */ 2097152, 4194304, 8388608, 134217728, 268435456, 1280, 2809856, 58720256, 939524096, 0, 0, 0, 1052672, 0,
      /* 6462 */ 254, 1792, 2809856, 58720256, 939524096, 0, 939524096, 0, 0, 12, 16, 32768, 2097152, 8388608, 536870912,
      /* 6477 */ 0, 163840, 0, 0, 12, 32, 64, 1024, 2048, 57344, 262144, 50331648, 268435456, 1073741824, 0x80000000, 0,
      /* 6493 */ 52, 0, 0, 20, 64, 62, 64, 128, 1280, 8192, 16384, 131072, 524288, 58720256, 24576, 163840, 524288,
      /* 6510 */ 2097152, 58720256, 402653184, 58720256, 402653184, 536870912, 0, 0, 64, 128, 1792, 24576, 163840, 4, 16,
      /* 6525 */ 8388608, 0, 0, 2113536, 0, 0, 3735552, 0, 0, 8388608, 8388608, 4096, 4096, 4096, 4096, 0, 48, 25165824,
      /* 6543 */ 0, 0, 0, 1572864, 0, 6, 56, 128, 1792, 8192, 524288, 58720256, 402653184, 0, 0, 32, 128, 256, 262144,
      /* 6562 */ 262144, 1048576, 1073741824, 0, 0, 0, 0x80000000, 0, 0, 0, -2147483646, 4, 24, 32, 128, 1792, 1280, 8192,
      /* 6580 */ 524288, 16777216, 33554432, 0, 262144, 33554432, 134217728, 0, 8, 16, 1024, 16777216, 4194432, 3145728,
      /* 6594 */ 541065216, -2143289344, 4194304, 4194304, 4194304, 4194304, 16, 402653184, 0, 0, 32, 128, 256, 2048,
      /* 6608 */ 262144, 524288, 4, 16384, 65536, 67108864, 0, 0, 0, 131072, 0, 0, 0, 1024, 0, 0, 32768, 8192, 0, 2048, 0,
      /* 6629 */ 32, 8192, 3670016, 2048, 8192, 196608, 1048576, 0, 0, 34816, 9216, 4096, 4096, 29696, 29712, 29712,
      /* 6645 */ 29840, 29712, 29712, 29840, 536900624, 4224144, 144384, -754647956, -754647956, -754647956, -754647956,
      /* 6656 */ 144384, 144384, 144384, 144384, -754647940, -754647940, -754647940, -754647940, -754516884, -754647956,
      /* 6666 */ -754516884, -754516884, -754516884, 0, 0, 8388608, 1073741824, 0, 0, 67108864, 12, 16384, 0, 65536,
      /* 6680 */ 29824, 0, 0, 0, 3670016, 44, 64576, 319029248, -1073741824, 0, 0, 60, 0, 0, 0, 4194304, 0, 0, 0, 2014, 0,
      /* 6701 */ 319160320, 0, 0, 0, 5242880, 0, 4, 8, 256, 512, 2048, 8192, 16384, 458752, 50331648, 0, 524288, 3145728,
      /* 6719 */ 0, 0, 16384, 8, 0, 28672, 0, 0, 32, 524288, 0, 16, 0, 128, 0, 12288, 131072, 0, 0, 128, 512, 3072, 4096,
      /* 6742 */ 16384, 32768, 131072, 524288, 1048576, 2097152, 4194304, 262144, 318767104, -1073741824, 0, 0, 0, 28, 0,
      /* 6757 */ 0, 60, 64576, 28, 32, 64, 1024, 2048, 61440, 262144, 318767104, 24576, 0, 0, 0, 8388608, 0, 0, 0,
      /* 6776 */ 1040000, 67108864, 16384, 0, 65536, 262144, 1048576, 0, 8, 64, 2048, 4096, 8192, 65536, 131072, 1048576,
      /* 6792 */ 0, 0, 128, 536870912, 4194304, 131072, 0, 0, 64, 2048, 16384, 32768, 524288, 1048576, 4194304, 134217728,
      /* 6808 */ 0x80000000, 32768, 262144, 50331648, 268435456, 0, 32768, 8388608, 0, 0, 16777216, 16777216, 0, 0, 0, 4,
      /* 6824 */ 8, 16, 2, 67108864, 0, 65536, 201326592, 0x80000000, 0, 0, 1998, 59238400, -67108864, 0, 524288, 1048576,
      /* 6840 */ 0, 0, 64, 256, 32768, 50331648, 268435456, 0, 0, 1, 256, 0, 0, 0, 16777216, 0, 0, 256, 0, 8192, 0, 256,
      /* 6862 */ 262144, 2113536, 2097152, 135790592, 0, 256, 8192, 2097152, 0, 0x80000000, 0, 32768, 2097152, 0,
      /* 6876 */ 0x80000000, 5242880, 0, 0, 0, 128, 0, 0, 0, 208, 131073, 0, 0, 131073, 0, 135790592, 131073, 4, 0,
      /* 6895 */ 131073, 393233, 1610612736, 1610612736, 1610612736, 393241, 393241, 393241, 393241, 805707793, 805707793,
      /* 6906 */ 1879449617, 805708049, 1879449617, 1879449617, 1879449617, 1879449617, -483948553, -475559945,
      /* 6914 */ -475559945, -483948553, -483948553, -475559945, -483948553, -475559945, -483948553, -475559945,
      /* 6922 */ -475559945, -475559945, -475559945, -475559945, -215504905, -475559945, -207116297, -207116297, 0, 0, 72,
      /* 6933 */ 0, 4096, 4194304, 32768, 0, 0, 256, 401424, 805306368, 0, 0, 112, 25165824, 0, 1879048192, 0, 0, 116, 0,
      /* 6952 */ 0, 401680, 0, 0, 0, 32505856, 7, 19367920, -503316480, 0, 0, 0, 33554432, 0, 0, 33554432, 268435456, 0,
      /* 6970 */ 0, 0, 19376112, -234881024, 0, 0, 50331648, 268435456, 0, 27764720, -234881024, 0, 0, 512, 2048, 0, 0, 1,
      /* 6988 */ 2, 4, 32, 524288, 1048576, 524288, 1048576, 33554432, 67108864, 134217728, 805306368, 0, 24, 0, 0, 512,
      /* 7004 */ 3072, 16384, 0, 7, 16, 480, 1536, 32768, 1536, 32768, 65536, 2490368, 32768, 65536, 10878976, 16777216,
      /* 7020 */ 33554432, 0, 9728, 268435456, 0, 0, 67108866, 12, 64, 128, 512, 1024, 2048, 0, 16, 393216, 0, 0, 393216,
      /* 7039 */ 2097152, 16777216, 33554432, 536870912, -1073741824, 0, 0, 10485760, 16777216, 33554432, 1073741824,
      /* 7050 */ 0x80000000, 0, 16, 224, 256, 1536, 32768, 65536, 393216, 10485760, 16777216, 131072, 262144, 2097152,
      /* 7064 */ 16777216, 32768, 131072, 262144, 2097152, 8388608, 16777216, 0, 0, 4, 16, 224, 512, 32768, 131072,
      /* 7079 */ 2097152, 16777216, 192, 32768, 0, 0, 512, 4096, 4, 16, 192, 32768, 8388608, 0, 16, 64, 128, 8388608, 0,
      /* 7098 */ 0, 1024, 0, 4, 0, 0, 0, 3145728, 0, 4, 128, 0, 0, 268435456, 2, 0, 0, 65536, 0, 0, 0, 65, 0, 64, 128,
      /* 7123 */ 8388608, 16777216, 1073741824, 0, 0, 512, 2048, 32768, 262144, 524288, 8388608, 0, 0, 512, 131072,
      /* 7138 */ 524288, 8388608, 33554432, 0x80000000, 33554432, 33554432, 0, 2, 4, 112, 128, -2113929216, 100663296,
      /* 7151 */ 100663296, 2, 4, 524288, 134217728, 0, 0, 8, 512, 2048, 196608, 33554436, 0, 0, 33554436, 4224, 4224, 0,
      /* 7169 */ 65536, 100663296, 4224, 65536, 65536, 262144, 33554432, 0, 2, 4, 16, 64, 128, 256, 0, 4224, 65536,
      /* 7186 */ 16777216, 262400, 65536, 4224, -1072627712, 805306384, -1342177264, -1342177264, -1070006272,
      /* 7195 */ -1069989376, -1069989376, -1069989376, -258932720, -258932720, -258932720, -258932720, -1069989360,
      /* 7203 */ -1065795072, -1061600768, -1069989376, -225378288, -258932720, -258932720, -258932720, -225378288,
      /* 7211 */ 1260767, 1260767, 34815199, 1260767, 1260767, 1260767, 1260767, 34815199, 1260767, 34815199, 34815199,
      /* 7222 */ 34815199, 1260767, 1260767, 169032927, 1242774751, -1978450721, 169032927, -1978450721, -1978450721,
      /* 7231 */ -1978450721, 169032927, 169032927, 169032927, 169032927, -225231649, -1173144353, -225231649, -225231649,
      /* 7240 */ -91013921, 0, 0, 0, 67108864, 0, 3751936, 0, 0, 528, 7946240, 12140544, 0, 0, 0, 134217728, 0, 0, 0, 7,
      /* 7260 */ 27756528, -503316480, 0, 0, 9502720, 1610612736, 0, 0, 486539264, 0, 0, 2048, 32768, 0, 0, 64, 128, 0, 0,
      /* 7279 */ 536870912, 0, 0, 208, 15360, 1245184, 0, 0, 0, 268435456, 0, 0, 0, 15, 9633792, 0, 0, 0, 32, 512, 2048,
      /* 7300 */ 262144, 0, 3670016, 0, 0, 1040, 1040, 1, 2, 12, 80, 128, 7168, 8192, 196608, 16, 64, 128, 3072, 4096,
      /* 7320 */ 8192, 65536, 131072, 0, 0, 32, 262144, 524288, 33554432, 134217728, 0, 0, 0, 2, 8, 64, 128, 1024, 4096,
      /* 7339 */ 0, 0, 262144, 0, 4096, 4194304, 1, 1, 1, 0, 0, 2, 8, 16, 64
    ];

    private static TOKEN: string [] =
    [
      "(0)",
      "PragmaContents",
      "DirCommentContents",
      "DirPIContents",
      "CDataSection",
      "Wildcard",
      "EQName",
      "URILiteral",
      "IntegerLiteral",
      "DecimalLiteral",
      "DoubleLiteral",
      "StringLiteral",
      "PredefinedEntityRef",
      "'\"\"'",
      "EscapeApos",
      "ElementContentChar",
      "QuotAttrContentChar",
      "AposAttrContentChar",
      "PITarget",
      "NCName",
      "QName",
      "S",
      "S",
      "CharRef",
      "CommentContents",
      "EOF",
      "'!'",
      "'!='",
      "'\"'",
      "'#'",
      "'#)'",
      "'$'",
      "'$$'",
      "'%'",
      "''''",
      "'('",
      "'(#'",
      "'(:'",
      "')'",
      "'*'",
      "'*'",
      "'+'",
      "','",
      "'-'",
      "'-->'",
      "'.'",
      "'..'",
      "'/'",
      "'//'",
      "'/>'",
      "':'",
      "':)'",
      "'::'",
      "':='",
      "';'",
      "'<'",
      "'<!--'",
      "'</'",
      "'<<'",
      "'<='",
      "'<?'",
      "'='",
      "'>'",
      "'>='",
      "'>>'",
      "'?'",
      "'?>'",
      "'@'",
      "'NaN'",
      "'['",
      "']'",
      "'after'",
      "'all'",
      "'allowing'",
      "'ancestor'",
      "'ancestor-or-self'",
      "'and'",
      "'any'",
      "'append'",
      "'array'",
      "'as'",
      "'ascending'",
      "'at'",
      "'attribute'",
      "'base-uri'",
      "'before'",
      "'boundary-space'",
      "'break'",
      "'by'",
      "'case'",
      "'cast'",
      "'castable'",
      "'catch'",
      "'check'",
      "'child'",
      "'collation'",
      "'collection'",
      "'comment'",
      "'constraint'",
      "'construction'",
      "'contains'",
      "'content'",
      "'context'",
      "'continue'",
      "'copy'",
      "'copy-namespaces'",
      "'count'",
      "'decimal-format'",
      "'decimal-separator'",
      "'declare'",
      "'default'",
      "'delete'",
      "'descendant'",
      "'descendant-or-self'",
      "'descending'",
      "'diacritics'",
      "'different'",
      "'digit'",
      "'distance'",
      "'div'",
      "'document'",
      "'document-node'",
      "'element'",
      "'else'",
      "'empty'",
      "'empty-sequence'",
      "'encoding'",
      "'end'",
      "'entire'",
      "'eq'",
      "'every'",
      "'exactly'",
      "'except'",
      "'exit'",
      "'external'",
      "'false'",
      "'first'",
      "'following'",
      "'following-sibling'",
      "'for'",
      "'foreach'",
      "'foreign'",
      "'from'",
      "'ft-option'",
      "'ftand'",
      "'ftnot'",
      "'ftor'",
      "'function'",
      "'ge'",
      "'greatest'",
      "'group'",
      "'grouping-separator'",
      "'gt'",
      "'idiv'",
      "'if'",
      "'import'",
      "'in'",
      "'index'",
      "'infinity'",
      "'inherit'",
      "'insensitive'",
      "'insert'",
      "'instance'",
      "'integrity'",
      "'intersect'",
      "'into'",
      "'is'",
      "'item'",
      "'json'",
      "'json-item'",
      "'jsoniq'",
      "'key'",
      "'language'",
      "'last'",
      "'lax'",
      "'le'",
      "'least'",
      "'let'",
      "'levels'",
      "'loop'",
      "'lowercase'",
      "'lt'",
      "'minus-sign'",
      "'mod'",
      "'modify'",
      "'module'",
      "'most'",
      "'namespace'",
      "'namespace-node'",
      "'ne'",
      "'next'",
      "'no'",
      "'no-inherit'",
      "'no-preserve'",
      "'node'",
      "'nodes'",
      "'not'",
      "'null'",
      "'object'",
      "'occurs'",
      "'of'",
      "'on'",
      "'only'",
      "'option'",
      "'or'",
      "'order'",
      "'ordered'",
      "'ordering'",
      "'paragraph'",
      "'paragraphs'",
      "'parent'",
      "'pattern-separator'",
      "'per-mille'",
      "'percent'",
      "'phrase'",
      "'position'",
      "'preceding'",
      "'preceding-sibling'",
      "'preserve'",
      "'previous'",
      "'processing-instruction'",
      "'relationship'",
      "'rename'",
      "'replace'",
      "'return'",
      "'returning'",
      "'revalidation'",
      "'same'",
      "'satisfies'",
      "'schema'",
      "'schema-attribute'",
      "'schema-element'",
      "'score'",
      "'select'",
      "'self'",
      "'sensitive'",
      "'sentence'",
      "'sentences'",
      "'skip'",
      "'sliding'",
      "'some'",
      "'stable'",
      "'start'",
      "'stemming'",
      "'stop'",
      "'strict'",
      "'strip'",
      "'structured-item'",
      "'switch'",
      "'text'",
      "'then'",
      "'thesaurus'",
      "'times'",
      "'to'",
      "'treat'",
      "'true'",
      "'try'",
      "'tumbling'",
      "'type'",
      "'typeswitch'",
      "'union'",
      "'unique'",
      "'unordered'",
      "'updating'",
      "'uppercase'",
      "'using'",
      "'validate'",
      "'value'",
      "'variable'",
      "'version'",
      "'weight'",
      "'when'",
      "'where'",
      "'while'",
      "'wildcards'",
      "'window'",
      "'with'",
      "'without'",
      "'word'",
      "'words'",
      "'zero-digit'",
      "'{'",
      "'{{'",
      "'{|'",
      "'|'",
      "'||'",
      "'|}'",
      "'}'",
      "'}}'"
    ];
  }

// End
