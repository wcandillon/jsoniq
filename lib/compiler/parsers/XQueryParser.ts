// This file was generated on Sat May 2, 2015 23:07 (UTC+01) by REx v5.33 which is Copyright (c) 1979-2015 by Gunther Rademacher <grd@gmx.net>
// REx command line: XQueryParser.ebnf -ll 2 -backtrack -tree -typescript

  export interface ParsingEventHandler
  {
    reset(source: string): void;
    startNonterminal(name: string, begin: number): void;
    endNonterminal(name: string, end: number): void;
    terminal(name: string, begin: number, end: number): void;
    whitespace(begin: number, end: number): void;
  }

  export class ParseException
  {
    private begin: number;
    private end: number;
    private state: number;
    private offending: number;
    private expected: number;

    constructor(b: number, e: number, s: number, o: number, x: number)
    {
      this.begin = b;
      this.end = e;
      this.state = s;
      this.offending = o;
      this.expected = x;
    }

    getBegin() {return this.begin;}
    getEnd() {return this.end;}
    getState() {return this.state;}
    getExpected() {return this.expected;}
    getOffending() {return this.offending;}

    getMessage()
    {
      return this.offending < 0 ? "lexical analysis failed" : "syntax error";
    }
  }

  interface Memoizer
  {
    [index: number]: number;
  }

  export class Parser
  {
    constructor(source: string, parsingEventHandler: ParsingEventHandler)
    {
      this.eventHandler = parsingEventHandler;
      this.input = source;
      this.size = source.length;
      this.reset(0, 0, 0);
    }

    getInput()
    {
      return this.input;
    }

    private reset(l: number, b: number, e: number)
    {
                   this.b0 = b; this.e0 = b;
      this.l1 = l; this.b1 = b; this.e1 = e;
      this.l2 = 0;
      this.end = e;
      this.ex = -1;
      this.memo = {};
      this.eventHandler.reset(this.input);
    }

    getOffendingToken(e: ParseException)
    {
      var o = e.getOffending();
      return o >= 0 ? Parser.TOKEN[o] : null;
    }

    getExpectedTokenSet(e: ParseException)
    {
      var expected: string[];
      if (e.getExpected() < 0)
      {
        expected = Parser.getTokenSet(- e.getState());
      }
      else
      {
        expected = [Parser.TOKEN[e.getExpected()]];
      }
      return expected;
    }

    getErrorMessage(e: ParseException)
    {
      var tokenSet = this.getExpectedTokenSet(e);
      var found = this.getOffendingToken(e);
      var prefix = this.input.substring(0, e.getBegin());
      var lines = prefix.split("\n");
      var line = lines.length;
      var column = lines[line - 1].length + 1;
      var size = e.getEnd() - e.getBegin();
      return e.getMessage()
           + (found == null ? "" : ", found " + found)
           + "\nwhile expecting "
           + (tokenSet.length == 1 ? tokenSet[0] : ("[" + tokenSet.join(", ") + "]"))
           + "\n"
           + (size == 0 || found != null ? "" : "after successfully scanning " + size + " characters beginning ")
           + "at line " + line + ", column " + column + ":\n..."
           + this.input.substring(e.getBegin(), Math.min(this.input.length, e.getBegin() + 64))
           + "...";
    }

    parse_XQuery()
    {
      this.eventHandler.startNonterminal("XQuery", this.e0);
      this.lookahead1W(274);        // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | EOF | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' |
                                    // '..' | '/' | '//' | ';' | '<' | '<!--' | '<?' | '@' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
      this.whitespace();
      this.parse_Module();
      this.shift(25);               // EOF
      this.eventHandler.endNonterminal("XQuery", this.e0);
    }

    private parse_Module()
    {
      this.eventHandler.startNonterminal("Module", this.e0);
      switch (this.l1)
      {
      case 274:                     // 'xquery'
        this.lookahead2W(198);      // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'encoding' | 'eq' | 'except' | 'ge' | 'gt' |
                                    // 'idiv' | 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' |
                                    // 'to' | 'treat' | 'union' | 'version' | '|' | '||'
        break;
      default:
        this.lk = this.l1;
      }
      if (this.lk == 64274          // 'xquery' 'encoding'
       || this.lk == 134930)        // 'xquery' 'version'
      {
        this.parse_VersionDecl();
      }
      this.lookahead1W(274);        // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | EOF | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' |
                                    // '..' | '/' | '//' | ';' | '<' | '<!--' | '<?' | '@' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
      switch (this.l1)
      {
      case 182:                     // 'module'
        this.lookahead2W(193);      // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'namespace' | 'ne' |
                                    // 'or' | 'to' | 'treat' | 'union' | '|' | '||'
        break;
      default:
        this.lk = this.l1;
      }
      switch (this.lk)
      {
      case 94390:                   // 'module' 'namespace'
        this.whitespace();
        this.parse_LibraryModule();
        break;
      default:
        this.whitespace();
        this.parse_MainModule();
      }
      this.eventHandler.endNonterminal("Module", this.e0);
    }

    private parse_VersionDecl()
    {
      this.eventHandler.startNonterminal("VersionDecl", this.e0);
      this.shift(274);              // 'xquery'
      this.lookahead1W(116);        // S^WS | '(:' | 'encoding' | 'version'
      switch (this.l1)
      {
      case 125:                     // 'encoding'
        this.shift(125);            // 'encoding'
        this.lookahead1W(17);       // StringLiteral | S^WS | '(:'
        this.shift(11);             // StringLiteral
        break;
      default:
        this.shift(263);            // 'version'
        this.lookahead1W(17);       // StringLiteral | S^WS | '(:'
        this.shift(11);             // StringLiteral
        this.lookahead1W(109);      // S^WS | '(:' | ';' | 'encoding'
        if (this.l1 == 125)         // 'encoding'
        {
          this.shift(125);          // 'encoding'
          this.lookahead1W(17);     // StringLiteral | S^WS | '(:'
          this.shift(11);           // StringLiteral
        }
      }
      this.lookahead1W(28);         // S^WS | '(:' | ';'
      this.whitespace();
      this.parse_Separator();
      this.eventHandler.endNonterminal("VersionDecl", this.e0);
    }

    private parse_LibraryModule()
    {
      this.eventHandler.startNonterminal("LibraryModule", this.e0);
      this.parse_ModuleDecl();
      this.lookahead1W(138);        // S^WS | EOF | '(:' | 'declare' | 'import'
      this.whitespace();
      this.parse_Prolog();
      this.eventHandler.endNonterminal("LibraryModule", this.e0);
    }

    private parse_ModuleDecl()
    {
      this.eventHandler.startNonterminal("ModuleDecl", this.e0);
      this.shift(182);              // 'module'
      this.lookahead1W(61);         // S^WS | '(:' | 'namespace'
      this.shift(184);              // 'namespace'
      this.lookahead1W(248);        // NCName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'last' | 'lax' | 'le' | 'let' |
                                    // 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery'
      this.whitespace();
      this.parse_NCName();
      this.lookahead1W(29);         // S^WS | '(:' | '='
      this.shift(60);               // '='
      this.lookahead1W(15);         // URILiteral | S^WS | '(:'
      this.shift(7);                // URILiteral
      this.lookahead1W(28);         // S^WS | '(:' | ';'
      this.whitespace();
      this.parse_Separator();
      this.eventHandler.endNonterminal("ModuleDecl", this.e0);
    }

    private parse_Prolog()
    {
      this.eventHandler.startNonterminal("Prolog", this.e0);
      for (;;)
      {
        this.lookahead1W(274);      // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | EOF | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' |
                                    // '..' | '/' | '//' | ';' | '<' | '<!--' | '<?' | '@' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
        switch (this.l1)
        {
        case 108:                   // 'declare'
          this.lookahead2W(213);    // S^WS | EOF | '!' | '!=' | '#' | '%' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' |
                                    // 'base-uri' | 'boundary-space' | 'cast' | 'castable' | 'collection' |
                                    // 'construction' | 'contains' | 'context' | 'copy-namespaces' | 'decimal-format' |
                                    // 'default' | 'div' | 'eq' | 'except' | 'ft-option' | 'function' | 'ge' | 'gt' |
                                    // 'idiv' | 'index' | 'instance' | 'integrity' | 'intersect' | 'is' | 'le' | 'lt' |
                                    // 'mod' | 'namespace' | 'ne' | 'option' | 'or' | 'ordering' | 'revalidation' |
                                    // 'to' | 'treat' | 'union' | 'updating' | 'variable' | '|' | '||'
          break;
        case 153:                   // 'import'
          this.lookahead2W(201);    // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'module' | 'ne' | 'or' |
                                    // 'schema' | 'to' | 'treat' | 'union' | '|' | '||'
          break;
        default:
          this.lk = this.l1;
        }
        if (this.lk != 42604        // 'declare' 'base-uri'
         && this.lk != 43628        // 'declare' 'boundary-space'
         && this.lk != 50284        // 'declare' 'construction'
         && this.lk != 53356        // 'declare' 'copy-namespaces'
         && this.lk != 54380        // 'declare' 'decimal-format'
         && this.lk != 55916        // 'declare' 'default'
         && this.lk != 72300        // 'declare' 'ft-option'
         && this.lk != 93337        // 'import' 'module'
         && this.lk != 94316        // 'declare' 'namespace'
         && this.lk != 104044       // 'declare' 'ordering'
         && this.lk != 113772       // 'declare' 'revalidation'
         && this.lk != 115353)      // 'import' 'schema'
        {
          break;
        }
        switch (this.l1)
        {
        case 108:                   // 'declare'
          this.lookahead2W(178);    // S^WS | '(:' | 'base-uri' | 'boundary-space' | 'construction' |
                                    // 'copy-namespaces' | 'decimal-format' | 'default' | 'ft-option' | 'namespace' |
                                    // 'ordering' | 'revalidation'
          break;
        default:
          this.lk = this.l1;
        }
        if (this.lk == 55916)       // 'declare' 'default'
        {
          this.lk = this.memoized(0, this.e0);
          if (this.lk == 0)
          {
            var b0A = this.b0; var e0A = this.e0; var l1A = this.l1;
            var b1A = this.b1; var e1A = this.e1; var l2A = this.l2;
            var b2A = this.b2; var e2A = this.e2;
            try
            {
              this.try_DefaultNamespaceDecl();
              this.lk = -1;
            }
            catch (p1A)
            {
              this.lk = -2;
            }
            this.b0 = b0A; this.e0 = e0A; this.l1 = l1A; if (this.l1 == 0) {this.end = e0A;} else {
            this.b1 = b1A; this.e1 = e1A; this.l2 = l2A; if (this.l2 == 0) {this.end = e1A;} else {
            this.b2 = b2A; this.e2 = e2A; this.end = e2A; }}
            this.memoize(0, this.e0, this.lk);
          }
        }
        switch (this.lk)
        {
        case -1:
          this.whitespace();
          this.parse_DefaultNamespaceDecl();
          break;
        case 94316:                 // 'declare' 'namespace'
          this.whitespace();
          this.parse_NamespaceDecl();
          break;
        case 153:                   // 'import'
          this.whitespace();
          this.parse_Import();
          break;
        case 72300:                 // 'declare' 'ft-option'
          this.whitespace();
          this.parse_FTOptionDecl();
          break;
        default:
          this.whitespace();
          this.parse_Setter();
        }
        this.lookahead1W(28);       // S^WS | '(:' | ';'
        this.whitespace();
        this.parse_Separator();
      }
      for (;;)
      {
        this.lookahead1W(274);      // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | EOF | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' |
                                    // '..' | '/' | '//' | ';' | '<' | '<!--' | '<?' | '@' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
        switch (this.l1)
        {
        case 108:                   // 'declare'
          this.lookahead2W(210);    // S^WS | EOF | '!' | '!=' | '#' | '%' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'collection' | 'contains' | 'context' | 'div' | 'eq' | 'except' |
                                    // 'function' | 'ge' | 'gt' | 'idiv' | 'index' | 'instance' | 'integrity' |
                                    // 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'option' | 'or' | 'to' |
                                    // 'treat' | 'union' | 'updating' | 'variable' | '|' | '||'
          break;
        default:
          this.lk = this.l1;
        }
        if (this.lk != 16492        // 'declare' '%'
         && this.lk != 48748        // 'declare' 'collection'
         && this.lk != 51820        // 'declare' 'context'
         && this.lk != 74348        // 'declare' 'function'
         && this.lk != 79468        // 'declare' 'index'
         && this.lk != 82540        // 'declare' 'integrity'
         && this.lk != 101996       // 'declare' 'option'
         && this.lk != 131692       // 'declare' 'updating'
         && this.lk != 134252)      // 'declare' 'variable'
        {
          break;
        }
        switch (this.l1)
        {
        case 108:                   // 'declare'
          this.lookahead2W(175);    // S^WS | '%' | '(:' | 'collection' | 'context' | 'function' | 'index' |
                                    // 'integrity' | 'option' | 'updating' | 'variable'
          break;
        default:
          this.lk = this.l1;
        }
        switch (this.lk)
        {
        case 51820:                 // 'declare' 'context'
          this.whitespace();
          this.parse_ContextItemDecl();
          break;
        case 101996:                // 'declare' 'option'
          this.whitespace();
          this.parse_OptionDecl();
          break;
        default:
          this.whitespace();
          this.parse_AnnotatedDecl();
        }
        this.lookahead1W(28);       // S^WS | '(:' | ';'
        this.whitespace();
        this.parse_Separator();
      }
      this.eventHandler.endNonterminal("Prolog", this.e0);
    }

    private parse_Separator()
    {
      this.eventHandler.startNonterminal("Separator", this.e0);
      this.shift(53);               // ';'
      this.eventHandler.endNonterminal("Separator", this.e0);
    }

    private parse_Setter()
    {
      this.eventHandler.startNonterminal("Setter", this.e0);
      switch (this.l1)
      {
      case 108:                     // 'declare'
        this.lookahead2W(172);      // S^WS | '(:' | 'base-uri' | 'boundary-space' | 'construction' |
                                    // 'copy-namespaces' | 'decimal-format' | 'default' | 'ordering' | 'revalidation'
        break;
      default:
        this.lk = this.l1;
      }
      if (this.lk == 55916)         // 'declare' 'default'
      {
        this.lk = this.memoized(1, this.e0);
        if (this.lk == 0)
        {
          var b0A = this.b0; var e0A = this.e0; var l1A = this.l1;
          var b1A = this.b1; var e1A = this.e1; var l2A = this.l2;
          var b2A = this.b2; var e2A = this.e2;
          try
          {
            this.try_DefaultCollationDecl();
            this.lk = -2;
          }
          catch (p2A)
          {
            try
            {
              this.b0 = b0A; this.e0 = e0A; this.l1 = l1A; if (this.l1 == 0) {this.end = e0A;} else {
              this.b1 = b1A; this.e1 = e1A; this.l2 = l2A; if (this.l2 == 0) {this.end = e1A;} else {
              this.b2 = b2A; this.e2 = e2A; this.end = e2A; }}
              this.try_EmptyOrderDecl();
              this.lk = -6;
            }
            catch (p6A)
            {
              this.lk = -9;
            }
          }
          this.b0 = b0A; this.e0 = e0A; this.l1 = l1A; if (this.l1 == 0) {this.end = e0A;} else {
          this.b1 = b1A; this.e1 = e1A; this.l2 = l2A; if (this.l2 == 0) {this.end = e1A;} else {
          this.b2 = b2A; this.e2 = e2A; this.end = e2A; }}
          this.memoize(1, this.e0, this.lk);
        }
      }
      switch (this.lk)
      {
      case 43628:                   // 'declare' 'boundary-space'
        this.parse_BoundarySpaceDecl();
        break;
      case -2:
        this.parse_DefaultCollationDecl();
        break;
      case 42604:                   // 'declare' 'base-uri'
        this.parse_BaseURIDecl();
        break;
      case 50284:                   // 'declare' 'construction'
        this.parse_ConstructionDecl();
        break;
      case 104044:                  // 'declare' 'ordering'
        this.parse_OrderingModeDecl();
        break;
      case -6:
        this.parse_EmptyOrderDecl();
        break;
      case 113772:                  // 'declare' 'revalidation'
        this.parse_RevalidationDecl();
        break;
      case 53356:                   // 'declare' 'copy-namespaces'
        this.parse_CopyNamespacesDecl();
        break;
      default:
        this.parse_DecimalFormatDecl();
      }
      this.eventHandler.endNonterminal("Setter", this.e0);
    }

    private parse_BoundarySpaceDecl()
    {
      this.eventHandler.startNonterminal("BoundarySpaceDecl", this.e0);
      this.shift(108);              // 'declare'
      this.lookahead1W(33);         // S^WS | '(:' | 'boundary-space'
      this.shift(85);               // 'boundary-space'
      this.lookahead1W(133);        // S^WS | '(:' | 'preserve' | 'strip'
      switch (this.l1)
      {
      case 214:                     // 'preserve'
        this.shift(214);            // 'preserve'
        break;
      default:
        this.shift(241);            // 'strip'
      }
      this.eventHandler.endNonterminal("BoundarySpaceDecl", this.e0);
    }

    private parse_DefaultCollationDecl()
    {
      this.eventHandler.startNonterminal("DefaultCollationDecl", this.e0);
      this.shift(108);              // 'declare'
      this.lookahead1W(46);         // S^WS | '(:' | 'default'
      this.shift(109);              // 'default'
      this.lookahead1W(38);         // S^WS | '(:' | 'collation'
      this.shift(94);               // 'collation'
      this.lookahead1W(15);         // URILiteral | S^WS | '(:'
      this.shift(7);                // URILiteral
      this.eventHandler.endNonterminal("DefaultCollationDecl", this.e0);
    }

    private try_DefaultCollationDecl()
    {
      this.shiftT(108);             // 'declare'
      this.lookahead1W(46);         // S^WS | '(:' | 'default'
      this.shiftT(109);             // 'default'
      this.lookahead1W(38);         // S^WS | '(:' | 'collation'
      this.shiftT(94);              // 'collation'
      this.lookahead1W(15);         // URILiteral | S^WS | '(:'
      this.shiftT(7);               // URILiteral
    }

    private parse_BaseURIDecl()
    {
      this.eventHandler.startNonterminal("BaseURIDecl", this.e0);
      this.shift(108);              // 'declare'
      this.lookahead1W(32);         // S^WS | '(:' | 'base-uri'
      this.shift(83);               // 'base-uri'
      this.lookahead1W(15);         // URILiteral | S^WS | '(:'
      this.shift(7);                // URILiteral
      this.eventHandler.endNonterminal("BaseURIDecl", this.e0);
    }

    private parse_ConstructionDecl()
    {
      this.eventHandler.startNonterminal("ConstructionDecl", this.e0);
      this.shift(108);              // 'declare'
      this.lookahead1W(41);         // S^WS | '(:' | 'construction'
      this.shift(98);               // 'construction'
      this.lookahead1W(133);        // S^WS | '(:' | 'preserve' | 'strip'
      switch (this.l1)
      {
      case 241:                     // 'strip'
        this.shift(241);            // 'strip'
        break;
      default:
        this.shift(214);            // 'preserve'
      }
      this.eventHandler.endNonterminal("ConstructionDecl", this.e0);
    }

    private parse_OrderingModeDecl()
    {
      this.eventHandler.startNonterminal("OrderingModeDecl", this.e0);
      this.shift(108);              // 'declare'
      this.lookahead1W(68);         // S^WS | '(:' | 'ordering'
      this.shift(203);              // 'ordering'
      this.lookahead1W(131);        // S^WS | '(:' | 'ordered' | 'unordered'
      switch (this.l1)
      {
      case 202:                     // 'ordered'
        this.shift(202);            // 'ordered'
        break;
      default:
        this.shift(256);            // 'unordered'
      }
      this.eventHandler.endNonterminal("OrderingModeDecl", this.e0);
    }

    private parse_EmptyOrderDecl()
    {
      this.eventHandler.startNonterminal("EmptyOrderDecl", this.e0);
      this.shift(108);              // 'declare'
      this.lookahead1W(46);         // S^WS | '(:' | 'default'
      this.shift(109);              // 'default'
      this.lookahead1W(67);         // S^WS | '(:' | 'order'
      this.shift(201);              // 'order'
      this.lookahead1W(49);         // S^WS | '(:' | 'empty'
      this.shift(123);              // 'empty'
      this.lookahead1W(121);        // S^WS | '(:' | 'greatest' | 'least'
      switch (this.l1)
      {
      case 147:                     // 'greatest'
        this.shift(147);            // 'greatest'
        break;
      default:
        this.shift(173);            // 'least'
      }
      this.eventHandler.endNonterminal("EmptyOrderDecl", this.e0);
    }

    private try_EmptyOrderDecl()
    {
      this.shiftT(108);             // 'declare'
      this.lookahead1W(46);         // S^WS | '(:' | 'default'
      this.shiftT(109);             // 'default'
      this.lookahead1W(67);         // S^WS | '(:' | 'order'
      this.shiftT(201);             // 'order'
      this.lookahead1W(49);         // S^WS | '(:' | 'empty'
      this.shiftT(123);             // 'empty'
      this.lookahead1W(121);        // S^WS | '(:' | 'greatest' | 'least'
      switch (this.l1)
      {
      case 147:                     // 'greatest'
        this.shiftT(147);           // 'greatest'
        break;
      default:
        this.shiftT(173);           // 'least'
      }
    }

    private parse_CopyNamespacesDecl()
    {
      this.eventHandler.startNonterminal("CopyNamespacesDecl", this.e0);
      this.shift(108);              // 'declare'
      this.lookahead1W(44);         // S^WS | '(:' | 'copy-namespaces'
      this.shift(104);              // 'copy-namespaces'
      this.lookahead1W(128);        // S^WS | '(:' | 'no-preserve' | 'preserve'
      this.whitespace();
      this.parse_PreserveMode();
      this.lookahead1W(25);         // S^WS | '(:' | ','
      this.shift(41);               // ','
      this.lookahead1W(123);        // S^WS | '(:' | 'inherit' | 'no-inherit'
      this.whitespace();
      this.parse_InheritMode();
      this.eventHandler.endNonterminal("CopyNamespacesDecl", this.e0);
    }

    private parse_PreserveMode()
    {
      this.eventHandler.startNonterminal("PreserveMode", this.e0);
      switch (this.l1)
      {
      case 214:                     // 'preserve'
        this.shift(214);            // 'preserve'
        break;
      default:
        this.shift(190);            // 'no-preserve'
      }
      this.eventHandler.endNonterminal("PreserveMode", this.e0);
    }

    private parse_InheritMode()
    {
      this.eventHandler.startNonterminal("InheritMode", this.e0);
      switch (this.l1)
      {
      case 157:                     // 'inherit'
        this.shift(157);            // 'inherit'
        break;
      default:
        this.shift(189);            // 'no-inherit'
      }
      this.eventHandler.endNonterminal("InheritMode", this.e0);
    }

    private parse_DecimalFormatDecl()
    {
      this.eventHandler.startNonterminal("DecimalFormatDecl", this.e0);
      this.shift(108);              // 'declare'
      this.lookahead1W(114);        // S^WS | '(:' | 'decimal-format' | 'default'
      switch (this.l1)
      {
      case 106:                     // 'decimal-format'
        this.shift(106);            // 'decimal-format'
        this.lookahead1W(254);      // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
        this.whitespace();
        this.parse_EQName();
        break;
      default:
        this.shift(109);            // 'default'
        this.lookahead1W(45);       // S^WS | '(:' | 'decimal-format'
        this.shift(106);            // 'decimal-format'
      }
      for (;;)
      {
        this.lookahead1W(180);      // S^WS | '(:' | ';' | 'NaN' | 'decimal-separator' | 'digit' |
                                    // 'grouping-separator' | 'infinity' | 'minus-sign' | 'pattern-separator' |
                                    // 'per-mille' | 'percent' | 'zero-digit'
        if (this.l1 == 53)          // ';'
        {
          break;
        }
        this.whitespace();
        this.parse_DFPropertyName();
        this.lookahead1W(29);       // S^WS | '(:' | '='
        this.shift(60);             // '='
        this.lookahead1W(17);       // StringLiteral | S^WS | '(:'
        this.shift(11);             // StringLiteral
      }
      this.eventHandler.endNonterminal("DecimalFormatDecl", this.e0);
    }

    private parse_DFPropertyName()
    {
      this.eventHandler.startNonterminal("DFPropertyName", this.e0);
      switch (this.l1)
      {
      case 107:                     // 'decimal-separator'
        this.shift(107);            // 'decimal-separator'
        break;
      case 149:                     // 'grouping-separator'
        this.shift(149);            // 'grouping-separator'
        break;
      case 156:                     // 'infinity'
        this.shift(156);            // 'infinity'
        break;
      case 179:                     // 'minus-sign'
        this.shift(179);            // 'minus-sign'
        break;
      case 67:                      // 'NaN'
        this.shift(67);             // 'NaN'
        break;
      case 209:                     // 'percent'
        this.shift(209);            // 'percent'
        break;
      case 208:                     // 'per-mille'
        this.shift(208);            // 'per-mille'
        break;
      case 275:                     // 'zero-digit'
        this.shift(275);            // 'zero-digit'
        break;
      case 116:                     // 'digit'
        this.shift(116);            // 'digit'
        break;
      default:
        this.shift(207);            // 'pattern-separator'
      }
      this.eventHandler.endNonterminal("DFPropertyName", this.e0);
    }

    private parse_Import()
    {
      this.eventHandler.startNonterminal("Import", this.e0);
      switch (this.l1)
      {
      case 153:                     // 'import'
        this.lookahead2W(126);      // S^WS | '(:' | 'module' | 'schema'
        break;
      default:
        this.lk = this.l1;
      }
      switch (this.lk)
      {
      case 115353:                  // 'import' 'schema'
        this.parse_SchemaImport();
        break;
      default:
        this.parse_ModuleImport();
      }
      this.eventHandler.endNonterminal("Import", this.e0);
    }

    private parse_SchemaImport()
    {
      this.eventHandler.startNonterminal("SchemaImport", this.e0);
      this.shift(153);              // 'import'
      this.lookahead1W(73);         // S^WS | '(:' | 'schema'
      this.shift(225);              // 'schema'
      this.lookahead1W(137);        // URILiteral | S^WS | '(:' | 'default' | 'namespace'
      if (this.l1 != 7)             // URILiteral
      {
        this.whitespace();
        this.parse_SchemaPrefix();
      }
      this.lookahead1W(15);         // URILiteral | S^WS | '(:'
      this.shift(7);                // URILiteral
      this.lookahead1W(108);        // S^WS | '(:' | ';' | 'at'
      if (this.l1 == 81)            // 'at'
      {
        this.shift(81);             // 'at'
        this.lookahead1W(15);       // URILiteral | S^WS | '(:'
        this.shift(7);              // URILiteral
        for (;;)
        {
          this.lookahead1W(103);    // S^WS | '(:' | ',' | ';'
          if (this.l1 != 41)        // ','
          {
            break;
          }
          this.shift(41);           // ','
          this.lookahead1W(15);     // URILiteral | S^WS | '(:'
          this.shift(7);            // URILiteral
        }
      }
      this.eventHandler.endNonterminal("SchemaImport", this.e0);
    }

    private parse_SchemaPrefix()
    {
      this.eventHandler.startNonterminal("SchemaPrefix", this.e0);
      switch (this.l1)
      {
      case 184:                     // 'namespace'
        this.shift(184);            // 'namespace'
        this.lookahead1W(248);      // NCName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'last' | 'lax' | 'le' | 'let' |
                                    // 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery'
        this.whitespace();
        this.parse_NCName();
        this.lookahead1W(29);       // S^WS | '(:' | '='
        this.shift(60);             // '='
        break;
      default:
        this.shift(109);            // 'default'
        this.lookahead1W(47);       // S^WS | '(:' | 'element'
        this.shift(121);            // 'element'
        this.lookahead1W(61);       // S^WS | '(:' | 'namespace'
        this.shift(184);            // 'namespace'
      }
      this.eventHandler.endNonterminal("SchemaPrefix", this.e0);
    }

    private parse_ModuleImport()
    {
      this.eventHandler.startNonterminal("ModuleImport", this.e0);
      this.shift(153);              // 'import'
      this.lookahead1W(60);         // S^WS | '(:' | 'module'
      this.shift(182);              // 'module'
      this.lookahead1W(90);         // URILiteral | S^WS | '(:' | 'namespace'
      if (this.l1 == 184)           // 'namespace'
      {
        this.shift(184);            // 'namespace'
        this.lookahead1W(248);      // NCName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'last' | 'lax' | 'le' | 'let' |
                                    // 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery'
        this.whitespace();
        this.parse_NCName();
        this.lookahead1W(29);       // S^WS | '(:' | '='
        this.shift(60);             // '='
      }
      this.lookahead1W(15);         // URILiteral | S^WS | '(:'
      this.shift(7);                // URILiteral
      this.lookahead1W(108);        // S^WS | '(:' | ';' | 'at'
      if (this.l1 == 81)            // 'at'
      {
        this.shift(81);             // 'at'
        this.lookahead1W(15);       // URILiteral | S^WS | '(:'
        this.shift(7);              // URILiteral
        for (;;)
        {
          this.lookahead1W(103);    // S^WS | '(:' | ',' | ';'
          if (this.l1 != 41)        // ','
          {
            break;
          }
          this.shift(41);           // ','
          this.lookahead1W(15);     // URILiteral | S^WS | '(:'
          this.shift(7);            // URILiteral
        }
      }
      this.eventHandler.endNonterminal("ModuleImport", this.e0);
    }

    private parse_NamespaceDecl()
    {
      this.eventHandler.startNonterminal("NamespaceDecl", this.e0);
      this.shift(108);              // 'declare'
      this.lookahead1W(61);         // S^WS | '(:' | 'namespace'
      this.shift(184);              // 'namespace'
      this.lookahead1W(248);        // NCName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'last' | 'lax' | 'le' | 'let' |
                                    // 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery'
      this.whitespace();
      this.parse_NCName();
      this.lookahead1W(29);         // S^WS | '(:' | '='
      this.shift(60);               // '='
      this.lookahead1W(15);         // URILiteral | S^WS | '(:'
      this.shift(7);                // URILiteral
      this.eventHandler.endNonterminal("NamespaceDecl", this.e0);
    }

    private parse_DefaultNamespaceDecl()
    {
      this.eventHandler.startNonterminal("DefaultNamespaceDecl", this.e0);
      this.shift(108);              // 'declare'
      this.lookahead1W(46);         // S^WS | '(:' | 'default'
      this.shift(109);              // 'default'
      this.lookahead1W(115);        // S^WS | '(:' | 'element' | 'function'
      switch (this.l1)
      {
      case 121:                     // 'element'
        this.shift(121);            // 'element'
        break;
      default:
        this.shift(145);            // 'function'
      }
      this.lookahead1W(61);         // S^WS | '(:' | 'namespace'
      this.shift(184);              // 'namespace'
      this.lookahead1W(15);         // URILiteral | S^WS | '(:'
      this.shift(7);                // URILiteral
      this.eventHandler.endNonterminal("DefaultNamespaceDecl", this.e0);
    }

    private try_DefaultNamespaceDecl()
    {
      this.shiftT(108);             // 'declare'
      this.lookahead1W(46);         // S^WS | '(:' | 'default'
      this.shiftT(109);             // 'default'
      this.lookahead1W(115);        // S^WS | '(:' | 'element' | 'function'
      switch (this.l1)
      {
      case 121:                     // 'element'
        this.shiftT(121);           // 'element'
        break;
      default:
        this.shiftT(145);           // 'function'
      }
      this.lookahead1W(61);         // S^WS | '(:' | 'namespace'
      this.shiftT(184);             // 'namespace'
      this.lookahead1W(15);         // URILiteral | S^WS | '(:'
      this.shiftT(7);               // URILiteral
    }

    private parse_FTOptionDecl()
    {
      this.eventHandler.startNonterminal("FTOptionDecl", this.e0);
      this.shift(108);              // 'declare'
      this.lookahead1W(52);         // S^WS | '(:' | 'ft-option'
      this.shift(141);              // 'ft-option'
      this.lookahead1W(81);         // S^WS | '(:' | 'using'
      this.whitespace();
      this.parse_FTMatchOptions();
      this.eventHandler.endNonterminal("FTOptionDecl", this.e0);
    }

    private parse_AnnotatedDecl()
    {
      this.eventHandler.startNonterminal("AnnotatedDecl", this.e0);
      this.shift(108);              // 'declare'
      for (;;)
      {
        this.lookahead1W(170);      // S^WS | '%' | '(:' | 'collection' | 'function' | 'index' | 'integrity' |
                                    // 'updating' | 'variable'
        if (this.l1 != 32           // '%'
         && this.l1 != 257)         // 'updating'
        {
          break;
        }
        switch (this.l1)
        {
        case 257:                   // 'updating'
          this.whitespace();
          this.parse_CompatibilityAnnotation();
          break;
        default:
          this.whitespace();
          this.parse_Annotation();
        }
      }
      switch (this.l1)
      {
      case 262:                     // 'variable'
        this.whitespace();
        this.parse_VarDecl();
        break;
      case 145:                     // 'function'
        this.whitespace();
        this.parse_FunctionDecl();
        break;
      case 95:                      // 'collection'
        this.whitespace();
        this.parse_CollectionDecl();
        break;
      case 155:                     // 'index'
        this.whitespace();
        this.parse_IndexDecl();
        break;
      default:
        this.whitespace();
        this.parse_ICDecl();
      }
      this.eventHandler.endNonterminal("AnnotatedDecl", this.e0);
    }

    private parse_CompatibilityAnnotation()
    {
      this.eventHandler.startNonterminal("CompatibilityAnnotation", this.e0);
      this.shift(257);              // 'updating'
      this.eventHandler.endNonterminal("CompatibilityAnnotation", this.e0);
    }

    private parse_Annotation()
    {
      this.eventHandler.startNonterminal("Annotation", this.e0);
      this.shift(32);               // '%'
      this.lookahead1W(254);        // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
      this.whitespace();
      this.parse_EQName();
      this.lookahead1W(171);        // S^WS | '%' | '(' | '(:' | 'collection' | 'function' | 'index' | 'integrity' |
                                    // 'updating' | 'variable'
      if (this.l1 == 34)            // '('
      {
        this.shift(34);             // '('
        this.lookahead1W(154);      // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | S^WS | '(:'
        this.whitespace();
        this.parse_Literal();
        for (;;)
        {
          this.lookahead1W(101);    // S^WS | '(:' | ')' | ','
          if (this.l1 != 41)        // ','
          {
            break;
          }
          this.shift(41);           // ','
          this.lookahead1W(154);    // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | S^WS | '(:'
          this.whitespace();
          this.parse_Literal();
        }
        this.shift(37);             // ')'
      }
      this.eventHandler.endNonterminal("Annotation", this.e0);
    }

    private try_Annotation()
    {
      this.shiftT(32);              // '%'
      this.lookahead1W(254);        // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
      this.try_EQName();
      this.lookahead1W(171);        // S^WS | '%' | '(' | '(:' | 'collection' | 'function' | 'index' | 'integrity' |
                                    // 'updating' | 'variable'
      if (this.l1 == 34)            // '('
      {
        this.shiftT(34);            // '('
        this.lookahead1W(154);      // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | S^WS | '(:'
        this.try_Literal();
        for (;;)
        {
          this.lookahead1W(101);    // S^WS | '(:' | ')' | ','
          if (this.l1 != 41)        // ','
          {
            break;
          }
          this.shiftT(41);          // ','
          this.lookahead1W(154);    // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | S^WS | '(:'
          this.try_Literal();
        }
        this.shiftT(37);            // ')'
      }
    }

    private parse_VarDecl()
    {
      this.eventHandler.startNonterminal("VarDecl", this.e0);
      this.shift(262);              // 'variable'
      this.lookahead1W(21);         // S^WS | '$' | '(:'
      this.shift(31);               // '$'
      this.lookahead1W(254);        // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
      this.whitespace();
      this.parse_VarName();
      this.lookahead1W(147);        // S^WS | '(:' | ':=' | 'as' | 'external'
      if (this.l1 == 79)            // 'as'
      {
        this.whitespace();
        this.parse_TypeDeclaration();
      }
      this.lookahead1W(106);        // S^WS | '(:' | ':=' | 'external'
      switch (this.l1)
      {
      case 52:                      // ':='
        this.shift(52);             // ':='
        this.lookahead1W(266);      // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
        this.whitespace();
        this.parse_VarValue();
        break;
      default:
        this.shift(133);            // 'external'
        this.lookahead1W(104);      // S^WS | '(:' | ':=' | ';'
        if (this.l1 == 52)          // ':='
        {
          this.shift(52);           // ':='
          this.lookahead1W(266);    // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
          this.whitespace();
          this.parse_VarDefaultValue();
        }
      }
      this.eventHandler.endNonterminal("VarDecl", this.e0);
    }

    private parse_VarValue()
    {
      this.eventHandler.startNonterminal("VarValue", this.e0);
      this.parse_ExprSingle();
      this.eventHandler.endNonterminal("VarValue", this.e0);
    }

    private parse_VarDefaultValue()
    {
      this.eventHandler.startNonterminal("VarDefaultValue", this.e0);
      this.parse_ExprSingle();
      this.eventHandler.endNonterminal("VarDefaultValue", this.e0);
    }

    private parse_ContextItemDecl()
    {
      this.eventHandler.startNonterminal("ContextItemDecl", this.e0);
      this.shift(108);              // 'declare'
      this.lookahead1W(43);         // S^WS | '(:' | 'context'
      this.shift(101);              // 'context'
      this.lookahead1W(55);         // S^WS | '(:' | 'item'
      this.shift(165);              // 'item'
      this.lookahead1W(147);        // S^WS | '(:' | ':=' | 'as' | 'external'
      if (this.l1 == 79)            // 'as'
      {
        this.shift(79);             // 'as'
        this.lookahead1W(259);      // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
        this.whitespace();
        this.parse_ItemType();
      }
      this.lookahead1W(106);        // S^WS | '(:' | ':=' | 'external'
      switch (this.l1)
      {
      case 52:                      // ':='
        this.shift(52);             // ':='
        this.lookahead1W(266);      // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
        this.whitespace();
        this.parse_VarValue();
        break;
      default:
        this.shift(133);            // 'external'
        this.lookahead1W(104);      // S^WS | '(:' | ':=' | ';'
        if (this.l1 == 52)          // ':='
        {
          this.shift(52);           // ':='
          this.lookahead1W(266);    // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
          this.whitespace();
          this.parse_VarDefaultValue();
        }
      }
      this.eventHandler.endNonterminal("ContextItemDecl", this.e0);
    }

    private parse_ParamList()
    {
      this.eventHandler.startNonterminal("ParamList", this.e0);
      this.parse_Param();
      for (;;)
      {
        this.lookahead1W(101);      // S^WS | '(:' | ')' | ','
        if (this.l1 != 41)          // ','
        {
          break;
        }
        this.shift(41);             // ','
        this.lookahead1W(21);       // S^WS | '$' | '(:'
        this.whitespace();
        this.parse_Param();
      }
      this.eventHandler.endNonterminal("ParamList", this.e0);
    }

    private try_ParamList()
    {
      this.try_Param();
      for (;;)
      {
        this.lookahead1W(101);      // S^WS | '(:' | ')' | ','
        if (this.l1 != 41)          // ','
        {
          break;
        }
        this.shiftT(41);            // ','
        this.lookahead1W(21);       // S^WS | '$' | '(:'
        this.try_Param();
      }
    }

    private parse_Param()
    {
      this.eventHandler.startNonterminal("Param", this.e0);
      this.shift(31);               // '$'
      this.lookahead1W(254);        // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
      this.whitespace();
      this.parse_EQName();
      this.lookahead1W(143);        // S^WS | '(:' | ')' | ',' | 'as'
      if (this.l1 == 79)            // 'as'
      {
        this.whitespace();
        this.parse_TypeDeclaration();
      }
      this.eventHandler.endNonterminal("Param", this.e0);
    }

    private try_Param()
    {
      this.shiftT(31);              // '$'
      this.lookahead1W(254);        // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
      this.try_EQName();
      this.lookahead1W(143);        // S^WS | '(:' | ')' | ',' | 'as'
      if (this.l1 == 79)            // 'as'
      {
        this.try_TypeDeclaration();
      }
    }

    private parse_FunctionBody()
    {
      this.eventHandler.startNonterminal("FunctionBody", this.e0);
      this.parse_EnclosedExpr();
      this.eventHandler.endNonterminal("FunctionBody", this.e0);
    }

    private try_FunctionBody()
    {
      this.try_EnclosedExpr();
    }

    private parse_EnclosedExpr()
    {
      this.eventHandler.startNonterminal("EnclosedExpr", this.e0);
      this.shift(276);              // '{'
      this.lookahead1W(266);        // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      this.whitespace();
      this.parse_Expr();
      this.shift(282);              // '}'
      this.eventHandler.endNonterminal("EnclosedExpr", this.e0);
    }

    private try_EnclosedExpr()
    {
      this.shiftT(276);             // '{'
      this.lookahead1W(266);        // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      this.try_Expr();
      this.shiftT(282);             // '}'
    }

    private parse_OptionDecl()
    {
      this.eventHandler.startNonterminal("OptionDecl", this.e0);
      this.shift(108);              // 'declare'
      this.lookahead1W(66);         // S^WS | '(:' | 'option'
      this.shift(199);              // 'option'
      this.lookahead1W(254);        // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
      this.whitespace();
      this.parse_EQName();
      this.lookahead1W(17);         // StringLiteral | S^WS | '(:'
      this.shift(11);               // StringLiteral
      this.eventHandler.endNonterminal("OptionDecl", this.e0);
    }

    private parse_Expr()
    {
      this.eventHandler.startNonterminal("Expr", this.e0);
      this.parse_ExprSingle();
      for (;;)
      {
        if (this.l1 != 41)          // ','
        {
          break;
        }
        this.shift(41);             // ','
        this.lookahead1W(266);      // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
        this.whitespace();
        this.parse_ExprSingle();
      }
      this.eventHandler.endNonterminal("Expr", this.e0);
    }

    private try_Expr()
    {
      this.try_ExprSingle();
      for (;;)
      {
        if (this.l1 != 41)          // ','
        {
          break;
        }
        this.shiftT(41);            // ','
        this.lookahead1W(266);      // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
        this.try_ExprSingle();
      }
    }

    private parse_FLWORExpr()
    {
      this.eventHandler.startNonterminal("FLWORExpr", this.e0);
      this.parse_InitialClause();
      for (;;)
      {
        this.lookahead1W(173);      // S^WS | '(:' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' | 'stable' |
                                    // 'where'
        if (this.l1 == 220)         // 'return'
        {
          break;
        }
        this.whitespace();
        this.parse_IntermediateClause();
      }
      this.whitespace();
      this.parse_ReturnClause();
      this.eventHandler.endNonterminal("FLWORExpr", this.e0);
    }

    private try_FLWORExpr()
    {
      this.try_InitialClause();
      for (;;)
      {
        this.lookahead1W(173);      // S^WS | '(:' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' | 'stable' |
                                    // 'where'
        if (this.l1 == 220)         // 'return'
        {
          break;
        }
        this.try_IntermediateClause();
      }
      this.try_ReturnClause();
    }

    private parse_InitialClause()
    {
      this.eventHandler.startNonterminal("InitialClause", this.e0);
      switch (this.l1)
      {
      case 137:                     // 'for'
        this.lookahead2W(141);      // S^WS | '$' | '(:' | 'sliding' | 'tumbling'
        break;
      default:
        this.lk = this.l1;
      }
      switch (this.lk)
      {
      case 16009:                   // 'for' '$'
        this.parse_ForClause();
        break;
      case 174:                     // 'let'
        this.parse_LetClause();
        break;
      default:
        this.parse_WindowClause();
      }
      this.eventHandler.endNonterminal("InitialClause", this.e0);
    }

    private try_InitialClause()
    {
      switch (this.l1)
      {
      case 137:                     // 'for'
        this.lookahead2W(141);      // S^WS | '$' | '(:' | 'sliding' | 'tumbling'
        break;
      default:
        this.lk = this.l1;
      }
      switch (this.lk)
      {
      case 16009:                   // 'for' '$'
        this.try_ForClause();
        break;
      case 174:                     // 'let'
        this.try_LetClause();
        break;
      default:
        this.try_WindowClause();
      }
    }

    private parse_IntermediateClause()
    {
      this.eventHandler.startNonterminal("IntermediateClause", this.e0);
      switch (this.l1)
      {
      case 137:                     // 'for'
      case 174:                     // 'let'
        this.parse_InitialClause();
        break;
      case 266:                     // 'where'
        this.parse_WhereClause();
        break;
      case 148:                     // 'group'
        this.parse_GroupByClause();
        break;
      case 105:                     // 'count'
        this.parse_CountClause();
        break;
      default:
        this.parse_OrderByClause();
      }
      this.eventHandler.endNonterminal("IntermediateClause", this.e0);
    }

    private try_IntermediateClause()
    {
      switch (this.l1)
      {
      case 137:                     // 'for'
      case 174:                     // 'let'
        this.try_InitialClause();
        break;
      case 266:                     // 'where'
        this.try_WhereClause();
        break;
      case 148:                     // 'group'
        this.try_GroupByClause();
        break;
      case 105:                     // 'count'
        this.try_CountClause();
        break;
      default:
        this.try_OrderByClause();
      }
    }

    private parse_ForClause()
    {
      this.eventHandler.startNonterminal("ForClause", this.e0);
      this.shift(137);              // 'for'
      this.lookahead1W(21);         // S^WS | '$' | '(:'
      this.whitespace();
      this.parse_ForBinding();
      for (;;)
      {
        if (this.l1 != 41)          // ','
        {
          break;
        }
        this.shift(41);             // ','
        this.lookahead1W(21);       // S^WS | '$' | '(:'
        this.whitespace();
        this.parse_ForBinding();
      }
      this.eventHandler.endNonterminal("ForClause", this.e0);
    }

    private try_ForClause()
    {
      this.shiftT(137);             // 'for'
      this.lookahead1W(21);         // S^WS | '$' | '(:'
      this.try_ForBinding();
      for (;;)
      {
        if (this.l1 != 41)          // ','
        {
          break;
        }
        this.shiftT(41);            // ','
        this.lookahead1W(21);       // S^WS | '$' | '(:'
        this.try_ForBinding();
      }
    }

    private parse_ForBinding()
    {
      this.eventHandler.startNonterminal("ForBinding", this.e0);
      this.shift(31);               // '$'
      this.lookahead1W(254);        // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
      this.whitespace();
      this.parse_VarName();
      this.lookahead1W(164);        // S^WS | '(:' | 'allowing' | 'as' | 'at' | 'in' | 'score'
      if (this.l1 == 79)            // 'as'
      {
        this.whitespace();
        this.parse_TypeDeclaration();
      }
      this.lookahead1W(158);        // S^WS | '(:' | 'allowing' | 'at' | 'in' | 'score'
      if (this.l1 == 72)            // 'allowing'
      {
        this.whitespace();
        this.parse_AllowingEmpty();
      }
      this.lookahead1W(150);        // S^WS | '(:' | 'at' | 'in' | 'score'
      if (this.l1 == 81)            // 'at'
      {
        this.whitespace();
        this.parse_PositionalVar();
      }
      this.lookahead1W(122);        // S^WS | '(:' | 'in' | 'score'
      if (this.l1 == 228)           // 'score'
      {
        this.whitespace();
        this.parse_FTScoreVar();
      }
      this.lookahead1W(53);         // S^WS | '(:' | 'in'
      this.shift(154);              // 'in'
      this.lookahead1W(266);        // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      this.whitespace();
      this.parse_ExprSingle();
      this.eventHandler.endNonterminal("ForBinding", this.e0);
    }

    private try_ForBinding()
    {
      this.shiftT(31);              // '$'
      this.lookahead1W(254);        // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
      this.try_VarName();
      this.lookahead1W(164);        // S^WS | '(:' | 'allowing' | 'as' | 'at' | 'in' | 'score'
      if (this.l1 == 79)            // 'as'
      {
        this.try_TypeDeclaration();
      }
      this.lookahead1W(158);        // S^WS | '(:' | 'allowing' | 'at' | 'in' | 'score'
      if (this.l1 == 72)            // 'allowing'
      {
        this.try_AllowingEmpty();
      }
      this.lookahead1W(150);        // S^WS | '(:' | 'at' | 'in' | 'score'
      if (this.l1 == 81)            // 'at'
      {
        this.try_PositionalVar();
      }
      this.lookahead1W(122);        // S^WS | '(:' | 'in' | 'score'
      if (this.l1 == 228)           // 'score'
      {
        this.try_FTScoreVar();
      }
      this.lookahead1W(53);         // S^WS | '(:' | 'in'
      this.shiftT(154);             // 'in'
      this.lookahead1W(266);        // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      this.try_ExprSingle();
    }

    private parse_AllowingEmpty()
    {
      this.eventHandler.startNonterminal("AllowingEmpty", this.e0);
      this.shift(72);               // 'allowing'
      this.lookahead1W(49);         // S^WS | '(:' | 'empty'
      this.shift(123);              // 'empty'
      this.eventHandler.endNonterminal("AllowingEmpty", this.e0);
    }

    private try_AllowingEmpty()
    {
      this.shiftT(72);              // 'allowing'
      this.lookahead1W(49);         // S^WS | '(:' | 'empty'
      this.shiftT(123);             // 'empty'
    }

    private parse_PositionalVar()
    {
      this.eventHandler.startNonterminal("PositionalVar", this.e0);
      this.shift(81);               // 'at'
      this.lookahead1W(21);         // S^WS | '$' | '(:'
      this.shift(31);               // '$'
      this.lookahead1W(254);        // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
      this.whitespace();
      this.parse_VarName();
      this.eventHandler.endNonterminal("PositionalVar", this.e0);
    }

    private try_PositionalVar()
    {
      this.shiftT(81);              // 'at'
      this.lookahead1W(21);         // S^WS | '$' | '(:'
      this.shiftT(31);              // '$'
      this.lookahead1W(254);        // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
      this.try_VarName();
    }

    private parse_FTScoreVar()
    {
      this.eventHandler.startNonterminal("FTScoreVar", this.e0);
      this.shift(228);              // 'score'
      this.lookahead1W(21);         // S^WS | '$' | '(:'
      this.shift(31);               // '$'
      this.lookahead1W(254);        // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
      this.whitespace();
      this.parse_VarName();
      this.eventHandler.endNonterminal("FTScoreVar", this.e0);
    }

    private try_FTScoreVar()
    {
      this.shiftT(228);             // 'score'
      this.lookahead1W(21);         // S^WS | '$' | '(:'
      this.shiftT(31);              // '$'
      this.lookahead1W(254);        // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
      this.try_VarName();
    }

    private parse_LetClause()
    {
      this.eventHandler.startNonterminal("LetClause", this.e0);
      this.shift(174);              // 'let'
      this.lookahead1W(96);         // S^WS | '$' | '(:' | 'score'
      this.whitespace();
      this.parse_LetBinding();
      for (;;)
      {
        if (this.l1 != 41)          // ','
        {
          break;
        }
        this.shift(41);             // ','
        this.lookahead1W(96);       // S^WS | '$' | '(:' | 'score'
        this.whitespace();
        this.parse_LetBinding();
      }
      this.eventHandler.endNonterminal("LetClause", this.e0);
    }

    private try_LetClause()
    {
      this.shiftT(174);             // 'let'
      this.lookahead1W(96);         // S^WS | '$' | '(:' | 'score'
      this.try_LetBinding();
      for (;;)
      {
        if (this.l1 != 41)          // ','
        {
          break;
        }
        this.shiftT(41);            // ','
        this.lookahead1W(96);       // S^WS | '$' | '(:' | 'score'
        this.try_LetBinding();
      }
    }

    private parse_LetBinding()
    {
      this.eventHandler.startNonterminal("LetBinding", this.e0);
      switch (this.l1)
      {
      case 31:                      // '$'
        this.shift(31);             // '$'
        this.lookahead1W(254);      // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
        this.whitespace();
        this.parse_VarName();
        this.lookahead1W(105);      // S^WS | '(:' | ':=' | 'as'
        if (this.l1 == 79)          // 'as'
        {
          this.whitespace();
          this.parse_TypeDeclaration();
        }
        break;
      default:
        this.parse_FTScoreVar();
      }
      this.lookahead1W(27);         // S^WS | '(:' | ':='
      this.shift(52);               // ':='
      this.lookahead1W(266);        // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      this.whitespace();
      this.parse_ExprSingle();
      this.eventHandler.endNonterminal("LetBinding", this.e0);
    }

    private try_LetBinding()
    {
      switch (this.l1)
      {
      case 31:                      // '$'
        this.shiftT(31);            // '$'
        this.lookahead1W(254);      // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
        this.try_VarName();
        this.lookahead1W(105);      // S^WS | '(:' | ':=' | 'as'
        if (this.l1 == 79)          // 'as'
        {
          this.try_TypeDeclaration();
        }
        break;
      default:
        this.try_FTScoreVar();
      }
      this.lookahead1W(27);         // S^WS | '(:' | ':='
      this.shiftT(52);              // ':='
      this.lookahead1W(266);        // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      this.try_ExprSingle();
    }

    private parse_WindowClause()
    {
      this.eventHandler.startNonterminal("WindowClause", this.e0);
      this.shift(137);              // 'for'
      this.lookahead1W(135);        // S^WS | '(:' | 'sliding' | 'tumbling'
      switch (this.l1)
      {
      case 251:                     // 'tumbling'
        this.whitespace();
        this.parse_TumblingWindowClause();
        break;
      default:
        this.whitespace();
        this.parse_SlidingWindowClause();
      }
      this.eventHandler.endNonterminal("WindowClause", this.e0);
    }

    private try_WindowClause()
    {
      this.shiftT(137);             // 'for'
      this.lookahead1W(135);        // S^WS | '(:' | 'sliding' | 'tumbling'
      switch (this.l1)
      {
      case 251:                     // 'tumbling'
        this.try_TumblingWindowClause();
        break;
      default:
        this.try_SlidingWindowClause();
      }
    }

    private parse_TumblingWindowClause()
    {
      this.eventHandler.startNonterminal("TumblingWindowClause", this.e0);
      this.shift(251);              // 'tumbling'
      this.lookahead1W(85);         // S^WS | '(:' | 'window'
      this.shift(269);              // 'window'
      this.lookahead1W(21);         // S^WS | '$' | '(:'
      this.shift(31);               // '$'
      this.lookahead1W(254);        // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
      this.whitespace();
      this.parse_VarName();
      this.lookahead1W(110);        // S^WS | '(:' | 'as' | 'in'
      if (this.l1 == 79)            // 'as'
      {
        this.whitespace();
        this.parse_TypeDeclaration();
      }
      this.lookahead1W(53);         // S^WS | '(:' | 'in'
      this.shift(154);              // 'in'
      this.lookahead1W(266);        // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      this.whitespace();
      this.parse_ExprSingle();
      this.whitespace();
      this.parse_WindowStartCondition();
      if (this.l1 == 126            // 'end'
       || this.l1 == 198)           // 'only'
      {
        this.whitespace();
        this.parse_WindowEndCondition();
      }
      this.eventHandler.endNonterminal("TumblingWindowClause", this.e0);
    }

    private try_TumblingWindowClause()
    {
      this.shiftT(251);             // 'tumbling'
      this.lookahead1W(85);         // S^WS | '(:' | 'window'
      this.shiftT(269);             // 'window'
      this.lookahead1W(21);         // S^WS | '$' | '(:'
      this.shiftT(31);              // '$'
      this.lookahead1W(254);        // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
      this.try_VarName();
      this.lookahead1W(110);        // S^WS | '(:' | 'as' | 'in'
      if (this.l1 == 79)            // 'as'
      {
        this.try_TypeDeclaration();
      }
      this.lookahead1W(53);         // S^WS | '(:' | 'in'
      this.shiftT(154);             // 'in'
      this.lookahead1W(266);        // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      this.try_ExprSingle();
      this.try_WindowStartCondition();
      if (this.l1 == 126            // 'end'
       || this.l1 == 198)           // 'only'
      {
        this.try_WindowEndCondition();
      }
    }

    private parse_SlidingWindowClause()
    {
      this.eventHandler.startNonterminal("SlidingWindowClause", this.e0);
      this.shift(234);              // 'sliding'
      this.lookahead1W(85);         // S^WS | '(:' | 'window'
      this.shift(269);              // 'window'
      this.lookahead1W(21);         // S^WS | '$' | '(:'
      this.shift(31);               // '$'
      this.lookahead1W(254);        // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
      this.whitespace();
      this.parse_VarName();
      this.lookahead1W(110);        // S^WS | '(:' | 'as' | 'in'
      if (this.l1 == 79)            // 'as'
      {
        this.whitespace();
        this.parse_TypeDeclaration();
      }
      this.lookahead1W(53);         // S^WS | '(:' | 'in'
      this.shift(154);              // 'in'
      this.lookahead1W(266);        // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      this.whitespace();
      this.parse_ExprSingle();
      this.whitespace();
      this.parse_WindowStartCondition();
      this.whitespace();
      this.parse_WindowEndCondition();
      this.eventHandler.endNonterminal("SlidingWindowClause", this.e0);
    }

    private try_SlidingWindowClause()
    {
      this.shiftT(234);             // 'sliding'
      this.lookahead1W(85);         // S^WS | '(:' | 'window'
      this.shiftT(269);             // 'window'
      this.lookahead1W(21);         // S^WS | '$' | '(:'
      this.shiftT(31);              // '$'
      this.lookahead1W(254);        // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
      this.try_VarName();
      this.lookahead1W(110);        // S^WS | '(:' | 'as' | 'in'
      if (this.l1 == 79)            // 'as'
      {
        this.try_TypeDeclaration();
      }
      this.lookahead1W(53);         // S^WS | '(:' | 'in'
      this.shiftT(154);             // 'in'
      this.lookahead1W(266);        // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      this.try_ExprSingle();
      this.try_WindowStartCondition();
      this.try_WindowEndCondition();
    }

    private parse_WindowStartCondition()
    {
      this.eventHandler.startNonterminal("WindowStartCondition", this.e0);
      this.shift(237);              // 'start'
      this.lookahead1W(163);        // S^WS | '$' | '(:' | 'at' | 'next' | 'previous' | 'when'
      this.whitespace();
      this.parse_WindowVars();
      this.lookahead1W(83);         // S^WS | '(:' | 'when'
      this.shift(265);              // 'when'
      this.lookahead1W(266);        // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      this.whitespace();
      this.parse_ExprSingle();
      this.eventHandler.endNonterminal("WindowStartCondition", this.e0);
    }

    private try_WindowStartCondition()
    {
      this.shiftT(237);             // 'start'
      this.lookahead1W(163);        // S^WS | '$' | '(:' | 'at' | 'next' | 'previous' | 'when'
      this.try_WindowVars();
      this.lookahead1W(83);         // S^WS | '(:' | 'when'
      this.shiftT(265);             // 'when'
      this.lookahead1W(266);        // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      this.try_ExprSingle();
    }

    private parse_WindowEndCondition()
    {
      this.eventHandler.startNonterminal("WindowEndCondition", this.e0);
      if (this.l1 == 198)           // 'only'
      {
        this.shift(198);            // 'only'
      }
      this.lookahead1W(50);         // S^WS | '(:' | 'end'
      this.shift(126);              // 'end'
      this.lookahead1W(163);        // S^WS | '$' | '(:' | 'at' | 'next' | 'previous' | 'when'
      this.whitespace();
      this.parse_WindowVars();
      this.lookahead1W(83);         // S^WS | '(:' | 'when'
      this.shift(265);              // 'when'
      this.lookahead1W(266);        // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      this.whitespace();
      this.parse_ExprSingle();
      this.eventHandler.endNonterminal("WindowEndCondition", this.e0);
    }

    private try_WindowEndCondition()
    {
      if (this.l1 == 198)           // 'only'
      {
        this.shiftT(198);           // 'only'
      }
      this.lookahead1W(50);         // S^WS | '(:' | 'end'
      this.shiftT(126);             // 'end'
      this.lookahead1W(163);        // S^WS | '$' | '(:' | 'at' | 'next' | 'previous' | 'when'
      this.try_WindowVars();
      this.lookahead1W(83);         // S^WS | '(:' | 'when'
      this.shiftT(265);             // 'when'
      this.lookahead1W(266);        // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      this.try_ExprSingle();
    }

    private parse_WindowVars()
    {
      this.eventHandler.startNonterminal("WindowVars", this.e0);
      if (this.l1 == 31)            // '$'
      {
        this.shift(31);             // '$'
        this.lookahead1W(254);      // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
        this.whitespace();
        this.parse_CurrentItem();
      }
      this.lookahead1W(159);        // S^WS | '(:' | 'at' | 'next' | 'previous' | 'when'
      if (this.l1 == 81)            // 'at'
      {
        this.whitespace();
        this.parse_PositionalVar();
      }
      this.lookahead1W(153);        // S^WS | '(:' | 'next' | 'previous' | 'when'
      if (this.l1 == 215)           // 'previous'
      {
        this.shift(215);            // 'previous'
        this.lookahead1W(21);       // S^WS | '$' | '(:'
        this.shift(31);             // '$'
        this.lookahead1W(254);      // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
        this.whitespace();
        this.parse_PreviousItem();
      }
      this.lookahead1W(127);        // S^WS | '(:' | 'next' | 'when'
      if (this.l1 == 187)           // 'next'
      {
        this.shift(187);            // 'next'
        this.lookahead1W(21);       // S^WS | '$' | '(:'
        this.shift(31);             // '$'
        this.lookahead1W(254);      // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
        this.whitespace();
        this.parse_NextItem();
      }
      this.eventHandler.endNonterminal("WindowVars", this.e0);
    }

    private try_WindowVars()
    {
      if (this.l1 == 31)            // '$'
      {
        this.shiftT(31);            // '$'
        this.lookahead1W(254);      // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
        this.try_CurrentItem();
      }
      this.lookahead1W(159);        // S^WS | '(:' | 'at' | 'next' | 'previous' | 'when'
      if (this.l1 == 81)            // 'at'
      {
        this.try_PositionalVar();
      }
      this.lookahead1W(153);        // S^WS | '(:' | 'next' | 'previous' | 'when'
      if (this.l1 == 215)           // 'previous'
      {
        this.shiftT(215);           // 'previous'
        this.lookahead1W(21);       // S^WS | '$' | '(:'
        this.shiftT(31);            // '$'
        this.lookahead1W(254);      // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
        this.try_PreviousItem();
      }
      this.lookahead1W(127);        // S^WS | '(:' | 'next' | 'when'
      if (this.l1 == 187)           // 'next'
      {
        this.shiftT(187);           // 'next'
        this.lookahead1W(21);       // S^WS | '$' | '(:'
        this.shiftT(31);            // '$'
        this.lookahead1W(254);      // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
        this.try_NextItem();
      }
    }

    private parse_CurrentItem()
    {
      this.eventHandler.startNonterminal("CurrentItem", this.e0);
      this.parse_EQName();
      this.eventHandler.endNonterminal("CurrentItem", this.e0);
    }

    private try_CurrentItem()
    {
      this.try_EQName();
    }

    private parse_PreviousItem()
    {
      this.eventHandler.startNonterminal("PreviousItem", this.e0);
      this.parse_EQName();
      this.eventHandler.endNonterminal("PreviousItem", this.e0);
    }

    private try_PreviousItem()
    {
      this.try_EQName();
    }

    private parse_NextItem()
    {
      this.eventHandler.startNonterminal("NextItem", this.e0);
      this.parse_EQName();
      this.eventHandler.endNonterminal("NextItem", this.e0);
    }

    private try_NextItem()
    {
      this.try_EQName();
    }

    private parse_CountClause()
    {
      this.eventHandler.startNonterminal("CountClause", this.e0);
      this.shift(105);              // 'count'
      this.lookahead1W(21);         // S^WS | '$' | '(:'
      this.shift(31);               // '$'
      this.lookahead1W(254);        // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
      this.whitespace();
      this.parse_VarName();
      this.eventHandler.endNonterminal("CountClause", this.e0);
    }

    private try_CountClause()
    {
      this.shiftT(105);             // 'count'
      this.lookahead1W(21);         // S^WS | '$' | '(:'
      this.shiftT(31);              // '$'
      this.lookahead1W(254);        // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
      this.try_VarName();
    }

    private parse_WhereClause()
    {
      this.eventHandler.startNonterminal("WhereClause", this.e0);
      this.shift(266);              // 'where'
      this.lookahead1W(266);        // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      this.whitespace();
      this.parse_ExprSingle();
      this.eventHandler.endNonterminal("WhereClause", this.e0);
    }

    private try_WhereClause()
    {
      this.shiftT(266);             // 'where'
      this.lookahead1W(266);        // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      this.try_ExprSingle();
    }

    private parse_GroupByClause()
    {
      this.eventHandler.startNonterminal("GroupByClause", this.e0);
      this.shift(148);              // 'group'
      this.lookahead1W(34);         // S^WS | '(:' | 'by'
      this.shift(87);               // 'by'
      this.lookahead1W(266);        // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      this.whitespace();
      this.parse_GroupingSpecList();
      this.eventHandler.endNonterminal("GroupByClause", this.e0);
    }

    private try_GroupByClause()
    {
      this.shiftT(148);             // 'group'
      this.lookahead1W(34);         // S^WS | '(:' | 'by'
      this.shiftT(87);              // 'by'
      this.lookahead1W(266);        // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      this.try_GroupingSpecList();
    }

    private parse_GroupingSpecList()
    {
      this.eventHandler.startNonterminal("GroupingSpecList", this.e0);
      this.parse_GroupingSpec();
      for (;;)
      {
        this.lookahead1W(176);      // S^WS | '(:' | ',' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' |
                                    // 'stable' | 'where'
        if (this.l1 != 41)          // ','
        {
          break;
        }
        this.shift(41);             // ','
        this.lookahead1W(266);      // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
        this.whitespace();
        this.parse_GroupingSpec();
      }
      this.eventHandler.endNonterminal("GroupingSpecList", this.e0);
    }

    private try_GroupingSpecList()
    {
      this.try_GroupingSpec();
      for (;;)
      {
        this.lookahead1W(176);      // S^WS | '(:' | ',' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' |
                                    // 'stable' | 'where'
        if (this.l1 != 41)          // ','
        {
          break;
        }
        this.shiftT(41);            // ','
        this.lookahead1W(266);      // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
        this.try_GroupingSpec();
      }
    }

    private parse_GroupingSpec()
    {
      this.eventHandler.startNonterminal("GroupingSpec", this.e0);
      switch (this.l1)
      {
      case 31:                      // '$'
        this.lookahead2W(254);      // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
        break;
      default:
        this.lk = this.l1;
      }
      if (this.lk == 3103           // '$' EQName^Token
       || this.lk == 35871          // '$' 'after'
       || this.lk == 36895          // '$' 'allowing'
       || this.lk == 37407          // '$' 'ancestor'
       || this.lk == 37919          // '$' 'ancestor-or-self'
       || this.lk == 38431          // '$' 'and'
       || this.lk == 39455          // '$' 'append'
       || this.lk == 39967          // '$' 'array'
       || this.lk == 40479          // '$' 'as'
       || this.lk == 40991          // '$' 'ascending'
       || this.lk == 41503          // '$' 'at'
       || this.lk == 42015          // '$' 'attribute'
       || this.lk == 42527          // '$' 'base-uri'
       || this.lk == 43039          // '$' 'before'
       || this.lk == 43551          // '$' 'boundary-space'
       || this.lk == 44063          // '$' 'break'
       || this.lk == 45087          // '$' 'case'
       || this.lk == 45599          // '$' 'cast'
       || this.lk == 46111          // '$' 'castable'
       || this.lk == 46623          // '$' 'catch'
       || this.lk == 47647          // '$' 'child'
       || this.lk == 48159          // '$' 'collation'
       || this.lk == 49183          // '$' 'comment'
       || this.lk == 49695          // '$' 'constraint'
       || this.lk == 50207          // '$' 'construction'
       || this.lk == 51743          // '$' 'context'
       || this.lk == 52255          // '$' 'continue'
       || this.lk == 52767          // '$' 'copy'
       || this.lk == 53279          // '$' 'copy-namespaces'
       || this.lk == 53791          // '$' 'count'
       || this.lk == 54303          // '$' 'decimal-format'
       || this.lk == 55327          // '$' 'declare'
       || this.lk == 55839          // '$' 'default'
       || this.lk == 56351          // '$' 'delete'
       || this.lk == 56863          // '$' 'descendant'
       || this.lk == 57375          // '$' 'descendant-or-self'
       || this.lk == 57887          // '$' 'descending'
       || this.lk == 60447          // '$' 'div'
       || this.lk == 60959          // '$' 'document'
       || this.lk == 61471          // '$' 'document-node'
       || this.lk == 61983          // '$' 'element'
       || this.lk == 62495          // '$' 'else'
       || this.lk == 63007          // '$' 'empty'
       || this.lk == 63519          // '$' 'empty-sequence'
       || this.lk == 64031          // '$' 'encoding'
       || this.lk == 64543          // '$' 'end'
       || this.lk == 65567          // '$' 'eq'
       || this.lk == 66079          // '$' 'every'
       || this.lk == 67103          // '$' 'except'
       || this.lk == 67615          // '$' 'exit'
       || this.lk == 68127          // '$' 'external'
       || this.lk == 68639          // '$' 'first'
       || this.lk == 69151          // '$' 'following'
       || this.lk == 69663          // '$' 'following-sibling'
       || this.lk == 70175          // '$' 'for'
       || this.lk == 72223          // '$' 'ft-option'
       || this.lk == 74271          // '$' 'function'
       || this.lk == 74783          // '$' 'ge'
       || this.lk == 75807          // '$' 'group'
       || this.lk == 76831          // '$' 'gt'
       || this.lk == 77343          // '$' 'idiv'
       || this.lk == 77855          // '$' 'if'
       || this.lk == 78367          // '$' 'import'
       || this.lk == 78879          // '$' 'in'
       || this.lk == 79391          // '$' 'index'
       || this.lk == 81439          // '$' 'insert'
       || this.lk == 81951          // '$' 'instance'
       || this.lk == 82463          // '$' 'integrity'
       || this.lk == 82975          // '$' 'intersect'
       || this.lk == 83487          // '$' 'into'
       || this.lk == 83999          // '$' 'is'
       || this.lk == 84511          // '$' 'item'
       || this.lk == 85023          // '$' 'json'
       || this.lk == 85535          // '$' 'json-item'
       || this.lk == 87071          // '$' 'last'
       || this.lk == 87583          // '$' 'lax'
       || this.lk == 88095          // '$' 'le'
       || this.lk == 89119          // '$' 'let'
       || this.lk == 90143          // '$' 'loop'
       || this.lk == 91167          // '$' 'lt'
       || this.lk == 92191          // '$' 'mod'
       || this.lk == 92703          // '$' 'modify'
       || this.lk == 93215          // '$' 'module'
       || this.lk == 94239          // '$' 'namespace'
       || this.lk == 94751          // '$' 'namespace-node'
       || this.lk == 95263          // '$' 'ne'
       || this.lk == 97823          // '$' 'node'
       || this.lk == 98335          // '$' 'nodes'
       || this.lk == 99359          // '$' 'object'
       || this.lk == 101407         // '$' 'only'
       || this.lk == 101919         // '$' 'option'
       || this.lk == 102431         // '$' 'or'
       || this.lk == 102943         // '$' 'order'
       || this.lk == 103455         // '$' 'ordered'
       || this.lk == 103967         // '$' 'ordering'
       || this.lk == 105503         // '$' 'parent'
       || this.lk == 108575         // '$' 'preceding'
       || this.lk == 109087         // '$' 'preceding-sibling'
       || this.lk == 110623         // '$' 'processing-instruction'
       || this.lk == 111647         // '$' 'rename'
       || this.lk == 112159         // '$' 'replace'
       || this.lk == 112671         // '$' 'return'
       || this.lk == 113183         // '$' 'returning'
       || this.lk == 113695         // '$' 'revalidation'
       || this.lk == 114719         // '$' 'satisfies'
       || this.lk == 115231         // '$' 'schema'
       || this.lk == 115743         // '$' 'schema-attribute'
       || this.lk == 116255         // '$' 'schema-element'
       || this.lk == 116767         // '$' 'score'
       || this.lk == 117279         // '$' 'self'
       || this.lk == 119839         // '$' 'sliding'
       || this.lk == 120351         // '$' 'some'
       || this.lk == 120863         // '$' 'stable'
       || this.lk == 121375         // '$' 'start'
       || this.lk == 122911         // '$' 'strict'
       || this.lk == 123935         // '$' 'structured-item'
       || this.lk == 124447         // '$' 'switch'
       || this.lk == 124959         // '$' 'text'
       || this.lk == 127007         // '$' 'to'
       || this.lk == 127519         // '$' 'treat'
       || this.lk == 128031         // '$' 'try'
       || this.lk == 128543         // '$' 'tumbling'
       || this.lk == 129055         // '$' 'type'
       || this.lk == 129567         // '$' 'typeswitch'
       || this.lk == 130079         // '$' 'union'
       || this.lk == 131103         // '$' 'unordered'
       || this.lk == 131615         // '$' 'updating'
       || this.lk == 133151         // '$' 'validate'
       || this.lk == 133663         // '$' 'value'
       || this.lk == 134175         // '$' 'variable'
       || this.lk == 134687         // '$' 'version'
       || this.lk == 136223         // '$' 'where'
       || this.lk == 136735         // '$' 'while'
       || this.lk == 138271         // '$' 'with'
       || this.lk == 140319)        // '$' 'xquery'
      {
        this.lk = this.memoized(2, this.e0);
        if (this.lk == 0)
        {
          var b0A = this.b0; var e0A = this.e0; var l1A = this.l1;
          var b1A = this.b1; var e1A = this.e1; var l2A = this.l2;
          var b2A = this.b2; var e2A = this.e2;
          try
          {
            this.try_GroupingVariable();
            this.lookahead1W(182);  // S^WS | '(:' | ',' | ':=' | 'as' | 'collation' | 'count' | 'for' | 'group' |
                                    // 'let' | 'order' | 'return' | 'stable' | 'where'
            if (this.l1 == 52       // ':='
             || this.l1 == 79)      // 'as'
            {
              if (this.l1 == 79)    // 'as'
              {
                this.try_TypeDeclaration();
              }
              this.lookahead1W(27); // S^WS | '(:' | ':='
              this.shiftT(52);      // ':='
              this.lookahead1W(266); // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                     // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                     // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                     // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                     // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                     // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                     // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                     // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                     // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                     // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                     // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                     // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                     // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                     // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                     // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                     // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                     // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                     // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                     // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                     // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                     // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                     // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                     // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                     // 'with' | 'xquery' | '{' | '{|'
              this.try_ExprSingle();
            }
            if (this.l1 == 94)      // 'collation'
            {
              this.shiftT(94);      // 'collation'
              this.lookahead1W(15); // URILiteral | S^WS | '(:'
              this.shiftT(7);       // URILiteral
            }
            this.lk = -1;
          }
          catch (p1A)
          {
            this.lk = -2;
          }
          this.b0 = b0A; this.e0 = e0A; this.l1 = l1A; if (this.l1 == 0) {this.end = e0A;} else {
          this.b1 = b1A; this.e1 = e1A; this.l2 = l2A; if (this.l2 == 0) {this.end = e1A;} else {
          this.b2 = b2A; this.e2 = e2A; this.end = e2A; }}
          this.memoize(2, this.e0, this.lk);
        }
      }
      switch (this.lk)
      {
      case -1:
        this.parse_GroupingVariable();
        this.lookahead1W(182);      // S^WS | '(:' | ',' | ':=' | 'as' | 'collation' | 'count' | 'for' | 'group' |
                                    // 'let' | 'order' | 'return' | 'stable' | 'where'
        if (this.l1 == 52           // ':='
         || this.l1 == 79)          // 'as'
        {
          if (this.l1 == 79)        // 'as'
          {
            this.whitespace();
            this.parse_TypeDeclaration();
          }
          this.lookahead1W(27);     // S^WS | '(:' | ':='
          this.shift(52);           // ':='
          this.lookahead1W(266);    // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
          this.whitespace();
          this.parse_ExprSingle();
        }
        if (this.l1 == 94)          // 'collation'
        {
          this.shift(94);           // 'collation'
          this.lookahead1W(15);     // URILiteral | S^WS | '(:'
          this.shift(7);            // URILiteral
        }
        break;
      default:
        this.parse_ExprSingle();
      }
      this.eventHandler.endNonterminal("GroupingSpec", this.e0);
    }

    private try_GroupingSpec()
    {
      switch (this.l1)
      {
      case 31:                      // '$'
        this.lookahead2W(254);      // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
        break;
      default:
        this.lk = this.l1;
      }
      if (this.lk == 3103           // '$' EQName^Token
       || this.lk == 35871          // '$' 'after'
       || this.lk == 36895          // '$' 'allowing'
       || this.lk == 37407          // '$' 'ancestor'
       || this.lk == 37919          // '$' 'ancestor-or-self'
       || this.lk == 38431          // '$' 'and'
       || this.lk == 39455          // '$' 'append'
       || this.lk == 39967          // '$' 'array'
       || this.lk == 40479          // '$' 'as'
       || this.lk == 40991          // '$' 'ascending'
       || this.lk == 41503          // '$' 'at'
       || this.lk == 42015          // '$' 'attribute'
       || this.lk == 42527          // '$' 'base-uri'
       || this.lk == 43039          // '$' 'before'
       || this.lk == 43551          // '$' 'boundary-space'
       || this.lk == 44063          // '$' 'break'
       || this.lk == 45087          // '$' 'case'
       || this.lk == 45599          // '$' 'cast'
       || this.lk == 46111          // '$' 'castable'
       || this.lk == 46623          // '$' 'catch'
       || this.lk == 47647          // '$' 'child'
       || this.lk == 48159          // '$' 'collation'
       || this.lk == 49183          // '$' 'comment'
       || this.lk == 49695          // '$' 'constraint'
       || this.lk == 50207          // '$' 'construction'
       || this.lk == 51743          // '$' 'context'
       || this.lk == 52255          // '$' 'continue'
       || this.lk == 52767          // '$' 'copy'
       || this.lk == 53279          // '$' 'copy-namespaces'
       || this.lk == 53791          // '$' 'count'
       || this.lk == 54303          // '$' 'decimal-format'
       || this.lk == 55327          // '$' 'declare'
       || this.lk == 55839          // '$' 'default'
       || this.lk == 56351          // '$' 'delete'
       || this.lk == 56863          // '$' 'descendant'
       || this.lk == 57375          // '$' 'descendant-or-self'
       || this.lk == 57887          // '$' 'descending'
       || this.lk == 60447          // '$' 'div'
       || this.lk == 60959          // '$' 'document'
       || this.lk == 61471          // '$' 'document-node'
       || this.lk == 61983          // '$' 'element'
       || this.lk == 62495          // '$' 'else'
       || this.lk == 63007          // '$' 'empty'
       || this.lk == 63519          // '$' 'empty-sequence'
       || this.lk == 64031          // '$' 'encoding'
       || this.lk == 64543          // '$' 'end'
       || this.lk == 65567          // '$' 'eq'
       || this.lk == 66079          // '$' 'every'
       || this.lk == 67103          // '$' 'except'
       || this.lk == 67615          // '$' 'exit'
       || this.lk == 68127          // '$' 'external'
       || this.lk == 68639          // '$' 'first'
       || this.lk == 69151          // '$' 'following'
       || this.lk == 69663          // '$' 'following-sibling'
       || this.lk == 70175          // '$' 'for'
       || this.lk == 72223          // '$' 'ft-option'
       || this.lk == 74271          // '$' 'function'
       || this.lk == 74783          // '$' 'ge'
       || this.lk == 75807          // '$' 'group'
       || this.lk == 76831          // '$' 'gt'
       || this.lk == 77343          // '$' 'idiv'
       || this.lk == 77855          // '$' 'if'
       || this.lk == 78367          // '$' 'import'
       || this.lk == 78879          // '$' 'in'
       || this.lk == 79391          // '$' 'index'
       || this.lk == 81439          // '$' 'insert'
       || this.lk == 81951          // '$' 'instance'
       || this.lk == 82463          // '$' 'integrity'
       || this.lk == 82975          // '$' 'intersect'
       || this.lk == 83487          // '$' 'into'
       || this.lk == 83999          // '$' 'is'
       || this.lk == 84511          // '$' 'item'
       || this.lk == 85023          // '$' 'json'
       || this.lk == 85535          // '$' 'json-item'
       || this.lk == 87071          // '$' 'last'
       || this.lk == 87583          // '$' 'lax'
       || this.lk == 88095          // '$' 'le'
       || this.lk == 89119          // '$' 'let'
       || this.lk == 90143          // '$' 'loop'
       || this.lk == 91167          // '$' 'lt'
       || this.lk == 92191          // '$' 'mod'
       || this.lk == 92703          // '$' 'modify'
       || this.lk == 93215          // '$' 'module'
       || this.lk == 94239          // '$' 'namespace'
       || this.lk == 94751          // '$' 'namespace-node'
       || this.lk == 95263          // '$' 'ne'
       || this.lk == 97823          // '$' 'node'
       || this.lk == 98335          // '$' 'nodes'
       || this.lk == 99359          // '$' 'object'
       || this.lk == 101407         // '$' 'only'
       || this.lk == 101919         // '$' 'option'
       || this.lk == 102431         // '$' 'or'
       || this.lk == 102943         // '$' 'order'
       || this.lk == 103455         // '$' 'ordered'
       || this.lk == 103967         // '$' 'ordering'
       || this.lk == 105503         // '$' 'parent'
       || this.lk == 108575         // '$' 'preceding'
       || this.lk == 109087         // '$' 'preceding-sibling'
       || this.lk == 110623         // '$' 'processing-instruction'
       || this.lk == 111647         // '$' 'rename'
       || this.lk == 112159         // '$' 'replace'
       || this.lk == 112671         // '$' 'return'
       || this.lk == 113183         // '$' 'returning'
       || this.lk == 113695         // '$' 'revalidation'
       || this.lk == 114719         // '$' 'satisfies'
       || this.lk == 115231         // '$' 'schema'
       || this.lk == 115743         // '$' 'schema-attribute'
       || this.lk == 116255         // '$' 'schema-element'
       || this.lk == 116767         // '$' 'score'
       || this.lk == 117279         // '$' 'self'
       || this.lk == 119839         // '$' 'sliding'
       || this.lk == 120351         // '$' 'some'
       || this.lk == 120863         // '$' 'stable'
       || this.lk == 121375         // '$' 'start'
       || this.lk == 122911         // '$' 'strict'
       || this.lk == 123935         // '$' 'structured-item'
       || this.lk == 124447         // '$' 'switch'
       || this.lk == 124959         // '$' 'text'
       || this.lk == 127007         // '$' 'to'
       || this.lk == 127519         // '$' 'treat'
       || this.lk == 128031         // '$' 'try'
       || this.lk == 128543         // '$' 'tumbling'
       || this.lk == 129055         // '$' 'type'
       || this.lk == 129567         // '$' 'typeswitch'
       || this.lk == 130079         // '$' 'union'
       || this.lk == 131103         // '$' 'unordered'
       || this.lk == 131615         // '$' 'updating'
       || this.lk == 133151         // '$' 'validate'
       || this.lk == 133663         // '$' 'value'
       || this.lk == 134175         // '$' 'variable'
       || this.lk == 134687         // '$' 'version'
       || this.lk == 136223         // '$' 'where'
       || this.lk == 136735         // '$' 'while'
       || this.lk == 138271         // '$' 'with'
       || this.lk == 140319)        // '$' 'xquery'
      {
        this.lk = this.memoized(2, this.e0);
        if (this.lk == 0)
        {
          var b0A = this.b0; var e0A = this.e0; var l1A = this.l1;
          var b1A = this.b1; var e1A = this.e1; var l2A = this.l2;
          var b2A = this.b2; var e2A = this.e2;
          try
          {
            this.try_GroupingVariable();
            this.lookahead1W(182);  // S^WS | '(:' | ',' | ':=' | 'as' | 'collation' | 'count' | 'for' | 'group' |
                                    // 'let' | 'order' | 'return' | 'stable' | 'where'
            if (this.l1 == 52       // ':='
             || this.l1 == 79)      // 'as'
            {
              if (this.l1 == 79)    // 'as'
              {
                this.try_TypeDeclaration();
              }
              this.lookahead1W(27); // S^WS | '(:' | ':='
              this.shiftT(52);      // ':='
              this.lookahead1W(266); // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                     // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                     // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                     // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                     // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                     // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                     // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                     // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                     // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                     // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                     // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                     // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                     // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                     // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                     // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                     // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                     // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                     // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                     // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                     // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                     // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                     // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                     // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                     // 'with' | 'xquery' | '{' | '{|'
              this.try_ExprSingle();
            }
            if (this.l1 == 94)      // 'collation'
            {
              this.shiftT(94);      // 'collation'
              this.lookahead1W(15); // URILiteral | S^WS | '(:'
              this.shiftT(7);       // URILiteral
            }
            this.memoize(2, e0A, -1);
            this.lk = -3;
          }
          catch (p1A)
          {
            this.lk = -2;
            this.b0 = b0A; this.e0 = e0A; this.l1 = l1A; if (this.l1 == 0) {this.end = e0A;} else {
            this.b1 = b1A; this.e1 = e1A; this.l2 = l2A; if (this.l2 == 0) {this.end = e1A;} else {
            this.b2 = b2A; this.e2 = e2A; this.end = e2A; }}
            this.memoize(2, e0A, -2);
          }
        }
      }
      switch (this.lk)
      {
      case -1:
        this.try_GroupingVariable();
        this.lookahead1W(182);      // S^WS | '(:' | ',' | ':=' | 'as' | 'collation' | 'count' | 'for' | 'group' |
                                    // 'let' | 'order' | 'return' | 'stable' | 'where'
        if (this.l1 == 52           // ':='
         || this.l1 == 79)          // 'as'
        {
          if (this.l1 == 79)        // 'as'
          {
            this.try_TypeDeclaration();
          }
          this.lookahead1W(27);     // S^WS | '(:' | ':='
          this.shiftT(52);          // ':='
          this.lookahead1W(266);    // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
          this.try_ExprSingle();
        }
        if (this.l1 == 94)          // 'collation'
        {
          this.shiftT(94);          // 'collation'
          this.lookahead1W(15);     // URILiteral | S^WS | '(:'
          this.shiftT(7);           // URILiteral
        }
        break;
      case -3:
        break;
      default:
        this.try_ExprSingle();
      }
    }

    private parse_GroupingVariable()
    {
      this.eventHandler.startNonterminal("GroupingVariable", this.e0);
      this.shift(31);               // '$'
      this.lookahead1W(254);        // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
      this.whitespace();
      this.parse_VarName();
      this.eventHandler.endNonterminal("GroupingVariable", this.e0);
    }

    private try_GroupingVariable()
    {
      this.shiftT(31);              // '$'
      this.lookahead1W(254);        // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
      this.try_VarName();
    }

    private parse_OrderByClause()
    {
      this.eventHandler.startNonterminal("OrderByClause", this.e0);
      switch (this.l1)
      {
      case 201:                     // 'order'
        this.shift(201);            // 'order'
        this.lookahead1W(34);       // S^WS | '(:' | 'by'
        this.shift(87);             // 'by'
        break;
      default:
        this.shift(236);            // 'stable'
        this.lookahead1W(67);       // S^WS | '(:' | 'order'
        this.shift(201);            // 'order'
        this.lookahead1W(34);       // S^WS | '(:' | 'by'
        this.shift(87);             // 'by'
      }
      this.lookahead1W(266);        // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      this.whitespace();
      this.parse_OrderSpecList();
      this.eventHandler.endNonterminal("OrderByClause", this.e0);
    }

    private try_OrderByClause()
    {
      switch (this.l1)
      {
      case 201:                     // 'order'
        this.shiftT(201);           // 'order'
        this.lookahead1W(34);       // S^WS | '(:' | 'by'
        this.shiftT(87);            // 'by'
        break;
      default:
        this.shiftT(236);           // 'stable'
        this.lookahead1W(67);       // S^WS | '(:' | 'order'
        this.shiftT(201);           // 'order'
        this.lookahead1W(34);       // S^WS | '(:' | 'by'
        this.shiftT(87);            // 'by'
      }
      this.lookahead1W(266);        // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      this.try_OrderSpecList();
    }

    private parse_OrderSpecList()
    {
      this.eventHandler.startNonterminal("OrderSpecList", this.e0);
      this.parse_OrderSpec();
      for (;;)
      {
        this.lookahead1W(176);      // S^WS | '(:' | ',' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' |
                                    // 'stable' | 'where'
        if (this.l1 != 41)          // ','
        {
          break;
        }
        this.shift(41);             // ','
        this.lookahead1W(266);      // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
        this.whitespace();
        this.parse_OrderSpec();
      }
      this.eventHandler.endNonterminal("OrderSpecList", this.e0);
    }

    private try_OrderSpecList()
    {
      this.try_OrderSpec();
      for (;;)
      {
        this.lookahead1W(176);      // S^WS | '(:' | ',' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' |
                                    // 'stable' | 'where'
        if (this.l1 != 41)          // ','
        {
          break;
        }
        this.shiftT(41);            // ','
        this.lookahead1W(266);      // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
        this.try_OrderSpec();
      }
    }

    private parse_OrderSpec()
    {
      this.eventHandler.startNonterminal("OrderSpec", this.e0);
      this.parse_ExprSingle();
      this.whitespace();
      this.parse_OrderModifier();
      this.eventHandler.endNonterminal("OrderSpec", this.e0);
    }

    private try_OrderSpec()
    {
      this.try_ExprSingle();
      this.try_OrderModifier();
    }

    private parse_OrderModifier()
    {
      this.eventHandler.startNonterminal("OrderModifier", this.e0);
      if (this.l1 == 80             // 'ascending'
       || this.l1 == 113)           // 'descending'
      {
        switch (this.l1)
        {
        case 80:                    // 'ascending'
          this.shift(80);           // 'ascending'
          break;
        default:
          this.shift(113);          // 'descending'
        }
      }
      this.lookahead1W(179);        // S^WS | '(:' | ',' | 'collation' | 'count' | 'empty' | 'for' | 'group' | 'let' |
                                    // 'order' | 'return' | 'stable' | 'where'
      if (this.l1 == 123)           // 'empty'
      {
        this.shift(123);            // 'empty'
        this.lookahead1W(121);      // S^WS | '(:' | 'greatest' | 'least'
        switch (this.l1)
        {
        case 147:                   // 'greatest'
          this.shift(147);          // 'greatest'
          break;
        default:
          this.shift(173);          // 'least'
        }
      }
      this.lookahead1W(177);        // S^WS | '(:' | ',' | 'collation' | 'count' | 'for' | 'group' | 'let' | 'order' |
                                    // 'return' | 'stable' | 'where'
      if (this.l1 == 94)            // 'collation'
      {
        this.shift(94);             // 'collation'
        this.lookahead1W(15);       // URILiteral | S^WS | '(:'
        this.shift(7);              // URILiteral
      }
      this.eventHandler.endNonterminal("OrderModifier", this.e0);
    }

    private try_OrderModifier()
    {
      if (this.l1 == 80             // 'ascending'
       || this.l1 == 113)           // 'descending'
      {
        switch (this.l1)
        {
        case 80:                    // 'ascending'
          this.shiftT(80);          // 'ascending'
          break;
        default:
          this.shiftT(113);         // 'descending'
        }
      }
      this.lookahead1W(179);        // S^WS | '(:' | ',' | 'collation' | 'count' | 'empty' | 'for' | 'group' | 'let' |
                                    // 'order' | 'return' | 'stable' | 'where'
      if (this.l1 == 123)           // 'empty'
      {
        this.shiftT(123);           // 'empty'
        this.lookahead1W(121);      // S^WS | '(:' | 'greatest' | 'least'
        switch (this.l1)
        {
        case 147:                   // 'greatest'
          this.shiftT(147);         // 'greatest'
          break;
        default:
          this.shiftT(173);         // 'least'
        }
      }
      this.lookahead1W(177);        // S^WS | '(:' | ',' | 'collation' | 'count' | 'for' | 'group' | 'let' | 'order' |
                                    // 'return' | 'stable' | 'where'
      if (this.l1 == 94)            // 'collation'
      {
        this.shiftT(94);            // 'collation'
        this.lookahead1W(15);       // URILiteral | S^WS | '(:'
        this.shiftT(7);             // URILiteral
      }
    }

    private parse_ReturnClause()
    {
      this.eventHandler.startNonterminal("ReturnClause", this.e0);
      this.shift(220);              // 'return'
      this.lookahead1W(266);        // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      this.whitespace();
      this.parse_ExprSingle();
      this.eventHandler.endNonterminal("ReturnClause", this.e0);
    }

    private try_ReturnClause()
    {
      this.shiftT(220);             // 'return'
      this.lookahead1W(266);        // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      this.try_ExprSingle();
    }

    private parse_QuantifiedExpr()
    {
      this.eventHandler.startNonterminal("QuantifiedExpr", this.e0);
      switch (this.l1)
      {
      case 235:                     // 'some'
        this.shift(235);            // 'some'
        break;
      default:
        this.shift(129);            // 'every'
      }
      this.lookahead1W(21);         // S^WS | '$' | '(:'
      this.whitespace();
      this.parse_QuantifiedVarDecl();
      for (;;)
      {
        if (this.l1 != 41)          // ','
        {
          break;
        }
        this.shift(41);             // ','
        this.lookahead1W(21);       // S^WS | '$' | '(:'
        this.whitespace();
        this.parse_QuantifiedVarDecl();
      }
      this.shift(224);              // 'satisfies'
      this.lookahead1W(266);        // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      this.whitespace();
      this.parse_ExprSingle();
      this.eventHandler.endNonterminal("QuantifiedExpr", this.e0);
    }

    private try_QuantifiedExpr()
    {
      switch (this.l1)
      {
      case 235:                     // 'some'
        this.shiftT(235);           // 'some'
        break;
      default:
        this.shiftT(129);           // 'every'
      }
      this.lookahead1W(21);         // S^WS | '$' | '(:'
      this.try_QuantifiedVarDecl();
      for (;;)
      {
        if (this.l1 != 41)          // ','
        {
          break;
        }
        this.shiftT(41);            // ','
        this.lookahead1W(21);       // S^WS | '$' | '(:'
        this.try_QuantifiedVarDecl();
      }
      this.shiftT(224);             // 'satisfies'
      this.lookahead1W(266);        // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      this.try_ExprSingle();
    }

    private parse_QuantifiedVarDecl()
    {
      this.eventHandler.startNonterminal("QuantifiedVarDecl", this.e0);
      this.shift(31);               // '$'
      this.lookahead1W(254);        // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
      this.whitespace();
      this.parse_VarName();
      this.lookahead1W(110);        // S^WS | '(:' | 'as' | 'in'
      if (this.l1 == 79)            // 'as'
      {
        this.whitespace();
        this.parse_TypeDeclaration();
      }
      this.lookahead1W(53);         // S^WS | '(:' | 'in'
      this.shift(154);              // 'in'
      this.lookahead1W(266);        // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      this.whitespace();
      this.parse_ExprSingle();
      this.eventHandler.endNonterminal("QuantifiedVarDecl", this.e0);
    }

    private try_QuantifiedVarDecl()
    {
      this.shiftT(31);              // '$'
      this.lookahead1W(254);        // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
      this.try_VarName();
      this.lookahead1W(110);        // S^WS | '(:' | 'as' | 'in'
      if (this.l1 == 79)            // 'as'
      {
        this.try_TypeDeclaration();
      }
      this.lookahead1W(53);         // S^WS | '(:' | 'in'
      this.shiftT(154);             // 'in'
      this.lookahead1W(266);        // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      this.try_ExprSingle();
    }

    private parse_SwitchExpr()
    {
      this.eventHandler.startNonterminal("SwitchExpr", this.e0);
      this.shift(243);              // 'switch'
      this.lookahead1W(22);         // S^WS | '(' | '(:'
      this.shift(34);               // '('
      this.lookahead1W(266);        // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      this.whitespace();
      this.parse_Expr();
      this.shift(37);               // ')'
      for (;;)
      {
        this.lookahead1W(35);       // S^WS | '(:' | 'case'
        this.whitespace();
        this.parse_SwitchCaseClause();
        if (this.l1 != 88)          // 'case'
        {
          break;
        }
      }
      this.shift(109);              // 'default'
      this.lookahead1W(70);         // S^WS | '(:' | 'return'
      this.shift(220);              // 'return'
      this.lookahead1W(266);        // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      this.whitespace();
      this.parse_ExprSingle();
      this.eventHandler.endNonterminal("SwitchExpr", this.e0);
    }

    private try_SwitchExpr()
    {
      this.shiftT(243);             // 'switch'
      this.lookahead1W(22);         // S^WS | '(' | '(:'
      this.shiftT(34);              // '('
      this.lookahead1W(266);        // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      this.try_Expr();
      this.shiftT(37);              // ')'
      for (;;)
      {
        this.lookahead1W(35);       // S^WS | '(:' | 'case'
        this.try_SwitchCaseClause();
        if (this.l1 != 88)          // 'case'
        {
          break;
        }
      }
      this.shiftT(109);             // 'default'
      this.lookahead1W(70);         // S^WS | '(:' | 'return'
      this.shiftT(220);             // 'return'
      this.lookahead1W(266);        // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      this.try_ExprSingle();
    }

    private parse_SwitchCaseClause()
    {
      this.eventHandler.startNonterminal("SwitchCaseClause", this.e0);
      for (;;)
      {
        this.shift(88);             // 'case'
        this.lookahead1W(266);      // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
        this.whitespace();
        this.parse_SwitchCaseOperand();
        if (this.l1 != 88)          // 'case'
        {
          break;
        }
      }
      this.shift(220);              // 'return'
      this.lookahead1W(266);        // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      this.whitespace();
      this.parse_ExprSingle();
      this.eventHandler.endNonterminal("SwitchCaseClause", this.e0);
    }

    private try_SwitchCaseClause()
    {
      for (;;)
      {
        this.shiftT(88);            // 'case'
        this.lookahead1W(266);      // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
        this.try_SwitchCaseOperand();
        if (this.l1 != 88)          // 'case'
        {
          break;
        }
      }
      this.shiftT(220);             // 'return'
      this.lookahead1W(266);        // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      this.try_ExprSingle();
    }

    private parse_SwitchCaseOperand()
    {
      this.eventHandler.startNonterminal("SwitchCaseOperand", this.e0);
      this.parse_ExprSingle();
      this.eventHandler.endNonterminal("SwitchCaseOperand", this.e0);
    }

    private try_SwitchCaseOperand()
    {
      this.try_ExprSingle();
    }

    private parse_TypeswitchExpr()
    {
      this.eventHandler.startNonterminal("TypeswitchExpr", this.e0);
      this.shift(253);              // 'typeswitch'
      this.lookahead1W(22);         // S^WS | '(' | '(:'
      this.shift(34);               // '('
      this.lookahead1W(266);        // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      this.whitespace();
      this.parse_Expr();
      this.shift(37);               // ')'
      for (;;)
      {
        this.lookahead1W(35);       // S^WS | '(:' | 'case'
        this.whitespace();
        this.parse_CaseClause();
        if (this.l1 != 88)          // 'case'
        {
          break;
        }
      }
      this.shift(109);              // 'default'
      this.lookahead1W(95);         // S^WS | '$' | '(:' | 'return'
      if (this.l1 == 31)            // '$'
      {
        this.shift(31);             // '$'
        this.lookahead1W(254);      // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
        this.whitespace();
        this.parse_VarName();
      }
      this.lookahead1W(70);         // S^WS | '(:' | 'return'
      this.shift(220);              // 'return'
      this.lookahead1W(266);        // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      this.whitespace();
      this.parse_ExprSingle();
      this.eventHandler.endNonterminal("TypeswitchExpr", this.e0);
    }

    private try_TypeswitchExpr()
    {
      this.shiftT(253);             // 'typeswitch'
      this.lookahead1W(22);         // S^WS | '(' | '(:'
      this.shiftT(34);              // '('
      this.lookahead1W(266);        // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      this.try_Expr();
      this.shiftT(37);              // ')'
      for (;;)
      {
        this.lookahead1W(35);       // S^WS | '(:' | 'case'
        this.try_CaseClause();
        if (this.l1 != 88)          // 'case'
        {
          break;
        }
      }
      this.shiftT(109);             // 'default'
      this.lookahead1W(95);         // S^WS | '$' | '(:' | 'return'
      if (this.l1 == 31)            // '$'
      {
        this.shiftT(31);            // '$'
        this.lookahead1W(254);      // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
        this.try_VarName();
      }
      this.lookahead1W(70);         // S^WS | '(:' | 'return'
      this.shiftT(220);             // 'return'
      this.lookahead1W(266);        // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      this.try_ExprSingle();
    }

    private parse_CaseClause()
    {
      this.eventHandler.startNonterminal("CaseClause", this.e0);
      this.shift(88);               // 'case'
      this.lookahead1W(261);        // EQName^Token | S^WS | '$' | '%' | '(' | '(:' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
      if (this.l1 == 31)            // '$'
      {
        this.shift(31);             // '$'
        this.lookahead1W(254);      // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
        this.whitespace();
        this.parse_VarName();
        this.lookahead1W(30);       // S^WS | '(:' | 'as'
        this.shift(79);             // 'as'
      }
      this.lookahead1W(259);        // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
      this.whitespace();
      this.parse_SequenceTypeUnion();
      this.shift(220);              // 'return'
      this.lookahead1W(266);        // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      this.whitespace();
      this.parse_ExprSingle();
      this.eventHandler.endNonterminal("CaseClause", this.e0);
    }

    private try_CaseClause()
    {
      this.shiftT(88);              // 'case'
      this.lookahead1W(261);        // EQName^Token | S^WS | '$' | '%' | '(' | '(:' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
      if (this.l1 == 31)            // '$'
      {
        this.shiftT(31);            // '$'
        this.lookahead1W(254);      // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
        this.try_VarName();
        this.lookahead1W(30);       // S^WS | '(:' | 'as'
        this.shiftT(79);            // 'as'
      }
      this.lookahead1W(259);        // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
      this.try_SequenceTypeUnion();
      this.shiftT(220);             // 'return'
      this.lookahead1W(266);        // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      this.try_ExprSingle();
    }

    private parse_SequenceTypeUnion()
    {
      this.eventHandler.startNonterminal("SequenceTypeUnion", this.e0);
      this.parse_SequenceType();
      for (;;)
      {
        this.lookahead1W(134);      // S^WS | '(:' | 'return' | '|'
        if (this.l1 != 279)         // '|'
        {
          break;
        }
        this.shift(279);            // '|'
        this.lookahead1W(259);      // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
        this.whitespace();
        this.parse_SequenceType();
      }
      this.eventHandler.endNonterminal("SequenceTypeUnion", this.e0);
    }

    private try_SequenceTypeUnion()
    {
      this.try_SequenceType();
      for (;;)
      {
        this.lookahead1W(134);      // S^WS | '(:' | 'return' | '|'
        if (this.l1 != 279)         // '|'
        {
          break;
        }
        this.shiftT(279);           // '|'
        this.lookahead1W(259);      // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
        this.try_SequenceType();
      }
    }

    private parse_IfExpr()
    {
      this.eventHandler.startNonterminal("IfExpr", this.e0);
      this.shift(152);              // 'if'
      this.lookahead1W(22);         // S^WS | '(' | '(:'
      this.shift(34);               // '('
      this.lookahead1W(266);        // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      this.whitespace();
      this.parse_Expr();
      this.shift(37);               // ')'
      this.lookahead1W(77);         // S^WS | '(:' | 'then'
      this.shift(245);              // 'then'
      this.lookahead1W(266);        // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      this.whitespace();
      this.parse_ExprSingle();
      this.shift(122);              // 'else'
      this.lookahead1W(266);        // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      this.whitespace();
      this.parse_ExprSingle();
      this.eventHandler.endNonterminal("IfExpr", this.e0);
    }

    private try_IfExpr()
    {
      this.shiftT(152);             // 'if'
      this.lookahead1W(22);         // S^WS | '(' | '(:'
      this.shiftT(34);              // '('
      this.lookahead1W(266);        // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      this.try_Expr();
      this.shiftT(37);              // ')'
      this.lookahead1W(77);         // S^WS | '(:' | 'then'
      this.shiftT(245);             // 'then'
      this.lookahead1W(266);        // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      this.try_ExprSingle();
      this.shiftT(122);             // 'else'
      this.lookahead1W(266);        // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      this.try_ExprSingle();
    }

    private parse_TryCatchExpr()
    {
      this.eventHandler.startNonterminal("TryCatchExpr", this.e0);
      this.parse_TryClause();
      for (;;)
      {
        this.lookahead1W(36);       // S^WS | '(:' | 'catch'
        this.whitespace();
        this.parse_CatchClause();
        this.lookahead1W(183);      // S^WS | EOF | '(:' | ')' | ',' | ':' | ';' | ']' | 'after' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'catch' | 'collation' | 'count' | 'default' |
                                    // 'descending' | 'else' | 'empty' | 'end' | 'for' | 'group' | 'into' | 'let' |
                                    // 'modify' | 'only' | 'order' | 'return' | 'satisfies' | 'stable' | 'start' |
                                    // 'where' | 'with' | '|}' | '}'
        if (this.l1 != 91)          // 'catch'
        {
          break;
        }
      }
      this.eventHandler.endNonterminal("TryCatchExpr", this.e0);
    }

    private try_TryCatchExpr()
    {
      this.try_TryClause();
      for (;;)
      {
        this.lookahead1W(36);       // S^WS | '(:' | 'catch'
        this.try_CatchClause();
        this.lookahead1W(183);      // S^WS | EOF | '(:' | ')' | ',' | ':' | ';' | ']' | 'after' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'catch' | 'collation' | 'count' | 'default' |
                                    // 'descending' | 'else' | 'empty' | 'end' | 'for' | 'group' | 'into' | 'let' |
                                    // 'modify' | 'only' | 'order' | 'return' | 'satisfies' | 'stable' | 'start' |
                                    // 'where' | 'with' | '|}' | '}'
        if (this.l1 != 91)          // 'catch'
        {
          break;
        }
      }
    }

    private parse_TryClause()
    {
      this.eventHandler.startNonterminal("TryClause", this.e0);
      this.shift(250);              // 'try'
      this.lookahead1W(87);         // S^WS | '(:' | '{'
      this.shift(276);              // '{'
      this.lookahead1W(266);        // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      this.whitespace();
      this.parse_TryTargetExpr();
      this.shift(282);              // '}'
      this.eventHandler.endNonterminal("TryClause", this.e0);
    }

    private try_TryClause()
    {
      this.shiftT(250);             // 'try'
      this.lookahead1W(87);         // S^WS | '(:' | '{'
      this.shiftT(276);             // '{'
      this.lookahead1W(266);        // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      this.try_TryTargetExpr();
      this.shiftT(282);             // '}'
    }

    private parse_TryTargetExpr()
    {
      this.eventHandler.startNonterminal("TryTargetExpr", this.e0);
      this.parse_Expr();
      this.eventHandler.endNonterminal("TryTargetExpr", this.e0);
    }

    private try_TryTargetExpr()
    {
      this.try_Expr();
    }

    private parse_CatchClause()
    {
      this.eventHandler.startNonterminal("CatchClause", this.e0);
      this.shift(91);               // 'catch'
      this.lookahead1W(256);        // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
      this.whitespace();
      this.parse_CatchErrorList();
      this.shift(276);              // '{'
      this.lookahead1W(266);        // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      this.whitespace();
      this.parse_Expr();
      this.shift(282);              // '}'
      this.eventHandler.endNonterminal("CatchClause", this.e0);
    }

    private try_CatchClause()
    {
      this.shiftT(91);              // 'catch'
      this.lookahead1W(256);        // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
      this.try_CatchErrorList();
      this.shiftT(276);             // '{'
      this.lookahead1W(266);        // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      this.try_Expr();
      this.shiftT(282);             // '}'
    }

    private parse_CatchErrorList()
    {
      this.eventHandler.startNonterminal("CatchErrorList", this.e0);
      this.parse_NameTest();
      for (;;)
      {
        this.lookahead1W(136);      // S^WS | '(:' | '{' | '|'
        if (this.l1 != 279)         // '|'
        {
          break;
        }
        this.shift(279);            // '|'
        this.lookahead1W(256);      // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
        this.whitespace();
        this.parse_NameTest();
      }
      this.eventHandler.endNonterminal("CatchErrorList", this.e0);
    }

    private try_CatchErrorList()
    {
      this.try_NameTest();
      for (;;)
      {
        this.lookahead1W(136);      // S^WS | '(:' | '{' | '|'
        if (this.l1 != 279)         // '|'
        {
          break;
        }
        this.shiftT(279);           // '|'
        this.lookahead1W(256);      // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
        this.try_NameTest();
      }
    }

    private parse_OrExpr()
    {
      this.eventHandler.startNonterminal("OrExpr", this.e0);
      this.parse_AndExpr();
      for (;;)
      {
        if (this.l1 != 200)         // 'or'
        {
          break;
        }
        this.shift(200);            // 'or'
        this.lookahead1W(266);      // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
        this.whitespace();
        this.parse_AndExpr();
      }
      this.eventHandler.endNonterminal("OrExpr", this.e0);
    }

    private try_OrExpr()
    {
      this.try_AndExpr();
      for (;;)
      {
        if (this.l1 != 200)         // 'or'
        {
          break;
        }
        this.shiftT(200);           // 'or'
        this.lookahead1W(266);      // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
        this.try_AndExpr();
      }
    }

    private parse_AndExpr()
    {
      this.eventHandler.startNonterminal("AndExpr", this.e0);
      this.parse_ComparisonExpr();
      for (;;)
      {
        if (this.l1 != 75)          // 'and'
        {
          break;
        }
        this.shift(75);             // 'and'
        this.lookahead1W(266);      // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
        this.whitespace();
        this.parse_ComparisonExpr();
      }
      this.eventHandler.endNonterminal("AndExpr", this.e0);
    }

    private try_AndExpr()
    {
      this.try_ComparisonExpr();
      for (;;)
      {
        if (this.l1 != 75)          // 'and'
        {
          break;
        }
        this.shiftT(75);            // 'and'
        this.lookahead1W(266);      // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
        this.try_ComparisonExpr();
      }
    }

    private parse_ComparisonExpr()
    {
      this.eventHandler.startNonterminal("ComparisonExpr", this.e0);
      this.parse_FTContainsExpr();
      if (this.l1 == 27             // '!='
       || this.l1 == 54             // '<'
       || this.l1 == 57             // '<<'
       || this.l1 == 58             // '<='
       || this.l1 == 60             // '='
       || this.l1 == 61             // '>'
       || this.l1 == 62             // '>='
       || this.l1 == 63             // '>>'
       || this.l1 == 128            // 'eq'
       || this.l1 == 146            // 'ge'
       || this.l1 == 150            // 'gt'
       || this.l1 == 164            // 'is'
       || this.l1 == 172            // 'le'
       || this.l1 == 178            // 'lt'
       || this.l1 == 186)           // 'ne'
      {
        switch (this.l1)
        {
        case 128:                   // 'eq'
        case 146:                   // 'ge'
        case 150:                   // 'gt'
        case 172:                   // 'le'
        case 178:                   // 'lt'
        case 186:                   // 'ne'
          this.whitespace();
          this.parse_ValueComp();
          break;
        case 57:                    // '<<'
        case 63:                    // '>>'
        case 164:                   // 'is'
          this.whitespace();
          this.parse_NodeComp();
          break;
        default:
          this.whitespace();
          this.parse_GeneralComp();
        }
        this.lookahead1W(266);      // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
        this.whitespace();
        this.parse_FTContainsExpr();
      }
      this.eventHandler.endNonterminal("ComparisonExpr", this.e0);
    }

    private try_ComparisonExpr()
    {
      this.try_FTContainsExpr();
      if (this.l1 == 27             // '!='
       || this.l1 == 54             // '<'
       || this.l1 == 57             // '<<'
       || this.l1 == 58             // '<='
       || this.l1 == 60             // '='
       || this.l1 == 61             // '>'
       || this.l1 == 62             // '>='
       || this.l1 == 63             // '>>'
       || this.l1 == 128            // 'eq'
       || this.l1 == 146            // 'ge'
       || this.l1 == 150            // 'gt'
       || this.l1 == 164            // 'is'
       || this.l1 == 172            // 'le'
       || this.l1 == 178            // 'lt'
       || this.l1 == 186)           // 'ne'
      {
        switch (this.l1)
        {
        case 128:                   // 'eq'
        case 146:                   // 'ge'
        case 150:                   // 'gt'
        case 172:                   // 'le'
        case 178:                   // 'lt'
        case 186:                   // 'ne'
          this.try_ValueComp();
          break;
        case 57:                    // '<<'
        case 63:                    // '>>'
        case 164:                   // 'is'
          this.try_NodeComp();
          break;
        default:
          this.try_GeneralComp();
        }
        this.lookahead1W(266);      // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
        this.try_FTContainsExpr();
      }
    }

    private parse_FTContainsExpr()
    {
      this.eventHandler.startNonterminal("FTContainsExpr", this.e0);
      this.parse_StringConcatExpr();
      if (this.l1 == 99)            // 'contains'
      {
        this.shift(99);             // 'contains'
        this.lookahead1W(76);       // S^WS | '(:' | 'text'
        this.shift(244);            // 'text'
        this.lookahead1W(162);      // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
        this.whitespace();
        this.parse_FTSelection();
        if (this.l1 == 271)         // 'without'
        {
          this.whitespace();
          this.parse_FTIgnoreOption();
        }
      }
      this.eventHandler.endNonterminal("FTContainsExpr", this.e0);
    }

    private try_FTContainsExpr()
    {
      this.try_StringConcatExpr();
      if (this.l1 == 99)            // 'contains'
      {
        this.shiftT(99);            // 'contains'
        this.lookahead1W(76);       // S^WS | '(:' | 'text'
        this.shiftT(244);           // 'text'
        this.lookahead1W(162);      // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
        this.try_FTSelection();
        if (this.l1 == 271)         // 'without'
        {
          this.try_FTIgnoreOption();
        }
      }
    }

    private parse_StringConcatExpr()
    {
      this.eventHandler.startNonterminal("StringConcatExpr", this.e0);
      this.parse_RangeExpr();
      for (;;)
      {
        if (this.l1 != 280)         // '||'
        {
          break;
        }
        this.shift(280);            // '||'
        this.lookahead1W(266);      // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
        this.whitespace();
        this.parse_RangeExpr();
      }
      this.eventHandler.endNonterminal("StringConcatExpr", this.e0);
    }

    private try_StringConcatExpr()
    {
      this.try_RangeExpr();
      for (;;)
      {
        if (this.l1 != 280)         // '||'
        {
          break;
        }
        this.shiftT(280);           // '||'
        this.lookahead1W(266);      // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
        this.try_RangeExpr();
      }
    }

    private parse_RangeExpr()
    {
      this.eventHandler.startNonterminal("RangeExpr", this.e0);
      this.parse_AdditiveExpr();
      if (this.l1 == 248)           // 'to'
      {
        this.shift(248);            // 'to'
        this.lookahead1W(266);      // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
        this.whitespace();
        this.parse_AdditiveExpr();
      }
      this.eventHandler.endNonterminal("RangeExpr", this.e0);
    }

    private try_RangeExpr()
    {
      this.try_AdditiveExpr();
      if (this.l1 == 248)           // 'to'
      {
        this.shiftT(248);           // 'to'
        this.lookahead1W(266);      // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
        this.try_AdditiveExpr();
      }
    }

    private parse_AdditiveExpr()
    {
      this.eventHandler.startNonterminal("AdditiveExpr", this.e0);
      this.parse_MultiplicativeExpr();
      for (;;)
      {
        if (this.l1 != 40           // '+'
         && this.l1 != 42)          // '-'
        {
          break;
        }
        switch (this.l1)
        {
        case 40:                    // '+'
          this.shift(40);           // '+'
          break;
        default:
          this.shift(42);           // '-'
        }
        this.lookahead1W(266);      // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
        this.whitespace();
        this.parse_MultiplicativeExpr();
      }
      this.eventHandler.endNonterminal("AdditiveExpr", this.e0);
    }

    private try_AdditiveExpr()
    {
      this.try_MultiplicativeExpr();
      for (;;)
      {
        if (this.l1 != 40           // '+'
         && this.l1 != 42)          // '-'
        {
          break;
        }
        switch (this.l1)
        {
        case 40:                    // '+'
          this.shiftT(40);          // '+'
          break;
        default:
          this.shiftT(42);          // '-'
        }
        this.lookahead1W(266);      // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
        this.try_MultiplicativeExpr();
      }
    }

    private parse_MultiplicativeExpr()
    {
      this.eventHandler.startNonterminal("MultiplicativeExpr", this.e0);
      this.parse_UnionExpr();
      for (;;)
      {
        if (this.l1 != 38           // '*'
         && this.l1 != 118          // 'div'
         && this.l1 != 151          // 'idiv'
         && this.l1 != 180)         // 'mod'
        {
          break;
        }
        switch (this.l1)
        {
        case 38:                    // '*'
          this.shift(38);           // '*'
          break;
        case 118:                   // 'div'
          this.shift(118);          // 'div'
          break;
        case 151:                   // 'idiv'
          this.shift(151);          // 'idiv'
          break;
        default:
          this.shift(180);          // 'mod'
        }
        this.lookahead1W(266);      // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
        this.whitespace();
        this.parse_UnionExpr();
      }
      this.eventHandler.endNonterminal("MultiplicativeExpr", this.e0);
    }

    private try_MultiplicativeExpr()
    {
      this.try_UnionExpr();
      for (;;)
      {
        if (this.l1 != 38           // '*'
         && this.l1 != 118          // 'div'
         && this.l1 != 151          // 'idiv'
         && this.l1 != 180)         // 'mod'
        {
          break;
        }
        switch (this.l1)
        {
        case 38:                    // '*'
          this.shiftT(38);          // '*'
          break;
        case 118:                   // 'div'
          this.shiftT(118);         // 'div'
          break;
        case 151:                   // 'idiv'
          this.shiftT(151);         // 'idiv'
          break;
        default:
          this.shiftT(180);         // 'mod'
        }
        this.lookahead1W(266);      // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
        this.try_UnionExpr();
      }
    }

    private parse_UnionExpr()
    {
      this.eventHandler.startNonterminal("UnionExpr", this.e0);
      this.parse_IntersectExceptExpr();
      for (;;)
      {
        if (this.l1 != 254          // 'union'
         && this.l1 != 279)         // '|'
        {
          break;
        }
        switch (this.l1)
        {
        case 254:                   // 'union'
          this.shift(254);          // 'union'
          break;
        default:
          this.shift(279);          // '|'
        }
        this.lookahead1W(266);      // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
        this.whitespace();
        this.parse_IntersectExceptExpr();
      }
      this.eventHandler.endNonterminal("UnionExpr", this.e0);
    }

    private try_UnionExpr()
    {
      this.try_IntersectExceptExpr();
      for (;;)
      {
        if (this.l1 != 254          // 'union'
         && this.l1 != 279)         // '|'
        {
          break;
        }
        switch (this.l1)
        {
        case 254:                   // 'union'
          this.shiftT(254);         // 'union'
          break;
        default:
          this.shiftT(279);         // '|'
        }
        this.lookahead1W(266);      // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
        this.try_IntersectExceptExpr();
      }
    }

    private parse_IntersectExceptExpr()
    {
      this.eventHandler.startNonterminal("IntersectExceptExpr", this.e0);
      this.parse_InstanceofExpr();
      for (;;)
      {
        this.lookahead1W(222);      // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'intersect' | 'into' | 'is' | 'le' | 'let' |
                                    // 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' |
                                    // 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
        if (this.l1 != 131          // 'except'
         && this.l1 != 162)         // 'intersect'
        {
          break;
        }
        switch (this.l1)
        {
        case 162:                   // 'intersect'
          this.shift(162);          // 'intersect'
          break;
        default:
          this.shift(131);          // 'except'
        }
        this.lookahead1W(266);      // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
        this.whitespace();
        this.parse_InstanceofExpr();
      }
      this.eventHandler.endNonterminal("IntersectExceptExpr", this.e0);
    }

    private try_IntersectExceptExpr()
    {
      this.try_InstanceofExpr();
      for (;;)
      {
        this.lookahead1W(222);      // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'intersect' | 'into' | 'is' | 'le' | 'let' |
                                    // 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' |
                                    // 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
        if (this.l1 != 131          // 'except'
         && this.l1 != 162)         // 'intersect'
        {
          break;
        }
        switch (this.l1)
        {
        case 162:                   // 'intersect'
          this.shiftT(162);         // 'intersect'
          break;
        default:
          this.shiftT(131);         // 'except'
        }
        this.lookahead1W(266);      // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
        this.try_InstanceofExpr();
      }
    }

    private parse_InstanceofExpr()
    {
      this.eventHandler.startNonterminal("InstanceofExpr", this.e0);
      this.parse_TreatExpr();
      this.lookahead1W(223);        // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
      if (this.l1 == 160)           // 'instance'
      {
        this.shift(160);            // 'instance'
        this.lookahead1W(64);       // S^WS | '(:' | 'of'
        this.shift(196);            // 'of'
        this.lookahead1W(259);      // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
        this.whitespace();
        this.parse_SequenceType();
      }
      this.eventHandler.endNonterminal("InstanceofExpr", this.e0);
    }

    private try_InstanceofExpr()
    {
      this.try_TreatExpr();
      this.lookahead1W(223);        // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
      if (this.l1 == 160)           // 'instance'
      {
        this.shiftT(160);           // 'instance'
        this.lookahead1W(64);       // S^WS | '(:' | 'of'
        this.shiftT(196);           // 'of'
        this.lookahead1W(259);      // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
        this.try_SequenceType();
      }
    }

    private parse_TreatExpr()
    {
      this.eventHandler.startNonterminal("TreatExpr", this.e0);
      this.parse_CastableExpr();
      this.lookahead1W(224);        // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' | '||' |
                                    // '|}' | '}'
      if (this.l1 == 249)           // 'treat'
      {
        this.shift(249);            // 'treat'
        this.lookahead1W(30);       // S^WS | '(:' | 'as'
        this.shift(79);             // 'as'
        this.lookahead1W(259);      // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
        this.whitespace();
        this.parse_SequenceType();
      }
      this.eventHandler.endNonterminal("TreatExpr", this.e0);
    }

    private try_TreatExpr()
    {
      this.try_CastableExpr();
      this.lookahead1W(224);        // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' | '||' |
                                    // '|}' | '}'
      if (this.l1 == 249)           // 'treat'
      {
        this.shiftT(249);           // 'treat'
        this.lookahead1W(30);       // S^WS | '(:' | 'as'
        this.shiftT(79);            // 'as'
        this.lookahead1W(259);      // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
        this.try_SequenceType();
      }
    }

    private parse_CastableExpr()
    {
      this.eventHandler.startNonterminal("CastableExpr", this.e0);
      this.parse_CastExpr();
      this.lookahead1W(225);        // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'castable' | 'collation' | 'contains' | 'count' |
                                    // 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                    // 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' | '||' |
                                    // '|}' | '}'
      if (this.l1 == 90)            // 'castable'
      {
        this.shift(90);             // 'castable'
        this.lookahead1W(30);       // S^WS | '(:' | 'as'
        this.shift(79);             // 'as'
        this.lookahead1W(254);      // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
        this.whitespace();
        this.parse_SingleType();
      }
      this.eventHandler.endNonterminal("CastableExpr", this.e0);
    }

    private try_CastableExpr()
    {
      this.try_CastExpr();
      this.lookahead1W(225);        // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'castable' | 'collation' | 'contains' | 'count' |
                                    // 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                    // 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' | '||' |
                                    // '|}' | '}'
      if (this.l1 == 90)            // 'castable'
      {
        this.shiftT(90);            // 'castable'
        this.lookahead1W(30);       // S^WS | '(:' | 'as'
        this.shiftT(79);            // 'as'
        this.lookahead1W(254);      // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
        this.try_SingleType();
      }
    }

    private parse_CastExpr()
    {
      this.eventHandler.startNonterminal("CastExpr", this.e0);
      this.parse_UnaryExpr();
      this.lookahead1W(227);        // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' |
                                    // 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' |
                                    // 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' |
                                    // 'order' | 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' |
                                    // 'start' | 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' |
                                    // '||' | '|}' | '}'
      if (this.l1 == 89)            // 'cast'
      {
        this.shift(89);             // 'cast'
        this.lookahead1W(30);       // S^WS | '(:' | 'as'
        this.shift(79);             // 'as'
        this.lookahead1W(254);      // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
        this.whitespace();
        this.parse_SingleType();
      }
      this.eventHandler.endNonterminal("CastExpr", this.e0);
    }

    private try_CastExpr()
    {
      this.try_UnaryExpr();
      this.lookahead1W(227);        // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' |
                                    // 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' |
                                    // 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' |
                                    // 'order' | 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' |
                                    // 'start' | 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' |
                                    // '||' | '|}' | '}'
      if (this.l1 == 89)            // 'cast'
      {
        this.shiftT(89);            // 'cast'
        this.lookahead1W(30);       // S^WS | '(:' | 'as'
        this.shiftT(79);            // 'as'
        this.lookahead1W(254);      // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
        this.try_SingleType();
      }
    }

    private parse_UnaryExpr()
    {
      this.eventHandler.startNonterminal("UnaryExpr", this.e0);
      for (;;)
      {
        this.lookahead1W(266);      // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
        if (this.l1 != 40           // '+'
         && this.l1 != 42)          // '-'
        {
          break;
        }
        switch (this.l1)
        {
        case 42:                    // '-'
          this.shift(42);           // '-'
          break;
        default:
          this.shift(40);           // '+'
        }
      }
      this.whitespace();
      this.parse_ValueExpr();
      this.eventHandler.endNonterminal("UnaryExpr", this.e0);
    }

    private try_UnaryExpr()
    {
      for (;;)
      {
        this.lookahead1W(266);      // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
        if (this.l1 != 40           // '+'
         && this.l1 != 42)          // '-'
        {
          break;
        }
        switch (this.l1)
        {
        case 42:                    // '-'
          this.shiftT(42);          // '-'
          break;
        default:
          this.shiftT(40);          // '+'
        }
      }
      this.try_ValueExpr();
    }

    private parse_ValueExpr()
    {
      this.eventHandler.startNonterminal("ValueExpr", this.e0);
      switch (this.l1)
      {
      case 260:                     // 'validate'
        this.lookahead2W(247);      // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'lax' | 'le' | 'let' |
                                    // 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' |
                                    // 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' | 'strict' | 'times' |
                                    // 'to' | 'treat' | 'type' | 'union' | 'where' | 'with' | 'words' | '{' | '|' |
                                    // '||' | '|}' | '}'
        break;
      default:
        this.lk = this.l1;
      }
      switch (this.lk)
      {
      case 87812:                   // 'validate' 'lax'
      case 123140:                  // 'validate' 'strict'
      case 129284:                  // 'validate' 'type'
      case 141572:                  // 'validate' '{'
        this.parse_ValidateExpr();
        break;
      case 35:                      // '(#'
        this.parse_ExtensionExpr();
        break;
      default:
        this.parse_SimpleMapExpr();
      }
      this.eventHandler.endNonterminal("ValueExpr", this.e0);
    }

    private try_ValueExpr()
    {
      switch (this.l1)
      {
      case 260:                     // 'validate'
        this.lookahead2W(247);      // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'lax' | 'le' | 'let' |
                                    // 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' |
                                    // 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' | 'strict' | 'times' |
                                    // 'to' | 'treat' | 'type' | 'union' | 'where' | 'with' | 'words' | '{' | '|' |
                                    // '||' | '|}' | '}'
        break;
      default:
        this.lk = this.l1;
      }
      switch (this.lk)
      {
      case 87812:                   // 'validate' 'lax'
      case 123140:                  // 'validate' 'strict'
      case 129284:                  // 'validate' 'type'
      case 141572:                  // 'validate' '{'
        this.try_ValidateExpr();
        break;
      case 35:                      // '(#'
        this.try_ExtensionExpr();
        break;
      default:
        this.try_SimpleMapExpr();
      }
    }

    private parse_SimpleMapExpr()
    {
      this.eventHandler.startNonterminal("SimpleMapExpr", this.e0);
      this.parse_PathExpr();
      for (;;)
      {
        if (this.l1 != 26)          // '!'
        {
          break;
        }
        this.shift(26);             // '!'
        this.lookahead1W(265);      // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
        this.whitespace();
        this.parse_PathExpr();
      }
      this.eventHandler.endNonterminal("SimpleMapExpr", this.e0);
    }

    private try_SimpleMapExpr()
    {
      this.try_PathExpr();
      for (;;)
      {
        if (this.l1 != 26)          // '!'
        {
          break;
        }
        this.shiftT(26);            // '!'
        this.lookahead1W(265);      // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
        this.try_PathExpr();
      }
    }

    private parse_GeneralComp()
    {
      this.eventHandler.startNonterminal("GeneralComp", this.e0);
      switch (this.l1)
      {
      case 60:                      // '='
        this.shift(60);             // '='
        break;
      case 27:                      // '!='
        this.shift(27);             // '!='
        break;
      case 54:                      // '<'
        this.shift(54);             // '<'
        break;
      case 58:                      // '<='
        this.shift(58);             // '<='
        break;
      case 61:                      // '>'
        this.shift(61);             // '>'
        break;
      default:
        this.shift(62);             // '>='
      }
      this.eventHandler.endNonterminal("GeneralComp", this.e0);
    }

    private try_GeneralComp()
    {
      switch (this.l1)
      {
      case 60:                      // '='
        this.shiftT(60);            // '='
        break;
      case 27:                      // '!='
        this.shiftT(27);            // '!='
        break;
      case 54:                      // '<'
        this.shiftT(54);            // '<'
        break;
      case 58:                      // '<='
        this.shiftT(58);            // '<='
        break;
      case 61:                      // '>'
        this.shiftT(61);            // '>'
        break;
      default:
        this.shiftT(62);            // '>='
      }
    }

    private parse_ValueComp()
    {
      this.eventHandler.startNonterminal("ValueComp", this.e0);
      switch (this.l1)
      {
      case 128:                     // 'eq'
        this.shift(128);            // 'eq'
        break;
      case 186:                     // 'ne'
        this.shift(186);            // 'ne'
        break;
      case 178:                     // 'lt'
        this.shift(178);            // 'lt'
        break;
      case 172:                     // 'le'
        this.shift(172);            // 'le'
        break;
      case 150:                     // 'gt'
        this.shift(150);            // 'gt'
        break;
      default:
        this.shift(146);            // 'ge'
      }
      this.eventHandler.endNonterminal("ValueComp", this.e0);
    }

    private try_ValueComp()
    {
      switch (this.l1)
      {
      case 128:                     // 'eq'
        this.shiftT(128);           // 'eq'
        break;
      case 186:                     // 'ne'
        this.shiftT(186);           // 'ne'
        break;
      case 178:                     // 'lt'
        this.shiftT(178);           // 'lt'
        break;
      case 172:                     // 'le'
        this.shiftT(172);           // 'le'
        break;
      case 150:                     // 'gt'
        this.shiftT(150);           // 'gt'
        break;
      default:
        this.shiftT(146);           // 'ge'
      }
    }

    private parse_NodeComp()
    {
      this.eventHandler.startNonterminal("NodeComp", this.e0);
      switch (this.l1)
      {
      case 164:                     // 'is'
        this.shift(164);            // 'is'
        break;
      case 57:                      // '<<'
        this.shift(57);             // '<<'
        break;
      default:
        this.shift(63);             // '>>'
      }
      this.eventHandler.endNonterminal("NodeComp", this.e0);
    }

    private try_NodeComp()
    {
      switch (this.l1)
      {
      case 164:                     // 'is'
        this.shiftT(164);           // 'is'
        break;
      case 57:                      // '<<'
        this.shiftT(57);            // '<<'
        break;
      default:
        this.shiftT(63);            // '>>'
      }
    }

    private parse_ValidateExpr()
    {
      this.eventHandler.startNonterminal("ValidateExpr", this.e0);
      this.shift(260);              // 'validate'
      this.lookahead1W(160);        // S^WS | '(:' | 'lax' | 'strict' | 'type' | '{'
      if (this.l1 != 276)           // '{'
      {
        switch (this.l1)
        {
        case 252:                   // 'type'
          this.shift(252);          // 'type'
          this.lookahead1W(254);    // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
          this.whitespace();
          this.parse_TypeName();
          break;
        default:
          this.whitespace();
          this.parse_ValidationMode();
        }
      }
      this.lookahead1W(87);         // S^WS | '(:' | '{'
      this.shift(276);              // '{'
      this.lookahead1W(266);        // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      this.whitespace();
      this.parse_Expr();
      this.shift(282);              // '}'
      this.eventHandler.endNonterminal("ValidateExpr", this.e0);
    }

    private try_ValidateExpr()
    {
      this.shiftT(260);             // 'validate'
      this.lookahead1W(160);        // S^WS | '(:' | 'lax' | 'strict' | 'type' | '{'
      if (this.l1 != 276)           // '{'
      {
        switch (this.l1)
        {
        case 252:                   // 'type'
          this.shiftT(252);         // 'type'
          this.lookahead1W(254);    // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
          this.try_TypeName();
          break;
        default:
          this.try_ValidationMode();
        }
      }
      this.lookahead1W(87);         // S^WS | '(:' | '{'
      this.shiftT(276);             // '{'
      this.lookahead1W(266);        // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      this.try_Expr();
      this.shiftT(282);             // '}'
    }

    private parse_ValidationMode()
    {
      this.eventHandler.startNonterminal("ValidationMode", this.e0);
      switch (this.l1)
      {
      case 171:                     // 'lax'
        this.shift(171);            // 'lax'
        break;
      default:
        this.shift(240);            // 'strict'
      }
      this.eventHandler.endNonterminal("ValidationMode", this.e0);
    }

    private try_ValidationMode()
    {
      switch (this.l1)
      {
      case 171:                     // 'lax'
        this.shiftT(171);           // 'lax'
        break;
      default:
        this.shiftT(240);           // 'strict'
      }
    }

    private parse_ExtensionExpr()
    {
      this.eventHandler.startNonterminal("ExtensionExpr", this.e0);
      for (;;)
      {
        this.whitespace();
        this.parse_Pragma();
        this.lookahead1W(100);      // S^WS | '(#' | '(:' | '{'
        if (this.l1 != 35)          // '(#'
        {
          break;
        }
      }
      this.shift(276);              // '{'
      this.lookahead1W(273);        // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|' | '}'
      if (this.l1 != 282)           // '}'
      {
        this.whitespace();
        this.parse_Expr();
      }
      this.shift(282);              // '}'
      this.eventHandler.endNonterminal("ExtensionExpr", this.e0);
    }

    private try_ExtensionExpr()
    {
      for (;;)
      {
        this.try_Pragma();
        this.lookahead1W(100);      // S^WS | '(#' | '(:' | '{'
        if (this.l1 != 35)          // '(#'
        {
          break;
        }
      }
      this.shiftT(276);             // '{'
      this.lookahead1W(273);        // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|' | '}'
      if (this.l1 != 282)           // '}'
      {
        this.try_Expr();
      }
      this.shiftT(282);             // '}'
    }

    private parse_Pragma()
    {
      this.eventHandler.startNonterminal("Pragma", this.e0);
      this.shift(35);               // '(#'
      this.lookahead1(251);         // EQName^Token | S | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' |
                                    // 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
      if (this.l1 == 21)            // S
      {
        this.shift(21);             // S
      }
      this.parse_EQName();
      this.lookahead1(10);          // S | '#)'
      if (this.l1 == 21)            // S
      {
        this.shift(21);             // S
        this.lookahead1(0);         // PragmaContents
        this.shift(1);              // PragmaContents
      }
      this.lookahead1(5);           // '#)'
      this.shift(30);               // '#)'
      this.eventHandler.endNonterminal("Pragma", this.e0);
    }

    private try_Pragma()
    {
      this.shiftT(35);              // '(#'
      this.lookahead1(251);         // EQName^Token | S | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' |
                                    // 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
      if (this.l1 == 21)            // S
      {
        this.shiftT(21);            // S
      }
      this.try_EQName();
      this.lookahead1(10);          // S | '#)'
      if (this.l1 == 21)            // S
      {
        this.shiftT(21);            // S
        this.lookahead1(0);         // PragmaContents
        this.shiftT(1);             // PragmaContents
      }
      this.lookahead1(5);           // '#)'
      this.shiftT(30);              // '#)'
    }

    private parse_PathExpr()
    {
      this.eventHandler.startNonterminal("PathExpr", this.e0);
      switch (this.l1)
      {
      case 46:                      // '/'
        this.shift(46);             // '/'
        this.lookahead1W(285);      // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | EOF | '!' | '!=' | '$' | '%' | '(' | '(:' | ')' | '*' |
                                    // '+' | ',' | '-' | '.' | '..' | ':' | ';' | '<' | '<!--' | '<<' | '<=' | '<?' |
                                    // '=' | '>' | '>=' | '>>' | '@' | '[' | ']' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'by' |
                                    // 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'contains' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'paragraphs' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' |
                                    // 'sentences' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'times' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'words' | 'xquery' | '{' | '{|' | '|' | '||' | '|}' | '}'
        switch (this.l1)
        {
        case 25:                    // EOF
        case 26:                    // '!'
        case 27:                    // '!='
        case 37:                    // ')'
        case 38:                    // '*'
        case 40:                    // '+'
        case 41:                    // ','
        case 42:                    // '-'
        case 49:                    // ':'
        case 53:                    // ';'
        case 57:                    // '<<'
        case 58:                    // '<='
        case 60:                    // '='
        case 61:                    // '>'
        case 62:                    // '>='
        case 63:                    // '>>'
        case 69:                    // ']'
        case 87:                    // 'by'
        case 99:                    // 'contains'
        case 205:                   // 'paragraphs'
        case 232:                   // 'sentences'
        case 247:                   // 'times'
        case 273:                   // 'words'
        case 279:                   // '|'
        case 280:                   // '||'
        case 281:                   // '|}'
        case 282:                   // '}'
          break;
        default:
          this.whitespace();
          this.parse_RelativePathExpr();
        }
        break;
      case 47:                      // '//'
        this.shift(47);             // '//'
        this.lookahead1W(264);      // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '<' | '<!--' |
                                    // '<?' | '@' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' |
                                    // 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
        this.whitespace();
        this.parse_RelativePathExpr();
        break;
      default:
        this.parse_RelativePathExpr();
      }
      this.eventHandler.endNonterminal("PathExpr", this.e0);
    }

    private try_PathExpr()
    {
      switch (this.l1)
      {
      case 46:                      // '/'
        this.shiftT(46);            // '/'
        this.lookahead1W(285);      // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | EOF | '!' | '!=' | '$' | '%' | '(' | '(:' | ')' | '*' |
                                    // '+' | ',' | '-' | '.' | '..' | ':' | ';' | '<' | '<!--' | '<<' | '<=' | '<?' |
                                    // '=' | '>' | '>=' | '>>' | '@' | '[' | ']' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'by' |
                                    // 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'contains' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'paragraphs' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' |
                                    // 'sentences' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'times' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'words' | 'xquery' | '{' | '{|' | '|' | '||' | '|}' | '}'
        switch (this.l1)
        {
        case 25:                    // EOF
        case 26:                    // '!'
        case 27:                    // '!='
        case 37:                    // ')'
        case 38:                    // '*'
        case 40:                    // '+'
        case 41:                    // ','
        case 42:                    // '-'
        case 49:                    // ':'
        case 53:                    // ';'
        case 57:                    // '<<'
        case 58:                    // '<='
        case 60:                    // '='
        case 61:                    // '>'
        case 62:                    // '>='
        case 63:                    // '>>'
        case 69:                    // ']'
        case 87:                    // 'by'
        case 99:                    // 'contains'
        case 205:                   // 'paragraphs'
        case 232:                   // 'sentences'
        case 247:                   // 'times'
        case 273:                   // 'words'
        case 279:                   // '|'
        case 280:                   // '||'
        case 281:                   // '|}'
        case 282:                   // '}'
          break;
        default:
          this.try_RelativePathExpr();
        }
        break;
      case 47:                      // '//'
        this.shiftT(47);            // '//'
        this.lookahead1W(264);      // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '<' | '<!--' |
                                    // '<?' | '@' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' |
                                    // 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
        this.try_RelativePathExpr();
        break;
      default:
        this.try_RelativePathExpr();
      }
    }

    private parse_RelativePathExpr()
    {
      this.eventHandler.startNonterminal("RelativePathExpr", this.e0);
      this.parse_StepExpr();
      for (;;)
      {
        switch (this.l1)
        {
        case 26:                    // '!'
          this.lookahead2W(265);    // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
          break;
        default:
          this.lk = this.l1;
        }
        if (this.lk != 25           // EOF
         && this.lk != 27           // '!='
         && this.lk != 37           // ')'
         && this.lk != 38           // '*'
         && this.lk != 40           // '+'
         && this.lk != 41           // ','
         && this.lk != 42           // '-'
         && this.lk != 46           // '/'
         && this.lk != 47           // '//'
         && this.lk != 49           // ':'
         && this.lk != 53           // ';'
         && this.lk != 54           // '<'
         && this.lk != 57           // '<<'
         && this.lk != 58           // '<='
         && this.lk != 60           // '='
         && this.lk != 61           // '>'
         && this.lk != 62           // '>='
         && this.lk != 63           // '>>'
         && this.lk != 69           // ']'
         && this.lk != 70           // 'after'
         && this.lk != 75           // 'and'
         && this.lk != 79           // 'as'
         && this.lk != 80           // 'ascending'
         && this.lk != 81           // 'at'
         && this.lk != 84           // 'before'
         && this.lk != 87           // 'by'
         && this.lk != 88           // 'case'
         && this.lk != 89           // 'cast'
         && this.lk != 90           // 'castable'
         && this.lk != 94           // 'collation'
         && this.lk != 99           // 'contains'
         && this.lk != 105          // 'count'
         && this.lk != 109          // 'default'
         && this.lk != 113          // 'descending'
         && this.lk != 118          // 'div'
         && this.lk != 122          // 'else'
         && this.lk != 123          // 'empty'
         && this.lk != 126          // 'end'
         && this.lk != 128          // 'eq'
         && this.lk != 131          // 'except'
         && this.lk != 137          // 'for'
         && this.lk != 146          // 'ge'
         && this.lk != 148          // 'group'
         && this.lk != 150          // 'gt'
         && this.lk != 151          // 'idiv'
         && this.lk != 160          // 'instance'
         && this.lk != 162          // 'intersect'
         && this.lk != 163          // 'into'
         && this.lk != 164          // 'is'
         && this.lk != 172          // 'le'
         && this.lk != 174          // 'let'
         && this.lk != 178          // 'lt'
         && this.lk != 180          // 'mod'
         && this.lk != 181          // 'modify'
         && this.lk != 186          // 'ne'
         && this.lk != 198          // 'only'
         && this.lk != 200          // 'or'
         && this.lk != 201          // 'order'
         && this.lk != 205          // 'paragraphs'
         && this.lk != 220          // 'return'
         && this.lk != 224          // 'satisfies'
         && this.lk != 232          // 'sentences'
         && this.lk != 236          // 'stable'
         && this.lk != 237          // 'start'
         && this.lk != 247          // 'times'
         && this.lk != 248          // 'to'
         && this.lk != 249          // 'treat'
         && this.lk != 254          // 'union'
         && this.lk != 266          // 'where'
         && this.lk != 270          // 'with'
         && this.lk != 273          // 'words'
         && this.lk != 279          // '|'
         && this.lk != 280          // '||'
         && this.lk != 281          // '|}'
         && this.lk != 282          // '}'
         && this.lk != 23578        // '!' '/'
         && this.lk != 24090)       // '!' '//'
        {
          this.lk = this.memoized(3, this.e0);
          if (this.lk == 0)
          {
            var b0A = this.b0; var e0A = this.e0; var l1A = this.l1;
            var b1A = this.b1; var e1A = this.e1; var l2A = this.l2;
            var b2A = this.b2; var e2A = this.e2;
            try
            {
              switch (this.l1)
              {
              case 46:              // '/'
                this.shiftT(46);    // '/'
                break;
              case 47:              // '//'
                this.shiftT(47);    // '//'
                break;
              default:
                this.shiftT(26);    // '!'
              }
              this.lookahead1W(264); // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                     // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '<' | '<!--' |
                                     // '<?' | '@' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                     // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                     // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                     // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                     // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                     // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                     // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                     // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                     // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                     // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                     // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' |
                                     // 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' |
                                     // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                     // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                     // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                     // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                     // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                     // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                     // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                     // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                     // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                     // 'with' | 'xquery' | '{' | '{|'
              this.try_StepExpr();
              this.lk = -1;
            }
            catch (p1A)
            {
              this.lk = -2;
            }
            this.b0 = b0A; this.e0 = e0A; this.l1 = l1A; if (this.l1 == 0) {this.end = e0A;} else {
            this.b1 = b1A; this.e1 = e1A; this.l2 = l2A; if (this.l2 == 0) {this.end = e1A;} else {
            this.b2 = b2A; this.e2 = e2A; this.end = e2A; }}
            this.memoize(3, this.e0, this.lk);
          }
        }
        if (this.lk != -1
         && this.lk != 46           // '/'
         && this.lk != 47)          // '//'
        {
          break;
        }
        switch (this.l1)
        {
        case 46:                    // '/'
          this.shift(46);           // '/'
          break;
        case 47:                    // '//'
          this.shift(47);           // '//'
          break;
        default:
          this.shift(26);           // '!'
        }
        this.lookahead1W(264);      // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '<' | '<!--' |
                                    // '<?' | '@' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' |
                                    // 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
        this.whitespace();
        this.parse_StepExpr();
      }
      this.eventHandler.endNonterminal("RelativePathExpr", this.e0);
    }

    private try_RelativePathExpr()
    {
      this.try_StepExpr();
      for (;;)
      {
        switch (this.l1)
        {
        case 26:                    // '!'
          this.lookahead2W(265);    // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
          break;
        default:
          this.lk = this.l1;
        }
        if (this.lk != 25           // EOF
         && this.lk != 27           // '!='
         && this.lk != 37           // ')'
         && this.lk != 38           // '*'
         && this.lk != 40           // '+'
         && this.lk != 41           // ','
         && this.lk != 42           // '-'
         && this.lk != 46           // '/'
         && this.lk != 47           // '//'
         && this.lk != 49           // ':'
         && this.lk != 53           // ';'
         && this.lk != 54           // '<'
         && this.lk != 57           // '<<'
         && this.lk != 58           // '<='
         && this.lk != 60           // '='
         && this.lk != 61           // '>'
         && this.lk != 62           // '>='
         && this.lk != 63           // '>>'
         && this.lk != 69           // ']'
         && this.lk != 70           // 'after'
         && this.lk != 75           // 'and'
         && this.lk != 79           // 'as'
         && this.lk != 80           // 'ascending'
         && this.lk != 81           // 'at'
         && this.lk != 84           // 'before'
         && this.lk != 87           // 'by'
         && this.lk != 88           // 'case'
         && this.lk != 89           // 'cast'
         && this.lk != 90           // 'castable'
         && this.lk != 94           // 'collation'
         && this.lk != 99           // 'contains'
         && this.lk != 105          // 'count'
         && this.lk != 109          // 'default'
         && this.lk != 113          // 'descending'
         && this.lk != 118          // 'div'
         && this.lk != 122          // 'else'
         && this.lk != 123          // 'empty'
         && this.lk != 126          // 'end'
         && this.lk != 128          // 'eq'
         && this.lk != 131          // 'except'
         && this.lk != 137          // 'for'
         && this.lk != 146          // 'ge'
         && this.lk != 148          // 'group'
         && this.lk != 150          // 'gt'
         && this.lk != 151          // 'idiv'
         && this.lk != 160          // 'instance'
         && this.lk != 162          // 'intersect'
         && this.lk != 163          // 'into'
         && this.lk != 164          // 'is'
         && this.lk != 172          // 'le'
         && this.lk != 174          // 'let'
         && this.lk != 178          // 'lt'
         && this.lk != 180          // 'mod'
         && this.lk != 181          // 'modify'
         && this.lk != 186          // 'ne'
         && this.lk != 198          // 'only'
         && this.lk != 200          // 'or'
         && this.lk != 201          // 'order'
         && this.lk != 205          // 'paragraphs'
         && this.lk != 220          // 'return'
         && this.lk != 224          // 'satisfies'
         && this.lk != 232          // 'sentences'
         && this.lk != 236          // 'stable'
         && this.lk != 237          // 'start'
         && this.lk != 247          // 'times'
         && this.lk != 248          // 'to'
         && this.lk != 249          // 'treat'
         && this.lk != 254          // 'union'
         && this.lk != 266          // 'where'
         && this.lk != 270          // 'with'
         && this.lk != 273          // 'words'
         && this.lk != 279          // '|'
         && this.lk != 280          // '||'
         && this.lk != 281          // '|}'
         && this.lk != 282          // '}'
         && this.lk != 23578        // '!' '/'
         && this.lk != 24090)       // '!' '//'
        {
          this.lk = this.memoized(3, this.e0);
          if (this.lk == 0)
          {
            var b0A = this.b0; var e0A = this.e0; var l1A = this.l1;
            var b1A = this.b1; var e1A = this.e1; var l2A = this.l2;
            var b2A = this.b2; var e2A = this.e2;
            try
            {
              switch (this.l1)
              {
              case 46:              // '/'
                this.shiftT(46);    // '/'
                break;
              case 47:              // '//'
                this.shiftT(47);    // '//'
                break;
              default:
                this.shiftT(26);    // '!'
              }
              this.lookahead1W(264); // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                     // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '<' | '<!--' |
                                     // '<?' | '@' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                     // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                     // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                     // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                     // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                     // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                     // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                     // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                     // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                     // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                     // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' |
                                     // 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' |
                                     // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                     // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                     // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                     // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                     // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                     // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                     // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                     // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                     // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                     // 'with' | 'xquery' | '{' | '{|'
              this.try_StepExpr();
              this.memoize(3, e0A, -1);
              continue;
            }
            catch (p1A)
            {
              this.b0 = b0A; this.e0 = e0A; this.l1 = l1A; if (this.l1 == 0) {this.end = e0A;} else {
              this.b1 = b1A; this.e1 = e1A; this.l2 = l2A; if (this.l2 == 0) {this.end = e1A;} else {
              this.b2 = b2A; this.e2 = e2A; this.end = e2A; }}
              this.memoize(3, e0A, -2);
              break;
            }
          }
        }
        if (this.lk != -1
         && this.lk != 46           // '/'
         && this.lk != 47)          // '//'
        {
          break;
        }
        switch (this.l1)
        {
        case 46:                    // '/'
          this.shiftT(46);          // '/'
          break;
        case 47:                    // '//'
          this.shiftT(47);          // '//'
          break;
        default:
          this.shiftT(26);          // '!'
        }
        this.lookahead1W(264);      // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '<' | '<!--' |
                                    // '<?' | '@' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' |
                                    // 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
        this.try_StepExpr();
      }
    }

    private parse_StepExpr()
    {
      this.eventHandler.startNonterminal("StepExpr", this.e0);
      switch (this.l1)
      {
      case 82:                      // 'attribute'
        this.lookahead2W(284);      // EQName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' |
                                    // ',' | '-' | '/' | '//' | ':' | '::' | ';' | '<' | '<<' | '<=' | '=' | '>' |
                                    // '>=' | '>>' | '[' | ']' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'by' |
                                    // 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'contains' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'paragraphs' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' |
                                    // 'sentences' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'times' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'words' | 'xquery' | '{' | '|' | '||' | '|}' | '}'
        break;
      case 121:                     // 'element'
        this.lookahead2W(282);      // EQName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' |
                                    // ',' | '-' | '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' |
                                    // '>>' | '[' | ']' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'contains' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'paragraphs' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' |
                                    // 'sentences' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'times' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'words' | 'xquery' | '{' | '|' | '||' | '|}' | '}'
        break;
      case 184:                     // 'namespace'
      case 216:                     // 'processing-instruction'
        this.lookahead2W(281);      // NCName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' |
                                    // ',' | '-' | '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' |
                                    // '>>' | '[' | ']' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'by' | 'case' | 'cast' | 'castable' |
                                    // 'catch' | 'child' | 'collation' | 'comment' | 'constraint' | 'construction' |
                                    // 'contains' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'last' | 'lax' | 'le' | 'let' |
                                    // 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'paragraphs' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sentences' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' |
                                    // 'times' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'words' | 'xquery' | '{' | '|' | '||' | '|}' | '}'
        break;
      case 96:                      // 'comment'
      case 119:                     // 'document'
      case 202:                     // 'ordered'
      case 244:                     // 'text'
      case 256:                     // 'unordered'
        this.lookahead2W(246);      // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '{' | '|' | '||' | '|}' | '}'
        break;
      case 78:                      // 'array'
      case 124:                     // 'empty-sequence'
      case 152:                     // 'if'
      case 165:                     // 'item'
      case 167:                     // 'json-item'
      case 242:                     // 'structured-item'
      case 243:                     // 'switch'
      case 253:                     // 'typeswitch'
        this.lookahead2W(239);      // S^WS | EOF | '!' | '!=' | '#' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'after' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
        break;
      case 73:                      // 'ancestor'
      case 74:                      // 'ancestor-or-self'
      case 93:                      // 'child'
      case 111:                     // 'descendant'
      case 112:                     // 'descendant-or-self'
      case 135:                     // 'following'
      case 136:                     // 'following-sibling'
      case 206:                     // 'parent'
      case 212:                     // 'preceding'
      case 213:                     // 'preceding-sibling'
      case 229:                     // 'self'
        this.lookahead2W(245);      // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | '::' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' |
                                    // 'cast' | 'castable' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' | '||' |
                                    // '|}' | '}'
        break;
      case 6:                       // EQName^Token
      case 70:                      // 'after'
      case 72:                      // 'allowing'
      case 75:                      // 'and'
      case 77:                      // 'append'
      case 79:                      // 'as'
      case 80:                      // 'ascending'
      case 81:                      // 'at'
      case 83:                      // 'base-uri'
      case 84:                      // 'before'
      case 85:                      // 'boundary-space'
      case 86:                      // 'break'
      case 88:                      // 'case'
      case 89:                      // 'cast'
      case 90:                      // 'castable'
      case 91:                      // 'catch'
      case 94:                      // 'collation'
      case 97:                      // 'constraint'
      case 98:                      // 'construction'
      case 101:                     // 'context'
      case 102:                     // 'continue'
      case 103:                     // 'copy'
      case 104:                     // 'copy-namespaces'
      case 105:                     // 'count'
      case 106:                     // 'decimal-format'
      case 108:                     // 'declare'
      case 109:                     // 'default'
      case 110:                     // 'delete'
      case 113:                     // 'descending'
      case 118:                     // 'div'
      case 120:                     // 'document-node'
      case 122:                     // 'else'
      case 123:                     // 'empty'
      case 125:                     // 'encoding'
      case 126:                     // 'end'
      case 128:                     // 'eq'
      case 129:                     // 'every'
      case 131:                     // 'except'
      case 132:                     // 'exit'
      case 133:                     // 'external'
      case 134:                     // 'first'
      case 137:                     // 'for'
      case 141:                     // 'ft-option'
      case 145:                     // 'function'
      case 146:                     // 'ge'
      case 148:                     // 'group'
      case 150:                     // 'gt'
      case 151:                     // 'idiv'
      case 153:                     // 'import'
      case 154:                     // 'in'
      case 155:                     // 'index'
      case 159:                     // 'insert'
      case 160:                     // 'instance'
      case 161:                     // 'integrity'
      case 162:                     // 'intersect'
      case 163:                     // 'into'
      case 164:                     // 'is'
      case 166:                     // 'json'
      case 170:                     // 'last'
      case 171:                     // 'lax'
      case 172:                     // 'le'
      case 174:                     // 'let'
      case 176:                     // 'loop'
      case 178:                     // 'lt'
      case 180:                     // 'mod'
      case 181:                     // 'modify'
      case 182:                     // 'module'
      case 185:                     // 'namespace-node'
      case 186:                     // 'ne'
      case 191:                     // 'node'
      case 192:                     // 'nodes'
      case 194:                     // 'object'
      case 198:                     // 'only'
      case 199:                     // 'option'
      case 200:                     // 'or'
      case 201:                     // 'order'
      case 203:                     // 'ordering'
      case 218:                     // 'rename'
      case 219:                     // 'replace'
      case 220:                     // 'return'
      case 221:                     // 'returning'
      case 222:                     // 'revalidation'
      case 224:                     // 'satisfies'
      case 225:                     // 'schema'
      case 226:                     // 'schema-attribute'
      case 227:                     // 'schema-element'
      case 228:                     // 'score'
      case 234:                     // 'sliding'
      case 235:                     // 'some'
      case 236:                     // 'stable'
      case 237:                     // 'start'
      case 240:                     // 'strict'
      case 248:                     // 'to'
      case 249:                     // 'treat'
      case 250:                     // 'try'
      case 251:                     // 'tumbling'
      case 252:                     // 'type'
      case 254:                     // 'union'
      case 257:                     // 'updating'
      case 260:                     // 'validate'
      case 261:                     // 'value'
      case 262:                     // 'variable'
      case 263:                     // 'version'
      case 266:                     // 'where'
      case 267:                     // 'while'
      case 270:                     // 'with'
      case 274:                     // 'xquery'
        this.lookahead2W(243);      // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
        break;
      default:
        this.lk = this.l1;
      }
      if (this.lk == 35922          // 'attribute' 'after'
       || this.lk == 35961          // 'element' 'after'
       || this.lk == 36024          // 'namespace' 'after'
       || this.lk == 36056          // 'processing-instruction' 'after'
       || this.lk == 38482          // 'attribute' 'and'
       || this.lk == 38521          // 'element' 'and'
       || this.lk == 38584          // 'namespace' 'and'
       || this.lk == 38616          // 'processing-instruction' 'and'
       || this.lk == 40530          // 'attribute' 'as'
       || this.lk == 40569          // 'element' 'as'
       || this.lk == 40632          // 'namespace' 'as'
       || this.lk == 40664          // 'processing-instruction' 'as'
       || this.lk == 41042          // 'attribute' 'ascending'
       || this.lk == 41081          // 'element' 'ascending'
       || this.lk == 41144          // 'namespace' 'ascending'
       || this.lk == 41176          // 'processing-instruction' 'ascending'
       || this.lk == 41554          // 'attribute' 'at'
       || this.lk == 41593          // 'element' 'at'
       || this.lk == 41656          // 'namespace' 'at'
       || this.lk == 41688          // 'processing-instruction' 'at'
       || this.lk == 43090          // 'attribute' 'before'
       || this.lk == 43129          // 'element' 'before'
       || this.lk == 43192          // 'namespace' 'before'
       || this.lk == 43224          // 'processing-instruction' 'before'
       || this.lk == 45138          // 'attribute' 'case'
       || this.lk == 45177          // 'element' 'case'
       || this.lk == 45240          // 'namespace' 'case'
       || this.lk == 45272          // 'processing-instruction' 'case'
       || this.lk == 45650          // 'attribute' 'cast'
       || this.lk == 45689          // 'element' 'cast'
       || this.lk == 45752          // 'namespace' 'cast'
       || this.lk == 45784          // 'processing-instruction' 'cast'
       || this.lk == 46162          // 'attribute' 'castable'
       || this.lk == 46201          // 'element' 'castable'
       || this.lk == 46264          // 'namespace' 'castable'
       || this.lk == 46296          // 'processing-instruction' 'castable'
       || this.lk == 48210          // 'attribute' 'collation'
       || this.lk == 48249          // 'element' 'collation'
       || this.lk == 48312          // 'namespace' 'collation'
       || this.lk == 48344          // 'processing-instruction' 'collation'
       || this.lk == 53842          // 'attribute' 'count'
       || this.lk == 53881          // 'element' 'count'
       || this.lk == 53944          // 'namespace' 'count'
       || this.lk == 53976          // 'processing-instruction' 'count'
       || this.lk == 55890          // 'attribute' 'default'
       || this.lk == 55929          // 'element' 'default'
       || this.lk == 55992          // 'namespace' 'default'
       || this.lk == 56024          // 'processing-instruction' 'default'
       || this.lk == 57938          // 'attribute' 'descending'
       || this.lk == 57977          // 'element' 'descending'
       || this.lk == 58040          // 'namespace' 'descending'
       || this.lk == 58072          // 'processing-instruction' 'descending'
       || this.lk == 60498          // 'attribute' 'div'
       || this.lk == 60537          // 'element' 'div'
       || this.lk == 60600          // 'namespace' 'div'
       || this.lk == 60632          // 'processing-instruction' 'div'
       || this.lk == 62546          // 'attribute' 'else'
       || this.lk == 62585          // 'element' 'else'
       || this.lk == 62648          // 'namespace' 'else'
       || this.lk == 62680          // 'processing-instruction' 'else'
       || this.lk == 63058          // 'attribute' 'empty'
       || this.lk == 63097          // 'element' 'empty'
       || this.lk == 63160          // 'namespace' 'empty'
       || this.lk == 63192          // 'processing-instruction' 'empty'
       || this.lk == 64594          // 'attribute' 'end'
       || this.lk == 64633          // 'element' 'end'
       || this.lk == 64696          // 'namespace' 'end'
       || this.lk == 64728          // 'processing-instruction' 'end'
       || this.lk == 65618          // 'attribute' 'eq'
       || this.lk == 65657          // 'element' 'eq'
       || this.lk == 65720          // 'namespace' 'eq'
       || this.lk == 65752          // 'processing-instruction' 'eq'
       || this.lk == 67154          // 'attribute' 'except'
       || this.lk == 67193          // 'element' 'except'
       || this.lk == 67256          // 'namespace' 'except'
       || this.lk == 67288          // 'processing-instruction' 'except'
       || this.lk == 70226          // 'attribute' 'for'
       || this.lk == 70265          // 'element' 'for'
       || this.lk == 70328          // 'namespace' 'for'
       || this.lk == 70360          // 'processing-instruction' 'for'
       || this.lk == 74834          // 'attribute' 'ge'
       || this.lk == 74873          // 'element' 'ge'
       || this.lk == 74936          // 'namespace' 'ge'
       || this.lk == 74968          // 'processing-instruction' 'ge'
       || this.lk == 75858          // 'attribute' 'group'
       || this.lk == 75897          // 'element' 'group'
       || this.lk == 75960          // 'namespace' 'group'
       || this.lk == 75992          // 'processing-instruction' 'group'
       || this.lk == 76882          // 'attribute' 'gt'
       || this.lk == 76921          // 'element' 'gt'
       || this.lk == 76984          // 'namespace' 'gt'
       || this.lk == 77016          // 'processing-instruction' 'gt'
       || this.lk == 77394          // 'attribute' 'idiv'
       || this.lk == 77433          // 'element' 'idiv'
       || this.lk == 77496          // 'namespace' 'idiv'
       || this.lk == 77528          // 'processing-instruction' 'idiv'
       || this.lk == 82002          // 'attribute' 'instance'
       || this.lk == 82041          // 'element' 'instance'
       || this.lk == 82104          // 'namespace' 'instance'
       || this.lk == 82136          // 'processing-instruction' 'instance'
       || this.lk == 83026          // 'attribute' 'intersect'
       || this.lk == 83065          // 'element' 'intersect'
       || this.lk == 83128          // 'namespace' 'intersect'
       || this.lk == 83160          // 'processing-instruction' 'intersect'
       || this.lk == 83538          // 'attribute' 'into'
       || this.lk == 83577          // 'element' 'into'
       || this.lk == 83640          // 'namespace' 'into'
       || this.lk == 83672          // 'processing-instruction' 'into'
       || this.lk == 84050          // 'attribute' 'is'
       || this.lk == 84089          // 'element' 'is'
       || this.lk == 84152          // 'namespace' 'is'
       || this.lk == 84184          // 'processing-instruction' 'is'
       || this.lk == 88146          // 'attribute' 'le'
       || this.lk == 88185          // 'element' 'le'
       || this.lk == 88248          // 'namespace' 'le'
       || this.lk == 88280          // 'processing-instruction' 'le'
       || this.lk == 89170          // 'attribute' 'let'
       || this.lk == 89209          // 'element' 'let'
       || this.lk == 89272          // 'namespace' 'let'
       || this.lk == 89304          // 'processing-instruction' 'let'
       || this.lk == 91218          // 'attribute' 'lt'
       || this.lk == 91257          // 'element' 'lt'
       || this.lk == 91320          // 'namespace' 'lt'
       || this.lk == 91352          // 'processing-instruction' 'lt'
       || this.lk == 92242          // 'attribute' 'mod'
       || this.lk == 92281          // 'element' 'mod'
       || this.lk == 92344          // 'namespace' 'mod'
       || this.lk == 92376          // 'processing-instruction' 'mod'
       || this.lk == 92754          // 'attribute' 'modify'
       || this.lk == 92793          // 'element' 'modify'
       || this.lk == 92856          // 'namespace' 'modify'
       || this.lk == 92888          // 'processing-instruction' 'modify'
       || this.lk == 95314          // 'attribute' 'ne'
       || this.lk == 95353          // 'element' 'ne'
       || this.lk == 95416          // 'namespace' 'ne'
       || this.lk == 95448          // 'processing-instruction' 'ne'
       || this.lk == 101458         // 'attribute' 'only'
       || this.lk == 101497         // 'element' 'only'
       || this.lk == 101560         // 'namespace' 'only'
       || this.lk == 101592         // 'processing-instruction' 'only'
       || this.lk == 102482         // 'attribute' 'or'
       || this.lk == 102521         // 'element' 'or'
       || this.lk == 102584         // 'namespace' 'or'
       || this.lk == 102616         // 'processing-instruction' 'or'
       || this.lk == 102994         // 'attribute' 'order'
       || this.lk == 103033         // 'element' 'order'
       || this.lk == 103096         // 'namespace' 'order'
       || this.lk == 103128         // 'processing-instruction' 'order'
       || this.lk == 112722         // 'attribute' 'return'
       || this.lk == 112761         // 'element' 'return'
       || this.lk == 112824         // 'namespace' 'return'
       || this.lk == 112856         // 'processing-instruction' 'return'
       || this.lk == 114770         // 'attribute' 'satisfies'
       || this.lk == 114809         // 'element' 'satisfies'
       || this.lk == 114872         // 'namespace' 'satisfies'
       || this.lk == 114904         // 'processing-instruction' 'satisfies'
       || this.lk == 120914         // 'attribute' 'stable'
       || this.lk == 120953         // 'element' 'stable'
       || this.lk == 121016         // 'namespace' 'stable'
       || this.lk == 121048         // 'processing-instruction' 'stable'
       || this.lk == 121426         // 'attribute' 'start'
       || this.lk == 121465         // 'element' 'start'
       || this.lk == 121528         // 'namespace' 'start'
       || this.lk == 121560         // 'processing-instruction' 'start'
       || this.lk == 127058         // 'attribute' 'to'
       || this.lk == 127097         // 'element' 'to'
       || this.lk == 127160         // 'namespace' 'to'
       || this.lk == 127192         // 'processing-instruction' 'to'
       || this.lk == 127570         // 'attribute' 'treat'
       || this.lk == 127609         // 'element' 'treat'
       || this.lk == 127672         // 'namespace' 'treat'
       || this.lk == 127704         // 'processing-instruction' 'treat'
       || this.lk == 130130         // 'attribute' 'union'
       || this.lk == 130169         // 'element' 'union'
       || this.lk == 130232         // 'namespace' 'union'
       || this.lk == 130264         // 'processing-instruction' 'union'
       || this.lk == 136274         // 'attribute' 'where'
       || this.lk == 136313         // 'element' 'where'
       || this.lk == 136376         // 'namespace' 'where'
       || this.lk == 136408         // 'processing-instruction' 'where'
       || this.lk == 138322         // 'attribute' 'with'
       || this.lk == 138361         // 'element' 'with'
       || this.lk == 138424         // 'namespace' 'with'
       || this.lk == 138456)        // 'processing-instruction' 'with'
      {
        this.lk = this.memoized(4, this.e0);
        if (this.lk == 0)
        {
          var b0A = this.b0; var e0A = this.e0; var l1A = this.l1;
          var b1A = this.b1; var e1A = this.e1; var l2A = this.l2;
          var b2A = this.b2; var e2A = this.e2;
          try
          {
            this.try_PostfixExpr();
            this.lk = -1;
          }
          catch (p1A)
          {
            this.lk = -2;
          }
          this.b0 = b0A; this.e0 = e0A; this.l1 = l1A; if (this.l1 == 0) {this.end = e0A;} else {
          this.b1 = b1A; this.e1 = e1A; this.l2 = l2A; if (this.l2 == 0) {this.end = e1A;} else {
          this.b2 = b2A; this.e2 = e2A; this.end = e2A; }}
          this.memoize(4, this.e0, this.lk);
        }
      }
      switch (this.lk)
      {
      case -1:
      case 8:                       // IntegerLiteral
      case 9:                       // DecimalLiteral
      case 10:                      // DoubleLiteral
      case 11:                      // StringLiteral
      case 31:                      // '$'
      case 32:                      // '%'
      case 34:                      // '('
      case 44:                      // '.'
      case 54:                      // '<'
      case 55:                      // '<!--'
      case 59:                      // '<?'
      case 68:                      // '['
      case 276:                     // '{'
      case 278:                     // '{|'
      case 3154:                    // 'attribute' EQName^Token
      case 3193:                    // 'element' EQName^Token
      case 9912:                    // 'namespace' NCName^Token
      case 9944:                    // 'processing-instruction' NCName^Token
      case 14854:                   // EQName^Token '#'
      case 14918:                   // 'after' '#'
      case 14920:                   // 'allowing' '#'
      case 14921:                   // 'ancestor' '#'
      case 14922:                   // 'ancestor-or-self' '#'
      case 14923:                   // 'and' '#'
      case 14925:                   // 'append' '#'
      case 14926:                   // 'array' '#'
      case 14927:                   // 'as' '#'
      case 14928:                   // 'ascending' '#'
      case 14929:                   // 'at' '#'
      case 14930:                   // 'attribute' '#'
      case 14931:                   // 'base-uri' '#'
      case 14932:                   // 'before' '#'
      case 14933:                   // 'boundary-space' '#'
      case 14934:                   // 'break' '#'
      case 14936:                   // 'case' '#'
      case 14937:                   // 'cast' '#'
      case 14938:                   // 'castable' '#'
      case 14939:                   // 'catch' '#'
      case 14941:                   // 'child' '#'
      case 14942:                   // 'collation' '#'
      case 14944:                   // 'comment' '#'
      case 14945:                   // 'constraint' '#'
      case 14946:                   // 'construction' '#'
      case 14949:                   // 'context' '#'
      case 14950:                   // 'continue' '#'
      case 14951:                   // 'copy' '#'
      case 14952:                   // 'copy-namespaces' '#'
      case 14953:                   // 'count' '#'
      case 14954:                   // 'decimal-format' '#'
      case 14956:                   // 'declare' '#'
      case 14957:                   // 'default' '#'
      case 14958:                   // 'delete' '#'
      case 14959:                   // 'descendant' '#'
      case 14960:                   // 'descendant-or-self' '#'
      case 14961:                   // 'descending' '#'
      case 14966:                   // 'div' '#'
      case 14967:                   // 'document' '#'
      case 14968:                   // 'document-node' '#'
      case 14969:                   // 'element' '#'
      case 14970:                   // 'else' '#'
      case 14971:                   // 'empty' '#'
      case 14972:                   // 'empty-sequence' '#'
      case 14973:                   // 'encoding' '#'
      case 14974:                   // 'end' '#'
      case 14976:                   // 'eq' '#'
      case 14977:                   // 'every' '#'
      case 14979:                   // 'except' '#'
      case 14980:                   // 'exit' '#'
      case 14981:                   // 'external' '#'
      case 14982:                   // 'first' '#'
      case 14983:                   // 'following' '#'
      case 14984:                   // 'following-sibling' '#'
      case 14985:                   // 'for' '#'
      case 14989:                   // 'ft-option' '#'
      case 14993:                   // 'function' '#'
      case 14994:                   // 'ge' '#'
      case 14996:                   // 'group' '#'
      case 14998:                   // 'gt' '#'
      case 14999:                   // 'idiv' '#'
      case 15000:                   // 'if' '#'
      case 15001:                   // 'import' '#'
      case 15002:                   // 'in' '#'
      case 15003:                   // 'index' '#'
      case 15007:                   // 'insert' '#'
      case 15008:                   // 'instance' '#'
      case 15009:                   // 'integrity' '#'
      case 15010:                   // 'intersect' '#'
      case 15011:                   // 'into' '#'
      case 15012:                   // 'is' '#'
      case 15013:                   // 'item' '#'
      case 15014:                   // 'json' '#'
      case 15015:                   // 'json-item' '#'
      case 15018:                   // 'last' '#'
      case 15019:                   // 'lax' '#'
      case 15020:                   // 'le' '#'
      case 15022:                   // 'let' '#'
      case 15024:                   // 'loop' '#'
      case 15026:                   // 'lt' '#'
      case 15028:                   // 'mod' '#'
      case 15029:                   // 'modify' '#'
      case 15030:                   // 'module' '#'
      case 15032:                   // 'namespace' '#'
      case 15033:                   // 'namespace-node' '#'
      case 15034:                   // 'ne' '#'
      case 15039:                   // 'node' '#'
      case 15040:                   // 'nodes' '#'
      case 15042:                   // 'object' '#'
      case 15046:                   // 'only' '#'
      case 15047:                   // 'option' '#'
      case 15048:                   // 'or' '#'
      case 15049:                   // 'order' '#'
      case 15050:                   // 'ordered' '#'
      case 15051:                   // 'ordering' '#'
      case 15054:                   // 'parent' '#'
      case 15060:                   // 'preceding' '#'
      case 15061:                   // 'preceding-sibling' '#'
      case 15064:                   // 'processing-instruction' '#'
      case 15066:                   // 'rename' '#'
      case 15067:                   // 'replace' '#'
      case 15068:                   // 'return' '#'
      case 15069:                   // 'returning' '#'
      case 15070:                   // 'revalidation' '#'
      case 15072:                   // 'satisfies' '#'
      case 15073:                   // 'schema' '#'
      case 15074:                   // 'schema-attribute' '#'
      case 15075:                   // 'schema-element' '#'
      case 15076:                   // 'score' '#'
      case 15077:                   // 'self' '#'
      case 15082:                   // 'sliding' '#'
      case 15083:                   // 'some' '#'
      case 15084:                   // 'stable' '#'
      case 15085:                   // 'start' '#'
      case 15088:                   // 'strict' '#'
      case 15090:                   // 'structured-item' '#'
      case 15091:                   // 'switch' '#'
      case 15092:                   // 'text' '#'
      case 15096:                   // 'to' '#'
      case 15097:                   // 'treat' '#'
      case 15098:                   // 'try' '#'
      case 15099:                   // 'tumbling' '#'
      case 15100:                   // 'type' '#'
      case 15101:                   // 'typeswitch' '#'
      case 15102:                   // 'union' '#'
      case 15104:                   // 'unordered' '#'
      case 15105:                   // 'updating' '#'
      case 15108:                   // 'validate' '#'
      case 15109:                   // 'value' '#'
      case 15110:                   // 'variable' '#'
      case 15111:                   // 'version' '#'
      case 15114:                   // 'where' '#'
      case 15115:                   // 'while' '#'
      case 15118:                   // 'with' '#'
      case 15122:                   // 'xquery' '#'
      case 17414:                   // EQName^Token '('
      case 17478:                   // 'after' '('
      case 17480:                   // 'allowing' '('
      case 17481:                   // 'ancestor' '('
      case 17482:                   // 'ancestor-or-self' '('
      case 17483:                   // 'and' '('
      case 17485:                   // 'append' '('
      case 17487:                   // 'as' '('
      case 17488:                   // 'ascending' '('
      case 17489:                   // 'at' '('
      case 17491:                   // 'base-uri' '('
      case 17492:                   // 'before' '('
      case 17493:                   // 'boundary-space' '('
      case 17494:                   // 'break' '('
      case 17496:                   // 'case' '('
      case 17497:                   // 'cast' '('
      case 17498:                   // 'castable' '('
      case 17499:                   // 'catch' '('
      case 17501:                   // 'child' '('
      case 17502:                   // 'collation' '('
      case 17505:                   // 'constraint' '('
      case 17506:                   // 'construction' '('
      case 17509:                   // 'context' '('
      case 17510:                   // 'continue' '('
      case 17511:                   // 'copy' '('
      case 17512:                   // 'copy-namespaces' '('
      case 17513:                   // 'count' '('
      case 17514:                   // 'decimal-format' '('
      case 17516:                   // 'declare' '('
      case 17517:                   // 'default' '('
      case 17518:                   // 'delete' '('
      case 17519:                   // 'descendant' '('
      case 17520:                   // 'descendant-or-self' '('
      case 17521:                   // 'descending' '('
      case 17526:                   // 'div' '('
      case 17527:                   // 'document' '('
      case 17530:                   // 'else' '('
      case 17531:                   // 'empty' '('
      case 17533:                   // 'encoding' '('
      case 17534:                   // 'end' '('
      case 17536:                   // 'eq' '('
      case 17537:                   // 'every' '('
      case 17539:                   // 'except' '('
      case 17540:                   // 'exit' '('
      case 17541:                   // 'external' '('
      case 17542:                   // 'first' '('
      case 17543:                   // 'following' '('
      case 17544:                   // 'following-sibling' '('
      case 17545:                   // 'for' '('
      case 17549:                   // 'ft-option' '('
      case 17553:                   // 'function' '('
      case 17554:                   // 'ge' '('
      case 17556:                   // 'group' '('
      case 17558:                   // 'gt' '('
      case 17559:                   // 'idiv' '('
      case 17561:                   // 'import' '('
      case 17562:                   // 'in' '('
      case 17563:                   // 'index' '('
      case 17567:                   // 'insert' '('
      case 17568:                   // 'instance' '('
      case 17569:                   // 'integrity' '('
      case 17570:                   // 'intersect' '('
      case 17571:                   // 'into' '('
      case 17572:                   // 'is' '('
      case 17574:                   // 'json' '('
      case 17578:                   // 'last' '('
      case 17579:                   // 'lax' '('
      case 17580:                   // 'le' '('
      case 17582:                   // 'let' '('
      case 17584:                   // 'loop' '('
      case 17586:                   // 'lt' '('
      case 17588:                   // 'mod' '('
      case 17589:                   // 'modify' '('
      case 17590:                   // 'module' '('
      case 17592:                   // 'namespace' '('
      case 17594:                   // 'ne' '('
      case 17600:                   // 'nodes' '('
      case 17602:                   // 'object' '('
      case 17606:                   // 'only' '('
      case 17607:                   // 'option' '('
      case 17608:                   // 'or' '('
      case 17609:                   // 'order' '('
      case 17610:                   // 'ordered' '('
      case 17611:                   // 'ordering' '('
      case 17614:                   // 'parent' '('
      case 17620:                   // 'preceding' '('
      case 17621:                   // 'preceding-sibling' '('
      case 17626:                   // 'rename' '('
      case 17627:                   // 'replace' '('
      case 17628:                   // 'return' '('
      case 17629:                   // 'returning' '('
      case 17630:                   // 'revalidation' '('
      case 17632:                   // 'satisfies' '('
      case 17633:                   // 'schema' '('
      case 17636:                   // 'score' '('
      case 17637:                   // 'self' '('
      case 17642:                   // 'sliding' '('
      case 17643:                   // 'some' '('
      case 17644:                   // 'stable' '('
      case 17645:                   // 'start' '('
      case 17648:                   // 'strict' '('
      case 17656:                   // 'to' '('
      case 17657:                   // 'treat' '('
      case 17658:                   // 'try' '('
      case 17659:                   // 'tumbling' '('
      case 17660:                   // 'type' '('
      case 17662:                   // 'union' '('
      case 17664:                   // 'unordered' '('
      case 17665:                   // 'updating' '('
      case 17668:                   // 'validate' '('
      case 17669:                   // 'value' '('
      case 17670:                   // 'variable' '('
      case 17671:                   // 'version' '('
      case 17674:                   // 'where' '('
      case 17675:                   // 'while' '('
      case 17678:                   // 'with' '('
      case 17682:                   // 'xquery' '('
      case 36946:                   // 'attribute' 'allowing'
      case 36985:                   // 'element' 'allowing'
      case 37048:                   // 'namespace' 'allowing'
      case 37080:                   // 'processing-instruction' 'allowing'
      case 37458:                   // 'attribute' 'ancestor'
      case 37497:                   // 'element' 'ancestor'
      case 37560:                   // 'namespace' 'ancestor'
      case 37592:                   // 'processing-instruction' 'ancestor'
      case 37970:                   // 'attribute' 'ancestor-or-self'
      case 38009:                   // 'element' 'ancestor-or-self'
      case 38072:                   // 'namespace' 'ancestor-or-self'
      case 38104:                   // 'processing-instruction' 'ancestor-or-self'
      case 39506:                   // 'attribute' 'append'
      case 39545:                   // 'element' 'append'
      case 39608:                   // 'namespace' 'append'
      case 39640:                   // 'processing-instruction' 'append'
      case 40018:                   // 'attribute' 'array'
      case 40057:                   // 'element' 'array'
      case 42066:                   // 'attribute' 'attribute'
      case 42105:                   // 'element' 'attribute'
      case 42168:                   // 'namespace' 'attribute'
      case 42200:                   // 'processing-instruction' 'attribute'
      case 42578:                   // 'attribute' 'base-uri'
      case 42617:                   // 'element' 'base-uri'
      case 42680:                   // 'namespace' 'base-uri'
      case 42712:                   // 'processing-instruction' 'base-uri'
      case 43602:                   // 'attribute' 'boundary-space'
      case 43641:                   // 'element' 'boundary-space'
      case 43704:                   // 'namespace' 'boundary-space'
      case 43736:                   // 'processing-instruction' 'boundary-space'
      case 44114:                   // 'attribute' 'break'
      case 44153:                   // 'element' 'break'
      case 44216:                   // 'namespace' 'break'
      case 44248:                   // 'processing-instruction' 'break'
      case 46674:                   // 'attribute' 'catch'
      case 46713:                   // 'element' 'catch'
      case 46776:                   // 'namespace' 'catch'
      case 46808:                   // 'processing-instruction' 'catch'
      case 47698:                   // 'attribute' 'child'
      case 47737:                   // 'element' 'child'
      case 47800:                   // 'namespace' 'child'
      case 47832:                   // 'processing-instruction' 'child'
      case 49234:                   // 'attribute' 'comment'
      case 49273:                   // 'element' 'comment'
      case 49336:                   // 'namespace' 'comment'
      case 49368:                   // 'processing-instruction' 'comment'
      case 49746:                   // 'attribute' 'constraint'
      case 49785:                   // 'element' 'constraint'
      case 49848:                   // 'namespace' 'constraint'
      case 49880:                   // 'processing-instruction' 'constraint'
      case 50258:                   // 'attribute' 'construction'
      case 50297:                   // 'element' 'construction'
      case 50360:                   // 'namespace' 'construction'
      case 50392:                   // 'processing-instruction' 'construction'
      case 51794:                   // 'attribute' 'context'
      case 51833:                   // 'element' 'context'
      case 51896:                   // 'namespace' 'context'
      case 51928:                   // 'processing-instruction' 'context'
      case 52306:                   // 'attribute' 'continue'
      case 52345:                   // 'element' 'continue'
      case 52408:                   // 'namespace' 'continue'
      case 52440:                   // 'processing-instruction' 'continue'
      case 52818:                   // 'attribute' 'copy'
      case 52857:                   // 'element' 'copy'
      case 52920:                   // 'namespace' 'copy'
      case 52952:                   // 'processing-instruction' 'copy'
      case 53330:                   // 'attribute' 'copy-namespaces'
      case 53369:                   // 'element' 'copy-namespaces'
      case 53432:                   // 'namespace' 'copy-namespaces'
      case 53464:                   // 'processing-instruction' 'copy-namespaces'
      case 54354:                   // 'attribute' 'decimal-format'
      case 54393:                   // 'element' 'decimal-format'
      case 54456:                   // 'namespace' 'decimal-format'
      case 54488:                   // 'processing-instruction' 'decimal-format'
      case 55378:                   // 'attribute' 'declare'
      case 55417:                   // 'element' 'declare'
      case 55480:                   // 'namespace' 'declare'
      case 55512:                   // 'processing-instruction' 'declare'
      case 56402:                   // 'attribute' 'delete'
      case 56441:                   // 'element' 'delete'
      case 56504:                   // 'namespace' 'delete'
      case 56536:                   // 'processing-instruction' 'delete'
      case 56914:                   // 'attribute' 'descendant'
      case 56953:                   // 'element' 'descendant'
      case 57016:                   // 'namespace' 'descendant'
      case 57048:                   // 'processing-instruction' 'descendant'
      case 57426:                   // 'attribute' 'descendant-or-self'
      case 57465:                   // 'element' 'descendant-or-self'
      case 57528:                   // 'namespace' 'descendant-or-self'
      case 57560:                   // 'processing-instruction' 'descendant-or-self'
      case 61010:                   // 'attribute' 'document'
      case 61049:                   // 'element' 'document'
      case 61112:                   // 'namespace' 'document'
      case 61144:                   // 'processing-instruction' 'document'
      case 61522:                   // 'attribute' 'document-node'
      case 61561:                   // 'element' 'document-node'
      case 61624:                   // 'namespace' 'document-node'
      case 61656:                   // 'processing-instruction' 'document-node'
      case 62034:                   // 'attribute' 'element'
      case 62073:                   // 'element' 'element'
      case 62136:                   // 'namespace' 'element'
      case 62168:                   // 'processing-instruction' 'element'
      case 63570:                   // 'attribute' 'empty-sequence'
      case 63609:                   // 'element' 'empty-sequence'
      case 63672:                   // 'namespace' 'empty-sequence'
      case 63704:                   // 'processing-instruction' 'empty-sequence'
      case 64082:                   // 'attribute' 'encoding'
      case 64121:                   // 'element' 'encoding'
      case 64184:                   // 'namespace' 'encoding'
      case 64216:                   // 'processing-instruction' 'encoding'
      case 66130:                   // 'attribute' 'every'
      case 66169:                   // 'element' 'every'
      case 66232:                   // 'namespace' 'every'
      case 66264:                   // 'processing-instruction' 'every'
      case 67666:                   // 'attribute' 'exit'
      case 67705:                   // 'element' 'exit'
      case 67768:                   // 'namespace' 'exit'
      case 67800:                   // 'processing-instruction' 'exit'
      case 68178:                   // 'attribute' 'external'
      case 68217:                   // 'element' 'external'
      case 68280:                   // 'namespace' 'external'
      case 68312:                   // 'processing-instruction' 'external'
      case 68690:                   // 'attribute' 'first'
      case 68729:                   // 'element' 'first'
      case 68792:                   // 'namespace' 'first'
      case 68824:                   // 'processing-instruction' 'first'
      case 69202:                   // 'attribute' 'following'
      case 69241:                   // 'element' 'following'
      case 69304:                   // 'namespace' 'following'
      case 69336:                   // 'processing-instruction' 'following'
      case 69714:                   // 'attribute' 'following-sibling'
      case 69753:                   // 'element' 'following-sibling'
      case 69816:                   // 'namespace' 'following-sibling'
      case 69848:                   // 'processing-instruction' 'following-sibling'
      case 72274:                   // 'attribute' 'ft-option'
      case 72313:                   // 'element' 'ft-option'
      case 72376:                   // 'namespace' 'ft-option'
      case 72408:                   // 'processing-instruction' 'ft-option'
      case 74322:                   // 'attribute' 'function'
      case 74361:                   // 'element' 'function'
      case 74424:                   // 'namespace' 'function'
      case 74456:                   // 'processing-instruction' 'function'
      case 77906:                   // 'attribute' 'if'
      case 77945:                   // 'element' 'if'
      case 78008:                   // 'namespace' 'if'
      case 78040:                   // 'processing-instruction' 'if'
      case 78418:                   // 'attribute' 'import'
      case 78457:                   // 'element' 'import'
      case 78520:                   // 'namespace' 'import'
      case 78552:                   // 'processing-instruction' 'import'
      case 78930:                   // 'attribute' 'in'
      case 78969:                   // 'element' 'in'
      case 79032:                   // 'namespace' 'in'
      case 79064:                   // 'processing-instruction' 'in'
      case 79442:                   // 'attribute' 'index'
      case 79481:                   // 'element' 'index'
      case 79544:                   // 'namespace' 'index'
      case 79576:                   // 'processing-instruction' 'index'
      case 81490:                   // 'attribute' 'insert'
      case 81529:                   // 'element' 'insert'
      case 81592:                   // 'namespace' 'insert'
      case 81624:                   // 'processing-instruction' 'insert'
      case 82514:                   // 'attribute' 'integrity'
      case 82553:                   // 'element' 'integrity'
      case 82616:                   // 'namespace' 'integrity'
      case 82648:                   // 'processing-instruction' 'integrity'
      case 84562:                   // 'attribute' 'item'
      case 84601:                   // 'element' 'item'
      case 84664:                   // 'namespace' 'item'
      case 84696:                   // 'processing-instruction' 'item'
      case 85074:                   // 'attribute' 'json'
      case 85113:                   // 'element' 'json'
      case 85176:                   // 'namespace' 'json'
      case 85208:                   // 'processing-instruction' 'json'
      case 85586:                   // 'attribute' 'json-item'
      case 85625:                   // 'element' 'json-item'
      case 87122:                   // 'attribute' 'last'
      case 87161:                   // 'element' 'last'
      case 87224:                   // 'namespace' 'last'
      case 87256:                   // 'processing-instruction' 'last'
      case 87634:                   // 'attribute' 'lax'
      case 87673:                   // 'element' 'lax'
      case 87736:                   // 'namespace' 'lax'
      case 87768:                   // 'processing-instruction' 'lax'
      case 90194:                   // 'attribute' 'loop'
      case 90233:                   // 'element' 'loop'
      case 90296:                   // 'namespace' 'loop'
      case 90328:                   // 'processing-instruction' 'loop'
      case 93266:                   // 'attribute' 'module'
      case 93305:                   // 'element' 'module'
      case 93368:                   // 'namespace' 'module'
      case 93400:                   // 'processing-instruction' 'module'
      case 94290:                   // 'attribute' 'namespace'
      case 94329:                   // 'element' 'namespace'
      case 94392:                   // 'namespace' 'namespace'
      case 94424:                   // 'processing-instruction' 'namespace'
      case 94802:                   // 'attribute' 'namespace-node'
      case 94841:                   // 'element' 'namespace-node'
      case 94904:                   // 'namespace' 'namespace-node'
      case 94936:                   // 'processing-instruction' 'namespace-node'
      case 97874:                   // 'attribute' 'node'
      case 97913:                   // 'element' 'node'
      case 97976:                   // 'namespace' 'node'
      case 98008:                   // 'processing-instruction' 'node'
      case 98386:                   // 'attribute' 'nodes'
      case 98425:                   // 'element' 'nodes'
      case 98488:                   // 'namespace' 'nodes'
      case 98520:                   // 'processing-instruction' 'nodes'
      case 99410:                   // 'attribute' 'object'
      case 99449:                   // 'element' 'object'
      case 99512:                   // 'namespace' 'object'
      case 99544:                   // 'processing-instruction' 'object'
      case 101970:                  // 'attribute' 'option'
      case 102009:                  // 'element' 'option'
      case 102072:                  // 'namespace' 'option'
      case 102104:                  // 'processing-instruction' 'option'
      case 103506:                  // 'attribute' 'ordered'
      case 103545:                  // 'element' 'ordered'
      case 103608:                  // 'namespace' 'ordered'
      case 103640:                  // 'processing-instruction' 'ordered'
      case 104018:                  // 'attribute' 'ordering'
      case 104057:                  // 'element' 'ordering'
      case 104120:                  // 'namespace' 'ordering'
      case 104152:                  // 'processing-instruction' 'ordering'
      case 105554:                  // 'attribute' 'parent'
      case 105593:                  // 'element' 'parent'
      case 105656:                  // 'namespace' 'parent'
      case 105688:                  // 'processing-instruction' 'parent'
      case 108626:                  // 'attribute' 'preceding'
      case 108665:                  // 'element' 'preceding'
      case 108728:                  // 'namespace' 'preceding'
      case 108760:                  // 'processing-instruction' 'preceding'
      case 109138:                  // 'attribute' 'preceding-sibling'
      case 109177:                  // 'element' 'preceding-sibling'
      case 109240:                  // 'namespace' 'preceding-sibling'
      case 109272:                  // 'processing-instruction' 'preceding-sibling'
      case 110674:                  // 'attribute' 'processing-instruction'
      case 110713:                  // 'element' 'processing-instruction'
      case 110776:                  // 'namespace' 'processing-instruction'
      case 110808:                  // 'processing-instruction' 'processing-instruction'
      case 111698:                  // 'attribute' 'rename'
      case 111737:                  // 'element' 'rename'
      case 111800:                  // 'namespace' 'rename'
      case 111832:                  // 'processing-instruction' 'rename'
      case 112210:                  // 'attribute' 'replace'
      case 112249:                  // 'element' 'replace'
      case 112312:                  // 'namespace' 'replace'
      case 112344:                  // 'processing-instruction' 'replace'
      case 113234:                  // 'attribute' 'returning'
      case 113273:                  // 'element' 'returning'
      case 113336:                  // 'namespace' 'returning'
      case 113368:                  // 'processing-instruction' 'returning'
      case 113746:                  // 'attribute' 'revalidation'
      case 113785:                  // 'element' 'revalidation'
      case 113848:                  // 'namespace' 'revalidation'
      case 113880:                  // 'processing-instruction' 'revalidation'
      case 115282:                  // 'attribute' 'schema'
      case 115321:                  // 'element' 'schema'
      case 115384:                  // 'namespace' 'schema'
      case 115416:                  // 'processing-instruction' 'schema'
      case 115794:                  // 'attribute' 'schema-attribute'
      case 115833:                  // 'element' 'schema-attribute'
      case 115896:                  // 'namespace' 'schema-attribute'
      case 115928:                  // 'processing-instruction' 'schema-attribute'
      case 116306:                  // 'attribute' 'schema-element'
      case 116345:                  // 'element' 'schema-element'
      case 116408:                  // 'namespace' 'schema-element'
      case 116440:                  // 'processing-instruction' 'schema-element'
      case 116818:                  // 'attribute' 'score'
      case 116857:                  // 'element' 'score'
      case 116920:                  // 'namespace' 'score'
      case 116952:                  // 'processing-instruction' 'score'
      case 117330:                  // 'attribute' 'self'
      case 117369:                  // 'element' 'self'
      case 117432:                  // 'namespace' 'self'
      case 117464:                  // 'processing-instruction' 'self'
      case 119890:                  // 'attribute' 'sliding'
      case 119929:                  // 'element' 'sliding'
      case 119992:                  // 'namespace' 'sliding'
      case 120024:                  // 'processing-instruction' 'sliding'
      case 120402:                  // 'attribute' 'some'
      case 120441:                  // 'element' 'some'
      case 120504:                  // 'namespace' 'some'
      case 120536:                  // 'processing-instruction' 'some'
      case 122962:                  // 'attribute' 'strict'
      case 123001:                  // 'element' 'strict'
      case 123064:                  // 'namespace' 'strict'
      case 123096:                  // 'processing-instruction' 'strict'
      case 123986:                  // 'attribute' 'structured-item'
      case 124025:                  // 'element' 'structured-item'
      case 124498:                  // 'attribute' 'switch'
      case 124537:                  // 'element' 'switch'
      case 124600:                  // 'namespace' 'switch'
      case 124632:                  // 'processing-instruction' 'switch'
      case 125010:                  // 'attribute' 'text'
      case 125049:                  // 'element' 'text'
      case 125112:                  // 'namespace' 'text'
      case 125144:                  // 'processing-instruction' 'text'
      case 128082:                  // 'attribute' 'try'
      case 128121:                  // 'element' 'try'
      case 128184:                  // 'namespace' 'try'
      case 128216:                  // 'processing-instruction' 'try'
      case 128594:                  // 'attribute' 'tumbling'
      case 128633:                  // 'element' 'tumbling'
      case 128696:                  // 'namespace' 'tumbling'
      case 128728:                  // 'processing-instruction' 'tumbling'
      case 129106:                  // 'attribute' 'type'
      case 129145:                  // 'element' 'type'
      case 129208:                  // 'namespace' 'type'
      case 129240:                  // 'processing-instruction' 'type'
      case 129618:                  // 'attribute' 'typeswitch'
      case 129657:                  // 'element' 'typeswitch'
      case 129720:                  // 'namespace' 'typeswitch'
      case 129752:                  // 'processing-instruction' 'typeswitch'
      case 131154:                  // 'attribute' 'unordered'
      case 131193:                  // 'element' 'unordered'
      case 131256:                  // 'namespace' 'unordered'
      case 131288:                  // 'processing-instruction' 'unordered'
      case 131666:                  // 'attribute' 'updating'
      case 131705:                  // 'element' 'updating'
      case 131768:                  // 'namespace' 'updating'
      case 131800:                  // 'processing-instruction' 'updating'
      case 133202:                  // 'attribute' 'validate'
      case 133241:                  // 'element' 'validate'
      case 133304:                  // 'namespace' 'validate'
      case 133336:                  // 'processing-instruction' 'validate'
      case 133714:                  // 'attribute' 'value'
      case 133753:                  // 'element' 'value'
      case 133816:                  // 'namespace' 'value'
      case 133848:                  // 'processing-instruction' 'value'
      case 134226:                  // 'attribute' 'variable'
      case 134265:                  // 'element' 'variable'
      case 134328:                  // 'namespace' 'variable'
      case 134360:                  // 'processing-instruction' 'variable'
      case 134738:                  // 'attribute' 'version'
      case 134777:                  // 'element' 'version'
      case 134840:                  // 'namespace' 'version'
      case 134872:                  // 'processing-instruction' 'version'
      case 136786:                  // 'attribute' 'while'
      case 136825:                  // 'element' 'while'
      case 136888:                  // 'namespace' 'while'
      case 136920:                  // 'processing-instruction' 'while'
      case 140370:                  // 'attribute' 'xquery'
      case 140409:                  // 'element' 'xquery'
      case 140472:                  // 'namespace' 'xquery'
      case 140504:                  // 'processing-instruction' 'xquery'
      case 141394:                  // 'attribute' '{'
      case 141408:                  // 'comment' '{'
      case 141431:                  // 'document' '{'
      case 141433:                  // 'element' '{'
      case 141496:                  // 'namespace' '{'
      case 141514:                  // 'ordered' '{'
      case 141528:                  // 'processing-instruction' '{'
      case 141556:                  // 'text' '{'
      case 141568:                  // 'unordered' '{'
        this.parse_PostfixExpr();
        break;
      default:
        this.parse_AxisStep();
      }
      this.eventHandler.endNonterminal("StepExpr", this.e0);
    }

    private try_StepExpr()
    {
      switch (this.l1)
      {
      case 82:                      // 'attribute'
        this.lookahead2W(284);      // EQName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' |
                                    // ',' | '-' | '/' | '//' | ':' | '::' | ';' | '<' | '<<' | '<=' | '=' | '>' |
                                    // '>=' | '>>' | '[' | ']' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'by' |
                                    // 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'contains' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'paragraphs' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' |
                                    // 'sentences' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'times' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'words' | 'xquery' | '{' | '|' | '||' | '|}' | '}'
        break;
      case 121:                     // 'element'
        this.lookahead2W(282);      // EQName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' |
                                    // ',' | '-' | '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' |
                                    // '>>' | '[' | ']' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'contains' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'paragraphs' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' |
                                    // 'sentences' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'times' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'words' | 'xquery' | '{' | '|' | '||' | '|}' | '}'
        break;
      case 184:                     // 'namespace'
      case 216:                     // 'processing-instruction'
        this.lookahead2W(281);      // NCName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' |
                                    // ',' | '-' | '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' |
                                    // '>>' | '[' | ']' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'by' | 'case' | 'cast' | 'castable' |
                                    // 'catch' | 'child' | 'collation' | 'comment' | 'constraint' | 'construction' |
                                    // 'contains' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'last' | 'lax' | 'le' | 'let' |
                                    // 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'paragraphs' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sentences' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' |
                                    // 'times' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'words' | 'xquery' | '{' | '|' | '||' | '|}' | '}'
        break;
      case 96:                      // 'comment'
      case 119:                     // 'document'
      case 202:                     // 'ordered'
      case 244:                     // 'text'
      case 256:                     // 'unordered'
        this.lookahead2W(246);      // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '{' | '|' | '||' | '|}' | '}'
        break;
      case 78:                      // 'array'
      case 124:                     // 'empty-sequence'
      case 152:                     // 'if'
      case 165:                     // 'item'
      case 167:                     // 'json-item'
      case 242:                     // 'structured-item'
      case 243:                     // 'switch'
      case 253:                     // 'typeswitch'
        this.lookahead2W(239);      // S^WS | EOF | '!' | '!=' | '#' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'after' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
        break;
      case 73:                      // 'ancestor'
      case 74:                      // 'ancestor-or-self'
      case 93:                      // 'child'
      case 111:                     // 'descendant'
      case 112:                     // 'descendant-or-self'
      case 135:                     // 'following'
      case 136:                     // 'following-sibling'
      case 206:                     // 'parent'
      case 212:                     // 'preceding'
      case 213:                     // 'preceding-sibling'
      case 229:                     // 'self'
        this.lookahead2W(245);      // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | '::' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' |
                                    // 'cast' | 'castable' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' | '||' |
                                    // '|}' | '}'
        break;
      case 6:                       // EQName^Token
      case 70:                      // 'after'
      case 72:                      // 'allowing'
      case 75:                      // 'and'
      case 77:                      // 'append'
      case 79:                      // 'as'
      case 80:                      // 'ascending'
      case 81:                      // 'at'
      case 83:                      // 'base-uri'
      case 84:                      // 'before'
      case 85:                      // 'boundary-space'
      case 86:                      // 'break'
      case 88:                      // 'case'
      case 89:                      // 'cast'
      case 90:                      // 'castable'
      case 91:                      // 'catch'
      case 94:                      // 'collation'
      case 97:                      // 'constraint'
      case 98:                      // 'construction'
      case 101:                     // 'context'
      case 102:                     // 'continue'
      case 103:                     // 'copy'
      case 104:                     // 'copy-namespaces'
      case 105:                     // 'count'
      case 106:                     // 'decimal-format'
      case 108:                     // 'declare'
      case 109:                     // 'default'
      case 110:                     // 'delete'
      case 113:                     // 'descending'
      case 118:                     // 'div'
      case 120:                     // 'document-node'
      case 122:                     // 'else'
      case 123:                     // 'empty'
      case 125:                     // 'encoding'
      case 126:                     // 'end'
      case 128:                     // 'eq'
      case 129:                     // 'every'
      case 131:                     // 'except'
      case 132:                     // 'exit'
      case 133:                     // 'external'
      case 134:                     // 'first'
      case 137:                     // 'for'
      case 141:                     // 'ft-option'
      case 145:                     // 'function'
      case 146:                     // 'ge'
      case 148:                     // 'group'
      case 150:                     // 'gt'
      case 151:                     // 'idiv'
      case 153:                     // 'import'
      case 154:                     // 'in'
      case 155:                     // 'index'
      case 159:                     // 'insert'
      case 160:                     // 'instance'
      case 161:                     // 'integrity'
      case 162:                     // 'intersect'
      case 163:                     // 'into'
      case 164:                     // 'is'
      case 166:                     // 'json'
      case 170:                     // 'last'
      case 171:                     // 'lax'
      case 172:                     // 'le'
      case 174:                     // 'let'
      case 176:                     // 'loop'
      case 178:                     // 'lt'
      case 180:                     // 'mod'
      case 181:                     // 'modify'
      case 182:                     // 'module'
      case 185:                     // 'namespace-node'
      case 186:                     // 'ne'
      case 191:                     // 'node'
      case 192:                     // 'nodes'
      case 194:                     // 'object'
      case 198:                     // 'only'
      case 199:                     // 'option'
      case 200:                     // 'or'
      case 201:                     // 'order'
      case 203:                     // 'ordering'
      case 218:                     // 'rename'
      case 219:                     // 'replace'
      case 220:                     // 'return'
      case 221:                     // 'returning'
      case 222:                     // 'revalidation'
      case 224:                     // 'satisfies'
      case 225:                     // 'schema'
      case 226:                     // 'schema-attribute'
      case 227:                     // 'schema-element'
      case 228:                     // 'score'
      case 234:                     // 'sliding'
      case 235:                     // 'some'
      case 236:                     // 'stable'
      case 237:                     // 'start'
      case 240:                     // 'strict'
      case 248:                     // 'to'
      case 249:                     // 'treat'
      case 250:                     // 'try'
      case 251:                     // 'tumbling'
      case 252:                     // 'type'
      case 254:                     // 'union'
      case 257:                     // 'updating'
      case 260:                     // 'validate'
      case 261:                     // 'value'
      case 262:                     // 'variable'
      case 263:                     // 'version'
      case 266:                     // 'where'
      case 267:                     // 'while'
      case 270:                     // 'with'
      case 274:                     // 'xquery'
        this.lookahead2W(243);      // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
        break;
      default:
        this.lk = this.l1;
      }
      if (this.lk == 35922          // 'attribute' 'after'
       || this.lk == 35961          // 'element' 'after'
       || this.lk == 36024          // 'namespace' 'after'
       || this.lk == 36056          // 'processing-instruction' 'after'
       || this.lk == 38482          // 'attribute' 'and'
       || this.lk == 38521          // 'element' 'and'
       || this.lk == 38584          // 'namespace' 'and'
       || this.lk == 38616          // 'processing-instruction' 'and'
       || this.lk == 40530          // 'attribute' 'as'
       || this.lk == 40569          // 'element' 'as'
       || this.lk == 40632          // 'namespace' 'as'
       || this.lk == 40664          // 'processing-instruction' 'as'
       || this.lk == 41042          // 'attribute' 'ascending'
       || this.lk == 41081          // 'element' 'ascending'
       || this.lk == 41144          // 'namespace' 'ascending'
       || this.lk == 41176          // 'processing-instruction' 'ascending'
       || this.lk == 41554          // 'attribute' 'at'
       || this.lk == 41593          // 'element' 'at'
       || this.lk == 41656          // 'namespace' 'at'
       || this.lk == 41688          // 'processing-instruction' 'at'
       || this.lk == 43090          // 'attribute' 'before'
       || this.lk == 43129          // 'element' 'before'
       || this.lk == 43192          // 'namespace' 'before'
       || this.lk == 43224          // 'processing-instruction' 'before'
       || this.lk == 45138          // 'attribute' 'case'
       || this.lk == 45177          // 'element' 'case'
       || this.lk == 45240          // 'namespace' 'case'
       || this.lk == 45272          // 'processing-instruction' 'case'
       || this.lk == 45650          // 'attribute' 'cast'
       || this.lk == 45689          // 'element' 'cast'
       || this.lk == 45752          // 'namespace' 'cast'
       || this.lk == 45784          // 'processing-instruction' 'cast'
       || this.lk == 46162          // 'attribute' 'castable'
       || this.lk == 46201          // 'element' 'castable'
       || this.lk == 46264          // 'namespace' 'castable'
       || this.lk == 46296          // 'processing-instruction' 'castable'
       || this.lk == 48210          // 'attribute' 'collation'
       || this.lk == 48249          // 'element' 'collation'
       || this.lk == 48312          // 'namespace' 'collation'
       || this.lk == 48344          // 'processing-instruction' 'collation'
       || this.lk == 53842          // 'attribute' 'count'
       || this.lk == 53881          // 'element' 'count'
       || this.lk == 53944          // 'namespace' 'count'
       || this.lk == 53976          // 'processing-instruction' 'count'
       || this.lk == 55890          // 'attribute' 'default'
       || this.lk == 55929          // 'element' 'default'
       || this.lk == 55992          // 'namespace' 'default'
       || this.lk == 56024          // 'processing-instruction' 'default'
       || this.lk == 57938          // 'attribute' 'descending'
       || this.lk == 57977          // 'element' 'descending'
       || this.lk == 58040          // 'namespace' 'descending'
       || this.lk == 58072          // 'processing-instruction' 'descending'
       || this.lk == 60498          // 'attribute' 'div'
       || this.lk == 60537          // 'element' 'div'
       || this.lk == 60600          // 'namespace' 'div'
       || this.lk == 60632          // 'processing-instruction' 'div'
       || this.lk == 62546          // 'attribute' 'else'
       || this.lk == 62585          // 'element' 'else'
       || this.lk == 62648          // 'namespace' 'else'
       || this.lk == 62680          // 'processing-instruction' 'else'
       || this.lk == 63058          // 'attribute' 'empty'
       || this.lk == 63097          // 'element' 'empty'
       || this.lk == 63160          // 'namespace' 'empty'
       || this.lk == 63192          // 'processing-instruction' 'empty'
       || this.lk == 64594          // 'attribute' 'end'
       || this.lk == 64633          // 'element' 'end'
       || this.lk == 64696          // 'namespace' 'end'
       || this.lk == 64728          // 'processing-instruction' 'end'
       || this.lk == 65618          // 'attribute' 'eq'
       || this.lk == 65657          // 'element' 'eq'
       || this.lk == 65720          // 'namespace' 'eq'
       || this.lk == 65752          // 'processing-instruction' 'eq'
       || this.lk == 67154          // 'attribute' 'except'
       || this.lk == 67193          // 'element' 'except'
       || this.lk == 67256          // 'namespace' 'except'
       || this.lk == 67288          // 'processing-instruction' 'except'
       || this.lk == 70226          // 'attribute' 'for'
       || this.lk == 70265          // 'element' 'for'
       || this.lk == 70328          // 'namespace' 'for'
       || this.lk == 70360          // 'processing-instruction' 'for'
       || this.lk == 74834          // 'attribute' 'ge'
       || this.lk == 74873          // 'element' 'ge'
       || this.lk == 74936          // 'namespace' 'ge'
       || this.lk == 74968          // 'processing-instruction' 'ge'
       || this.lk == 75858          // 'attribute' 'group'
       || this.lk == 75897          // 'element' 'group'
       || this.lk == 75960          // 'namespace' 'group'
       || this.lk == 75992          // 'processing-instruction' 'group'
       || this.lk == 76882          // 'attribute' 'gt'
       || this.lk == 76921          // 'element' 'gt'
       || this.lk == 76984          // 'namespace' 'gt'
       || this.lk == 77016          // 'processing-instruction' 'gt'
       || this.lk == 77394          // 'attribute' 'idiv'
       || this.lk == 77433          // 'element' 'idiv'
       || this.lk == 77496          // 'namespace' 'idiv'
       || this.lk == 77528          // 'processing-instruction' 'idiv'
       || this.lk == 82002          // 'attribute' 'instance'
       || this.lk == 82041          // 'element' 'instance'
       || this.lk == 82104          // 'namespace' 'instance'
       || this.lk == 82136          // 'processing-instruction' 'instance'
       || this.lk == 83026          // 'attribute' 'intersect'
       || this.lk == 83065          // 'element' 'intersect'
       || this.lk == 83128          // 'namespace' 'intersect'
       || this.lk == 83160          // 'processing-instruction' 'intersect'
       || this.lk == 83538          // 'attribute' 'into'
       || this.lk == 83577          // 'element' 'into'
       || this.lk == 83640          // 'namespace' 'into'
       || this.lk == 83672          // 'processing-instruction' 'into'
       || this.lk == 84050          // 'attribute' 'is'
       || this.lk == 84089          // 'element' 'is'
       || this.lk == 84152          // 'namespace' 'is'
       || this.lk == 84184          // 'processing-instruction' 'is'
       || this.lk == 88146          // 'attribute' 'le'
       || this.lk == 88185          // 'element' 'le'
       || this.lk == 88248          // 'namespace' 'le'
       || this.lk == 88280          // 'processing-instruction' 'le'
       || this.lk == 89170          // 'attribute' 'let'
       || this.lk == 89209          // 'element' 'let'
       || this.lk == 89272          // 'namespace' 'let'
       || this.lk == 89304          // 'processing-instruction' 'let'
       || this.lk == 91218          // 'attribute' 'lt'
       || this.lk == 91257          // 'element' 'lt'
       || this.lk == 91320          // 'namespace' 'lt'
       || this.lk == 91352          // 'processing-instruction' 'lt'
       || this.lk == 92242          // 'attribute' 'mod'
       || this.lk == 92281          // 'element' 'mod'
       || this.lk == 92344          // 'namespace' 'mod'
       || this.lk == 92376          // 'processing-instruction' 'mod'
       || this.lk == 92754          // 'attribute' 'modify'
       || this.lk == 92793          // 'element' 'modify'
       || this.lk == 92856          // 'namespace' 'modify'
       || this.lk == 92888          // 'processing-instruction' 'modify'
       || this.lk == 95314          // 'attribute' 'ne'
       || this.lk == 95353          // 'element' 'ne'
       || this.lk == 95416          // 'namespace' 'ne'
       || this.lk == 95448          // 'processing-instruction' 'ne'
       || this.lk == 101458         // 'attribute' 'only'
       || this.lk == 101497         // 'element' 'only'
       || this.lk == 101560         // 'namespace' 'only'
       || this.lk == 101592         // 'processing-instruction' 'only'
       || this.lk == 102482         // 'attribute' 'or'
       || this.lk == 102521         // 'element' 'or'
       || this.lk == 102584         // 'namespace' 'or'
       || this.lk == 102616         // 'processing-instruction' 'or'
       || this.lk == 102994         // 'attribute' 'order'
       || this.lk == 103033         // 'element' 'order'
       || this.lk == 103096         // 'namespace' 'order'
       || this.lk == 103128         // 'processing-instruction' 'order'
       || this.lk == 112722         // 'attribute' 'return'
       || this.lk == 112761         // 'element' 'return'
       || this.lk == 112824         // 'namespace' 'return'
       || this.lk == 112856         // 'processing-instruction' 'return'
       || this.lk == 114770         // 'attribute' 'satisfies'
       || this.lk == 114809         // 'element' 'satisfies'
       || this.lk == 114872         // 'namespace' 'satisfies'
       || this.lk == 114904         // 'processing-instruction' 'satisfies'
       || this.lk == 120914         // 'attribute' 'stable'
       || this.lk == 120953         // 'element' 'stable'
       || this.lk == 121016         // 'namespace' 'stable'
       || this.lk == 121048         // 'processing-instruction' 'stable'
       || this.lk == 121426         // 'attribute' 'start'
       || this.lk == 121465         // 'element' 'start'
       || this.lk == 121528         // 'namespace' 'start'
       || this.lk == 121560         // 'processing-instruction' 'start'
       || this.lk == 127058         // 'attribute' 'to'
       || this.lk == 127097         // 'element' 'to'
       || this.lk == 127160         // 'namespace' 'to'
       || this.lk == 127192         // 'processing-instruction' 'to'
       || this.lk == 127570         // 'attribute' 'treat'
       || this.lk == 127609         // 'element' 'treat'
       || this.lk == 127672         // 'namespace' 'treat'
       || this.lk == 127704         // 'processing-instruction' 'treat'
       || this.lk == 130130         // 'attribute' 'union'
       || this.lk == 130169         // 'element' 'union'
       || this.lk == 130232         // 'namespace' 'union'
       || this.lk == 130264         // 'processing-instruction' 'union'
       || this.lk == 136274         // 'attribute' 'where'
       || this.lk == 136313         // 'element' 'where'
       || this.lk == 136376         // 'namespace' 'where'
       || this.lk == 136408         // 'processing-instruction' 'where'
       || this.lk == 138322         // 'attribute' 'with'
       || this.lk == 138361         // 'element' 'with'
       || this.lk == 138424         // 'namespace' 'with'
       || this.lk == 138456)        // 'processing-instruction' 'with'
      {
        this.lk = this.memoized(4, this.e0);
        if (this.lk == 0)
        {
          var b0A = this.b0; var e0A = this.e0; var l1A = this.l1;
          var b1A = this.b1; var e1A = this.e1; var l2A = this.l2;
          var b2A = this.b2; var e2A = this.e2;
          try
          {
            this.try_PostfixExpr();
            this.memoize(4, e0A, -1);
            this.lk = -3;
          }
          catch (p1A)
          {
            this.lk = -2;
            this.b0 = b0A; this.e0 = e0A; this.l1 = l1A; if (this.l1 == 0) {this.end = e0A;} else {
            this.b1 = b1A; this.e1 = e1A; this.l2 = l2A; if (this.l2 == 0) {this.end = e1A;} else {
            this.b2 = b2A; this.e2 = e2A; this.end = e2A; }}
            this.memoize(4, e0A, -2);
          }
        }
      }
      switch (this.lk)
      {
      case -1:
      case 8:                       // IntegerLiteral
      case 9:                       // DecimalLiteral
      case 10:                      // DoubleLiteral
      case 11:                      // StringLiteral
      case 31:                      // '$'
      case 32:                      // '%'
      case 34:                      // '('
      case 44:                      // '.'
      case 54:                      // '<'
      case 55:                      // '<!--'
      case 59:                      // '<?'
      case 68:                      // '['
      case 276:                     // '{'
      case 278:                     // '{|'
      case 3154:                    // 'attribute' EQName^Token
      case 3193:                    // 'element' EQName^Token
      case 9912:                    // 'namespace' NCName^Token
      case 9944:                    // 'processing-instruction' NCName^Token
      case 14854:                   // EQName^Token '#'
      case 14918:                   // 'after' '#'
      case 14920:                   // 'allowing' '#'
      case 14921:                   // 'ancestor' '#'
      case 14922:                   // 'ancestor-or-self' '#'
      case 14923:                   // 'and' '#'
      case 14925:                   // 'append' '#'
      case 14926:                   // 'array' '#'
      case 14927:                   // 'as' '#'
      case 14928:                   // 'ascending' '#'
      case 14929:                   // 'at' '#'
      case 14930:                   // 'attribute' '#'
      case 14931:                   // 'base-uri' '#'
      case 14932:                   // 'before' '#'
      case 14933:                   // 'boundary-space' '#'
      case 14934:                   // 'break' '#'
      case 14936:                   // 'case' '#'
      case 14937:                   // 'cast' '#'
      case 14938:                   // 'castable' '#'
      case 14939:                   // 'catch' '#'
      case 14941:                   // 'child' '#'
      case 14942:                   // 'collation' '#'
      case 14944:                   // 'comment' '#'
      case 14945:                   // 'constraint' '#'
      case 14946:                   // 'construction' '#'
      case 14949:                   // 'context' '#'
      case 14950:                   // 'continue' '#'
      case 14951:                   // 'copy' '#'
      case 14952:                   // 'copy-namespaces' '#'
      case 14953:                   // 'count' '#'
      case 14954:                   // 'decimal-format' '#'
      case 14956:                   // 'declare' '#'
      case 14957:                   // 'default' '#'
      case 14958:                   // 'delete' '#'
      case 14959:                   // 'descendant' '#'
      case 14960:                   // 'descendant-or-self' '#'
      case 14961:                   // 'descending' '#'
      case 14966:                   // 'div' '#'
      case 14967:                   // 'document' '#'
      case 14968:                   // 'document-node' '#'
      case 14969:                   // 'element' '#'
      case 14970:                   // 'else' '#'
      case 14971:                   // 'empty' '#'
      case 14972:                   // 'empty-sequence' '#'
      case 14973:                   // 'encoding' '#'
      case 14974:                   // 'end' '#'
      case 14976:                   // 'eq' '#'
      case 14977:                   // 'every' '#'
      case 14979:                   // 'except' '#'
      case 14980:                   // 'exit' '#'
      case 14981:                   // 'external' '#'
      case 14982:                   // 'first' '#'
      case 14983:                   // 'following' '#'
      case 14984:                   // 'following-sibling' '#'
      case 14985:                   // 'for' '#'
      case 14989:                   // 'ft-option' '#'
      case 14993:                   // 'function' '#'
      case 14994:                   // 'ge' '#'
      case 14996:                   // 'group' '#'
      case 14998:                   // 'gt' '#'
      case 14999:                   // 'idiv' '#'
      case 15000:                   // 'if' '#'
      case 15001:                   // 'import' '#'
      case 15002:                   // 'in' '#'
      case 15003:                   // 'index' '#'
      case 15007:                   // 'insert' '#'
      case 15008:                   // 'instance' '#'
      case 15009:                   // 'integrity' '#'
      case 15010:                   // 'intersect' '#'
      case 15011:                   // 'into' '#'
      case 15012:                   // 'is' '#'
      case 15013:                   // 'item' '#'
      case 15014:                   // 'json' '#'
      case 15015:                   // 'json-item' '#'
      case 15018:                   // 'last' '#'
      case 15019:                   // 'lax' '#'
      case 15020:                   // 'le' '#'
      case 15022:                   // 'let' '#'
      case 15024:                   // 'loop' '#'
      case 15026:                   // 'lt' '#'
      case 15028:                   // 'mod' '#'
      case 15029:                   // 'modify' '#'
      case 15030:                   // 'module' '#'
      case 15032:                   // 'namespace' '#'
      case 15033:                   // 'namespace-node' '#'
      case 15034:                   // 'ne' '#'
      case 15039:                   // 'node' '#'
      case 15040:                   // 'nodes' '#'
      case 15042:                   // 'object' '#'
      case 15046:                   // 'only' '#'
      case 15047:                   // 'option' '#'
      case 15048:                   // 'or' '#'
      case 15049:                   // 'order' '#'
      case 15050:                   // 'ordered' '#'
      case 15051:                   // 'ordering' '#'
      case 15054:                   // 'parent' '#'
      case 15060:                   // 'preceding' '#'
      case 15061:                   // 'preceding-sibling' '#'
      case 15064:                   // 'processing-instruction' '#'
      case 15066:                   // 'rename' '#'
      case 15067:                   // 'replace' '#'
      case 15068:                   // 'return' '#'
      case 15069:                   // 'returning' '#'
      case 15070:                   // 'revalidation' '#'
      case 15072:                   // 'satisfies' '#'
      case 15073:                   // 'schema' '#'
      case 15074:                   // 'schema-attribute' '#'
      case 15075:                   // 'schema-element' '#'
      case 15076:                   // 'score' '#'
      case 15077:                   // 'self' '#'
      case 15082:                   // 'sliding' '#'
      case 15083:                   // 'some' '#'
      case 15084:                   // 'stable' '#'
      case 15085:                   // 'start' '#'
      case 15088:                   // 'strict' '#'
      case 15090:                   // 'structured-item' '#'
      case 15091:                   // 'switch' '#'
      case 15092:                   // 'text' '#'
      case 15096:                   // 'to' '#'
      case 15097:                   // 'treat' '#'
      case 15098:                   // 'try' '#'
      case 15099:                   // 'tumbling' '#'
      case 15100:                   // 'type' '#'
      case 15101:                   // 'typeswitch' '#'
      case 15102:                   // 'union' '#'
      case 15104:                   // 'unordered' '#'
      case 15105:                   // 'updating' '#'
      case 15108:                   // 'validate' '#'
      case 15109:                   // 'value' '#'
      case 15110:                   // 'variable' '#'
      case 15111:                   // 'version' '#'
      case 15114:                   // 'where' '#'
      case 15115:                   // 'while' '#'
      case 15118:                   // 'with' '#'
      case 15122:                   // 'xquery' '#'
      case 17414:                   // EQName^Token '('
      case 17478:                   // 'after' '('
      case 17480:                   // 'allowing' '('
      case 17481:                   // 'ancestor' '('
      case 17482:                   // 'ancestor-or-self' '('
      case 17483:                   // 'and' '('
      case 17485:                   // 'append' '('
      case 17487:                   // 'as' '('
      case 17488:                   // 'ascending' '('
      case 17489:                   // 'at' '('
      case 17491:                   // 'base-uri' '('
      case 17492:                   // 'before' '('
      case 17493:                   // 'boundary-space' '('
      case 17494:                   // 'break' '('
      case 17496:                   // 'case' '('
      case 17497:                   // 'cast' '('
      case 17498:                   // 'castable' '('
      case 17499:                   // 'catch' '('
      case 17501:                   // 'child' '('
      case 17502:                   // 'collation' '('
      case 17505:                   // 'constraint' '('
      case 17506:                   // 'construction' '('
      case 17509:                   // 'context' '('
      case 17510:                   // 'continue' '('
      case 17511:                   // 'copy' '('
      case 17512:                   // 'copy-namespaces' '('
      case 17513:                   // 'count' '('
      case 17514:                   // 'decimal-format' '('
      case 17516:                   // 'declare' '('
      case 17517:                   // 'default' '('
      case 17518:                   // 'delete' '('
      case 17519:                   // 'descendant' '('
      case 17520:                   // 'descendant-or-self' '('
      case 17521:                   // 'descending' '('
      case 17526:                   // 'div' '('
      case 17527:                   // 'document' '('
      case 17530:                   // 'else' '('
      case 17531:                   // 'empty' '('
      case 17533:                   // 'encoding' '('
      case 17534:                   // 'end' '('
      case 17536:                   // 'eq' '('
      case 17537:                   // 'every' '('
      case 17539:                   // 'except' '('
      case 17540:                   // 'exit' '('
      case 17541:                   // 'external' '('
      case 17542:                   // 'first' '('
      case 17543:                   // 'following' '('
      case 17544:                   // 'following-sibling' '('
      case 17545:                   // 'for' '('
      case 17549:                   // 'ft-option' '('
      case 17553:                   // 'function' '('
      case 17554:                   // 'ge' '('
      case 17556:                   // 'group' '('
      case 17558:                   // 'gt' '('
      case 17559:                   // 'idiv' '('
      case 17561:                   // 'import' '('
      case 17562:                   // 'in' '('
      case 17563:                   // 'index' '('
      case 17567:                   // 'insert' '('
      case 17568:                   // 'instance' '('
      case 17569:                   // 'integrity' '('
      case 17570:                   // 'intersect' '('
      case 17571:                   // 'into' '('
      case 17572:                   // 'is' '('
      case 17574:                   // 'json' '('
      case 17578:                   // 'last' '('
      case 17579:                   // 'lax' '('
      case 17580:                   // 'le' '('
      case 17582:                   // 'let' '('
      case 17584:                   // 'loop' '('
      case 17586:                   // 'lt' '('
      case 17588:                   // 'mod' '('
      case 17589:                   // 'modify' '('
      case 17590:                   // 'module' '('
      case 17592:                   // 'namespace' '('
      case 17594:                   // 'ne' '('
      case 17600:                   // 'nodes' '('
      case 17602:                   // 'object' '('
      case 17606:                   // 'only' '('
      case 17607:                   // 'option' '('
      case 17608:                   // 'or' '('
      case 17609:                   // 'order' '('
      case 17610:                   // 'ordered' '('
      case 17611:                   // 'ordering' '('
      case 17614:                   // 'parent' '('
      case 17620:                   // 'preceding' '('
      case 17621:                   // 'preceding-sibling' '('
      case 17626:                   // 'rename' '('
      case 17627:                   // 'replace' '('
      case 17628:                   // 'return' '('
      case 17629:                   // 'returning' '('
      case 17630:                   // 'revalidation' '('
      case 17632:                   // 'satisfies' '('
      case 17633:                   // 'schema' '('
      case 17636:                   // 'score' '('
      case 17637:                   // 'self' '('
      case 17642:                   // 'sliding' '('
      case 17643:                   // 'some' '('
      case 17644:                   // 'stable' '('
      case 17645:                   // 'start' '('
      case 17648:                   // 'strict' '('
      case 17656:                   // 'to' '('
      case 17657:                   // 'treat' '('
      case 17658:                   // 'try' '('
      case 17659:                   // 'tumbling' '('
      case 17660:                   // 'type' '('
      case 17662:                   // 'union' '('
      case 17664:                   // 'unordered' '('
      case 17665:                   // 'updating' '('
      case 17668:                   // 'validate' '('
      case 17669:                   // 'value' '('
      case 17670:                   // 'variable' '('
      case 17671:                   // 'version' '('
      case 17674:                   // 'where' '('
      case 17675:                   // 'while' '('
      case 17678:                   // 'with' '('
      case 17682:                   // 'xquery' '('
      case 36946:                   // 'attribute' 'allowing'
      case 36985:                   // 'element' 'allowing'
      case 37048:                   // 'namespace' 'allowing'
      case 37080:                   // 'processing-instruction' 'allowing'
      case 37458:                   // 'attribute' 'ancestor'
      case 37497:                   // 'element' 'ancestor'
      case 37560:                   // 'namespace' 'ancestor'
      case 37592:                   // 'processing-instruction' 'ancestor'
      case 37970:                   // 'attribute' 'ancestor-or-self'
      case 38009:                   // 'element' 'ancestor-or-self'
      case 38072:                   // 'namespace' 'ancestor-or-self'
      case 38104:                   // 'processing-instruction' 'ancestor-or-self'
      case 39506:                   // 'attribute' 'append'
      case 39545:                   // 'element' 'append'
      case 39608:                   // 'namespace' 'append'
      case 39640:                   // 'processing-instruction' 'append'
      case 40018:                   // 'attribute' 'array'
      case 40057:                   // 'element' 'array'
      case 42066:                   // 'attribute' 'attribute'
      case 42105:                   // 'element' 'attribute'
      case 42168:                   // 'namespace' 'attribute'
      case 42200:                   // 'processing-instruction' 'attribute'
      case 42578:                   // 'attribute' 'base-uri'
      case 42617:                   // 'element' 'base-uri'
      case 42680:                   // 'namespace' 'base-uri'
      case 42712:                   // 'processing-instruction' 'base-uri'
      case 43602:                   // 'attribute' 'boundary-space'
      case 43641:                   // 'element' 'boundary-space'
      case 43704:                   // 'namespace' 'boundary-space'
      case 43736:                   // 'processing-instruction' 'boundary-space'
      case 44114:                   // 'attribute' 'break'
      case 44153:                   // 'element' 'break'
      case 44216:                   // 'namespace' 'break'
      case 44248:                   // 'processing-instruction' 'break'
      case 46674:                   // 'attribute' 'catch'
      case 46713:                   // 'element' 'catch'
      case 46776:                   // 'namespace' 'catch'
      case 46808:                   // 'processing-instruction' 'catch'
      case 47698:                   // 'attribute' 'child'
      case 47737:                   // 'element' 'child'
      case 47800:                   // 'namespace' 'child'
      case 47832:                   // 'processing-instruction' 'child'
      case 49234:                   // 'attribute' 'comment'
      case 49273:                   // 'element' 'comment'
      case 49336:                   // 'namespace' 'comment'
      case 49368:                   // 'processing-instruction' 'comment'
      case 49746:                   // 'attribute' 'constraint'
      case 49785:                   // 'element' 'constraint'
      case 49848:                   // 'namespace' 'constraint'
      case 49880:                   // 'processing-instruction' 'constraint'
      case 50258:                   // 'attribute' 'construction'
      case 50297:                   // 'element' 'construction'
      case 50360:                   // 'namespace' 'construction'
      case 50392:                   // 'processing-instruction' 'construction'
      case 51794:                   // 'attribute' 'context'
      case 51833:                   // 'element' 'context'
      case 51896:                   // 'namespace' 'context'
      case 51928:                   // 'processing-instruction' 'context'
      case 52306:                   // 'attribute' 'continue'
      case 52345:                   // 'element' 'continue'
      case 52408:                   // 'namespace' 'continue'
      case 52440:                   // 'processing-instruction' 'continue'
      case 52818:                   // 'attribute' 'copy'
      case 52857:                   // 'element' 'copy'
      case 52920:                   // 'namespace' 'copy'
      case 52952:                   // 'processing-instruction' 'copy'
      case 53330:                   // 'attribute' 'copy-namespaces'
      case 53369:                   // 'element' 'copy-namespaces'
      case 53432:                   // 'namespace' 'copy-namespaces'
      case 53464:                   // 'processing-instruction' 'copy-namespaces'
      case 54354:                   // 'attribute' 'decimal-format'
      case 54393:                   // 'element' 'decimal-format'
      case 54456:                   // 'namespace' 'decimal-format'
      case 54488:                   // 'processing-instruction' 'decimal-format'
      case 55378:                   // 'attribute' 'declare'
      case 55417:                   // 'element' 'declare'
      case 55480:                   // 'namespace' 'declare'
      case 55512:                   // 'processing-instruction' 'declare'
      case 56402:                   // 'attribute' 'delete'
      case 56441:                   // 'element' 'delete'
      case 56504:                   // 'namespace' 'delete'
      case 56536:                   // 'processing-instruction' 'delete'
      case 56914:                   // 'attribute' 'descendant'
      case 56953:                   // 'element' 'descendant'
      case 57016:                   // 'namespace' 'descendant'
      case 57048:                   // 'processing-instruction' 'descendant'
      case 57426:                   // 'attribute' 'descendant-or-self'
      case 57465:                   // 'element' 'descendant-or-self'
      case 57528:                   // 'namespace' 'descendant-or-self'
      case 57560:                   // 'processing-instruction' 'descendant-or-self'
      case 61010:                   // 'attribute' 'document'
      case 61049:                   // 'element' 'document'
      case 61112:                   // 'namespace' 'document'
      case 61144:                   // 'processing-instruction' 'document'
      case 61522:                   // 'attribute' 'document-node'
      case 61561:                   // 'element' 'document-node'
      case 61624:                   // 'namespace' 'document-node'
      case 61656:                   // 'processing-instruction' 'document-node'
      case 62034:                   // 'attribute' 'element'
      case 62073:                   // 'element' 'element'
      case 62136:                   // 'namespace' 'element'
      case 62168:                   // 'processing-instruction' 'element'
      case 63570:                   // 'attribute' 'empty-sequence'
      case 63609:                   // 'element' 'empty-sequence'
      case 63672:                   // 'namespace' 'empty-sequence'
      case 63704:                   // 'processing-instruction' 'empty-sequence'
      case 64082:                   // 'attribute' 'encoding'
      case 64121:                   // 'element' 'encoding'
      case 64184:                   // 'namespace' 'encoding'
      case 64216:                   // 'processing-instruction' 'encoding'
      case 66130:                   // 'attribute' 'every'
      case 66169:                   // 'element' 'every'
      case 66232:                   // 'namespace' 'every'
      case 66264:                   // 'processing-instruction' 'every'
      case 67666:                   // 'attribute' 'exit'
      case 67705:                   // 'element' 'exit'
      case 67768:                   // 'namespace' 'exit'
      case 67800:                   // 'processing-instruction' 'exit'
      case 68178:                   // 'attribute' 'external'
      case 68217:                   // 'element' 'external'
      case 68280:                   // 'namespace' 'external'
      case 68312:                   // 'processing-instruction' 'external'
      case 68690:                   // 'attribute' 'first'
      case 68729:                   // 'element' 'first'
      case 68792:                   // 'namespace' 'first'
      case 68824:                   // 'processing-instruction' 'first'
      case 69202:                   // 'attribute' 'following'
      case 69241:                   // 'element' 'following'
      case 69304:                   // 'namespace' 'following'
      case 69336:                   // 'processing-instruction' 'following'
      case 69714:                   // 'attribute' 'following-sibling'
      case 69753:                   // 'element' 'following-sibling'
      case 69816:                   // 'namespace' 'following-sibling'
      case 69848:                   // 'processing-instruction' 'following-sibling'
      case 72274:                   // 'attribute' 'ft-option'
      case 72313:                   // 'element' 'ft-option'
      case 72376:                   // 'namespace' 'ft-option'
      case 72408:                   // 'processing-instruction' 'ft-option'
      case 74322:                   // 'attribute' 'function'
      case 74361:                   // 'element' 'function'
      case 74424:                   // 'namespace' 'function'
      case 74456:                   // 'processing-instruction' 'function'
      case 77906:                   // 'attribute' 'if'
      case 77945:                   // 'element' 'if'
      case 78008:                   // 'namespace' 'if'
      case 78040:                   // 'processing-instruction' 'if'
      case 78418:                   // 'attribute' 'import'
      case 78457:                   // 'element' 'import'
      case 78520:                   // 'namespace' 'import'
      case 78552:                   // 'processing-instruction' 'import'
      case 78930:                   // 'attribute' 'in'
      case 78969:                   // 'element' 'in'
      case 79032:                   // 'namespace' 'in'
      case 79064:                   // 'processing-instruction' 'in'
      case 79442:                   // 'attribute' 'index'
      case 79481:                   // 'element' 'index'
      case 79544:                   // 'namespace' 'index'
      case 79576:                   // 'processing-instruction' 'index'
      case 81490:                   // 'attribute' 'insert'
      case 81529:                   // 'element' 'insert'
      case 81592:                   // 'namespace' 'insert'
      case 81624:                   // 'processing-instruction' 'insert'
      case 82514:                   // 'attribute' 'integrity'
      case 82553:                   // 'element' 'integrity'
      case 82616:                   // 'namespace' 'integrity'
      case 82648:                   // 'processing-instruction' 'integrity'
      case 84562:                   // 'attribute' 'item'
      case 84601:                   // 'element' 'item'
      case 84664:                   // 'namespace' 'item'
      case 84696:                   // 'processing-instruction' 'item'
      case 85074:                   // 'attribute' 'json'
      case 85113:                   // 'element' 'json'
      case 85176:                   // 'namespace' 'json'
      case 85208:                   // 'processing-instruction' 'json'
      case 85586:                   // 'attribute' 'json-item'
      case 85625:                   // 'element' 'json-item'
      case 87122:                   // 'attribute' 'last'
      case 87161:                   // 'element' 'last'
      case 87224:                   // 'namespace' 'last'
      case 87256:                   // 'processing-instruction' 'last'
      case 87634:                   // 'attribute' 'lax'
      case 87673:                   // 'element' 'lax'
      case 87736:                   // 'namespace' 'lax'
      case 87768:                   // 'processing-instruction' 'lax'
      case 90194:                   // 'attribute' 'loop'
      case 90233:                   // 'element' 'loop'
      case 90296:                   // 'namespace' 'loop'
      case 90328:                   // 'processing-instruction' 'loop'
      case 93266:                   // 'attribute' 'module'
      case 93305:                   // 'element' 'module'
      case 93368:                   // 'namespace' 'module'
      case 93400:                   // 'processing-instruction' 'module'
      case 94290:                   // 'attribute' 'namespace'
      case 94329:                   // 'element' 'namespace'
      case 94392:                   // 'namespace' 'namespace'
      case 94424:                   // 'processing-instruction' 'namespace'
      case 94802:                   // 'attribute' 'namespace-node'
      case 94841:                   // 'element' 'namespace-node'
      case 94904:                   // 'namespace' 'namespace-node'
      case 94936:                   // 'processing-instruction' 'namespace-node'
      case 97874:                   // 'attribute' 'node'
      case 97913:                   // 'element' 'node'
      case 97976:                   // 'namespace' 'node'
      case 98008:                   // 'processing-instruction' 'node'
      case 98386:                   // 'attribute' 'nodes'
      case 98425:                   // 'element' 'nodes'
      case 98488:                   // 'namespace' 'nodes'
      case 98520:                   // 'processing-instruction' 'nodes'
      case 99410:                   // 'attribute' 'object'
      case 99449:                   // 'element' 'object'
      case 99512:                   // 'namespace' 'object'
      case 99544:                   // 'processing-instruction' 'object'
      case 101970:                  // 'attribute' 'option'
      case 102009:                  // 'element' 'option'
      case 102072:                  // 'namespace' 'option'
      case 102104:                  // 'processing-instruction' 'option'
      case 103506:                  // 'attribute' 'ordered'
      case 103545:                  // 'element' 'ordered'
      case 103608:                  // 'namespace' 'ordered'
      case 103640:                  // 'processing-instruction' 'ordered'
      case 104018:                  // 'attribute' 'ordering'
      case 104057:                  // 'element' 'ordering'
      case 104120:                  // 'namespace' 'ordering'
      case 104152:                  // 'processing-instruction' 'ordering'
      case 105554:                  // 'attribute' 'parent'
      case 105593:                  // 'element' 'parent'
      case 105656:                  // 'namespace' 'parent'
      case 105688:                  // 'processing-instruction' 'parent'
      case 108626:                  // 'attribute' 'preceding'
      case 108665:                  // 'element' 'preceding'
      case 108728:                  // 'namespace' 'preceding'
      case 108760:                  // 'processing-instruction' 'preceding'
      case 109138:                  // 'attribute' 'preceding-sibling'
      case 109177:                  // 'element' 'preceding-sibling'
      case 109240:                  // 'namespace' 'preceding-sibling'
      case 109272:                  // 'processing-instruction' 'preceding-sibling'
      case 110674:                  // 'attribute' 'processing-instruction'
      case 110713:                  // 'element' 'processing-instruction'
      case 110776:                  // 'namespace' 'processing-instruction'
      case 110808:                  // 'processing-instruction' 'processing-instruction'
      case 111698:                  // 'attribute' 'rename'
      case 111737:                  // 'element' 'rename'
      case 111800:                  // 'namespace' 'rename'
      case 111832:                  // 'processing-instruction' 'rename'
      case 112210:                  // 'attribute' 'replace'
      case 112249:                  // 'element' 'replace'
      case 112312:                  // 'namespace' 'replace'
      case 112344:                  // 'processing-instruction' 'replace'
      case 113234:                  // 'attribute' 'returning'
      case 113273:                  // 'element' 'returning'
      case 113336:                  // 'namespace' 'returning'
      case 113368:                  // 'processing-instruction' 'returning'
      case 113746:                  // 'attribute' 'revalidation'
      case 113785:                  // 'element' 'revalidation'
      case 113848:                  // 'namespace' 'revalidation'
      case 113880:                  // 'processing-instruction' 'revalidation'
      case 115282:                  // 'attribute' 'schema'
      case 115321:                  // 'element' 'schema'
      case 115384:                  // 'namespace' 'schema'
      case 115416:                  // 'processing-instruction' 'schema'
      case 115794:                  // 'attribute' 'schema-attribute'
      case 115833:                  // 'element' 'schema-attribute'
      case 115896:                  // 'namespace' 'schema-attribute'
      case 115928:                  // 'processing-instruction' 'schema-attribute'
      case 116306:                  // 'attribute' 'schema-element'
      case 116345:                  // 'element' 'schema-element'
      case 116408:                  // 'namespace' 'schema-element'
      case 116440:                  // 'processing-instruction' 'schema-element'
      case 116818:                  // 'attribute' 'score'
      case 116857:                  // 'element' 'score'
      case 116920:                  // 'namespace' 'score'
      case 116952:                  // 'processing-instruction' 'score'
      case 117330:                  // 'attribute' 'self'
      case 117369:                  // 'element' 'self'
      case 117432:                  // 'namespace' 'self'
      case 117464:                  // 'processing-instruction' 'self'
      case 119890:                  // 'attribute' 'sliding'
      case 119929:                  // 'element' 'sliding'
      case 119992:                  // 'namespace' 'sliding'
      case 120024:                  // 'processing-instruction' 'sliding'
      case 120402:                  // 'attribute' 'some'
      case 120441:                  // 'element' 'some'
      case 120504:                  // 'namespace' 'some'
      case 120536:                  // 'processing-instruction' 'some'
      case 122962:                  // 'attribute' 'strict'
      case 123001:                  // 'element' 'strict'
      case 123064:                  // 'namespace' 'strict'
      case 123096:                  // 'processing-instruction' 'strict'
      case 123986:                  // 'attribute' 'structured-item'
      case 124025:                  // 'element' 'structured-item'
      case 124498:                  // 'attribute' 'switch'
      case 124537:                  // 'element' 'switch'
      case 124600:                  // 'namespace' 'switch'
      case 124632:                  // 'processing-instruction' 'switch'
      case 125010:                  // 'attribute' 'text'
      case 125049:                  // 'element' 'text'
      case 125112:                  // 'namespace' 'text'
      case 125144:                  // 'processing-instruction' 'text'
      case 128082:                  // 'attribute' 'try'
      case 128121:                  // 'element' 'try'
      case 128184:                  // 'namespace' 'try'
      case 128216:                  // 'processing-instruction' 'try'
      case 128594:                  // 'attribute' 'tumbling'
      case 128633:                  // 'element' 'tumbling'
      case 128696:                  // 'namespace' 'tumbling'
      case 128728:                  // 'processing-instruction' 'tumbling'
      case 129106:                  // 'attribute' 'type'
      case 129145:                  // 'element' 'type'
      case 129208:                  // 'namespace' 'type'
      case 129240:                  // 'processing-instruction' 'type'
      case 129618:                  // 'attribute' 'typeswitch'
      case 129657:                  // 'element' 'typeswitch'
      case 129720:                  // 'namespace' 'typeswitch'
      case 129752:                  // 'processing-instruction' 'typeswitch'
      case 131154:                  // 'attribute' 'unordered'
      case 131193:                  // 'element' 'unordered'
      case 131256:                  // 'namespace' 'unordered'
      case 131288:                  // 'processing-instruction' 'unordered'
      case 131666:                  // 'attribute' 'updating'
      case 131705:                  // 'element' 'updating'
      case 131768:                  // 'namespace' 'updating'
      case 131800:                  // 'processing-instruction' 'updating'
      case 133202:                  // 'attribute' 'validate'
      case 133241:                  // 'element' 'validate'
      case 133304:                  // 'namespace' 'validate'
      case 133336:                  // 'processing-instruction' 'validate'
      case 133714:                  // 'attribute' 'value'
      case 133753:                  // 'element' 'value'
      case 133816:                  // 'namespace' 'value'
      case 133848:                  // 'processing-instruction' 'value'
      case 134226:                  // 'attribute' 'variable'
      case 134265:                  // 'element' 'variable'
      case 134328:                  // 'namespace' 'variable'
      case 134360:                  // 'processing-instruction' 'variable'
      case 134738:                  // 'attribute' 'version'
      case 134777:                  // 'element' 'version'
      case 134840:                  // 'namespace' 'version'
      case 134872:                  // 'processing-instruction' 'version'
      case 136786:                  // 'attribute' 'while'
      case 136825:                  // 'element' 'while'
      case 136888:                  // 'namespace' 'while'
      case 136920:                  // 'processing-instruction' 'while'
      case 140370:                  // 'attribute' 'xquery'
      case 140409:                  // 'element' 'xquery'
      case 140472:                  // 'namespace' 'xquery'
      case 140504:                  // 'processing-instruction' 'xquery'
      case 141394:                  // 'attribute' '{'
      case 141408:                  // 'comment' '{'
      case 141431:                  // 'document' '{'
      case 141433:                  // 'element' '{'
      case 141496:                  // 'namespace' '{'
      case 141514:                  // 'ordered' '{'
      case 141528:                  // 'processing-instruction' '{'
      case 141556:                  // 'text' '{'
      case 141568:                  // 'unordered' '{'
        this.try_PostfixExpr();
        break;
      case -3:
        break;
      default:
        this.try_AxisStep();
      }
    }

    private parse_AxisStep()
    {
      this.eventHandler.startNonterminal("AxisStep", this.e0);
      switch (this.l1)
      {
      case 73:                      // 'ancestor'
      case 74:                      // 'ancestor-or-self'
      case 206:                     // 'parent'
      case 212:                     // 'preceding'
      case 213:                     // 'preceding-sibling'
        this.lookahead2W(241);      // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
                                    // '::' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'after' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
        break;
      default:
        this.lk = this.l1;
      }
      switch (this.lk)
      {
      case 45:                      // '..'
      case 26185:                   // 'ancestor' '::'
      case 26186:                   // 'ancestor-or-self' '::'
      case 26318:                   // 'parent' '::'
      case 26324:                   // 'preceding' '::'
      case 26325:                   // 'preceding-sibling' '::'
        this.parse_ReverseStep();
        break;
      default:
        this.parse_ForwardStep();
      }
      this.lookahead1W(237);        // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'after' | 'and' |
                                    // 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
      this.whitespace();
      this.parse_PredicateList();
      this.eventHandler.endNonterminal("AxisStep", this.e0);
    }

    private try_AxisStep()
    {
      switch (this.l1)
      {
      case 73:                      // 'ancestor'
      case 74:                      // 'ancestor-or-self'
      case 206:                     // 'parent'
      case 212:                     // 'preceding'
      case 213:                     // 'preceding-sibling'
        this.lookahead2W(241);      // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
                                    // '::' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'after' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
        break;
      default:
        this.lk = this.l1;
      }
      switch (this.lk)
      {
      case 45:                      // '..'
      case 26185:                   // 'ancestor' '::'
      case 26186:                   // 'ancestor-or-self' '::'
      case 26318:                   // 'parent' '::'
      case 26324:                   // 'preceding' '::'
      case 26325:                   // 'preceding-sibling' '::'
        this.try_ReverseStep();
        break;
      default:
        this.try_ForwardStep();
      }
      this.lookahead1W(237);        // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'after' | 'and' |
                                    // 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
      this.try_PredicateList();
    }

    private parse_ForwardStep()
    {
      this.eventHandler.startNonterminal("ForwardStep", this.e0);
      switch (this.l1)
      {
      case 82:                      // 'attribute'
        this.lookahead2W(244);      // S^WS | EOF | '!' | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | '::' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
        break;
      case 93:                      // 'child'
      case 111:                     // 'descendant'
      case 112:                     // 'descendant-or-self'
      case 135:                     // 'following'
      case 136:                     // 'following-sibling'
      case 229:                     // 'self'
        this.lookahead2W(241);      // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
                                    // '::' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'after' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
        break;
      default:
        this.lk = this.l1;
      }
      switch (this.lk)
      {
      case 26194:                   // 'attribute' '::'
      case 26205:                   // 'child' '::'
      case 26223:                   // 'descendant' '::'
      case 26224:                   // 'descendant-or-self' '::'
      case 26247:                   // 'following' '::'
      case 26248:                   // 'following-sibling' '::'
      case 26341:                   // 'self' '::'
        this.parse_ForwardAxis();
        this.lookahead1W(256);      // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
        this.whitespace();
        this.parse_NodeTest();
        break;
      default:
        this.parse_AbbrevForwardStep();
      }
      this.eventHandler.endNonterminal("ForwardStep", this.e0);
    }

    private try_ForwardStep()
    {
      switch (this.l1)
      {
      case 82:                      // 'attribute'
        this.lookahead2W(244);      // S^WS | EOF | '!' | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | '::' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
        break;
      case 93:                      // 'child'
      case 111:                     // 'descendant'
      case 112:                     // 'descendant-or-self'
      case 135:                     // 'following'
      case 136:                     // 'following-sibling'
      case 229:                     // 'self'
        this.lookahead2W(241);      // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
                                    // '::' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'after' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
        break;
      default:
        this.lk = this.l1;
      }
      switch (this.lk)
      {
      case 26194:                   // 'attribute' '::'
      case 26205:                   // 'child' '::'
      case 26223:                   // 'descendant' '::'
      case 26224:                   // 'descendant-or-self' '::'
      case 26247:                   // 'following' '::'
      case 26248:                   // 'following-sibling' '::'
      case 26341:                   // 'self' '::'
        this.try_ForwardAxis();
        this.lookahead1W(256);      // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
        this.try_NodeTest();
        break;
      default:
        this.try_AbbrevForwardStep();
      }
    }

    private parse_ForwardAxis()
    {
      this.eventHandler.startNonterminal("ForwardAxis", this.e0);
      switch (this.l1)
      {
      case 93:                      // 'child'
        this.shift(93);             // 'child'
        this.lookahead1W(26);       // S^WS | '(:' | '::'
        this.shift(51);             // '::'
        break;
      case 111:                     // 'descendant'
        this.shift(111);            // 'descendant'
        this.lookahead1W(26);       // S^WS | '(:' | '::'
        this.shift(51);             // '::'
        break;
      case 82:                      // 'attribute'
        this.shift(82);             // 'attribute'
        this.lookahead1W(26);       // S^WS | '(:' | '::'
        this.shift(51);             // '::'
        break;
      case 229:                     // 'self'
        this.shift(229);            // 'self'
        this.lookahead1W(26);       // S^WS | '(:' | '::'
        this.shift(51);             // '::'
        break;
      case 112:                     // 'descendant-or-self'
        this.shift(112);            // 'descendant-or-self'
        this.lookahead1W(26);       // S^WS | '(:' | '::'
        this.shift(51);             // '::'
        break;
      case 136:                     // 'following-sibling'
        this.shift(136);            // 'following-sibling'
        this.lookahead1W(26);       // S^WS | '(:' | '::'
        this.shift(51);             // '::'
        break;
      default:
        this.shift(135);            // 'following'
        this.lookahead1W(26);       // S^WS | '(:' | '::'
        this.shift(51);             // '::'
      }
      this.eventHandler.endNonterminal("ForwardAxis", this.e0);
    }

    private try_ForwardAxis()
    {
      switch (this.l1)
      {
      case 93:                      // 'child'
        this.shiftT(93);            // 'child'
        this.lookahead1W(26);       // S^WS | '(:' | '::'
        this.shiftT(51);            // '::'
        break;
      case 111:                     // 'descendant'
        this.shiftT(111);           // 'descendant'
        this.lookahead1W(26);       // S^WS | '(:' | '::'
        this.shiftT(51);            // '::'
        break;
      case 82:                      // 'attribute'
        this.shiftT(82);            // 'attribute'
        this.lookahead1W(26);       // S^WS | '(:' | '::'
        this.shiftT(51);            // '::'
        break;
      case 229:                     // 'self'
        this.shiftT(229);           // 'self'
        this.lookahead1W(26);       // S^WS | '(:' | '::'
        this.shiftT(51);            // '::'
        break;
      case 112:                     // 'descendant-or-self'
        this.shiftT(112);           // 'descendant-or-self'
        this.lookahead1W(26);       // S^WS | '(:' | '::'
        this.shiftT(51);            // '::'
        break;
      case 136:                     // 'following-sibling'
        this.shiftT(136);           // 'following-sibling'
        this.lookahead1W(26);       // S^WS | '(:' | '::'
        this.shiftT(51);            // '::'
        break;
      default:
        this.shiftT(135);           // 'following'
        this.lookahead1W(26);       // S^WS | '(:' | '::'
        this.shiftT(51);            // '::'
      }
    }

    private parse_AbbrevForwardStep()
    {
      this.eventHandler.startNonterminal("AbbrevForwardStep", this.e0);
      if (this.l1 == 66)            // '@'
      {
        this.shift(66);             // '@'
      }
      this.lookahead1W(256);        // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
      this.whitespace();
      this.parse_NodeTest();
      this.eventHandler.endNonterminal("AbbrevForwardStep", this.e0);
    }

    private try_AbbrevForwardStep()
    {
      if (this.l1 == 66)            // '@'
      {
        this.shiftT(66);            // '@'
      }
      this.lookahead1W(256);        // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
      this.try_NodeTest();
    }

    private parse_ReverseStep()
    {
      this.eventHandler.startNonterminal("ReverseStep", this.e0);
      switch (this.l1)
      {
      case 45:                      // '..'
        this.parse_AbbrevReverseStep();
        break;
      default:
        this.parse_ReverseAxis();
        this.lookahead1W(256);      // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
        this.whitespace();
        this.parse_NodeTest();
      }
      this.eventHandler.endNonterminal("ReverseStep", this.e0);
    }

    private try_ReverseStep()
    {
      switch (this.l1)
      {
      case 45:                      // '..'
        this.try_AbbrevReverseStep();
        break;
      default:
        this.try_ReverseAxis();
        this.lookahead1W(256);      // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
        this.try_NodeTest();
      }
    }

    private parse_ReverseAxis()
    {
      this.eventHandler.startNonterminal("ReverseAxis", this.e0);
      switch (this.l1)
      {
      case 206:                     // 'parent'
        this.shift(206);            // 'parent'
        this.lookahead1W(26);       // S^WS | '(:' | '::'
        this.shift(51);             // '::'
        break;
      case 73:                      // 'ancestor'
        this.shift(73);             // 'ancestor'
        this.lookahead1W(26);       // S^WS | '(:' | '::'
        this.shift(51);             // '::'
        break;
      case 213:                     // 'preceding-sibling'
        this.shift(213);            // 'preceding-sibling'
        this.lookahead1W(26);       // S^WS | '(:' | '::'
        this.shift(51);             // '::'
        break;
      case 212:                     // 'preceding'
        this.shift(212);            // 'preceding'
        this.lookahead1W(26);       // S^WS | '(:' | '::'
        this.shift(51);             // '::'
        break;
      default:
        this.shift(74);             // 'ancestor-or-self'
        this.lookahead1W(26);       // S^WS | '(:' | '::'
        this.shift(51);             // '::'
      }
      this.eventHandler.endNonterminal("ReverseAxis", this.e0);
    }

    private try_ReverseAxis()
    {
      switch (this.l1)
      {
      case 206:                     // 'parent'
        this.shiftT(206);           // 'parent'
        this.lookahead1W(26);       // S^WS | '(:' | '::'
        this.shiftT(51);            // '::'
        break;
      case 73:                      // 'ancestor'
        this.shiftT(73);            // 'ancestor'
        this.lookahead1W(26);       // S^WS | '(:' | '::'
        this.shiftT(51);            // '::'
        break;
      case 213:                     // 'preceding-sibling'
        this.shiftT(213);           // 'preceding-sibling'
        this.lookahead1W(26);       // S^WS | '(:' | '::'
        this.shiftT(51);            // '::'
        break;
      case 212:                     // 'preceding'
        this.shiftT(212);           // 'preceding'
        this.lookahead1W(26);       // S^WS | '(:' | '::'
        this.shiftT(51);            // '::'
        break;
      default:
        this.shiftT(74);            // 'ancestor-or-self'
        this.lookahead1W(26);       // S^WS | '(:' | '::'
        this.shiftT(51);            // '::'
      }
    }

    private parse_AbbrevReverseStep()
    {
      this.eventHandler.startNonterminal("AbbrevReverseStep", this.e0);
      this.shift(45);               // '..'
      this.eventHandler.endNonterminal("AbbrevReverseStep", this.e0);
    }

    private try_AbbrevReverseStep()
    {
      this.shiftT(45);              // '..'
    }

    private parse_NodeTest()
    {
      this.eventHandler.startNonterminal("NodeTest", this.e0);
      switch (this.l1)
      {
      case 82:                      // 'attribute'
      case 96:                      // 'comment'
      case 120:                     // 'document-node'
      case 121:                     // 'element'
      case 185:                     // 'namespace-node'
      case 191:                     // 'node'
      case 216:                     // 'processing-instruction'
      case 226:                     // 'schema-attribute'
      case 227:                     // 'schema-element'
      case 244:                     // 'text'
        this.lookahead2W(240);      // S^WS | EOF | '!' | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'after' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
        break;
      default:
        this.lk = this.l1;
      }
      switch (this.lk)
      {
      case 17490:                   // 'attribute' '('
      case 17504:                   // 'comment' '('
      case 17528:                   // 'document-node' '('
      case 17529:                   // 'element' '('
      case 17593:                   // 'namespace-node' '('
      case 17599:                   // 'node' '('
      case 17624:                   // 'processing-instruction' '('
      case 17634:                   // 'schema-attribute' '('
      case 17635:                   // 'schema-element' '('
      case 17652:                   // 'text' '('
        this.parse_KindTest();
        break;
      default:
        this.parse_NameTest();
      }
      this.eventHandler.endNonterminal("NodeTest", this.e0);
    }

    private try_NodeTest()
    {
      switch (this.l1)
      {
      case 82:                      // 'attribute'
      case 96:                      // 'comment'
      case 120:                     // 'document-node'
      case 121:                     // 'element'
      case 185:                     // 'namespace-node'
      case 191:                     // 'node'
      case 216:                     // 'processing-instruction'
      case 226:                     // 'schema-attribute'
      case 227:                     // 'schema-element'
      case 244:                     // 'text'
        this.lookahead2W(240);      // S^WS | EOF | '!' | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'after' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
        break;
      default:
        this.lk = this.l1;
      }
      switch (this.lk)
      {
      case 17490:                   // 'attribute' '('
      case 17504:                   // 'comment' '('
      case 17528:                   // 'document-node' '('
      case 17529:                   // 'element' '('
      case 17593:                   // 'namespace-node' '('
      case 17599:                   // 'node' '('
      case 17624:                   // 'processing-instruction' '('
      case 17634:                   // 'schema-attribute' '('
      case 17635:                   // 'schema-element' '('
      case 17652:                   // 'text' '('
        this.try_KindTest();
        break;
      default:
        this.try_NameTest();
      }
    }

    private parse_NameTest()
    {
      this.eventHandler.startNonterminal("NameTest", this.e0);
      switch (this.l1)
      {
      case 5:                       // Wildcard
        this.shift(5);              // Wildcard
        break;
      default:
        this.parse_EQName();
      }
      this.eventHandler.endNonterminal("NameTest", this.e0);
    }

    private try_NameTest()
    {
      switch (this.l1)
      {
      case 5:                       // Wildcard
        this.shiftT(5);             // Wildcard
        break;
      default:
        this.try_EQName();
      }
    }

    private parse_PostfixExpr()
    {
      this.eventHandler.startNonterminal("PostfixExpr", this.e0);
      this.parse_PrimaryExpr();
      for (;;)
      {
        this.lookahead1W(240);      // S^WS | EOF | '!' | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'after' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
        if (this.l1 != 34           // '('
         && this.l1 != 68)          // '['
        {
          break;
        }
        switch (this.l1)
        {
        case 68:                    // '['
          this.whitespace();
          this.parse_Predicate();
          break;
        default:
          this.whitespace();
          this.parse_ArgumentList();
        }
      }
      this.eventHandler.endNonterminal("PostfixExpr", this.e0);
    }

    private try_PostfixExpr()
    {
      this.try_PrimaryExpr();
      for (;;)
      {
        this.lookahead1W(240);      // S^WS | EOF | '!' | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'after' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
        if (this.l1 != 34           // '('
         && this.l1 != 68)          // '['
        {
          break;
        }
        switch (this.l1)
        {
        case 68:                    // '['
          this.try_Predicate();
          break;
        default:
          this.try_ArgumentList();
        }
      }
    }

    private parse_ArgumentList()
    {
      this.eventHandler.startNonterminal("ArgumentList", this.e0);
      this.shift(34);               // '('
      this.lookahead1W(275);        // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | ')' | '+' | '-' | '.' |
                                    // '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
      if (this.l1 != 37)            // ')'
      {
        this.whitespace();
        this.parse_Argument();
        for (;;)
        {
          this.lookahead1W(101);    // S^WS | '(:' | ')' | ','
          if (this.l1 != 41)        // ','
          {
            break;
          }
          this.shift(41);           // ','
          this.lookahead1W(270);    // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
          this.whitespace();
          this.parse_Argument();
        }
      }
      this.shift(37);               // ')'
      this.eventHandler.endNonterminal("ArgumentList", this.e0);
    }

    private try_ArgumentList()
    {
      this.shiftT(34);              // '('
      this.lookahead1W(275);        // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | ')' | '+' | '-' | '.' |
                                    // '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
      if (this.l1 != 37)            // ')'
      {
        this.try_Argument();
        for (;;)
        {
          this.lookahead1W(101);    // S^WS | '(:' | ')' | ','
          if (this.l1 != 41)        // ','
          {
            break;
          }
          this.shiftT(41);          // ','
          this.lookahead1W(270);    // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
          this.try_Argument();
        }
      }
      this.shiftT(37);              // ')'
    }

    private parse_PredicateList()
    {
      this.eventHandler.startNonterminal("PredicateList", this.e0);
      for (;;)
      {
        this.lookahead1W(237);      // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'after' | 'and' |
                                    // 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
        if (this.l1 != 68)          // '['
        {
          break;
        }
        this.whitespace();
        this.parse_Predicate();
      }
      this.eventHandler.endNonterminal("PredicateList", this.e0);
    }

    private try_PredicateList()
    {
      for (;;)
      {
        this.lookahead1W(237);      // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'after' | 'and' |
                                    // 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
        if (this.l1 != 68)          // '['
        {
          break;
        }
        this.try_Predicate();
      }
    }

    private parse_Predicate()
    {
      this.eventHandler.startNonterminal("Predicate", this.e0);
      this.shift(68);               // '['
      this.lookahead1W(266);        // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      this.whitespace();
      this.parse_Expr();
      this.shift(69);               // ']'
      this.eventHandler.endNonterminal("Predicate", this.e0);
    }

    private try_Predicate()
    {
      this.shiftT(68);              // '['
      this.lookahead1W(266);        // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      this.try_Expr();
      this.shiftT(69);              // ']'
    }

    private parse_Literal()
    {
      this.eventHandler.startNonterminal("Literal", this.e0);
      switch (this.l1)
      {
      case 11:                      // StringLiteral
        this.shift(11);             // StringLiteral
        break;
      default:
        this.parse_NumericLiteral();
      }
      this.eventHandler.endNonterminal("Literal", this.e0);
    }

    private try_Literal()
    {
      switch (this.l1)
      {
      case 11:                      // StringLiteral
        this.shiftT(11);            // StringLiteral
        break;
      default:
        this.try_NumericLiteral();
      }
    }

    private parse_NumericLiteral()
    {
      this.eventHandler.startNonterminal("NumericLiteral", this.e0);
      switch (this.l1)
      {
      case 8:                       // IntegerLiteral
        this.shift(8);              // IntegerLiteral
        break;
      case 9:                       // DecimalLiteral
        this.shift(9);              // DecimalLiteral
        break;
      default:
        this.shift(10);             // DoubleLiteral
      }
      this.eventHandler.endNonterminal("NumericLiteral", this.e0);
    }

    private try_NumericLiteral()
    {
      switch (this.l1)
      {
      case 8:                       // IntegerLiteral
        this.shiftT(8);             // IntegerLiteral
        break;
      case 9:                       // DecimalLiteral
        this.shiftT(9);             // DecimalLiteral
        break;
      default:
        this.shiftT(10);            // DoubleLiteral
      }
    }

    private parse_VarRef()
    {
      this.eventHandler.startNonterminal("VarRef", this.e0);
      this.shift(31);               // '$'
      this.lookahead1W(254);        // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
      this.whitespace();
      this.parse_VarName();
      this.eventHandler.endNonterminal("VarRef", this.e0);
    }

    private try_VarRef()
    {
      this.shiftT(31);              // '$'
      this.lookahead1W(254);        // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
      this.try_VarName();
    }

    private parse_VarName()
    {
      this.eventHandler.startNonterminal("VarName", this.e0);
      this.parse_EQName();
      this.eventHandler.endNonterminal("VarName", this.e0);
    }

    private try_VarName()
    {
      this.try_EQName();
    }

    private parse_ParenthesizedExpr()
    {
      this.eventHandler.startNonterminal("ParenthesizedExpr", this.e0);
      this.shift(34);               // '('
      this.lookahead1W(268);        // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | ')' | '+' | '-' | '.' |
                                    // '..' | '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      if (this.l1 != 37)            // ')'
      {
        this.whitespace();
        this.parse_Expr();
      }
      this.shift(37);               // ')'
      this.eventHandler.endNonterminal("ParenthesizedExpr", this.e0);
    }

    private try_ParenthesizedExpr()
    {
      this.shiftT(34);              // '('
      this.lookahead1W(268);        // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | ')' | '+' | '-' | '.' |
                                    // '..' | '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      if (this.l1 != 37)            // ')'
      {
        this.try_Expr();
      }
      this.shiftT(37);              // ')'
    }

    private parse_ContextItemExpr()
    {
      this.eventHandler.startNonterminal("ContextItemExpr", this.e0);
      this.shift(44);               // '.'
      this.eventHandler.endNonterminal("ContextItemExpr", this.e0);
    }

    private try_ContextItemExpr()
    {
      this.shiftT(44);              // '.'
    }

    private parse_OrderedExpr()
    {
      this.eventHandler.startNonterminal("OrderedExpr", this.e0);
      this.shift(202);              // 'ordered'
      this.lookahead1W(87);         // S^WS | '(:' | '{'
      this.shift(276);              // '{'
      this.lookahead1W(266);        // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      this.whitespace();
      this.parse_Expr();
      this.shift(282);              // '}'
      this.eventHandler.endNonterminal("OrderedExpr", this.e0);
    }

    private try_OrderedExpr()
    {
      this.shiftT(202);             // 'ordered'
      this.lookahead1W(87);         // S^WS | '(:' | '{'
      this.shiftT(276);             // '{'
      this.lookahead1W(266);        // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      this.try_Expr();
      this.shiftT(282);             // '}'
    }

    private parse_UnorderedExpr()
    {
      this.eventHandler.startNonterminal("UnorderedExpr", this.e0);
      this.shift(256);              // 'unordered'
      this.lookahead1W(87);         // S^WS | '(:' | '{'
      this.shift(276);              // '{'
      this.lookahead1W(266);        // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      this.whitespace();
      this.parse_Expr();
      this.shift(282);              // '}'
      this.eventHandler.endNonterminal("UnorderedExpr", this.e0);
    }

    private try_UnorderedExpr()
    {
      this.shiftT(256);             // 'unordered'
      this.lookahead1W(87);         // S^WS | '(:' | '{'
      this.shiftT(276);             // '{'
      this.lookahead1W(266);        // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      this.try_Expr();
      this.shiftT(282);             // '}'
    }

    private parse_FunctionCall()
    {
      this.eventHandler.startNonterminal("FunctionCall", this.e0);
      this.parse_FunctionName();
      this.lookahead1W(22);         // S^WS | '(' | '(:'
      this.whitespace();
      this.parse_ArgumentList();
      this.eventHandler.endNonterminal("FunctionCall", this.e0);
    }

    private try_FunctionCall()
    {
      this.try_FunctionName();
      this.lookahead1W(22);         // S^WS | '(' | '(:'
      this.try_ArgumentList();
    }

    private parse_Argument()
    {
      this.eventHandler.startNonterminal("Argument", this.e0);
      switch (this.l1)
      {
      case 64:                      // '?'
        this.parse_ArgumentPlaceholder();
        break;
      default:
        this.parse_ExprSingle();
      }
      this.eventHandler.endNonterminal("Argument", this.e0);
    }

    private try_Argument()
    {
      switch (this.l1)
      {
      case 64:                      // '?'
        this.try_ArgumentPlaceholder();
        break;
      default:
        this.try_ExprSingle();
      }
    }

    private parse_ArgumentPlaceholder()
    {
      this.eventHandler.startNonterminal("ArgumentPlaceholder", this.e0);
      this.shift(64);               // '?'
      this.eventHandler.endNonterminal("ArgumentPlaceholder", this.e0);
    }

    private try_ArgumentPlaceholder()
    {
      this.shiftT(64);              // '?'
    }

    private parse_Constructor()
    {
      this.eventHandler.startNonterminal("Constructor", this.e0);
      switch (this.l1)
      {
      case 54:                      // '<'
      case 55:                      // '<!--'
      case 59:                      // '<?'
        this.parse_DirectConstructor();
        break;
      default:
        this.parse_ComputedConstructor();
      }
      this.eventHandler.endNonterminal("Constructor", this.e0);
    }

    private try_Constructor()
    {
      switch (this.l1)
      {
      case 54:                      // '<'
      case 55:                      // '<!--'
      case 59:                      // '<?'
        this.try_DirectConstructor();
        break;
      default:
        this.try_ComputedConstructor();
      }
    }

    private parse_DirectConstructor()
    {
      this.eventHandler.startNonterminal("DirectConstructor", this.e0);
      switch (this.l1)
      {
      case 54:                      // '<'
        this.parse_DirElemConstructor();
        break;
      case 55:                      // '<!--'
        this.parse_DirCommentConstructor();
        break;
      default:
        this.parse_DirPIConstructor();
      }
      this.eventHandler.endNonterminal("DirectConstructor", this.e0);
    }

    private try_DirectConstructor()
    {
      switch (this.l1)
      {
      case 54:                      // '<'
        this.try_DirElemConstructor();
        break;
      case 55:                      // '<!--'
        this.try_DirCommentConstructor();
        break;
      default:
        this.try_DirPIConstructor();
      }
    }

    private parse_DirElemConstructor()
    {
      this.eventHandler.startNonterminal("DirElemConstructor", this.e0);
      this.shift(54);               // '<'
      this.lookahead1(4);           // QName
      this.shift(20);               // QName
      this.parse_DirAttributeList();
      switch (this.l1)
      {
      case 48:                      // '/>'
        this.shift(48);             // '/>'
        break;
      default:
        this.shift(61);             // '>'
        for (;;)
        {
          this.lookahead1(174);     // CDataSection | PredefinedEntityRef | ElementContentChar | CharRef | '<' |
                                    // '<!--' | '</' | '<?' | '{' | '{{' | '}}'
          if (this.l1 == 56)        // '</'
          {
            break;
          }
          this.parse_DirElemContent();
        }
        this.shift(56);             // '</'
        this.lookahead1(4);         // QName
        this.shift(20);             // QName
        this.lookahead1(12);        // S | '>'
        if (this.l1 == 21)          // S
        {
          this.shift(21);           // S
        }
        this.lookahead1(8);         // '>'
        this.shift(61);             // '>'
      }
      this.eventHandler.endNonterminal("DirElemConstructor", this.e0);
    }

    private try_DirElemConstructor()
    {
      this.shiftT(54);              // '<'
      this.lookahead1(4);           // QName
      this.shiftT(20);              // QName
      this.try_DirAttributeList();
      switch (this.l1)
      {
      case 48:                      // '/>'
        this.shiftT(48);            // '/>'
        break;
      default:
        this.shiftT(61);            // '>'
        for (;;)
        {
          this.lookahead1(174);     // CDataSection | PredefinedEntityRef | ElementContentChar | CharRef | '<' |
                                    // '<!--' | '</' | '<?' | '{' | '{{' | '}}'
          if (this.l1 == 56)        // '</'
          {
            break;
          }
          this.try_DirElemContent();
        }
        this.shiftT(56);            // '</'
        this.lookahead1(4);         // QName
        this.shiftT(20);            // QName
        this.lookahead1(12);        // S | '>'
        if (this.l1 == 21)          // S
        {
          this.shiftT(21);          // S
        }
        this.lookahead1(8);         // '>'
        this.shiftT(61);            // '>'
      }
    }

    private parse_DirAttributeList()
    {
      this.eventHandler.startNonterminal("DirAttributeList", this.e0);
      for (;;)
      {
        this.lookahead1(19);        // S | '/>' | '>'
        if (this.l1 != 21)          // S
        {
          break;
        }
        this.shift(21);             // S
        this.lookahead1(91);        // QName | S | '/>' | '>'
        if (this.l1 == 20)          // QName
        {
          this.shift(20);           // QName
          this.lookahead1(11);      // S | '='
          if (this.l1 == 21)        // S
          {
            this.shift(21);         // S
          }
          this.lookahead1(7);       // '='
          this.shift(60);           // '='
          this.lookahead1(18);      // S | '"' | "'"
          if (this.l1 == 21)        // S
          {
            this.shift(21);         // S
          }
          this.parse_DirAttributeValue();
        }
      }
      this.eventHandler.endNonterminal("DirAttributeList", this.e0);
    }

    private try_DirAttributeList()
    {
      for (;;)
      {
        this.lookahead1(19);        // S | '/>' | '>'
        if (this.l1 != 21)          // S
        {
          break;
        }
        this.shiftT(21);            // S
        this.lookahead1(91);        // QName | S | '/>' | '>'
        if (this.l1 == 20)          // QName
        {
          this.shiftT(20);          // QName
          this.lookahead1(11);      // S | '='
          if (this.l1 == 21)        // S
          {
            this.shiftT(21);        // S
          }
          this.lookahead1(7);       // '='
          this.shiftT(60);          // '='
          this.lookahead1(18);      // S | '"' | "'"
          if (this.l1 == 21)        // S
          {
            this.shiftT(21);        // S
          }
          this.try_DirAttributeValue();
        }
      }
    }

    private parse_DirAttributeValue()
    {
      this.eventHandler.startNonterminal("DirAttributeValue", this.e0);
      this.lookahead1(14);          // '"' | "'"
      switch (this.l1)
      {
      case 28:                      // '"'
        this.shift(28);             // '"'
        for (;;)
        {
          this.lookahead1(167);     // PredefinedEntityRef | EscapeQuot | QuotAttrContentChar | CharRef | '"' | '{' |
                                    // '{{' | '}}'
          if (this.l1 == 28)        // '"'
          {
            break;
          }
          switch (this.l1)
          {
          case 13:                  // EscapeQuot
            this.shift(13);         // EscapeQuot
            break;
          default:
            this.parse_QuotAttrValueContent();
          }
        }
        this.shift(28);             // '"'
        break;
      default:
        this.shift(33);             // "'"
        for (;;)
        {
          this.lookahead1(168);     // PredefinedEntityRef | EscapeApos | AposAttrContentChar | CharRef | "'" | '{' |
                                    // '{{' | '}}'
          if (this.l1 == 33)        // "'"
          {
            break;
          }
          switch (this.l1)
          {
          case 14:                  // EscapeApos
            this.shift(14);         // EscapeApos
            break;
          default:
            this.parse_AposAttrValueContent();
          }
        }
        this.shift(33);             // "'"
      }
      this.eventHandler.endNonterminal("DirAttributeValue", this.e0);
    }

    private try_DirAttributeValue()
    {
      this.lookahead1(14);          // '"' | "'"
      switch (this.l1)
      {
      case 28:                      // '"'
        this.shiftT(28);            // '"'
        for (;;)
        {
          this.lookahead1(167);     // PredefinedEntityRef | EscapeQuot | QuotAttrContentChar | CharRef | '"' | '{' |
                                    // '{{' | '}}'
          if (this.l1 == 28)        // '"'
          {
            break;
          }
          switch (this.l1)
          {
          case 13:                  // EscapeQuot
            this.shiftT(13);        // EscapeQuot
            break;
          default:
            this.try_QuotAttrValueContent();
          }
        }
        this.shiftT(28);            // '"'
        break;
      default:
        this.shiftT(33);            // "'"
        for (;;)
        {
          this.lookahead1(168);     // PredefinedEntityRef | EscapeApos | AposAttrContentChar | CharRef | "'" | '{' |
                                    // '{{' | '}}'
          if (this.l1 == 33)        // "'"
          {
            break;
          }
          switch (this.l1)
          {
          case 14:                  // EscapeApos
            this.shiftT(14);        // EscapeApos
            break;
          default:
            this.try_AposAttrValueContent();
          }
        }
        this.shiftT(33);            // "'"
      }
    }

    private parse_QuotAttrValueContent()
    {
      this.eventHandler.startNonterminal("QuotAttrValueContent", this.e0);
      switch (this.l1)
      {
      case 16:                      // QuotAttrContentChar
        this.shift(16);             // QuotAttrContentChar
        break;
      default:
        this.parse_CommonContent();
      }
      this.eventHandler.endNonterminal("QuotAttrValueContent", this.e0);
    }

    private try_QuotAttrValueContent()
    {
      switch (this.l1)
      {
      case 16:                      // QuotAttrContentChar
        this.shiftT(16);            // QuotAttrContentChar
        break;
      default:
        this.try_CommonContent();
      }
    }

    private parse_AposAttrValueContent()
    {
      this.eventHandler.startNonterminal("AposAttrValueContent", this.e0);
      switch (this.l1)
      {
      case 17:                      // AposAttrContentChar
        this.shift(17);             // AposAttrContentChar
        break;
      default:
        this.parse_CommonContent();
      }
      this.eventHandler.endNonterminal("AposAttrValueContent", this.e0);
    }

    private try_AposAttrValueContent()
    {
      switch (this.l1)
      {
      case 17:                      // AposAttrContentChar
        this.shiftT(17);            // AposAttrContentChar
        break;
      default:
        this.try_CommonContent();
      }
    }

    private parse_DirElemContent()
    {
      this.eventHandler.startNonterminal("DirElemContent", this.e0);
      switch (this.l1)
      {
      case 54:                      // '<'
      case 55:                      // '<!--'
      case 59:                      // '<?'
        this.parse_DirectConstructor();
        break;
      case 4:                       // CDataSection
        this.shift(4);              // CDataSection
        break;
      case 15:                      // ElementContentChar
        this.shift(15);             // ElementContentChar
        break;
      default:
        this.parse_CommonContent();
      }
      this.eventHandler.endNonterminal("DirElemContent", this.e0);
    }

    private try_DirElemContent()
    {
      switch (this.l1)
      {
      case 54:                      // '<'
      case 55:                      // '<!--'
      case 59:                      // '<?'
        this.try_DirectConstructor();
        break;
      case 4:                       // CDataSection
        this.shiftT(4);             // CDataSection
        break;
      case 15:                      // ElementContentChar
        this.shiftT(15);            // ElementContentChar
        break;
      default:
        this.try_CommonContent();
      }
    }

    private parse_DirCommentConstructor()
    {
      this.eventHandler.startNonterminal("DirCommentConstructor", this.e0);
      this.shift(55);               // '<!--'
      this.lookahead1(1);           // DirCommentContents
      this.shift(2);                // DirCommentContents
      this.lookahead1(6);           // '-->'
      this.shift(43);               // '-->'
      this.eventHandler.endNonterminal("DirCommentConstructor", this.e0);
    }

    private try_DirCommentConstructor()
    {
      this.shiftT(55);              // '<!--'
      this.lookahead1(1);           // DirCommentContents
      this.shiftT(2);               // DirCommentContents
      this.lookahead1(6);           // '-->'
      this.shiftT(43);              // '-->'
    }

    private parse_DirPIConstructor()
    {
      this.eventHandler.startNonterminal("DirPIConstructor", this.e0);
      this.shift(59);               // '<?'
      this.lookahead1(3);           // PITarget
      this.shift(18);               // PITarget
      this.lookahead1(13);          // S | '?>'
      if (this.l1 == 21)            // S
      {
        this.shift(21);             // S
        this.lookahead1(2);         // DirPIContents
        this.shift(3);              // DirPIContents
      }
      this.lookahead1(9);           // '?>'
      this.shift(65);               // '?>'
      this.eventHandler.endNonterminal("DirPIConstructor", this.e0);
    }

    private try_DirPIConstructor()
    {
      this.shiftT(59);              // '<?'
      this.lookahead1(3);           // PITarget
      this.shiftT(18);              // PITarget
      this.lookahead1(13);          // S | '?>'
      if (this.l1 == 21)            // S
      {
        this.shiftT(21);            // S
        this.lookahead1(2);         // DirPIContents
        this.shiftT(3);             // DirPIContents
      }
      this.lookahead1(9);           // '?>'
      this.shiftT(65);              // '?>'
    }

    private parse_ComputedConstructor()
    {
      this.eventHandler.startNonterminal("ComputedConstructor", this.e0);
      switch (this.l1)
      {
      case 119:                     // 'document'
        this.parse_CompDocConstructor();
        break;
      case 121:                     // 'element'
        this.parse_CompElemConstructor();
        break;
      case 82:                      // 'attribute'
        this.parse_CompAttrConstructor();
        break;
      case 184:                     // 'namespace'
        this.parse_CompNamespaceConstructor();
        break;
      case 244:                     // 'text'
        this.parse_CompTextConstructor();
        break;
      case 96:                      // 'comment'
        this.parse_CompCommentConstructor();
        break;
      default:
        this.parse_CompPIConstructor();
      }
      this.eventHandler.endNonterminal("ComputedConstructor", this.e0);
    }

    private try_ComputedConstructor()
    {
      switch (this.l1)
      {
      case 119:                     // 'document'
        this.try_CompDocConstructor();
        break;
      case 121:                     // 'element'
        this.try_CompElemConstructor();
        break;
      case 82:                      // 'attribute'
        this.try_CompAttrConstructor();
        break;
      case 184:                     // 'namespace'
        this.try_CompNamespaceConstructor();
        break;
      case 244:                     // 'text'
        this.try_CompTextConstructor();
        break;
      case 96:                      // 'comment'
        this.try_CompCommentConstructor();
        break;
      default:
        this.try_CompPIConstructor();
      }
    }

    private parse_CompElemConstructor()
    {
      this.eventHandler.startNonterminal("CompElemConstructor", this.e0);
      this.shift(121);              // 'element'
      this.lookahead1W(257);        // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{'
      switch (this.l1)
      {
      case 276:                     // '{'
        this.shift(276);            // '{'
        this.lookahead1W(266);      // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
        this.whitespace();
        this.parse_Expr();
        this.shift(282);            // '}'
        break;
      default:
        this.whitespace();
        this.parse_EQName();
      }
      this.lookahead1W(87);         // S^WS | '(:' | '{'
      this.shift(276);              // '{'
      this.lookahead1W(276);        // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|' | '}'
      if (this.l1 != 282)           // '}'
      {
        this.whitespace();
        this.parse_ContentExpr();
      }
      this.shift(282);              // '}'
      this.eventHandler.endNonterminal("CompElemConstructor", this.e0);
    }

    private try_CompElemConstructor()
    {
      this.shiftT(121);             // 'element'
      this.lookahead1W(257);        // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{'
      switch (this.l1)
      {
      case 276:                     // '{'
        this.shiftT(276);           // '{'
        this.lookahead1W(266);      // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
        this.try_Expr();
        this.shiftT(282);           // '}'
        break;
      default:
        this.try_EQName();
      }
      this.lookahead1W(87);         // S^WS | '(:' | '{'
      this.shiftT(276);             // '{'
      this.lookahead1W(276);        // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|' | '}'
      if (this.l1 != 282)           // '}'
      {
        this.try_ContentExpr();
      }
      this.shiftT(282);             // '}'
    }

    private parse_CompNamespaceConstructor()
    {
      this.eventHandler.startNonterminal("CompNamespaceConstructor", this.e0);
      this.shift(184);              // 'namespace'
      this.lookahead1W(250);        // NCName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'last' | 'lax' | 'le' | 'let' |
                                    // 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{'
      switch (this.l1)
      {
      case 276:                     // '{'
        this.shift(276);            // '{'
        this.lookahead1W(266);      // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
        this.whitespace();
        this.parse_PrefixExpr();
        this.shift(282);            // '}'
        break;
      default:
        this.whitespace();
        this.parse_Prefix();
      }
      this.lookahead1W(87);         // S^WS | '(:' | '{'
      this.shift(276);              // '{'
      this.lookahead1W(266);        // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      this.whitespace();
      this.parse_URIExpr();
      this.shift(282);              // '}'
      this.eventHandler.endNonterminal("CompNamespaceConstructor", this.e0);
    }

    private try_CompNamespaceConstructor()
    {
      this.shiftT(184);             // 'namespace'
      this.lookahead1W(250);        // NCName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'last' | 'lax' | 'le' | 'let' |
                                    // 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{'
      switch (this.l1)
      {
      case 276:                     // '{'
        this.shiftT(276);           // '{'
        this.lookahead1W(266);      // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
        this.try_PrefixExpr();
        this.shiftT(282);           // '}'
        break;
      default:
        this.try_Prefix();
      }
      this.lookahead1W(87);         // S^WS | '(:' | '{'
      this.shiftT(276);             // '{'
      this.lookahead1W(266);        // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      this.try_URIExpr();
      this.shiftT(282);             // '}'
    }

    private parse_Prefix()
    {
      this.eventHandler.startNonterminal("Prefix", this.e0);
      this.parse_NCName();
      this.eventHandler.endNonterminal("Prefix", this.e0);
    }

    private try_Prefix()
    {
      this.try_NCName();
    }

    private parse_PrefixExpr()
    {
      this.eventHandler.startNonterminal("PrefixExpr", this.e0);
      this.parse_Expr();
      this.eventHandler.endNonterminal("PrefixExpr", this.e0);
    }

    private try_PrefixExpr()
    {
      this.try_Expr();
    }

    private parse_URIExpr()
    {
      this.eventHandler.startNonterminal("URIExpr", this.e0);
      this.parse_Expr();
      this.eventHandler.endNonterminal("URIExpr", this.e0);
    }

    private try_URIExpr()
    {
      this.try_Expr();
    }

    private parse_FunctionItemExpr()
    {
      this.eventHandler.startNonterminal("FunctionItemExpr", this.e0);
      switch (this.l1)
      {
      case 145:                     // 'function'
        this.lookahead2W(92);       // S^WS | '#' | '(' | '(:'
        break;
      default:
        this.lk = this.l1;
      }
      switch (this.lk)
      {
      case 32:                      // '%'
      case 17553:                   // 'function' '('
        this.parse_InlineFunctionExpr();
        break;
      default:
        this.parse_NamedFunctionRef();
      }
      this.eventHandler.endNonterminal("FunctionItemExpr", this.e0);
    }

    private try_FunctionItemExpr()
    {
      switch (this.l1)
      {
      case 145:                     // 'function'
        this.lookahead2W(92);       // S^WS | '#' | '(' | '(:'
        break;
      default:
        this.lk = this.l1;
      }
      switch (this.lk)
      {
      case 32:                      // '%'
      case 17553:                   // 'function' '('
        this.try_InlineFunctionExpr();
        break;
      default:
        this.try_NamedFunctionRef();
      }
    }

    private parse_NamedFunctionRef()
    {
      this.eventHandler.startNonterminal("NamedFunctionRef", this.e0);
      this.parse_EQName();
      this.lookahead1W(20);         // S^WS | '#' | '(:'
      this.shift(29);               // '#'
      this.lookahead1W(16);         // IntegerLiteral | S^WS | '(:'
      this.shift(8);                // IntegerLiteral
      this.eventHandler.endNonterminal("NamedFunctionRef", this.e0);
    }

    private try_NamedFunctionRef()
    {
      this.try_EQName();
      this.lookahead1W(20);         // S^WS | '#' | '(:'
      this.shiftT(29);              // '#'
      this.lookahead1W(16);         // IntegerLiteral | S^WS | '(:'
      this.shiftT(8);               // IntegerLiteral
    }

    private parse_InlineFunctionExpr()
    {
      this.eventHandler.startNonterminal("InlineFunctionExpr", this.e0);
      for (;;)
      {
        this.lookahead1W(97);       // S^WS | '%' | '(:' | 'function'
        if (this.l1 != 32)          // '%'
        {
          break;
        }
        this.whitespace();
        this.parse_Annotation();
      }
      this.shift(145);              // 'function'
      this.lookahead1W(22);         // S^WS | '(' | '(:'
      this.shift(34);               // '('
      this.lookahead1W(94);         // S^WS | '$' | '(:' | ')'
      if (this.l1 == 31)            // '$'
      {
        this.whitespace();
        this.parse_ParamList();
      }
      this.shift(37);               // ')'
      this.lookahead1W(111);        // S^WS | '(:' | 'as' | '{'
      if (this.l1 == 79)            // 'as'
      {
        this.shift(79);             // 'as'
        this.lookahead1W(259);      // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
        this.whitespace();
        this.parse_SequenceType();
      }
      this.lookahead1W(87);         // S^WS | '(:' | '{'
      this.whitespace();
      this.parse_FunctionBody();
      this.eventHandler.endNonterminal("InlineFunctionExpr", this.e0);
    }

    private try_InlineFunctionExpr()
    {
      for (;;)
      {
        this.lookahead1W(97);       // S^WS | '%' | '(:' | 'function'
        if (this.l1 != 32)          // '%'
        {
          break;
        }
        this.try_Annotation();
      }
      this.shiftT(145);             // 'function'
      this.lookahead1W(22);         // S^WS | '(' | '(:'
      this.shiftT(34);              // '('
      this.lookahead1W(94);         // S^WS | '$' | '(:' | ')'
      if (this.l1 == 31)            // '$'
      {
        this.try_ParamList();
      }
      this.shiftT(37);              // ')'
      this.lookahead1W(111);        // S^WS | '(:' | 'as' | '{'
      if (this.l1 == 79)            // 'as'
      {
        this.shiftT(79);            // 'as'
        this.lookahead1W(259);      // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
        this.try_SequenceType();
      }
      this.lookahead1W(87);         // S^WS | '(:' | '{'
      this.try_FunctionBody();
    }

    private parse_SingleType()
    {
      this.eventHandler.startNonterminal("SingleType", this.e0);
      this.parse_SimpleTypeName();
      this.lookahead1W(226);        // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' | 'and' | 'as' |
                                    // 'ascending' | 'at' | 'before' | 'case' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' |
                                    // 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' |
                                    // 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' |
                                    // 'order' | 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' |
                                    // 'start' | 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' |
                                    // '||' | '|}' | '}'
      if (this.l1 == 64)            // '?'
      {
        this.shift(64);             // '?'
      }
      this.eventHandler.endNonterminal("SingleType", this.e0);
    }

    private try_SingleType()
    {
      this.try_SimpleTypeName();
      this.lookahead1W(226);        // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' | 'and' | 'as' |
                                    // 'ascending' | 'at' | 'before' | 'case' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' |
                                    // 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' |
                                    // 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' |
                                    // 'order' | 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' |
                                    // 'start' | 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' |
                                    // '||' | '|}' | '}'
      if (this.l1 == 64)            // '?'
      {
        this.shiftT(64);            // '?'
      }
    }

    private parse_TypeDeclaration()
    {
      this.eventHandler.startNonterminal("TypeDeclaration", this.e0);
      this.shift(79);               // 'as'
      this.lookahead1W(259);        // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
      this.whitespace();
      this.parse_SequenceType();
      this.eventHandler.endNonterminal("TypeDeclaration", this.e0);
    }

    private try_TypeDeclaration()
    {
      this.shiftT(79);              // 'as'
      this.lookahead1W(259);        // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
      this.try_SequenceType();
    }

    private parse_SequenceType()
    {
      this.eventHandler.startNonterminal("SequenceType", this.e0);
      switch (this.l1)
      {
      case 124:                     // 'empty-sequence'
        this.lookahead2W(242);      // S^WS | EOF | '!=' | '(' | '(:' | ')' | '*' | '*' | '+' | ',' | '-' | ':' | ':=' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' |
                                    // 'allowing' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'external' | 'for' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'in' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'score' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'union' | 'where' | 'with' | 'words' | '{' | '|' | '||' | '|}' | '}'
        break;
      default:
        this.lk = this.l1;
      }
      switch (this.lk)
      {
      case 17532:                   // 'empty-sequence' '('
        this.shift(124);            // 'empty-sequence'
        this.lookahead1W(22);       // S^WS | '(' | '(:'
        this.shift(34);             // '('
        this.lookahead1W(23);       // S^WS | '(:' | ')'
        this.shift(37);             // ')'
        break;
      default:
        this.parse_ItemType();
        this.lookahead1W(238);      // S^WS | EOF | '!=' | '(:' | ')' | '*' | '*' | '+' | ',' | '-' | ':' | ':=' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' | 'allowing' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'collation' |
                                    // 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' |
                                    // 'end' | 'eq' | 'except' | 'external' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'in' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'score' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'union' | 'where' | 'with' | 'words' | '{' | '|' | '||' | '|}' | '}'
        switch (this.l1)
        {
        case 39:                    // '*'
        case 40:                    // '+'
        case 64:                    // '?'
          this.whitespace();
          this.parse_OccurrenceIndicator();
          break;
        default:
          break;
        }
      }
      this.eventHandler.endNonterminal("SequenceType", this.e0);
    }

    private try_SequenceType()
    {
      switch (this.l1)
      {
      case 124:                     // 'empty-sequence'
        this.lookahead2W(242);      // S^WS | EOF | '!=' | '(' | '(:' | ')' | '*' | '*' | '+' | ',' | '-' | ':' | ':=' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' |
                                    // 'allowing' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'external' | 'for' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'in' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'score' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'union' | 'where' | 'with' | 'words' | '{' | '|' | '||' | '|}' | '}'
        break;
      default:
        this.lk = this.l1;
      }
      switch (this.lk)
      {
      case 17532:                   // 'empty-sequence' '('
        this.shiftT(124);           // 'empty-sequence'
        this.lookahead1W(22);       // S^WS | '(' | '(:'
        this.shiftT(34);            // '('
        this.lookahead1W(23);       // S^WS | '(:' | ')'
        this.shiftT(37);            // ')'
        break;
      default:
        this.try_ItemType();
        this.lookahead1W(238);      // S^WS | EOF | '!=' | '(:' | ')' | '*' | '*' | '+' | ',' | '-' | ':' | ':=' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' | 'allowing' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'collation' |
                                    // 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' |
                                    // 'end' | 'eq' | 'except' | 'external' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'in' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'score' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'union' | 'where' | 'with' | 'words' | '{' | '|' | '||' | '|}' | '}'
        switch (this.l1)
        {
        case 39:                    // '*'
        case 40:                    // '+'
        case 64:                    // '?'
          this.try_OccurrenceIndicator();
          break;
        default:
          break;
        }
      }
    }

    private parse_OccurrenceIndicator()
    {
      this.eventHandler.startNonterminal("OccurrenceIndicator", this.e0);
      switch (this.l1)
      {
      case 64:                      // '?'
        this.shift(64);             // '?'
        break;
      case 39:                      // '*'
        this.shift(39);             // '*'
        break;
      default:
        this.shift(40);             // '+'
      }
      this.eventHandler.endNonterminal("OccurrenceIndicator", this.e0);
    }

    private try_OccurrenceIndicator()
    {
      switch (this.l1)
      {
      case 64:                      // '?'
        this.shiftT(64);            // '?'
        break;
      case 39:                      // '*'
        this.shiftT(39);            // '*'
        break;
      default:
        this.shiftT(40);            // '+'
      }
    }

    private parse_ItemType()
    {
      this.eventHandler.startNonterminal("ItemType", this.e0);
      switch (this.l1)
      {
      case 78:                      // 'array'
      case 82:                      // 'attribute'
      case 96:                      // 'comment'
      case 120:                     // 'document-node'
      case 121:                     // 'element'
      case 145:                     // 'function'
      case 165:                     // 'item'
      case 167:                     // 'json-item'
      case 185:                     // 'namespace-node'
      case 191:                     // 'node'
      case 194:                     // 'object'
      case 216:                     // 'processing-instruction'
      case 226:                     // 'schema-attribute'
      case 227:                     // 'schema-element'
      case 242:                     // 'structured-item'
      case 244:                     // 'text'
        this.lookahead2W(242);      // S^WS | EOF | '!=' | '(' | '(:' | ')' | '*' | '*' | '+' | ',' | '-' | ':' | ':=' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' |
                                    // 'allowing' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'external' | 'for' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'in' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'score' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'union' | 'where' | 'with' | 'words' | '{' | '|' | '||' | '|}' | '}'
        break;
      default:
        this.lk = this.l1;
      }
      switch (this.lk)
      {
      case 17490:                   // 'attribute' '('
      case 17504:                   // 'comment' '('
      case 17528:                   // 'document-node' '('
      case 17529:                   // 'element' '('
      case 17593:                   // 'namespace-node' '('
      case 17599:                   // 'node' '('
      case 17624:                   // 'processing-instruction' '('
      case 17634:                   // 'schema-attribute' '('
      case 17635:                   // 'schema-element' '('
      case 17652:                   // 'text' '('
        this.parse_KindTest();
        break;
      case 17573:                   // 'item' '('
        this.shift(165);            // 'item'
        this.lookahead1W(22);       // S^WS | '(' | '(:'
        this.shift(34);             // '('
        this.lookahead1W(23);       // S^WS | '(:' | ')'
        this.shift(37);             // ')'
        break;
      case 32:                      // '%'
      case 17553:                   // 'function' '('
        this.parse_FunctionTest();
        break;
      case 34:                      // '('
        this.parse_ParenthesizedItemType();
        break;
      case 17486:                   // 'array' '('
      case 17575:                   // 'json-item' '('
      case 17602:                   // 'object' '('
        this.parse_JSONTest();
        break;
      case 17650:                   // 'structured-item' '('
        this.parse_StructuredItemTest();
        break;
      default:
        this.parse_AtomicOrUnionType();
      }
      this.eventHandler.endNonterminal("ItemType", this.e0);
    }

    private try_ItemType()
    {
      switch (this.l1)
      {
      case 78:                      // 'array'
      case 82:                      // 'attribute'
      case 96:                      // 'comment'
      case 120:                     // 'document-node'
      case 121:                     // 'element'
      case 145:                     // 'function'
      case 165:                     // 'item'
      case 167:                     // 'json-item'
      case 185:                     // 'namespace-node'
      case 191:                     // 'node'
      case 194:                     // 'object'
      case 216:                     // 'processing-instruction'
      case 226:                     // 'schema-attribute'
      case 227:                     // 'schema-element'
      case 242:                     // 'structured-item'
      case 244:                     // 'text'
        this.lookahead2W(242);      // S^WS | EOF | '!=' | '(' | '(:' | ')' | '*' | '*' | '+' | ',' | '-' | ':' | ':=' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' |
                                    // 'allowing' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'external' | 'for' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'in' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'score' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'union' | 'where' | 'with' | 'words' | '{' | '|' | '||' | '|}' | '}'
        break;
      default:
        this.lk = this.l1;
      }
      switch (this.lk)
      {
      case 17490:                   // 'attribute' '('
      case 17504:                   // 'comment' '('
      case 17528:                   // 'document-node' '('
      case 17529:                   // 'element' '('
      case 17593:                   // 'namespace-node' '('
      case 17599:                   // 'node' '('
      case 17624:                   // 'processing-instruction' '('
      case 17634:                   // 'schema-attribute' '('
      case 17635:                   // 'schema-element' '('
      case 17652:                   // 'text' '('
        this.try_KindTest();
        break;
      case 17573:                   // 'item' '('
        this.shiftT(165);           // 'item'
        this.lookahead1W(22);       // S^WS | '(' | '(:'
        this.shiftT(34);            // '('
        this.lookahead1W(23);       // S^WS | '(:' | ')'
        this.shiftT(37);            // ')'
        break;
      case 32:                      // '%'
      case 17553:                   // 'function' '('
        this.try_FunctionTest();
        break;
      case 34:                      // '('
        this.try_ParenthesizedItemType();
        break;
      case 17486:                   // 'array' '('
      case 17575:                   // 'json-item' '('
      case 17602:                   // 'object' '('
        this.try_JSONTest();
        break;
      case 17650:                   // 'structured-item' '('
        this.try_StructuredItemTest();
        break;
      default:
        this.try_AtomicOrUnionType();
      }
    }

    private parse_JSONTest()
    {
      this.eventHandler.startNonterminal("JSONTest", this.e0);
      switch (this.l1)
      {
      case 167:                     // 'json-item'
        this.parse_JSONItemTest();
        break;
      case 194:                     // 'object'
        this.parse_JSONObjectTest();
        break;
      default:
        this.parse_JSONArrayTest();
      }
      this.eventHandler.endNonterminal("JSONTest", this.e0);
    }

    private try_JSONTest()
    {
      switch (this.l1)
      {
      case 167:                     // 'json-item'
        this.try_JSONItemTest();
        break;
      case 194:                     // 'object'
        this.try_JSONObjectTest();
        break;
      default:
        this.try_JSONArrayTest();
      }
    }

    private parse_StructuredItemTest()
    {
      this.eventHandler.startNonterminal("StructuredItemTest", this.e0);
      this.shift(242);              // 'structured-item'
      this.lookahead1W(22);         // S^WS | '(' | '(:'
      this.shift(34);               // '('
      this.lookahead1W(23);         // S^WS | '(:' | ')'
      this.shift(37);               // ')'
      this.eventHandler.endNonterminal("StructuredItemTest", this.e0);
    }

    private try_StructuredItemTest()
    {
      this.shiftT(242);             // 'structured-item'
      this.lookahead1W(22);         // S^WS | '(' | '(:'
      this.shiftT(34);              // '('
      this.lookahead1W(23);         // S^WS | '(:' | ')'
      this.shiftT(37);              // ')'
    }

    private parse_JSONItemTest()
    {
      this.eventHandler.startNonterminal("JSONItemTest", this.e0);
      this.shift(167);              // 'json-item'
      this.lookahead1W(22);         // S^WS | '(' | '(:'
      this.shift(34);               // '('
      this.lookahead1W(23);         // S^WS | '(:' | ')'
      this.shift(37);               // ')'
      this.eventHandler.endNonterminal("JSONItemTest", this.e0);
    }

    private try_JSONItemTest()
    {
      this.shiftT(167);             // 'json-item'
      this.lookahead1W(22);         // S^WS | '(' | '(:'
      this.shiftT(34);              // '('
      this.lookahead1W(23);         // S^WS | '(:' | ')'
      this.shiftT(37);              // ')'
    }

    private parse_JSONObjectTest()
    {
      this.eventHandler.startNonterminal("JSONObjectTest", this.e0);
      this.shift(194);              // 'object'
      this.lookahead1W(22);         // S^WS | '(' | '(:'
      this.shift(34);               // '('
      this.lookahead1W(23);         // S^WS | '(:' | ')'
      this.shift(37);               // ')'
      this.eventHandler.endNonterminal("JSONObjectTest", this.e0);
    }

    private try_JSONObjectTest()
    {
      this.shiftT(194);             // 'object'
      this.lookahead1W(22);         // S^WS | '(' | '(:'
      this.shiftT(34);              // '('
      this.lookahead1W(23);         // S^WS | '(:' | ')'
      this.shiftT(37);              // ')'
    }

    private parse_JSONArrayTest()
    {
      this.eventHandler.startNonterminal("JSONArrayTest", this.e0);
      this.shift(78);               // 'array'
      this.lookahead1W(22);         // S^WS | '(' | '(:'
      this.shift(34);               // '('
      this.lookahead1W(23);         // S^WS | '(:' | ')'
      this.shift(37);               // ')'
      this.eventHandler.endNonterminal("JSONArrayTest", this.e0);
    }

    private try_JSONArrayTest()
    {
      this.shiftT(78);              // 'array'
      this.lookahead1W(22);         // S^WS | '(' | '(:'
      this.shiftT(34);              // '('
      this.lookahead1W(23);         // S^WS | '(:' | ')'
      this.shiftT(37);              // ')'
    }

    private parse_AtomicOrUnionType()
    {
      this.eventHandler.startNonterminal("AtomicOrUnionType", this.e0);
      this.parse_EQName();
      this.eventHandler.endNonterminal("AtomicOrUnionType", this.e0);
    }

    private try_AtomicOrUnionType()
    {
      this.try_EQName();
    }

    private parse_KindTest()
    {
      this.eventHandler.startNonterminal("KindTest", this.e0);
      switch (this.l1)
      {
      case 120:                     // 'document-node'
        this.parse_DocumentTest();
        break;
      case 121:                     // 'element'
        this.parse_ElementTest();
        break;
      case 82:                      // 'attribute'
        this.parse_AttributeTest();
        break;
      case 227:                     // 'schema-element'
        this.parse_SchemaElementTest();
        break;
      case 226:                     // 'schema-attribute'
        this.parse_SchemaAttributeTest();
        break;
      case 216:                     // 'processing-instruction'
        this.parse_PITest();
        break;
      case 96:                      // 'comment'
        this.parse_CommentTest();
        break;
      case 244:                     // 'text'
        this.parse_TextTest();
        break;
      case 185:                     // 'namespace-node'
        this.parse_NamespaceNodeTest();
        break;
      default:
        this.parse_AnyKindTest();
      }
      this.eventHandler.endNonterminal("KindTest", this.e0);
    }

    private try_KindTest()
    {
      switch (this.l1)
      {
      case 120:                     // 'document-node'
        this.try_DocumentTest();
        break;
      case 121:                     // 'element'
        this.try_ElementTest();
        break;
      case 82:                      // 'attribute'
        this.try_AttributeTest();
        break;
      case 227:                     // 'schema-element'
        this.try_SchemaElementTest();
        break;
      case 226:                     // 'schema-attribute'
        this.try_SchemaAttributeTest();
        break;
      case 216:                     // 'processing-instruction'
        this.try_PITest();
        break;
      case 96:                      // 'comment'
        this.try_CommentTest();
        break;
      case 244:                     // 'text'
        this.try_TextTest();
        break;
      case 185:                     // 'namespace-node'
        this.try_NamespaceNodeTest();
        break;
      default:
        this.try_AnyKindTest();
      }
    }

    private parse_AnyKindTest()
    {
      this.eventHandler.startNonterminal("AnyKindTest", this.e0);
      this.shift(191);              // 'node'
      this.lookahead1W(22);         // S^WS | '(' | '(:'
      this.shift(34);               // '('
      this.lookahead1W(23);         // S^WS | '(:' | ')'
      this.shift(37);               // ')'
      this.eventHandler.endNonterminal("AnyKindTest", this.e0);
    }

    private try_AnyKindTest()
    {
      this.shiftT(191);             // 'node'
      this.lookahead1W(22);         // S^WS | '(' | '(:'
      this.shiftT(34);              // '('
      this.lookahead1W(23);         // S^WS | '(:' | ')'
      this.shiftT(37);              // ')'
    }

    private parse_DocumentTest()
    {
      this.eventHandler.startNonterminal("DocumentTest", this.e0);
      this.shift(120);              // 'document-node'
      this.lookahead1W(22);         // S^WS | '(' | '(:'
      this.shift(34);               // '('
      this.lookahead1W(144);        // S^WS | '(:' | ')' | 'element' | 'schema-element'
      if (this.l1 != 37)            // ')'
      {
        switch (this.l1)
        {
        case 121:                   // 'element'
          this.whitespace();
          this.parse_ElementTest();
          break;
        default:
          this.whitespace();
          this.parse_SchemaElementTest();
        }
      }
      this.lookahead1W(23);         // S^WS | '(:' | ')'
      this.shift(37);               // ')'
      this.eventHandler.endNonterminal("DocumentTest", this.e0);
    }

    private try_DocumentTest()
    {
      this.shiftT(120);             // 'document-node'
      this.lookahead1W(22);         // S^WS | '(' | '(:'
      this.shiftT(34);              // '('
      this.lookahead1W(144);        // S^WS | '(:' | ')' | 'element' | 'schema-element'
      if (this.l1 != 37)            // ')'
      {
        switch (this.l1)
        {
        case 121:                   // 'element'
          this.try_ElementTest();
          break;
        default:
          this.try_SchemaElementTest();
        }
      }
      this.lookahead1W(23);         // S^WS | '(:' | ')'
      this.shiftT(37);              // ')'
    }

    private parse_TextTest()
    {
      this.eventHandler.startNonterminal("TextTest", this.e0);
      this.shift(244);              // 'text'
      this.lookahead1W(22);         // S^WS | '(' | '(:'
      this.shift(34);               // '('
      this.lookahead1W(23);         // S^WS | '(:' | ')'
      this.shift(37);               // ')'
      this.eventHandler.endNonterminal("TextTest", this.e0);
    }

    private try_TextTest()
    {
      this.shiftT(244);             // 'text'
      this.lookahead1W(22);         // S^WS | '(' | '(:'
      this.shiftT(34);              // '('
      this.lookahead1W(23);         // S^WS | '(:' | ')'
      this.shiftT(37);              // ')'
    }

    private parse_CommentTest()
    {
      this.eventHandler.startNonterminal("CommentTest", this.e0);
      this.shift(96);               // 'comment'
      this.lookahead1W(22);         // S^WS | '(' | '(:'
      this.shift(34);               // '('
      this.lookahead1W(23);         // S^WS | '(:' | ')'
      this.shift(37);               // ')'
      this.eventHandler.endNonterminal("CommentTest", this.e0);
    }

    private try_CommentTest()
    {
      this.shiftT(96);              // 'comment'
      this.lookahead1W(22);         // S^WS | '(' | '(:'
      this.shiftT(34);              // '('
      this.lookahead1W(23);         // S^WS | '(:' | ')'
      this.shiftT(37);              // ')'
    }

    private parse_NamespaceNodeTest()
    {
      this.eventHandler.startNonterminal("NamespaceNodeTest", this.e0);
      this.shift(185);              // 'namespace-node'
      this.lookahead1W(22);         // S^WS | '(' | '(:'
      this.shift(34);               // '('
      this.lookahead1W(23);         // S^WS | '(:' | ')'
      this.shift(37);               // ')'
      this.eventHandler.endNonterminal("NamespaceNodeTest", this.e0);
    }

    private try_NamespaceNodeTest()
    {
      this.shiftT(185);             // 'namespace-node'
      this.lookahead1W(22);         // S^WS | '(' | '(:'
      this.shiftT(34);              // '('
      this.lookahead1W(23);         // S^WS | '(:' | ')'
      this.shiftT(37);              // ')'
    }

    private parse_PITest()
    {
      this.eventHandler.startNonterminal("PITest", this.e0);
      this.shift(216);              // 'processing-instruction'
      this.lookahead1W(22);         // S^WS | '(' | '(:'
      this.shift(34);               // '('
      this.lookahead1W(252);        // StringLiteral | NCName^Token | S^WS | '(:' | ')' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      if (this.l1 != 37)            // ')'
      {
        switch (this.l1)
        {
        case 11:                    // StringLiteral
          this.shift(11);           // StringLiteral
          break;
        default:
          this.whitespace();
          this.parse_NCName();
        }
      }
      this.lookahead1W(23);         // S^WS | '(:' | ')'
      this.shift(37);               // ')'
      this.eventHandler.endNonterminal("PITest", this.e0);
    }

    private try_PITest()
    {
      this.shiftT(216);             // 'processing-instruction'
      this.lookahead1W(22);         // S^WS | '(' | '(:'
      this.shiftT(34);              // '('
      this.lookahead1W(252);        // StringLiteral | NCName^Token | S^WS | '(:' | ')' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      if (this.l1 != 37)            // ')'
      {
        switch (this.l1)
        {
        case 11:                    // StringLiteral
          this.shiftT(11);          // StringLiteral
          break;
        default:
          this.try_NCName();
        }
      }
      this.lookahead1W(23);         // S^WS | '(:' | ')'
      this.shiftT(37);              // ')'
    }

    private parse_AttributeTest()
    {
      this.eventHandler.startNonterminal("AttributeTest", this.e0);
      this.shift(82);               // 'attribute'
      this.lookahead1W(22);         // S^WS | '(' | '(:'
      this.shift(34);               // '('
      this.lookahead1W(260);        // EQName^Token | S^WS | '(:' | ')' | '*' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
      if (this.l1 != 37)            // ')'
      {
        this.whitespace();
        this.parse_AttribNameOrWildcard();
        this.lookahead1W(101);      // S^WS | '(:' | ')' | ','
        if (this.l1 == 41)          // ','
        {
          this.shift(41);           // ','
          this.lookahead1W(254);    // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
          this.whitespace();
          this.parse_TypeName();
        }
      }
      this.lookahead1W(23);         // S^WS | '(:' | ')'
      this.shift(37);               // ')'
      this.eventHandler.endNonterminal("AttributeTest", this.e0);
    }

    private try_AttributeTest()
    {
      this.shiftT(82);              // 'attribute'
      this.lookahead1W(22);         // S^WS | '(' | '(:'
      this.shiftT(34);              // '('
      this.lookahead1W(260);        // EQName^Token | S^WS | '(:' | ')' | '*' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
      if (this.l1 != 37)            // ')'
      {
        this.try_AttribNameOrWildcard();
        this.lookahead1W(101);      // S^WS | '(:' | ')' | ','
        if (this.l1 == 41)          // ','
        {
          this.shiftT(41);          // ','
          this.lookahead1W(254);    // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
          this.try_TypeName();
        }
      }
      this.lookahead1W(23);         // S^WS | '(:' | ')'
      this.shiftT(37);              // ')'
    }

    private parse_AttribNameOrWildcard()
    {
      this.eventHandler.startNonterminal("AttribNameOrWildcard", this.e0);
      switch (this.l1)
      {
      case 38:                      // '*'
        this.shift(38);             // '*'
        break;
      default:
        this.parse_AttributeName();
      }
      this.eventHandler.endNonterminal("AttribNameOrWildcard", this.e0);
    }

    private try_AttribNameOrWildcard()
    {
      switch (this.l1)
      {
      case 38:                      // '*'
        this.shiftT(38);            // '*'
        break;
      default:
        this.try_AttributeName();
      }
    }

    private parse_SchemaAttributeTest()
    {
      this.eventHandler.startNonterminal("SchemaAttributeTest", this.e0);
      this.shift(226);              // 'schema-attribute'
      this.lookahead1W(22);         // S^WS | '(' | '(:'
      this.shift(34);               // '('
      this.lookahead1W(254);        // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
      this.whitespace();
      this.parse_AttributeDeclaration();
      this.lookahead1W(23);         // S^WS | '(:' | ')'
      this.shift(37);               // ')'
      this.eventHandler.endNonterminal("SchemaAttributeTest", this.e0);
    }

    private try_SchemaAttributeTest()
    {
      this.shiftT(226);             // 'schema-attribute'
      this.lookahead1W(22);         // S^WS | '(' | '(:'
      this.shiftT(34);              // '('
      this.lookahead1W(254);        // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
      this.try_AttributeDeclaration();
      this.lookahead1W(23);         // S^WS | '(:' | ')'
      this.shiftT(37);              // ')'
    }

    private parse_AttributeDeclaration()
    {
      this.eventHandler.startNonterminal("AttributeDeclaration", this.e0);
      this.parse_AttributeName();
      this.eventHandler.endNonterminal("AttributeDeclaration", this.e0);
    }

    private try_AttributeDeclaration()
    {
      this.try_AttributeName();
    }

    private parse_ElementTest()
    {
      this.eventHandler.startNonterminal("ElementTest", this.e0);
      this.shift(121);              // 'element'
      this.lookahead1W(22);         // S^WS | '(' | '(:'
      this.shift(34);               // '('
      this.lookahead1W(260);        // EQName^Token | S^WS | '(:' | ')' | '*' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
      if (this.l1 != 37)            // ')'
      {
        this.whitespace();
        this.parse_ElementNameOrWildcard();
        this.lookahead1W(101);      // S^WS | '(:' | ')' | ','
        if (this.l1 == 41)          // ','
        {
          this.shift(41);           // ','
          this.lookahead1W(254);    // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
          this.whitespace();
          this.parse_TypeName();
          this.lookahead1W(102);    // S^WS | '(:' | ')' | '?'
          if (this.l1 == 64)        // '?'
          {
            this.shift(64);         // '?'
          }
        }
      }
      this.lookahead1W(23);         // S^WS | '(:' | ')'
      this.shift(37);               // ')'
      this.eventHandler.endNonterminal("ElementTest", this.e0);
    }

    private try_ElementTest()
    {
      this.shiftT(121);             // 'element'
      this.lookahead1W(22);         // S^WS | '(' | '(:'
      this.shiftT(34);              // '('
      this.lookahead1W(260);        // EQName^Token | S^WS | '(:' | ')' | '*' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
      if (this.l1 != 37)            // ')'
      {
        this.try_ElementNameOrWildcard();
        this.lookahead1W(101);      // S^WS | '(:' | ')' | ','
        if (this.l1 == 41)          // ','
        {
          this.shiftT(41);          // ','
          this.lookahead1W(254);    // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
          this.try_TypeName();
          this.lookahead1W(102);    // S^WS | '(:' | ')' | '?'
          if (this.l1 == 64)        // '?'
          {
            this.shiftT(64);        // '?'
          }
        }
      }
      this.lookahead1W(23);         // S^WS | '(:' | ')'
      this.shiftT(37);              // ')'
    }

    private parse_ElementNameOrWildcard()
    {
      this.eventHandler.startNonterminal("ElementNameOrWildcard", this.e0);
      switch (this.l1)
      {
      case 38:                      // '*'
        this.shift(38);             // '*'
        break;
      default:
        this.parse_ElementName();
      }
      this.eventHandler.endNonterminal("ElementNameOrWildcard", this.e0);
    }

    private try_ElementNameOrWildcard()
    {
      switch (this.l1)
      {
      case 38:                      // '*'
        this.shiftT(38);            // '*'
        break;
      default:
        this.try_ElementName();
      }
    }

    private parse_SchemaElementTest()
    {
      this.eventHandler.startNonterminal("SchemaElementTest", this.e0);
      this.shift(227);              // 'schema-element'
      this.lookahead1W(22);         // S^WS | '(' | '(:'
      this.shift(34);               // '('
      this.lookahead1W(254);        // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
      this.whitespace();
      this.parse_ElementDeclaration();
      this.lookahead1W(23);         // S^WS | '(:' | ')'
      this.shift(37);               // ')'
      this.eventHandler.endNonterminal("SchemaElementTest", this.e0);
    }

    private try_SchemaElementTest()
    {
      this.shiftT(227);             // 'schema-element'
      this.lookahead1W(22);         // S^WS | '(' | '(:'
      this.shiftT(34);              // '('
      this.lookahead1W(254);        // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
      this.try_ElementDeclaration();
      this.lookahead1W(23);         // S^WS | '(:' | ')'
      this.shiftT(37);              // ')'
    }

    private parse_ElementDeclaration()
    {
      this.eventHandler.startNonterminal("ElementDeclaration", this.e0);
      this.parse_ElementName();
      this.eventHandler.endNonterminal("ElementDeclaration", this.e0);
    }

    private try_ElementDeclaration()
    {
      this.try_ElementName();
    }

    private parse_AttributeName()
    {
      this.eventHandler.startNonterminal("AttributeName", this.e0);
      this.parse_EQName();
      this.eventHandler.endNonterminal("AttributeName", this.e0);
    }

    private try_AttributeName()
    {
      this.try_EQName();
    }

    private parse_ElementName()
    {
      this.eventHandler.startNonterminal("ElementName", this.e0);
      this.parse_EQName();
      this.eventHandler.endNonterminal("ElementName", this.e0);
    }

    private try_ElementName()
    {
      this.try_EQName();
    }

    private parse_SimpleTypeName()
    {
      this.eventHandler.startNonterminal("SimpleTypeName", this.e0);
      this.parse_TypeName();
      this.eventHandler.endNonterminal("SimpleTypeName", this.e0);
    }

    private try_SimpleTypeName()
    {
      this.try_TypeName();
    }

    private parse_TypeName()
    {
      this.eventHandler.startNonterminal("TypeName", this.e0);
      this.parse_EQName();
      this.eventHandler.endNonterminal("TypeName", this.e0);
    }

    private try_TypeName()
    {
      this.try_EQName();
    }

    private parse_FunctionTest()
    {
      this.eventHandler.startNonterminal("FunctionTest", this.e0);
      for (;;)
      {
        this.lookahead1W(97);       // S^WS | '%' | '(:' | 'function'
        if (this.l1 != 32)          // '%'
        {
          break;
        }
        this.whitespace();
        this.parse_Annotation();
      }
      switch (this.l1)
      {
      case 145:                     // 'function'
        this.lookahead2W(22);       // S^WS | '(' | '(:'
        break;
      default:
        this.lk = this.l1;
      }
      this.lk = this.memoized(5, this.e0);
      if (this.lk == 0)
      {
        var b0A = this.b0; var e0A = this.e0; var l1A = this.l1;
        var b1A = this.b1; var e1A = this.e1; var l2A = this.l2;
        var b2A = this.b2; var e2A = this.e2;
        try
        {
          this.try_AnyFunctionTest();
          this.lk = -1;
        }
        catch (p1A)
        {
          this.lk = -2;
        }
        this.b0 = b0A; this.e0 = e0A; this.l1 = l1A; if (this.l1 == 0) {this.end = e0A;} else {
        this.b1 = b1A; this.e1 = e1A; this.l2 = l2A; if (this.l2 == 0) {this.end = e1A;} else {
        this.b2 = b2A; this.e2 = e2A; this.end = e2A; }}
        this.memoize(5, this.e0, this.lk);
      }
      switch (this.lk)
      {
      case -1:
        this.whitespace();
        this.parse_AnyFunctionTest();
        break;
      default:
        this.whitespace();
        this.parse_TypedFunctionTest();
      }
      this.eventHandler.endNonterminal("FunctionTest", this.e0);
    }

    private try_FunctionTest()
    {
      for (;;)
      {
        this.lookahead1W(97);       // S^WS | '%' | '(:' | 'function'
        if (this.l1 != 32)          // '%'
        {
          break;
        }
        this.try_Annotation();
      }
      switch (this.l1)
      {
      case 145:                     // 'function'
        this.lookahead2W(22);       // S^WS | '(' | '(:'
        break;
      default:
        this.lk = this.l1;
      }
      this.lk = this.memoized(5, this.e0);
      if (this.lk == 0)
      {
        var b0A = this.b0; var e0A = this.e0; var l1A = this.l1;
        var b1A = this.b1; var e1A = this.e1; var l2A = this.l2;
        var b2A = this.b2; var e2A = this.e2;
        try
        {
          this.try_AnyFunctionTest();
          this.memoize(5, e0A, -1);
          this.lk = -3;
        }
        catch (p1A)
        {
          this.lk = -2;
          this.b0 = b0A; this.e0 = e0A; this.l1 = l1A; if (this.l1 == 0) {this.end = e0A;} else {
          this.b1 = b1A; this.e1 = e1A; this.l2 = l2A; if (this.l2 == 0) {this.end = e1A;} else {
          this.b2 = b2A; this.e2 = e2A; this.end = e2A; }}
          this.memoize(5, e0A, -2);
        }
      }
      switch (this.lk)
      {
      case -1:
        this.try_AnyFunctionTest();
        break;
      case -3:
        break;
      default:
        this.try_TypedFunctionTest();
      }
    }

    private parse_AnyFunctionTest()
    {
      this.eventHandler.startNonterminal("AnyFunctionTest", this.e0);
      this.shift(145);              // 'function'
      this.lookahead1W(22);         // S^WS | '(' | '(:'
      this.shift(34);               // '('
      this.lookahead1W(24);         // S^WS | '(:' | '*'
      this.shift(38);               // '*'
      this.lookahead1W(23);         // S^WS | '(:' | ')'
      this.shift(37);               // ')'
      this.eventHandler.endNonterminal("AnyFunctionTest", this.e0);
    }

    private try_AnyFunctionTest()
    {
      this.shiftT(145);             // 'function'
      this.lookahead1W(22);         // S^WS | '(' | '(:'
      this.shiftT(34);              // '('
      this.lookahead1W(24);         // S^WS | '(:' | '*'
      this.shiftT(38);              // '*'
      this.lookahead1W(23);         // S^WS | '(:' | ')'
      this.shiftT(37);              // ')'
    }

    private parse_TypedFunctionTest()
    {
      this.eventHandler.startNonterminal("TypedFunctionTest", this.e0);
      this.shift(145);              // 'function'
      this.lookahead1W(22);         // S^WS | '(' | '(:'
      this.shift(34);               // '('
      this.lookahead1W(262);        // EQName^Token | S^WS | '%' | '(' | '(:' | ')' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
      if (this.l1 != 37)            // ')'
      {
        this.whitespace();
        this.parse_SequenceType();
        for (;;)
        {
          this.lookahead1W(101);    // S^WS | '(:' | ')' | ','
          if (this.l1 != 41)        // ','
          {
            break;
          }
          this.shift(41);           // ','
          this.lookahead1W(259);    // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
          this.whitespace();
          this.parse_SequenceType();
        }
      }
      this.shift(37);               // ')'
      this.lookahead1W(30);         // S^WS | '(:' | 'as'
      this.shift(79);               // 'as'
      this.lookahead1W(259);        // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
      this.whitespace();
      this.parse_SequenceType();
      this.eventHandler.endNonterminal("TypedFunctionTest", this.e0);
    }

    private try_TypedFunctionTest()
    {
      this.shiftT(145);             // 'function'
      this.lookahead1W(22);         // S^WS | '(' | '(:'
      this.shiftT(34);              // '('
      this.lookahead1W(262);        // EQName^Token | S^WS | '%' | '(' | '(:' | ')' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
      if (this.l1 != 37)            // ')'
      {
        this.try_SequenceType();
        for (;;)
        {
          this.lookahead1W(101);    // S^WS | '(:' | ')' | ','
          if (this.l1 != 41)        // ','
          {
            break;
          }
          this.shiftT(41);          // ','
          this.lookahead1W(259);    // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
          this.try_SequenceType();
        }
      }
      this.shiftT(37);              // ')'
      this.lookahead1W(30);         // S^WS | '(:' | 'as'
      this.shiftT(79);              // 'as'
      this.lookahead1W(259);        // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
      this.try_SequenceType();
    }

    private parse_ParenthesizedItemType()
    {
      this.eventHandler.startNonterminal("ParenthesizedItemType", this.e0);
      this.shift(34);               // '('
      this.lookahead1W(259);        // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
      this.whitespace();
      this.parse_ItemType();
      this.lookahead1W(23);         // S^WS | '(:' | ')'
      this.shift(37);               // ')'
      this.eventHandler.endNonterminal("ParenthesizedItemType", this.e0);
    }

    private try_ParenthesizedItemType()
    {
      this.shiftT(34);              // '('
      this.lookahead1W(259);        // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
      this.try_ItemType();
      this.lookahead1W(23);         // S^WS | '(:' | ')'
      this.shiftT(37);              // ')'
    }

    private parse_RevalidationDecl()
    {
      this.eventHandler.startNonterminal("RevalidationDecl", this.e0);
      this.shift(108);              // 'declare'
      this.lookahead1W(72);         // S^WS | '(:' | 'revalidation'
      this.shift(222);              // 'revalidation'
      this.lookahead1W(152);        // S^WS | '(:' | 'lax' | 'skip' | 'strict'
      switch (this.l1)
      {
      case 240:                     // 'strict'
        this.shift(240);            // 'strict'
        break;
      case 171:                     // 'lax'
        this.shift(171);            // 'lax'
        break;
      default:
        this.shift(233);            // 'skip'
      }
      this.eventHandler.endNonterminal("RevalidationDecl", this.e0);
    }

    private parse_InsertExprTargetChoice()
    {
      this.eventHandler.startNonterminal("InsertExprTargetChoice", this.e0);
      switch (this.l1)
      {
      case 70:                      // 'after'
        this.shift(70);             // 'after'
        break;
      case 84:                      // 'before'
        this.shift(84);             // 'before'
        break;
      default:
        if (this.l1 == 79)          // 'as'
        {
          this.shift(79);           // 'as'
          this.lookahead1W(119);    // S^WS | '(:' | 'first' | 'last'
          switch (this.l1)
          {
          case 134:                 // 'first'
            this.shift(134);        // 'first'
            break;
          default:
            this.shift(170);        // 'last'
          }
        }
        this.lookahead1W(54);       // S^WS | '(:' | 'into'
        this.shift(163);            // 'into'
      }
      this.eventHandler.endNonterminal("InsertExprTargetChoice", this.e0);
    }

    private try_InsertExprTargetChoice()
    {
      switch (this.l1)
      {
      case 70:                      // 'after'
        this.shiftT(70);            // 'after'
        break;
      case 84:                      // 'before'
        this.shiftT(84);            // 'before'
        break;
      default:
        if (this.l1 == 79)          // 'as'
        {
          this.shiftT(79);          // 'as'
          this.lookahead1W(119);    // S^WS | '(:' | 'first' | 'last'
          switch (this.l1)
          {
          case 134:                 // 'first'
            this.shiftT(134);       // 'first'
            break;
          default:
            this.shiftT(170);       // 'last'
          }
        }
        this.lookahead1W(54);       // S^WS | '(:' | 'into'
        this.shiftT(163);           // 'into'
      }
    }

    private parse_InsertExpr()
    {
      this.eventHandler.startNonterminal("InsertExpr", this.e0);
      this.shift(159);              // 'insert'
      this.lookahead1W(129);        // S^WS | '(:' | 'node' | 'nodes'
      switch (this.l1)
      {
      case 191:                     // 'node'
        this.shift(191);            // 'node'
        break;
      default:
        this.shift(192);            // 'nodes'
      }
      this.lookahead1W(266);        // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      this.whitespace();
      this.parse_SourceExpr();
      this.whitespace();
      this.parse_InsertExprTargetChoice();
      this.lookahead1W(266);        // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      this.whitespace();
      this.parse_TargetExpr();
      this.eventHandler.endNonterminal("InsertExpr", this.e0);
    }

    private try_InsertExpr()
    {
      this.shiftT(159);             // 'insert'
      this.lookahead1W(129);        // S^WS | '(:' | 'node' | 'nodes'
      switch (this.l1)
      {
      case 191:                     // 'node'
        this.shiftT(191);           // 'node'
        break;
      default:
        this.shiftT(192);           // 'nodes'
      }
      this.lookahead1W(266);        // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      this.try_SourceExpr();
      this.try_InsertExprTargetChoice();
      this.lookahead1W(266);        // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      this.try_TargetExpr();
    }

    private parse_DeleteExpr()
    {
      this.eventHandler.startNonterminal("DeleteExpr", this.e0);
      this.shift(110);              // 'delete'
      this.lookahead1W(129);        // S^WS | '(:' | 'node' | 'nodes'
      switch (this.l1)
      {
      case 191:                     // 'node'
        this.shift(191);            // 'node'
        break;
      default:
        this.shift(192);            // 'nodes'
      }
      this.lookahead1W(266);        // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      this.whitespace();
      this.parse_TargetExpr();
      this.eventHandler.endNonterminal("DeleteExpr", this.e0);
    }

    private try_DeleteExpr()
    {
      this.shiftT(110);             // 'delete'
      this.lookahead1W(129);        // S^WS | '(:' | 'node' | 'nodes'
      switch (this.l1)
      {
      case 191:                     // 'node'
        this.shiftT(191);           // 'node'
        break;
      default:
        this.shiftT(192);           // 'nodes'
      }
      this.lookahead1W(266);        // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      this.try_TargetExpr();
    }

    private parse_ReplaceExpr()
    {
      this.eventHandler.startNonterminal("ReplaceExpr", this.e0);
      this.shift(219);              // 'replace'
      this.lookahead1W(130);        // S^WS | '(:' | 'node' | 'value'
      if (this.l1 == 261)           // 'value'
      {
        this.shift(261);            // 'value'
        this.lookahead1W(64);       // S^WS | '(:' | 'of'
        this.shift(196);            // 'of'
      }
      this.lookahead1W(62);         // S^WS | '(:' | 'node'
      this.shift(191);              // 'node'
      this.lookahead1W(266);        // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      this.whitespace();
      this.parse_TargetExpr();
      this.shift(270);              // 'with'
      this.lookahead1W(266);        // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      this.whitespace();
      this.parse_ExprSingle();
      this.eventHandler.endNonterminal("ReplaceExpr", this.e0);
    }

    private try_ReplaceExpr()
    {
      this.shiftT(219);             // 'replace'
      this.lookahead1W(130);        // S^WS | '(:' | 'node' | 'value'
      if (this.l1 == 261)           // 'value'
      {
        this.shiftT(261);           // 'value'
        this.lookahead1W(64);       // S^WS | '(:' | 'of'
        this.shiftT(196);           // 'of'
      }
      this.lookahead1W(62);         // S^WS | '(:' | 'node'
      this.shiftT(191);             // 'node'
      this.lookahead1W(266);        // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      this.try_TargetExpr();
      this.shiftT(270);             // 'with'
      this.lookahead1W(266);        // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      this.try_ExprSingle();
    }

    private parse_RenameExpr()
    {
      this.eventHandler.startNonterminal("RenameExpr", this.e0);
      this.shift(218);              // 'rename'
      this.lookahead1W(62);         // S^WS | '(:' | 'node'
      this.shift(191);              // 'node'
      this.lookahead1W(266);        // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      this.whitespace();
      this.parse_TargetExpr();
      this.shift(79);               // 'as'
      this.lookahead1W(266);        // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      this.whitespace();
      this.parse_NewNameExpr();
      this.eventHandler.endNonterminal("RenameExpr", this.e0);
    }

    private try_RenameExpr()
    {
      this.shiftT(218);             // 'rename'
      this.lookahead1W(62);         // S^WS | '(:' | 'node'
      this.shiftT(191);             // 'node'
      this.lookahead1W(266);        // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      this.try_TargetExpr();
      this.shiftT(79);              // 'as'
      this.lookahead1W(266);        // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      this.try_NewNameExpr();
    }

    private parse_SourceExpr()
    {
      this.eventHandler.startNonterminal("SourceExpr", this.e0);
      this.parse_ExprSingle();
      this.eventHandler.endNonterminal("SourceExpr", this.e0);
    }

    private try_SourceExpr()
    {
      this.try_ExprSingle();
    }

    private parse_TargetExpr()
    {
      this.eventHandler.startNonterminal("TargetExpr", this.e0);
      this.parse_ExprSingle();
      this.eventHandler.endNonterminal("TargetExpr", this.e0);
    }

    private try_TargetExpr()
    {
      this.try_ExprSingle();
    }

    private parse_NewNameExpr()
    {
      this.eventHandler.startNonterminal("NewNameExpr", this.e0);
      this.parse_ExprSingle();
      this.eventHandler.endNonterminal("NewNameExpr", this.e0);
    }

    private try_NewNameExpr()
    {
      this.try_ExprSingle();
    }

    private parse_TransformExpr()
    {
      this.eventHandler.startNonterminal("TransformExpr", this.e0);
      this.shift(103);              // 'copy'
      this.lookahead1W(21);         // S^WS | '$' | '(:'
      this.whitespace();
      this.parse_TransformSpec();
      for (;;)
      {
        if (this.l1 != 41)          // ','
        {
          break;
        }
        this.shift(41);             // ','
        this.lookahead1W(21);       // S^WS | '$' | '(:'
        this.whitespace();
        this.parse_TransformSpec();
      }
      this.shift(181);              // 'modify'
      this.lookahead1W(266);        // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      this.whitespace();
      this.parse_ExprSingle();
      this.shift(220);              // 'return'
      this.lookahead1W(266);        // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      this.whitespace();
      this.parse_ExprSingle();
      this.eventHandler.endNonterminal("TransformExpr", this.e0);
    }

    private try_TransformExpr()
    {
      this.shiftT(103);             // 'copy'
      this.lookahead1W(21);         // S^WS | '$' | '(:'
      this.try_TransformSpec();
      for (;;)
      {
        if (this.l1 != 41)          // ','
        {
          break;
        }
        this.shiftT(41);            // ','
        this.lookahead1W(21);       // S^WS | '$' | '(:'
        this.try_TransformSpec();
      }
      this.shiftT(181);             // 'modify'
      this.lookahead1W(266);        // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      this.try_ExprSingle();
      this.shiftT(220);             // 'return'
      this.lookahead1W(266);        // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      this.try_ExprSingle();
    }

    private parse_TransformSpec()
    {
      this.eventHandler.startNonterminal("TransformSpec", this.e0);
      this.shift(31);               // '$'
      this.lookahead1W(254);        // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
      this.whitespace();
      this.parse_VarName();
      this.lookahead1W(27);         // S^WS | '(:' | ':='
      this.shift(52);               // ':='
      this.lookahead1W(266);        // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      this.whitespace();
      this.parse_ExprSingle();
      this.eventHandler.endNonterminal("TransformSpec", this.e0);
    }

    private try_TransformSpec()
    {
      this.shiftT(31);              // '$'
      this.lookahead1W(254);        // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
      this.try_VarName();
      this.lookahead1W(27);         // S^WS | '(:' | ':='
      this.shiftT(52);              // ':='
      this.lookahead1W(266);        // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      this.try_ExprSingle();
    }

    private parse_FTSelection()
    {
      this.eventHandler.startNonterminal("FTSelection", this.e0);
      this.parse_FTOr();
      for (;;)
      {
        this.lookahead1W(211);      // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'modify' | 'ne' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'return' | 'same' | 'satisfies' |
                                    // 'stable' | 'start' | 'where' | 'window' | 'with' | 'without' | '|}' | '}'
        switch (this.l1)
        {
        case 81:                    // 'at'
          this.lookahead2W(151);    // S^WS | '(:' | 'end' | 'position' | 'start'
          break;
        default:
          this.lk = this.l1;
        }
        if (this.lk != 115          // 'different'
         && this.lk != 117          // 'distance'
         && this.lk != 127          // 'entire'
         && this.lk != 202          // 'ordered'
         && this.lk != 223          // 'same'
         && this.lk != 269          // 'window'
         && this.lk != 64593        // 'at' 'end'
         && this.lk != 121425)      // 'at' 'start'
        {
          break;
        }
        this.whitespace();
        this.parse_FTPosFilter();
      }
      this.eventHandler.endNonterminal("FTSelection", this.e0);
    }

    private try_FTSelection()
    {
      this.try_FTOr();
      for (;;)
      {
        this.lookahead1W(211);      // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'modify' | 'ne' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'return' | 'same' | 'satisfies' |
                                    // 'stable' | 'start' | 'where' | 'window' | 'with' | 'without' | '|}' | '}'
        switch (this.l1)
        {
        case 81:                    // 'at'
          this.lookahead2W(151);    // S^WS | '(:' | 'end' | 'position' | 'start'
          break;
        default:
          this.lk = this.l1;
        }
        if (this.lk != 115          // 'different'
         && this.lk != 117          // 'distance'
         && this.lk != 127          // 'entire'
         && this.lk != 202          // 'ordered'
         && this.lk != 223          // 'same'
         && this.lk != 269          // 'window'
         && this.lk != 64593        // 'at' 'end'
         && this.lk != 121425)      // 'at' 'start'
        {
          break;
        }
        this.try_FTPosFilter();
      }
    }

    private parse_FTWeight()
    {
      this.eventHandler.startNonterminal("FTWeight", this.e0);
      this.shift(264);              // 'weight'
      this.lookahead1W(87);         // S^WS | '(:' | '{'
      this.shift(276);              // '{'
      this.lookahead1W(266);        // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      this.whitespace();
      this.parse_Expr();
      this.shift(282);              // '}'
      this.eventHandler.endNonterminal("FTWeight", this.e0);
    }

    private try_FTWeight()
    {
      this.shiftT(264);             // 'weight'
      this.lookahead1W(87);         // S^WS | '(:' | '{'
      this.shiftT(276);             // '{'
      this.lookahead1W(266);        // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      this.try_Expr();
      this.shiftT(282);             // '}'
    }

    private parse_FTOr()
    {
      this.eventHandler.startNonterminal("FTOr", this.e0);
      this.parse_FTAnd();
      for (;;)
      {
        if (this.l1 != 144)         // 'ftor'
        {
          break;
        }
        this.shift(144);            // 'ftor'
        this.lookahead1W(162);      // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
        this.whitespace();
        this.parse_FTAnd();
      }
      this.eventHandler.endNonterminal("FTOr", this.e0);
    }

    private try_FTOr()
    {
      this.try_FTAnd();
      for (;;)
      {
        if (this.l1 != 144)         // 'ftor'
        {
          break;
        }
        this.shiftT(144);           // 'ftor'
        this.lookahead1W(162);      // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
        this.try_FTAnd();
      }
    }

    private parse_FTAnd()
    {
      this.eventHandler.startNonterminal("FTAnd", this.e0);
      this.parse_FTMildNot();
      for (;;)
      {
        if (this.l1 != 142)         // 'ftand'
        {
          break;
        }
        this.shift(142);            // 'ftand'
        this.lookahead1W(162);      // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
        this.whitespace();
        this.parse_FTMildNot();
      }
      this.eventHandler.endNonterminal("FTAnd", this.e0);
    }

    private try_FTAnd()
    {
      this.try_FTMildNot();
      for (;;)
      {
        if (this.l1 != 142)         // 'ftand'
        {
          break;
        }
        this.shiftT(142);           // 'ftand'
        this.lookahead1W(162);      // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
        this.try_FTMildNot();
      }
    }

    private parse_FTMildNot()
    {
      this.eventHandler.startNonterminal("FTMildNot", this.e0);
      this.parse_FTUnaryNot();
      for (;;)
      {
        this.lookahead1W(212);      // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' | 'ordered' | 'return' |
                                    // 'same' | 'satisfies' | 'stable' | 'start' | 'where' | 'window' | 'with' |
                                    // 'without' | '|}' | '}'
        if (this.l1 != 193)         // 'not'
        {
          break;
        }
        this.shift(193);            // 'not'
        this.lookahead1W(53);       // S^WS | '(:' | 'in'
        this.shift(154);            // 'in'
        this.lookahead1W(162);      // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
        this.whitespace();
        this.parse_FTUnaryNot();
      }
      this.eventHandler.endNonterminal("FTMildNot", this.e0);
    }

    private try_FTMildNot()
    {
      this.try_FTUnaryNot();
      for (;;)
      {
        this.lookahead1W(212);      // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' | 'ordered' | 'return' |
                                    // 'same' | 'satisfies' | 'stable' | 'start' | 'where' | 'window' | 'with' |
                                    // 'without' | '|}' | '}'
        if (this.l1 != 193)         // 'not'
        {
          break;
        }
        this.shiftT(193);           // 'not'
        this.lookahead1W(53);       // S^WS | '(:' | 'in'
        this.shiftT(154);           // 'in'
        this.lookahead1W(162);      // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
        this.try_FTUnaryNot();
      }
    }

    private parse_FTUnaryNot()
    {
      this.eventHandler.startNonterminal("FTUnaryNot", this.e0);
      if (this.l1 == 143)           // 'ftnot'
      {
        this.shift(143);            // 'ftnot'
      }
      this.lookahead1W(155);        // StringLiteral | S^WS | '(' | '(#' | '(:' | '{'
      this.whitespace();
      this.parse_FTPrimaryWithOptions();
      this.eventHandler.endNonterminal("FTUnaryNot", this.e0);
    }

    private try_FTUnaryNot()
    {
      if (this.l1 == 143)           // 'ftnot'
      {
        this.shiftT(143);           // 'ftnot'
      }
      this.lookahead1W(155);        // StringLiteral | S^WS | '(' | '(#' | '(:' | '{'
      this.try_FTPrimaryWithOptions();
    }

    private parse_FTPrimaryWithOptions()
    {
      this.eventHandler.startNonterminal("FTPrimaryWithOptions", this.e0);
      this.parse_FTPrimary();
      this.lookahead1W(214);        // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' | 'ordered' | 'return' |
                                    // 'same' | 'satisfies' | 'stable' | 'start' | 'using' | 'weight' | 'where' |
                                    // 'window' | 'with' | 'without' | '|}' | '}'
      if (this.l1 == 259)           // 'using'
      {
        this.whitespace();
        this.parse_FTMatchOptions();
      }
      if (this.l1 == 264)           // 'weight'
      {
        this.whitespace();
        this.parse_FTWeight();
      }
      this.eventHandler.endNonterminal("FTPrimaryWithOptions", this.e0);
    }

    private try_FTPrimaryWithOptions()
    {
      this.try_FTPrimary();
      this.lookahead1W(214);        // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' | 'ordered' | 'return' |
                                    // 'same' | 'satisfies' | 'stable' | 'start' | 'using' | 'weight' | 'where' |
                                    // 'window' | 'with' | 'without' | '|}' | '}'
      if (this.l1 == 259)           // 'using'
      {
        this.try_FTMatchOptions();
      }
      if (this.l1 == 264)           // 'weight'
      {
        this.try_FTWeight();
      }
    }

    private parse_FTPrimary()
    {
      this.eventHandler.startNonterminal("FTPrimary", this.e0);
      switch (this.l1)
      {
      case 34:                      // '('
        this.shift(34);             // '('
        this.lookahead1W(162);      // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
        this.whitespace();
        this.parse_FTSelection();
        this.shift(37);             // ')'
        break;
      case 35:                      // '(#'
        this.parse_FTExtensionSelection();
        break;
      default:
        this.parse_FTWords();
        this.lookahead1W(215);      // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'using' | 'weight' |
                                    // 'where' | 'window' | 'with' | 'without' | '|}' | '}'
        if (this.l1 == 195)         // 'occurs'
        {
          this.whitespace();
          this.parse_FTTimes();
        }
      }
      this.eventHandler.endNonterminal("FTPrimary", this.e0);
    }

    private try_FTPrimary()
    {
      switch (this.l1)
      {
      case 34:                      // '('
        this.shiftT(34);            // '('
        this.lookahead1W(162);      // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
        this.try_FTSelection();
        this.shiftT(37);            // ')'
        break;
      case 35:                      // '(#'
        this.try_FTExtensionSelection();
        break;
      default:
        this.try_FTWords();
        this.lookahead1W(215);      // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'using' | 'weight' |
                                    // 'where' | 'window' | 'with' | 'without' | '|}' | '}'
        if (this.l1 == 195)         // 'occurs'
        {
          this.try_FTTimes();
        }
      }
    }

    private parse_FTWords()
    {
      this.eventHandler.startNonterminal("FTWords", this.e0);
      this.parse_FTWordsValue();
      this.lookahead1W(221);        // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'all' | 'and' | 'any' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'phrase' | 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'using' |
                                    // 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' | '}'
      if (this.l1 == 71             // 'all'
       || this.l1 == 76             // 'any'
       || this.l1 == 210)           // 'phrase'
      {
        this.whitespace();
        this.parse_FTAnyallOption();
      }
      this.eventHandler.endNonterminal("FTWords", this.e0);
    }

    private try_FTWords()
    {
      this.try_FTWordsValue();
      this.lookahead1W(221);        // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'all' | 'and' | 'any' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'phrase' | 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'using' |
                                    // 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' | '}'
      if (this.l1 == 71             // 'all'
       || this.l1 == 76             // 'any'
       || this.l1 == 210)           // 'phrase'
      {
        this.try_FTAnyallOption();
      }
    }

    private parse_FTWordsValue()
    {
      this.eventHandler.startNonterminal("FTWordsValue", this.e0);
      switch (this.l1)
      {
      case 11:                      // StringLiteral
        this.shift(11);             // StringLiteral
        break;
      default:
        this.shift(276);            // '{'
        this.lookahead1W(266);      // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
        this.whitespace();
        this.parse_Expr();
        this.shift(282);            // '}'
      }
      this.eventHandler.endNonterminal("FTWordsValue", this.e0);
    }

    private try_FTWordsValue()
    {
      switch (this.l1)
      {
      case 11:                      // StringLiteral
        this.shiftT(11);            // StringLiteral
        break;
      default:
        this.shiftT(276);           // '{'
        this.lookahead1W(266);      // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
        this.try_Expr();
        this.shiftT(282);           // '}'
      }
    }

    private parse_FTExtensionSelection()
    {
      this.eventHandler.startNonterminal("FTExtensionSelection", this.e0);
      for (;;)
      {
        this.whitespace();
        this.parse_Pragma();
        this.lookahead1W(100);      // S^WS | '(#' | '(:' | '{'
        if (this.l1 != 35)          // '(#'
        {
          break;
        }
      }
      this.shift(276);              // '{'
      this.lookahead1W(166);        // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{' | '}'
      if (this.l1 != 282)           // '}'
      {
        this.whitespace();
        this.parse_FTSelection();
      }
      this.shift(282);              // '}'
      this.eventHandler.endNonterminal("FTExtensionSelection", this.e0);
    }

    private try_FTExtensionSelection()
    {
      for (;;)
      {
        this.try_Pragma();
        this.lookahead1W(100);      // S^WS | '(#' | '(:' | '{'
        if (this.l1 != 35)          // '(#'
        {
          break;
        }
      }
      this.shiftT(276);             // '{'
      this.lookahead1W(166);        // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{' | '}'
      if (this.l1 != 282)           // '}'
      {
        this.try_FTSelection();
      }
      this.shiftT(282);             // '}'
    }

    private parse_FTAnyallOption()
    {
      this.eventHandler.startNonterminal("FTAnyallOption", this.e0);
      switch (this.l1)
      {
      case 76:                      // 'any'
        this.shift(76);             // 'any'
        this.lookahead1W(218);      // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'using' | 'weight' |
                                    // 'where' | 'window' | 'with' | 'without' | 'word' | '|}' | '}'
        if (this.l1 == 272)         // 'word'
        {
          this.shift(272);          // 'word'
        }
        break;
      case 71:                      // 'all'
        this.shift(71);             // 'all'
        this.lookahead1W(219);      // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'using' | 'weight' |
                                    // 'where' | 'window' | 'with' | 'without' | 'words' | '|}' | '}'
        if (this.l1 == 273)         // 'words'
        {
          this.shift(273);          // 'words'
        }
        break;
      default:
        this.shift(210);            // 'phrase'
      }
      this.eventHandler.endNonterminal("FTAnyallOption", this.e0);
    }

    private try_FTAnyallOption()
    {
      switch (this.l1)
      {
      case 76:                      // 'any'
        this.shiftT(76);            // 'any'
        this.lookahead1W(218);      // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'using' | 'weight' |
                                    // 'where' | 'window' | 'with' | 'without' | 'word' | '|}' | '}'
        if (this.l1 == 272)         // 'word'
        {
          this.shiftT(272);         // 'word'
        }
        break;
      case 71:                      // 'all'
        this.shiftT(71);            // 'all'
        this.lookahead1W(219);      // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'using' | 'weight' |
                                    // 'where' | 'window' | 'with' | 'without' | 'words' | '|}' | '}'
        if (this.l1 == 273)         // 'words'
        {
          this.shiftT(273);         // 'words'
        }
        break;
      default:
        this.shiftT(210);           // 'phrase'
      }
    }

    private parse_FTTimes()
    {
      this.eventHandler.startNonterminal("FTTimes", this.e0);
      this.shift(195);              // 'occurs'
      this.lookahead1W(149);        // S^WS | '(:' | 'at' | 'exactly' | 'from'
      this.whitespace();
      this.parse_FTRange();
      this.shift(247);              // 'times'
      this.eventHandler.endNonterminal("FTTimes", this.e0);
    }

    private try_FTTimes()
    {
      this.shiftT(195);             // 'occurs'
      this.lookahead1W(149);        // S^WS | '(:' | 'at' | 'exactly' | 'from'
      this.try_FTRange();
      this.shiftT(247);             // 'times'
    }

    private parse_FTRange()
    {
      this.eventHandler.startNonterminal("FTRange", this.e0);
      switch (this.l1)
      {
      case 130:                     // 'exactly'
        this.shift(130);            // 'exactly'
        this.lookahead1W(266);      // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
        this.whitespace();
        this.parse_AdditiveExpr();
        break;
      case 81:                      // 'at'
        this.shift(81);             // 'at'
        this.lookahead1W(125);      // S^WS | '(:' | 'least' | 'most'
        switch (this.l1)
        {
        case 173:                   // 'least'
          this.shift(173);          // 'least'
          this.lookahead1W(266);    // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
          this.whitespace();
          this.parse_AdditiveExpr();
          break;
        default:
          this.shift(183);          // 'most'
          this.lookahead1W(266);    // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
          this.whitespace();
          this.parse_AdditiveExpr();
        }
        break;
      default:
        this.shift(140);            // 'from'
        this.lookahead1W(266);      // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
        this.whitespace();
        this.parse_AdditiveExpr();
        this.shift(248);            // 'to'
        this.lookahead1W(266);      // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
        this.whitespace();
        this.parse_AdditiveExpr();
      }
      this.eventHandler.endNonterminal("FTRange", this.e0);
    }

    private try_FTRange()
    {
      switch (this.l1)
      {
      case 130:                     // 'exactly'
        this.shiftT(130);           // 'exactly'
        this.lookahead1W(266);      // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
        this.try_AdditiveExpr();
        break;
      case 81:                      // 'at'
        this.shiftT(81);            // 'at'
        this.lookahead1W(125);      // S^WS | '(:' | 'least' | 'most'
        switch (this.l1)
        {
        case 173:                   // 'least'
          this.shiftT(173);         // 'least'
          this.lookahead1W(266);    // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
          this.try_AdditiveExpr();
          break;
        default:
          this.shiftT(183);         // 'most'
          this.lookahead1W(266);    // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
          this.try_AdditiveExpr();
        }
        break;
      default:
        this.shiftT(140);           // 'from'
        this.lookahead1W(266);      // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
        this.try_AdditiveExpr();
        this.shiftT(248);           // 'to'
        this.lookahead1W(266);      // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
        this.try_AdditiveExpr();
      }
    }

    private parse_FTPosFilter()
    {
      this.eventHandler.startNonterminal("FTPosFilter", this.e0);
      switch (this.l1)
      {
      case 202:                     // 'ordered'
        this.parse_FTOrder();
        break;
      case 269:                     // 'window'
        this.parse_FTWindow();
        break;
      case 117:                     // 'distance'
        this.parse_FTDistance();
        break;
      case 115:                     // 'different'
      case 223:                     // 'same'
        this.parse_FTScope();
        break;
      default:
        this.parse_FTContent();
      }
      this.eventHandler.endNonterminal("FTPosFilter", this.e0);
    }

    private try_FTPosFilter()
    {
      switch (this.l1)
      {
      case 202:                     // 'ordered'
        this.try_FTOrder();
        break;
      case 269:                     // 'window'
        this.try_FTWindow();
        break;
      case 117:                     // 'distance'
        this.try_FTDistance();
        break;
      case 115:                     // 'different'
      case 223:                     // 'same'
        this.try_FTScope();
        break;
      default:
        this.try_FTContent();
      }
    }

    private parse_FTOrder()
    {
      this.eventHandler.startNonterminal("FTOrder", this.e0);
      this.shift(202);              // 'ordered'
      this.eventHandler.endNonterminal("FTOrder", this.e0);
    }

    private try_FTOrder()
    {
      this.shiftT(202);             // 'ordered'
    }

    private parse_FTWindow()
    {
      this.eventHandler.startNonterminal("FTWindow", this.e0);
      this.shift(269);              // 'window'
      this.lookahead1W(266);        // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      this.whitespace();
      this.parse_AdditiveExpr();
      this.whitespace();
      this.parse_FTUnit();
      this.eventHandler.endNonterminal("FTWindow", this.e0);
    }

    private try_FTWindow()
    {
      this.shiftT(269);             // 'window'
      this.lookahead1W(266);        // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      this.try_AdditiveExpr();
      this.try_FTUnit();
    }

    private parse_FTDistance()
    {
      this.eventHandler.startNonterminal("FTDistance", this.e0);
      this.shift(117);              // 'distance'
      this.lookahead1W(149);        // S^WS | '(:' | 'at' | 'exactly' | 'from'
      this.whitespace();
      this.parse_FTRange();
      this.whitespace();
      this.parse_FTUnit();
      this.eventHandler.endNonterminal("FTDistance", this.e0);
    }

    private try_FTDistance()
    {
      this.shiftT(117);             // 'distance'
      this.lookahead1W(149);        // S^WS | '(:' | 'at' | 'exactly' | 'from'
      this.try_FTRange();
      this.try_FTUnit();
    }

    private parse_FTUnit()
    {
      this.eventHandler.startNonterminal("FTUnit", this.e0);
      switch (this.l1)
      {
      case 273:                     // 'words'
        this.shift(273);            // 'words'
        break;
      case 232:                     // 'sentences'
        this.shift(232);            // 'sentences'
        break;
      default:
        this.shift(205);            // 'paragraphs'
      }
      this.eventHandler.endNonterminal("FTUnit", this.e0);
    }

    private try_FTUnit()
    {
      switch (this.l1)
      {
      case 273:                     // 'words'
        this.shiftT(273);           // 'words'
        break;
      case 232:                     // 'sentences'
        this.shiftT(232);           // 'sentences'
        break;
      default:
        this.shiftT(205);           // 'paragraphs'
      }
    }

    private parse_FTScope()
    {
      this.eventHandler.startNonterminal("FTScope", this.e0);
      switch (this.l1)
      {
      case 223:                     // 'same'
        this.shift(223);            // 'same'
        break;
      default:
        this.shift(115);            // 'different'
      }
      this.lookahead1W(132);        // S^WS | '(:' | 'paragraph' | 'sentence'
      this.whitespace();
      this.parse_FTBigUnit();
      this.eventHandler.endNonterminal("FTScope", this.e0);
    }

    private try_FTScope()
    {
      switch (this.l1)
      {
      case 223:                     // 'same'
        this.shiftT(223);           // 'same'
        break;
      default:
        this.shiftT(115);           // 'different'
      }
      this.lookahead1W(132);        // S^WS | '(:' | 'paragraph' | 'sentence'
      this.try_FTBigUnit();
    }

    private parse_FTBigUnit()
    {
      this.eventHandler.startNonterminal("FTBigUnit", this.e0);
      switch (this.l1)
      {
      case 231:                     // 'sentence'
        this.shift(231);            // 'sentence'
        break;
      default:
        this.shift(204);            // 'paragraph'
      }
      this.eventHandler.endNonterminal("FTBigUnit", this.e0);
    }

    private try_FTBigUnit()
    {
      switch (this.l1)
      {
      case 231:                     // 'sentence'
        this.shiftT(231);           // 'sentence'
        break;
      default:
        this.shiftT(204);           // 'paragraph'
      }
    }

    private parse_FTContent()
    {
      this.eventHandler.startNonterminal("FTContent", this.e0);
      switch (this.l1)
      {
      case 81:                      // 'at'
        this.shift(81);             // 'at'
        this.lookahead1W(117);      // S^WS | '(:' | 'end' | 'start'
        switch (this.l1)
        {
        case 237:                   // 'start'
          this.shift(237);          // 'start'
          break;
        default:
          this.shift(126);          // 'end'
        }
        break;
      default:
        this.shift(127);            // 'entire'
        this.lookahead1W(42);       // S^WS | '(:' | 'content'
        this.shift(100);            // 'content'
      }
      this.eventHandler.endNonterminal("FTContent", this.e0);
    }

    private try_FTContent()
    {
      switch (this.l1)
      {
      case 81:                      // 'at'
        this.shiftT(81);            // 'at'
        this.lookahead1W(117);      // S^WS | '(:' | 'end' | 'start'
        switch (this.l1)
        {
        case 237:                   // 'start'
          this.shiftT(237);         // 'start'
          break;
        default:
          this.shiftT(126);         // 'end'
        }
        break;
      default:
        this.shiftT(127);           // 'entire'
        this.lookahead1W(42);       // S^WS | '(:' | 'content'
        this.shiftT(100);           // 'content'
      }
    }

    private parse_FTMatchOptions()
    {
      this.eventHandler.startNonterminal("FTMatchOptions", this.e0);
      for (;;)
      {
        this.shift(259);            // 'using'
        this.lookahead1W(181);      // S^WS | '(:' | 'case' | 'diacritics' | 'language' | 'lowercase' | 'no' |
                                    // 'option' | 'stemming' | 'stop' | 'thesaurus' | 'uppercase' | 'wildcards'
        this.whitespace();
        this.parse_FTMatchOption();
        this.lookahead1W(214);      // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' | 'ordered' | 'return' |
                                    // 'same' | 'satisfies' | 'stable' | 'start' | 'using' | 'weight' | 'where' |
                                    // 'window' | 'with' | 'without' | '|}' | '}'
        if (this.l1 != 259)         // 'using'
        {
          break;
        }
      }
      this.eventHandler.endNonterminal("FTMatchOptions", this.e0);
    }

    private try_FTMatchOptions()
    {
      for (;;)
      {
        this.shiftT(259);           // 'using'
        this.lookahead1W(181);      // S^WS | '(:' | 'case' | 'diacritics' | 'language' | 'lowercase' | 'no' |
                                    // 'option' | 'stemming' | 'stop' | 'thesaurus' | 'uppercase' | 'wildcards'
        this.try_FTMatchOption();
        this.lookahead1W(214);      // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' | 'ordered' | 'return' |
                                    // 'same' | 'satisfies' | 'stable' | 'start' | 'using' | 'weight' | 'where' |
                                    // 'window' | 'with' | 'without' | '|}' | '}'
        if (this.l1 != 259)         // 'using'
        {
          break;
        }
      }
    }

    private parse_FTMatchOption()
    {
      this.eventHandler.startNonterminal("FTMatchOption", this.e0);
      switch (this.l1)
      {
      case 188:                     // 'no'
        this.lookahead2W(161);      // S^WS | '(:' | 'stemming' | 'stop' | 'thesaurus' | 'wildcards'
        break;
      default:
        this.lk = this.l1;
      }
      switch (this.lk)
      {
      case 169:                     // 'language'
        this.parse_FTLanguageOption();
        break;
      case 268:                     // 'wildcards'
      case 137404:                  // 'no' 'wildcards'
        this.parse_FTWildCardOption();
        break;
      case 246:                     // 'thesaurus'
      case 126140:                  // 'no' 'thesaurus'
        this.parse_FTThesaurusOption();
        break;
      case 238:                     // 'stemming'
      case 122044:                  // 'no' 'stemming'
        this.parse_FTStemOption();
        break;
      case 114:                     // 'diacritics'
        this.parse_FTDiacriticsOption();
        break;
      case 239:                     // 'stop'
      case 122556:                  // 'no' 'stop'
        this.parse_FTStopWordOption();
        break;
      case 199:                     // 'option'
        this.parse_FTExtensionOption();
        break;
      default:
        this.parse_FTCaseOption();
      }
      this.eventHandler.endNonterminal("FTMatchOption", this.e0);
    }

    private try_FTMatchOption()
    {
      switch (this.l1)
      {
      case 188:                     // 'no'
        this.lookahead2W(161);      // S^WS | '(:' | 'stemming' | 'stop' | 'thesaurus' | 'wildcards'
        break;
      default:
        this.lk = this.l1;
      }
      switch (this.lk)
      {
      case 169:                     // 'language'
        this.try_FTLanguageOption();
        break;
      case 268:                     // 'wildcards'
      case 137404:                  // 'no' 'wildcards'
        this.try_FTWildCardOption();
        break;
      case 246:                     // 'thesaurus'
      case 126140:                  // 'no' 'thesaurus'
        this.try_FTThesaurusOption();
        break;
      case 238:                     // 'stemming'
      case 122044:                  // 'no' 'stemming'
        this.try_FTStemOption();
        break;
      case 114:                     // 'diacritics'
        this.try_FTDiacriticsOption();
        break;
      case 239:                     // 'stop'
      case 122556:                  // 'no' 'stop'
        this.try_FTStopWordOption();
        break;
      case 199:                     // 'option'
        this.try_FTExtensionOption();
        break;
      default:
        this.try_FTCaseOption();
      }
    }

    private parse_FTCaseOption()
    {
      this.eventHandler.startNonterminal("FTCaseOption", this.e0);
      switch (this.l1)
      {
      case 88:                      // 'case'
        this.shift(88);             // 'case'
        this.lookahead1W(124);      // S^WS | '(:' | 'insensitive' | 'sensitive'
        switch (this.l1)
        {
        case 158:                   // 'insensitive'
          this.shift(158);          // 'insensitive'
          break;
        default:
          this.shift(230);          // 'sensitive'
        }
        break;
      case 177:                     // 'lowercase'
        this.shift(177);            // 'lowercase'
        break;
      default:
        this.shift(258);            // 'uppercase'
      }
      this.eventHandler.endNonterminal("FTCaseOption", this.e0);
    }

    private try_FTCaseOption()
    {
      switch (this.l1)
      {
      case 88:                      // 'case'
        this.shiftT(88);            // 'case'
        this.lookahead1W(124);      // S^WS | '(:' | 'insensitive' | 'sensitive'
        switch (this.l1)
        {
        case 158:                   // 'insensitive'
          this.shiftT(158);         // 'insensitive'
          break;
        default:
          this.shiftT(230);         // 'sensitive'
        }
        break;
      case 177:                     // 'lowercase'
        this.shiftT(177);           // 'lowercase'
        break;
      default:
        this.shiftT(258);           // 'uppercase'
      }
    }

    private parse_FTDiacriticsOption()
    {
      this.eventHandler.startNonterminal("FTDiacriticsOption", this.e0);
      this.shift(114);              // 'diacritics'
      this.lookahead1W(124);        // S^WS | '(:' | 'insensitive' | 'sensitive'
      switch (this.l1)
      {
      case 158:                     // 'insensitive'
        this.shift(158);            // 'insensitive'
        break;
      default:
        this.shift(230);            // 'sensitive'
      }
      this.eventHandler.endNonterminal("FTDiacriticsOption", this.e0);
    }

    private try_FTDiacriticsOption()
    {
      this.shiftT(114);             // 'diacritics'
      this.lookahead1W(124);        // S^WS | '(:' | 'insensitive' | 'sensitive'
      switch (this.l1)
      {
      case 158:                     // 'insensitive'
        this.shiftT(158);           // 'insensitive'
        break;
      default:
        this.shiftT(230);           // 'sensitive'
      }
    }

    private parse_FTStemOption()
    {
      this.eventHandler.startNonterminal("FTStemOption", this.e0);
      switch (this.l1)
      {
      case 238:                     // 'stemming'
        this.shift(238);            // 'stemming'
        break;
      default:
        this.shift(188);            // 'no'
        this.lookahead1W(74);       // S^WS | '(:' | 'stemming'
        this.shift(238);            // 'stemming'
      }
      this.eventHandler.endNonterminal("FTStemOption", this.e0);
    }

    private try_FTStemOption()
    {
      switch (this.l1)
      {
      case 238:                     // 'stemming'
        this.shiftT(238);           // 'stemming'
        break;
      default:
        this.shiftT(188);           // 'no'
        this.lookahead1W(74);       // S^WS | '(:' | 'stemming'
        this.shiftT(238);           // 'stemming'
      }
    }

    private parse_FTThesaurusOption()
    {
      this.eventHandler.startNonterminal("FTThesaurusOption", this.e0);
      switch (this.l1)
      {
      case 246:                     // 'thesaurus'
        this.shift(246);            // 'thesaurus'
        this.lookahead1W(142);      // S^WS | '(' | '(:' | 'at' | 'default'
        switch (this.l1)
        {
        case 81:                    // 'at'
          this.whitespace();
          this.parse_FTThesaurusID();
          break;
        case 109:                   // 'default'
          this.shift(109);          // 'default'
          break;
        default:
          this.shift(34);           // '('
          this.lookahead1W(112);    // S^WS | '(:' | 'at' | 'default'
          switch (this.l1)
          {
          case 81:                  // 'at'
            this.whitespace();
            this.parse_FTThesaurusID();
            break;
          default:
            this.shift(109);        // 'default'
          }
          for (;;)
          {
            this.lookahead1W(101);  // S^WS | '(:' | ')' | ','
            if (this.l1 != 41)      // ','
            {
              break;
            }
            this.shift(41);         // ','
            this.lookahead1W(31);   // S^WS | '(:' | 'at'
            this.whitespace();
            this.parse_FTThesaurusID();
          }
          this.shift(37);           // ')'
        }
        break;
      default:
        this.shift(188);            // 'no'
        this.lookahead1W(78);       // S^WS | '(:' | 'thesaurus'
        this.shift(246);            // 'thesaurus'
      }
      this.eventHandler.endNonterminal("FTThesaurusOption", this.e0);
    }

    private try_FTThesaurusOption()
    {
      switch (this.l1)
      {
      case 246:                     // 'thesaurus'
        this.shiftT(246);           // 'thesaurus'
        this.lookahead1W(142);      // S^WS | '(' | '(:' | 'at' | 'default'
        switch (this.l1)
        {
        case 81:                    // 'at'
          this.try_FTThesaurusID();
          break;
        case 109:                   // 'default'
          this.shiftT(109);         // 'default'
          break;
        default:
          this.shiftT(34);          // '('
          this.lookahead1W(112);    // S^WS | '(:' | 'at' | 'default'
          switch (this.l1)
          {
          case 81:                  // 'at'
            this.try_FTThesaurusID();
            break;
          default:
            this.shiftT(109);       // 'default'
          }
          for (;;)
          {
            this.lookahead1W(101);  // S^WS | '(:' | ')' | ','
            if (this.l1 != 41)      // ','
            {
              break;
            }
            this.shiftT(41);        // ','
            this.lookahead1W(31);   // S^WS | '(:' | 'at'
            this.try_FTThesaurusID();
          }
          this.shiftT(37);          // ')'
        }
        break;
      default:
        this.shiftT(188);           // 'no'
        this.lookahead1W(78);       // S^WS | '(:' | 'thesaurus'
        this.shiftT(246);           // 'thesaurus'
      }
    }

    private parse_FTThesaurusID()
    {
      this.eventHandler.startNonterminal("FTThesaurusID", this.e0);
      this.shift(81);               // 'at'
      this.lookahead1W(15);         // URILiteral | S^WS | '(:'
      this.shift(7);                // URILiteral
      this.lookahead1W(220);        // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' |
                                    // 'exactly' | 'for' | 'from' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'relationship' | 'return' | 'same' | 'satisfies' | 'stable' |
                                    // 'start' | 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' |
                                    // '}'
      if (this.l1 == 217)           // 'relationship'
      {
        this.shift(217);            // 'relationship'
        this.lookahead1W(17);       // StringLiteral | S^WS | '(:'
        this.shift(11);             // StringLiteral
      }
      this.lookahead1W(216);        // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' |
                                    // 'exactly' | 'for' | 'from' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'using' |
                                    // 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' | '}'
      switch (this.l1)
      {
      case 81:                      // 'at'
        this.lookahead2W(165);      // S^WS | '(:' | 'end' | 'least' | 'most' | 'position' | 'start'
        break;
      default:
        this.lk = this.l1;
      }
      if (this.lk == 130            // 'exactly'
       || this.lk == 140            // 'from'
       || this.lk == 88657          // 'at' 'least'
       || this.lk == 93777)         // 'at' 'most'
      {
        this.whitespace();
        this.parse_FTLiteralRange();
        this.lookahead1W(58);       // S^WS | '(:' | 'levels'
        this.shift(175);            // 'levels'
      }
      this.eventHandler.endNonterminal("FTThesaurusID", this.e0);
    }

    private try_FTThesaurusID()
    {
      this.shiftT(81);              // 'at'
      this.lookahead1W(15);         // URILiteral | S^WS | '(:'
      this.shiftT(7);               // URILiteral
      this.lookahead1W(220);        // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' |
                                    // 'exactly' | 'for' | 'from' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'relationship' | 'return' | 'same' | 'satisfies' | 'stable' |
                                    // 'start' | 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' |
                                    // '}'
      if (this.l1 == 217)           // 'relationship'
      {
        this.shiftT(217);           // 'relationship'
        this.lookahead1W(17);       // StringLiteral | S^WS | '(:'
        this.shiftT(11);            // StringLiteral
      }
      this.lookahead1W(216);        // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' |
                                    // 'exactly' | 'for' | 'from' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'using' |
                                    // 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' | '}'
      switch (this.l1)
      {
      case 81:                      // 'at'
        this.lookahead2W(165);      // S^WS | '(:' | 'end' | 'least' | 'most' | 'position' | 'start'
        break;
      default:
        this.lk = this.l1;
      }
      if (this.lk == 130            // 'exactly'
       || this.lk == 140            // 'from'
       || this.lk == 88657          // 'at' 'least'
       || this.lk == 93777)         // 'at' 'most'
      {
        this.try_FTLiteralRange();
        this.lookahead1W(58);       // S^WS | '(:' | 'levels'
        this.shiftT(175);           // 'levels'
      }
    }

    private parse_FTLiteralRange()
    {
      this.eventHandler.startNonterminal("FTLiteralRange", this.e0);
      switch (this.l1)
      {
      case 130:                     // 'exactly'
        this.shift(130);            // 'exactly'
        this.lookahead1W(16);       // IntegerLiteral | S^WS | '(:'
        this.shift(8);              // IntegerLiteral
        break;
      case 81:                      // 'at'
        this.shift(81);             // 'at'
        this.lookahead1W(125);      // S^WS | '(:' | 'least' | 'most'
        switch (this.l1)
        {
        case 173:                   // 'least'
          this.shift(173);          // 'least'
          this.lookahead1W(16);     // IntegerLiteral | S^WS | '(:'
          this.shift(8);            // IntegerLiteral
          break;
        default:
          this.shift(183);          // 'most'
          this.lookahead1W(16);     // IntegerLiteral | S^WS | '(:'
          this.shift(8);            // IntegerLiteral
        }
        break;
      default:
        this.shift(140);            // 'from'
        this.lookahead1W(16);       // IntegerLiteral | S^WS | '(:'
        this.shift(8);              // IntegerLiteral
        this.lookahead1W(79);       // S^WS | '(:' | 'to'
        this.shift(248);            // 'to'
        this.lookahead1W(16);       // IntegerLiteral | S^WS | '(:'
        this.shift(8);              // IntegerLiteral
      }
      this.eventHandler.endNonterminal("FTLiteralRange", this.e0);
    }

    private try_FTLiteralRange()
    {
      switch (this.l1)
      {
      case 130:                     // 'exactly'
        this.shiftT(130);           // 'exactly'
        this.lookahead1W(16);       // IntegerLiteral | S^WS | '(:'
        this.shiftT(8);             // IntegerLiteral
        break;
      case 81:                      // 'at'
        this.shiftT(81);            // 'at'
        this.lookahead1W(125);      // S^WS | '(:' | 'least' | 'most'
        switch (this.l1)
        {
        case 173:                   // 'least'
          this.shiftT(173);         // 'least'
          this.lookahead1W(16);     // IntegerLiteral | S^WS | '(:'
          this.shiftT(8);           // IntegerLiteral
          break;
        default:
          this.shiftT(183);         // 'most'
          this.lookahead1W(16);     // IntegerLiteral | S^WS | '(:'
          this.shiftT(8);           // IntegerLiteral
        }
        break;
      default:
        this.shiftT(140);           // 'from'
        this.lookahead1W(16);       // IntegerLiteral | S^WS | '(:'
        this.shiftT(8);             // IntegerLiteral
        this.lookahead1W(79);       // S^WS | '(:' | 'to'
        this.shiftT(248);           // 'to'
        this.lookahead1W(16);       // IntegerLiteral | S^WS | '(:'
        this.shiftT(8);             // IntegerLiteral
      }
    }

    private parse_FTStopWordOption()
    {
      this.eventHandler.startNonterminal("FTStopWordOption", this.e0);
      switch (this.l1)
      {
      case 239:                     // 'stop'
        this.shift(239);            // 'stop'
        this.lookahead1W(86);       // S^WS | '(:' | 'words'
        this.shift(273);            // 'words'
        this.lookahead1W(142);      // S^WS | '(' | '(:' | 'at' | 'default'
        switch (this.l1)
        {
        case 109:                   // 'default'
          this.shift(109);          // 'default'
          for (;;)
          {
            this.lookahead1W(217);  // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' |
                                    // 'except' | 'for' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'union' |
                                    // 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' | '}'
            if (this.l1 != 131      // 'except'
             && this.l1 != 254)     // 'union'
            {
              break;
            }
            this.whitespace();
            this.parse_FTStopWordsInclExcl();
          }
          break;
        default:
          this.whitespace();
          this.parse_FTStopWords();
          for (;;)
          {
            this.lookahead1W(217);  // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' |
                                    // 'except' | 'for' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'union' |
                                    // 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' | '}'
            if (this.l1 != 131      // 'except'
             && this.l1 != 254)     // 'union'
            {
              break;
            }
            this.whitespace();
            this.parse_FTStopWordsInclExcl();
          }
        }
        break;
      default:
        this.shift(188);            // 'no'
        this.lookahead1W(75);       // S^WS | '(:' | 'stop'
        this.shift(239);            // 'stop'
        this.lookahead1W(86);       // S^WS | '(:' | 'words'
        this.shift(273);            // 'words'
      }
      this.eventHandler.endNonterminal("FTStopWordOption", this.e0);
    }

    private try_FTStopWordOption()
    {
      switch (this.l1)
      {
      case 239:                     // 'stop'
        this.shiftT(239);           // 'stop'
        this.lookahead1W(86);       // S^WS | '(:' | 'words'
        this.shiftT(273);           // 'words'
        this.lookahead1W(142);      // S^WS | '(' | '(:' | 'at' | 'default'
        switch (this.l1)
        {
        case 109:                   // 'default'
          this.shiftT(109);         // 'default'
          for (;;)
          {
            this.lookahead1W(217);  // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' |
                                    // 'except' | 'for' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'union' |
                                    // 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' | '}'
            if (this.l1 != 131      // 'except'
             && this.l1 != 254)     // 'union'
            {
              break;
            }
            this.try_FTStopWordsInclExcl();
          }
          break;
        default:
          this.try_FTStopWords();
          for (;;)
          {
            this.lookahead1W(217);  // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' |
                                    // 'except' | 'for' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'union' |
                                    // 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' | '}'
            if (this.l1 != 131      // 'except'
             && this.l1 != 254)     // 'union'
            {
              break;
            }
            this.try_FTStopWordsInclExcl();
          }
        }
        break;
      default:
        this.shiftT(188);           // 'no'
        this.lookahead1W(75);       // S^WS | '(:' | 'stop'
        this.shiftT(239);           // 'stop'
        this.lookahead1W(86);       // S^WS | '(:' | 'words'
        this.shiftT(273);           // 'words'
      }
    }

    private parse_FTStopWords()
    {
      this.eventHandler.startNonterminal("FTStopWords", this.e0);
      switch (this.l1)
      {
      case 81:                      // 'at'
        this.shift(81);             // 'at'
        this.lookahead1W(15);       // URILiteral | S^WS | '(:'
        this.shift(7);              // URILiteral
        break;
      default:
        this.shift(34);             // '('
        this.lookahead1W(17);       // StringLiteral | S^WS | '(:'
        this.shift(11);             // StringLiteral
        for (;;)
        {
          this.lookahead1W(101);    // S^WS | '(:' | ')' | ','
          if (this.l1 != 41)        // ','
          {
            break;
          }
          this.shift(41);           // ','
          this.lookahead1W(17);     // StringLiteral | S^WS | '(:'
          this.shift(11);           // StringLiteral
        }
        this.shift(37);             // ')'
      }
      this.eventHandler.endNonterminal("FTStopWords", this.e0);
    }

    private try_FTStopWords()
    {
      switch (this.l1)
      {
      case 81:                      // 'at'
        this.shiftT(81);            // 'at'
        this.lookahead1W(15);       // URILiteral | S^WS | '(:'
        this.shiftT(7);             // URILiteral
        break;
      default:
        this.shiftT(34);            // '('
        this.lookahead1W(17);       // StringLiteral | S^WS | '(:'
        this.shiftT(11);            // StringLiteral
        for (;;)
        {
          this.lookahead1W(101);    // S^WS | '(:' | ')' | ','
          if (this.l1 != 41)        // ','
          {
            break;
          }
          this.shiftT(41);          // ','
          this.lookahead1W(17);     // StringLiteral | S^WS | '(:'
          this.shiftT(11);          // StringLiteral
        }
        this.shiftT(37);            // ')'
      }
    }

    private parse_FTStopWordsInclExcl()
    {
      this.eventHandler.startNonterminal("FTStopWordsInclExcl", this.e0);
      switch (this.l1)
      {
      case 254:                     // 'union'
        this.shift(254);            // 'union'
        break;
      default:
        this.shift(131);            // 'except'
      }
      this.lookahead1W(99);         // S^WS | '(' | '(:' | 'at'
      this.whitespace();
      this.parse_FTStopWords();
      this.eventHandler.endNonterminal("FTStopWordsInclExcl", this.e0);
    }

    private try_FTStopWordsInclExcl()
    {
      switch (this.l1)
      {
      case 254:                     // 'union'
        this.shiftT(254);           // 'union'
        break;
      default:
        this.shiftT(131);           // 'except'
      }
      this.lookahead1W(99);         // S^WS | '(' | '(:' | 'at'
      this.try_FTStopWords();
    }

    private parse_FTLanguageOption()
    {
      this.eventHandler.startNonterminal("FTLanguageOption", this.e0);
      this.shift(169);              // 'language'
      this.lookahead1W(17);         // StringLiteral | S^WS | '(:'
      this.shift(11);               // StringLiteral
      this.eventHandler.endNonterminal("FTLanguageOption", this.e0);
    }

    private try_FTLanguageOption()
    {
      this.shiftT(169);             // 'language'
      this.lookahead1W(17);         // StringLiteral | S^WS | '(:'
      this.shiftT(11);              // StringLiteral
    }

    private parse_FTWildCardOption()
    {
      this.eventHandler.startNonterminal("FTWildCardOption", this.e0);
      switch (this.l1)
      {
      case 268:                     // 'wildcards'
        this.shift(268);            // 'wildcards'
        break;
      default:
        this.shift(188);            // 'no'
        this.lookahead1W(84);       // S^WS | '(:' | 'wildcards'
        this.shift(268);            // 'wildcards'
      }
      this.eventHandler.endNonterminal("FTWildCardOption", this.e0);
    }

    private try_FTWildCardOption()
    {
      switch (this.l1)
      {
      case 268:                     // 'wildcards'
        this.shiftT(268);           // 'wildcards'
        break;
      default:
        this.shiftT(188);           // 'no'
        this.lookahead1W(84);       // S^WS | '(:' | 'wildcards'
        this.shiftT(268);           // 'wildcards'
      }
    }

    private parse_FTExtensionOption()
    {
      this.eventHandler.startNonterminal("FTExtensionOption", this.e0);
      this.shift(199);              // 'option'
      this.lookahead1W(254);        // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
      this.whitespace();
      this.parse_EQName();
      this.lookahead1W(17);         // StringLiteral | S^WS | '(:'
      this.shift(11);               // StringLiteral
      this.eventHandler.endNonterminal("FTExtensionOption", this.e0);
    }

    private try_FTExtensionOption()
    {
      this.shiftT(199);             // 'option'
      this.lookahead1W(254);        // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
      this.try_EQName();
      this.lookahead1W(17);         // StringLiteral | S^WS | '(:'
      this.shiftT(11);              // StringLiteral
    }

    private parse_FTIgnoreOption()
    {
      this.eventHandler.startNonterminal("FTIgnoreOption", this.e0);
      this.shift(271);              // 'without'
      this.lookahead1W(42);         // S^WS | '(:' | 'content'
      this.shift(100);              // 'content'
      this.lookahead1W(266);        // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      this.whitespace();
      this.parse_UnionExpr();
      this.eventHandler.endNonterminal("FTIgnoreOption", this.e0);
    }

    private try_FTIgnoreOption()
    {
      this.shiftT(271);             // 'without'
      this.lookahead1W(42);         // S^WS | '(:' | 'content'
      this.shiftT(100);             // 'content'
      this.lookahead1W(266);        // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      this.try_UnionExpr();
    }

    private parse_CollectionDecl()
    {
      this.eventHandler.startNonterminal("CollectionDecl", this.e0);
      this.shift(95);               // 'collection'
      this.lookahead1W(254);        // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
      this.whitespace();
      this.parse_EQName();
      this.lookahead1W(107);        // S^WS | '(:' | ';' | 'as'
      if (this.l1 == 79)            // 'as'
      {
        this.whitespace();
        this.parse_CollectionTypeDecl();
      }
      this.eventHandler.endNonterminal("CollectionDecl", this.e0);
    }

    private parse_CollectionTypeDecl()
    {
      this.eventHandler.startNonterminal("CollectionTypeDecl", this.e0);
      this.shift(79);               // 'as'
      this.lookahead1W(259);        // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
      this.whitespace();
      this.parse_ItemType();
      this.lookahead1W(156);        // S^WS | '(:' | '*' | '+' | ';' | '?'
      if (this.l1 != 53)            // ';'
      {
        this.whitespace();
        this.parse_OccurrenceIndicator();
      }
      this.eventHandler.endNonterminal("CollectionTypeDecl", this.e0);
    }

    private parse_IndexName()
    {
      this.eventHandler.startNonterminal("IndexName", this.e0);
      this.parse_EQName();
      this.eventHandler.endNonterminal("IndexName", this.e0);
    }

    private parse_IndexDomainExpr()
    {
      this.eventHandler.startNonterminal("IndexDomainExpr", this.e0);
      this.parse_PathExpr();
      this.eventHandler.endNonterminal("IndexDomainExpr", this.e0);
    }

    private parse_IndexKeySpec()
    {
      this.eventHandler.startNonterminal("IndexKeySpec", this.e0);
      this.parse_IndexKeyExpr();
      if (this.l1 == 79)            // 'as'
      {
        this.whitespace();
        this.parse_IndexKeyTypeDecl();
      }
      this.lookahead1W(146);        // S^WS | '(:' | ',' | ';' | 'collation'
      if (this.l1 == 94)            // 'collation'
      {
        this.whitespace();
        this.parse_IndexKeyCollation();
      }
      this.eventHandler.endNonterminal("IndexKeySpec", this.e0);
    }

    private parse_IndexKeyExpr()
    {
      this.eventHandler.startNonterminal("IndexKeyExpr", this.e0);
      this.parse_PathExpr();
      this.eventHandler.endNonterminal("IndexKeyExpr", this.e0);
    }

    private parse_IndexKeyTypeDecl()
    {
      this.eventHandler.startNonterminal("IndexKeyTypeDecl", this.e0);
      this.shift(79);               // 'as'
      this.lookahead1W(254);        // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
      this.whitespace();
      this.parse_AtomicType();
      this.lookahead1W(169);        // S^WS | '(:' | '*' | '+' | ',' | ';' | '?' | 'collation'
      if (this.l1 == 39             // '*'
       || this.l1 == 40             // '+'
       || this.l1 == 64)            // '?'
      {
        this.whitespace();
        this.parse_OccurrenceIndicator();
      }
      this.eventHandler.endNonterminal("IndexKeyTypeDecl", this.e0);
    }

    private parse_AtomicType()
    {
      this.eventHandler.startNonterminal("AtomicType", this.e0);
      this.parse_EQName();
      this.eventHandler.endNonterminal("AtomicType", this.e0);
    }

    private parse_IndexKeyCollation()
    {
      this.eventHandler.startNonterminal("IndexKeyCollation", this.e0);
      this.shift(94);               // 'collation'
      this.lookahead1W(15);         // URILiteral | S^WS | '(:'
      this.shift(7);                // URILiteral
      this.eventHandler.endNonterminal("IndexKeyCollation", this.e0);
    }

    private parse_IndexDecl()
    {
      this.eventHandler.startNonterminal("IndexDecl", this.e0);
      this.shift(155);              // 'index'
      this.lookahead1W(254);        // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
      this.whitespace();
      this.parse_IndexName();
      this.lookahead1W(65);         // S^WS | '(:' | 'on'
      this.shift(197);              // 'on'
      this.lookahead1W(63);         // S^WS | '(:' | 'nodes'
      this.shift(192);              // 'nodes'
      this.lookahead1W(265);        // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      this.whitespace();
      this.parse_IndexDomainExpr();
      this.shift(87);               // 'by'
      this.lookahead1W(265);        // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      this.whitespace();
      this.parse_IndexKeySpec();
      for (;;)
      {
        this.lookahead1W(103);      // S^WS | '(:' | ',' | ';'
        if (this.l1 != 41)          // ','
        {
          break;
        }
        this.shift(41);             // ','
        this.lookahead1W(265);      // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
        this.whitespace();
        this.parse_IndexKeySpec();
      }
      this.eventHandler.endNonterminal("IndexDecl", this.e0);
    }

    private parse_ICDecl()
    {
      this.eventHandler.startNonterminal("ICDecl", this.e0);
      this.shift(161);              // 'integrity'
      this.lookahead1W(40);         // S^WS | '(:' | 'constraint'
      this.shift(97);               // 'constraint'
      this.lookahead1W(254);        // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
      this.whitespace();
      this.parse_EQName();
      this.lookahead1W(120);        // S^WS | '(:' | 'foreign' | 'on'
      switch (this.l1)
      {
      case 197:                     // 'on'
        this.whitespace();
        this.parse_ICCollection();
        break;
      default:
        this.whitespace();
        this.parse_ICForeignKey();
      }
      this.eventHandler.endNonterminal("ICDecl", this.e0);
    }

    private parse_ICCollection()
    {
      this.eventHandler.startNonterminal("ICCollection", this.e0);
      this.shift(197);              // 'on'
      this.lookahead1W(39);         // S^WS | '(:' | 'collection'
      this.shift(95);               // 'collection'
      this.lookahead1W(254);        // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
      this.whitespace();
      this.parse_EQName();
      this.lookahead1W(140);        // S^WS | '$' | '(:' | 'foreach' | 'node'
      switch (this.l1)
      {
      case 31:                      // '$'
        this.whitespace();
        this.parse_ICCollSequence();
        break;
      case 191:                     // 'node'
        this.whitespace();
        this.parse_ICCollSequenceUnique();
        break;
      default:
        this.whitespace();
        this.parse_ICCollNode();
      }
      this.eventHandler.endNonterminal("ICCollection", this.e0);
    }

    private parse_ICCollSequence()
    {
      this.eventHandler.startNonterminal("ICCollSequence", this.e0);
      this.parse_VarRef();
      this.lookahead1W(37);         // S^WS | '(:' | 'check'
      this.shift(92);               // 'check'
      this.lookahead1W(266);        // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      this.whitespace();
      this.parse_ExprSingle();
      this.eventHandler.endNonterminal("ICCollSequence", this.e0);
    }

    private parse_ICCollSequenceUnique()
    {
      this.eventHandler.startNonterminal("ICCollSequenceUnique", this.e0);
      this.shift(191);              // 'node'
      this.lookahead1W(21);         // S^WS | '$' | '(:'
      this.whitespace();
      this.parse_VarRef();
      this.lookahead1W(37);         // S^WS | '(:' | 'check'
      this.shift(92);               // 'check'
      this.lookahead1W(80);         // S^WS | '(:' | 'unique'
      this.shift(255);              // 'unique'
      this.lookahead1W(57);         // S^WS | '(:' | 'key'
      this.shift(168);              // 'key'
      this.lookahead1W(265);        // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      this.whitespace();
      this.parse_PathExpr();
      this.eventHandler.endNonterminal("ICCollSequenceUnique", this.e0);
    }

    private parse_ICCollNode()
    {
      this.eventHandler.startNonterminal("ICCollNode", this.e0);
      this.shift(138);              // 'foreach'
      this.lookahead1W(62);         // S^WS | '(:' | 'node'
      this.shift(191);              // 'node'
      this.lookahead1W(21);         // S^WS | '$' | '(:'
      this.whitespace();
      this.parse_VarRef();
      this.lookahead1W(37);         // S^WS | '(:' | 'check'
      this.shift(92);               // 'check'
      this.lookahead1W(266);        // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      this.whitespace();
      this.parse_ExprSingle();
      this.eventHandler.endNonterminal("ICCollNode", this.e0);
    }

    private parse_ICForeignKey()
    {
      this.eventHandler.startNonterminal("ICForeignKey", this.e0);
      this.shift(139);              // 'foreign'
      this.lookahead1W(57);         // S^WS | '(:' | 'key'
      this.shift(168);              // 'key'
      this.lookahead1W(51);         // S^WS | '(:' | 'from'
      this.whitespace();
      this.parse_ICForeignKeySource();
      this.whitespace();
      this.parse_ICForeignKeyTarget();
      this.eventHandler.endNonterminal("ICForeignKey", this.e0);
    }

    private parse_ICForeignKeySource()
    {
      this.eventHandler.startNonterminal("ICForeignKeySource", this.e0);
      this.shift(140);              // 'from'
      this.lookahead1W(39);         // S^WS | '(:' | 'collection'
      this.whitespace();
      this.parse_ICForeignKeyValues();
      this.eventHandler.endNonterminal("ICForeignKeySource", this.e0);
    }

    private parse_ICForeignKeyTarget()
    {
      this.eventHandler.startNonterminal("ICForeignKeyTarget", this.e0);
      this.shift(248);              // 'to'
      this.lookahead1W(39);         // S^WS | '(:' | 'collection'
      this.whitespace();
      this.parse_ICForeignKeyValues();
      this.eventHandler.endNonterminal("ICForeignKeyTarget", this.e0);
    }

    private parse_ICForeignKeyValues()
    {
      this.eventHandler.startNonterminal("ICForeignKeyValues", this.e0);
      this.shift(95);               // 'collection'
      this.lookahead1W(254);        // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
      this.whitespace();
      this.parse_EQName();
      this.lookahead1W(62);         // S^WS | '(:' | 'node'
      this.shift(191);              // 'node'
      this.lookahead1W(21);         // S^WS | '$' | '(:'
      this.whitespace();
      this.parse_VarRef();
      this.lookahead1W(57);         // S^WS | '(:' | 'key'
      this.shift(168);              // 'key'
      this.lookahead1W(265);        // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      this.whitespace();
      this.parse_PathExpr();
      this.eventHandler.endNonterminal("ICForeignKeyValues", this.e0);
    }

    private try_Comment()
    {
      this.shiftT(36);              // '(:'
      for (;;)
      {
        this.lookahead1(89);        // CommentContents | '(:' | ':)'
        if (this.l1 == 50)          // ':)'
        {
          break;
        }
        switch (this.l1)
        {
        case 24:                    // CommentContents
          this.shiftT(24);          // CommentContents
          break;
        default:
          this.try_Comment();
        }
      }
      this.shiftT(50);              // ':)'
    }

    private try_Whitespace()
    {
      switch (this.l1)
      {
      case 22:                      // S^WS
        this.shiftT(22);            // S^WS
        break;
      default:
        this.try_Comment();
      }
    }

    private parse_EQName()
    {
      this.eventHandler.startNonterminal("EQName", this.e0);
      this.lookahead1(249);         // EQName^Token | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery'
      switch (this.l1)
      {
      case 82:                      // 'attribute'
        this.shift(82);             // 'attribute'
        break;
      case 96:                      // 'comment'
        this.shift(96);             // 'comment'
        break;
      case 120:                     // 'document-node'
        this.shift(120);            // 'document-node'
        break;
      case 121:                     // 'element'
        this.shift(121);            // 'element'
        break;
      case 124:                     // 'empty-sequence'
        this.shift(124);            // 'empty-sequence'
        break;
      case 145:                     // 'function'
        this.shift(145);            // 'function'
        break;
      case 152:                     // 'if'
        this.shift(152);            // 'if'
        break;
      case 165:                     // 'item'
        this.shift(165);            // 'item'
        break;
      case 185:                     // 'namespace-node'
        this.shift(185);            // 'namespace-node'
        break;
      case 191:                     // 'node'
        this.shift(191);            // 'node'
        break;
      case 216:                     // 'processing-instruction'
        this.shift(216);            // 'processing-instruction'
        break;
      case 226:                     // 'schema-attribute'
        this.shift(226);            // 'schema-attribute'
        break;
      case 227:                     // 'schema-element'
        this.shift(227);            // 'schema-element'
        break;
      case 243:                     // 'switch'
        this.shift(243);            // 'switch'
        break;
      case 244:                     // 'text'
        this.shift(244);            // 'text'
        break;
      case 253:                     // 'typeswitch'
        this.shift(253);            // 'typeswitch'
        break;
      case 78:                      // 'array'
        this.shift(78);             // 'array'
        break;
      case 167:                     // 'json-item'
        this.shift(167);            // 'json-item'
        break;
      case 242:                     // 'structured-item'
        this.shift(242);            // 'structured-item'
        break;
      default:
        this.parse_FunctionName();
      }
      this.eventHandler.endNonterminal("EQName", this.e0);
    }

    private try_EQName()
    {
      this.lookahead1(249);         // EQName^Token | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery'
      switch (this.l1)
      {
      case 82:                      // 'attribute'
        this.shiftT(82);            // 'attribute'
        break;
      case 96:                      // 'comment'
        this.shiftT(96);            // 'comment'
        break;
      case 120:                     // 'document-node'
        this.shiftT(120);           // 'document-node'
        break;
      case 121:                     // 'element'
        this.shiftT(121);           // 'element'
        break;
      case 124:                     // 'empty-sequence'
        this.shiftT(124);           // 'empty-sequence'
        break;
      case 145:                     // 'function'
        this.shiftT(145);           // 'function'
        break;
      case 152:                     // 'if'
        this.shiftT(152);           // 'if'
        break;
      case 165:                     // 'item'
        this.shiftT(165);           // 'item'
        break;
      case 185:                     // 'namespace-node'
        this.shiftT(185);           // 'namespace-node'
        break;
      case 191:                     // 'node'
        this.shiftT(191);           // 'node'
        break;
      case 216:                     // 'processing-instruction'
        this.shiftT(216);           // 'processing-instruction'
        break;
      case 226:                     // 'schema-attribute'
        this.shiftT(226);           // 'schema-attribute'
        break;
      case 227:                     // 'schema-element'
        this.shiftT(227);           // 'schema-element'
        break;
      case 243:                     // 'switch'
        this.shiftT(243);           // 'switch'
        break;
      case 244:                     // 'text'
        this.shiftT(244);           // 'text'
        break;
      case 253:                     // 'typeswitch'
        this.shiftT(253);           // 'typeswitch'
        break;
      case 78:                      // 'array'
        this.shiftT(78);            // 'array'
        break;
      case 167:                     // 'json-item'
        this.shiftT(167);           // 'json-item'
        break;
      case 242:                     // 'structured-item'
        this.shiftT(242);           // 'structured-item'
        break;
      default:
        this.try_FunctionName();
      }
    }

    private parse_FunctionName()
    {
      this.eventHandler.startNonterminal("FunctionName", this.e0);
      switch (this.l1)
      {
      case 6:                       // EQName^Token
        this.shift(6);              // EQName^Token
        break;
      case 70:                      // 'after'
        this.shift(70);             // 'after'
        break;
      case 73:                      // 'ancestor'
        this.shift(73);             // 'ancestor'
        break;
      case 74:                      // 'ancestor-or-self'
        this.shift(74);             // 'ancestor-or-self'
        break;
      case 75:                      // 'and'
        this.shift(75);             // 'and'
        break;
      case 79:                      // 'as'
        this.shift(79);             // 'as'
        break;
      case 80:                      // 'ascending'
        this.shift(80);             // 'ascending'
        break;
      case 84:                      // 'before'
        this.shift(84);             // 'before'
        break;
      case 88:                      // 'case'
        this.shift(88);             // 'case'
        break;
      case 89:                      // 'cast'
        this.shift(89);             // 'cast'
        break;
      case 90:                      // 'castable'
        this.shift(90);             // 'castable'
        break;
      case 93:                      // 'child'
        this.shift(93);             // 'child'
        break;
      case 94:                      // 'collation'
        this.shift(94);             // 'collation'
        break;
      case 103:                     // 'copy'
        this.shift(103);            // 'copy'
        break;
      case 105:                     // 'count'
        this.shift(105);            // 'count'
        break;
      case 108:                     // 'declare'
        this.shift(108);            // 'declare'
        break;
      case 109:                     // 'default'
        this.shift(109);            // 'default'
        break;
      case 110:                     // 'delete'
        this.shift(110);            // 'delete'
        break;
      case 111:                     // 'descendant'
        this.shift(111);            // 'descendant'
        break;
      case 112:                     // 'descendant-or-self'
        this.shift(112);            // 'descendant-or-self'
        break;
      case 113:                     // 'descending'
        this.shift(113);            // 'descending'
        break;
      case 118:                     // 'div'
        this.shift(118);            // 'div'
        break;
      case 119:                     // 'document'
        this.shift(119);            // 'document'
        break;
      case 122:                     // 'else'
        this.shift(122);            // 'else'
        break;
      case 123:                     // 'empty'
        this.shift(123);            // 'empty'
        break;
      case 126:                     // 'end'
        this.shift(126);            // 'end'
        break;
      case 128:                     // 'eq'
        this.shift(128);            // 'eq'
        break;
      case 129:                     // 'every'
        this.shift(129);            // 'every'
        break;
      case 131:                     // 'except'
        this.shift(131);            // 'except'
        break;
      case 134:                     // 'first'
        this.shift(134);            // 'first'
        break;
      case 135:                     // 'following'
        this.shift(135);            // 'following'
        break;
      case 136:                     // 'following-sibling'
        this.shift(136);            // 'following-sibling'
        break;
      case 137:                     // 'for'
        this.shift(137);            // 'for'
        break;
      case 146:                     // 'ge'
        this.shift(146);            // 'ge'
        break;
      case 148:                     // 'group'
        this.shift(148);            // 'group'
        break;
      case 150:                     // 'gt'
        this.shift(150);            // 'gt'
        break;
      case 151:                     // 'idiv'
        this.shift(151);            // 'idiv'
        break;
      case 153:                     // 'import'
        this.shift(153);            // 'import'
        break;
      case 159:                     // 'insert'
        this.shift(159);            // 'insert'
        break;
      case 160:                     // 'instance'
        this.shift(160);            // 'instance'
        break;
      case 162:                     // 'intersect'
        this.shift(162);            // 'intersect'
        break;
      case 163:                     // 'into'
        this.shift(163);            // 'into'
        break;
      case 164:                     // 'is'
        this.shift(164);            // 'is'
        break;
      case 170:                     // 'last'
        this.shift(170);            // 'last'
        break;
      case 172:                     // 'le'
        this.shift(172);            // 'le'
        break;
      case 174:                     // 'let'
        this.shift(174);            // 'let'
        break;
      case 178:                     // 'lt'
        this.shift(178);            // 'lt'
        break;
      case 180:                     // 'mod'
        this.shift(180);            // 'mod'
        break;
      case 181:                     // 'modify'
        this.shift(181);            // 'modify'
        break;
      case 182:                     // 'module'
        this.shift(182);            // 'module'
        break;
      case 184:                     // 'namespace'
        this.shift(184);            // 'namespace'
        break;
      case 186:                     // 'ne'
        this.shift(186);            // 'ne'
        break;
      case 198:                     // 'only'
        this.shift(198);            // 'only'
        break;
      case 200:                     // 'or'
        this.shift(200);            // 'or'
        break;
      case 201:                     // 'order'
        this.shift(201);            // 'order'
        break;
      case 202:                     // 'ordered'
        this.shift(202);            // 'ordered'
        break;
      case 206:                     // 'parent'
        this.shift(206);            // 'parent'
        break;
      case 212:                     // 'preceding'
        this.shift(212);            // 'preceding'
        break;
      case 213:                     // 'preceding-sibling'
        this.shift(213);            // 'preceding-sibling'
        break;
      case 218:                     // 'rename'
        this.shift(218);            // 'rename'
        break;
      case 219:                     // 'replace'
        this.shift(219);            // 'replace'
        break;
      case 220:                     // 'return'
        this.shift(220);            // 'return'
        break;
      case 224:                     // 'satisfies'
        this.shift(224);            // 'satisfies'
        break;
      case 229:                     // 'self'
        this.shift(229);            // 'self'
        break;
      case 235:                     // 'some'
        this.shift(235);            // 'some'
        break;
      case 236:                     // 'stable'
        this.shift(236);            // 'stable'
        break;
      case 237:                     // 'start'
        this.shift(237);            // 'start'
        break;
      case 248:                     // 'to'
        this.shift(248);            // 'to'
        break;
      case 249:                     // 'treat'
        this.shift(249);            // 'treat'
        break;
      case 250:                     // 'try'
        this.shift(250);            // 'try'
        break;
      case 254:                     // 'union'
        this.shift(254);            // 'union'
        break;
      case 256:                     // 'unordered'
        this.shift(256);            // 'unordered'
        break;
      case 260:                     // 'validate'
        this.shift(260);            // 'validate'
        break;
      case 266:                     // 'where'
        this.shift(266);            // 'where'
        break;
      case 270:                     // 'with'
        this.shift(270);            // 'with'
        break;
      case 274:                     // 'xquery'
        this.shift(274);            // 'xquery'
        break;
      case 72:                      // 'allowing'
        this.shift(72);             // 'allowing'
        break;
      case 81:                      // 'at'
        this.shift(81);             // 'at'
        break;
      case 83:                      // 'base-uri'
        this.shift(83);             // 'base-uri'
        break;
      case 85:                      // 'boundary-space'
        this.shift(85);             // 'boundary-space'
        break;
      case 86:                      // 'break'
        this.shift(86);             // 'break'
        break;
      case 91:                      // 'catch'
        this.shift(91);             // 'catch'
        break;
      case 98:                      // 'construction'
        this.shift(98);             // 'construction'
        break;
      case 101:                     // 'context'
        this.shift(101);            // 'context'
        break;
      case 102:                     // 'continue'
        this.shift(102);            // 'continue'
        break;
      case 104:                     // 'copy-namespaces'
        this.shift(104);            // 'copy-namespaces'
        break;
      case 106:                     // 'decimal-format'
        this.shift(106);            // 'decimal-format'
        break;
      case 125:                     // 'encoding'
        this.shift(125);            // 'encoding'
        break;
      case 132:                     // 'exit'
        this.shift(132);            // 'exit'
        break;
      case 133:                     // 'external'
        this.shift(133);            // 'external'
        break;
      case 141:                     // 'ft-option'
        this.shift(141);            // 'ft-option'
        break;
      case 154:                     // 'in'
        this.shift(154);            // 'in'
        break;
      case 155:                     // 'index'
        this.shift(155);            // 'index'
        break;
      case 161:                     // 'integrity'
        this.shift(161);            // 'integrity'
        break;
      case 171:                     // 'lax'
        this.shift(171);            // 'lax'
        break;
      case 192:                     // 'nodes'
        this.shift(192);            // 'nodes'
        break;
      case 199:                     // 'option'
        this.shift(199);            // 'option'
        break;
      case 203:                     // 'ordering'
        this.shift(203);            // 'ordering'
        break;
      case 222:                     // 'revalidation'
        this.shift(222);            // 'revalidation'
        break;
      case 225:                     // 'schema'
        this.shift(225);            // 'schema'
        break;
      case 228:                     // 'score'
        this.shift(228);            // 'score'
        break;
      case 234:                     // 'sliding'
        this.shift(234);            // 'sliding'
        break;
      case 240:                     // 'strict'
        this.shift(240);            // 'strict'
        break;
      case 251:                     // 'tumbling'
        this.shift(251);            // 'tumbling'
        break;
      case 252:                     // 'type'
        this.shift(252);            // 'type'
        break;
      case 257:                     // 'updating'
        this.shift(257);            // 'updating'
        break;
      case 261:                     // 'value'
        this.shift(261);            // 'value'
        break;
      case 262:                     // 'variable'
        this.shift(262);            // 'variable'
        break;
      case 263:                     // 'version'
        this.shift(263);            // 'version'
        break;
      case 267:                     // 'while'
        this.shift(267);            // 'while'
        break;
      case 97:                      // 'constraint'
        this.shift(97);             // 'constraint'
        break;
      case 176:                     // 'loop'
        this.shift(176);            // 'loop'
        break;
      case 221:                     // 'returning'
        this.shift(221);            // 'returning'
        break;
      case 77:                      // 'append'
        this.shift(77);             // 'append'
        break;
      case 166:                     // 'json'
        this.shift(166);            // 'json'
        break;
      default:
        this.shift(194);            // 'object'
      }
      this.eventHandler.endNonterminal("FunctionName", this.e0);
    }

    private try_FunctionName()
    {
      switch (this.l1)
      {
      case 6:                       // EQName^Token
        this.shiftT(6);             // EQName^Token
        break;
      case 70:                      // 'after'
        this.shiftT(70);            // 'after'
        break;
      case 73:                      // 'ancestor'
        this.shiftT(73);            // 'ancestor'
        break;
      case 74:                      // 'ancestor-or-self'
        this.shiftT(74);            // 'ancestor-or-self'
        break;
      case 75:                      // 'and'
        this.shiftT(75);            // 'and'
        break;
      case 79:                      // 'as'
        this.shiftT(79);            // 'as'
        break;
      case 80:                      // 'ascending'
        this.shiftT(80);            // 'ascending'
        break;
      case 84:                      // 'before'
        this.shiftT(84);            // 'before'
        break;
      case 88:                      // 'case'
        this.shiftT(88);            // 'case'
        break;
      case 89:                      // 'cast'
        this.shiftT(89);            // 'cast'
        break;
      case 90:                      // 'castable'
        this.shiftT(90);            // 'castable'
        break;
      case 93:                      // 'child'
        this.shiftT(93);            // 'child'
        break;
      case 94:                      // 'collation'
        this.shiftT(94);            // 'collation'
        break;
      case 103:                     // 'copy'
        this.shiftT(103);           // 'copy'
        break;
      case 105:                     // 'count'
        this.shiftT(105);           // 'count'
        break;
      case 108:                     // 'declare'
        this.shiftT(108);           // 'declare'
        break;
      case 109:                     // 'default'
        this.shiftT(109);           // 'default'
        break;
      case 110:                     // 'delete'
        this.shiftT(110);           // 'delete'
        break;
      case 111:                     // 'descendant'
        this.shiftT(111);           // 'descendant'
        break;
      case 112:                     // 'descendant-or-self'
        this.shiftT(112);           // 'descendant-or-self'
        break;
      case 113:                     // 'descending'
        this.shiftT(113);           // 'descending'
        break;
      case 118:                     // 'div'
        this.shiftT(118);           // 'div'
        break;
      case 119:                     // 'document'
        this.shiftT(119);           // 'document'
        break;
      case 122:                     // 'else'
        this.shiftT(122);           // 'else'
        break;
      case 123:                     // 'empty'
        this.shiftT(123);           // 'empty'
        break;
      case 126:                     // 'end'
        this.shiftT(126);           // 'end'
        break;
      case 128:                     // 'eq'
        this.shiftT(128);           // 'eq'
        break;
      case 129:                     // 'every'
        this.shiftT(129);           // 'every'
        break;
      case 131:                     // 'except'
        this.shiftT(131);           // 'except'
        break;
      case 134:                     // 'first'
        this.shiftT(134);           // 'first'
        break;
      case 135:                     // 'following'
        this.shiftT(135);           // 'following'
        break;
      case 136:                     // 'following-sibling'
        this.shiftT(136);           // 'following-sibling'
        break;
      case 137:                     // 'for'
        this.shiftT(137);           // 'for'
        break;
      case 146:                     // 'ge'
        this.shiftT(146);           // 'ge'
        break;
      case 148:                     // 'group'
        this.shiftT(148);           // 'group'
        break;
      case 150:                     // 'gt'
        this.shiftT(150);           // 'gt'
        break;
      case 151:                     // 'idiv'
        this.shiftT(151);           // 'idiv'
        break;
      case 153:                     // 'import'
        this.shiftT(153);           // 'import'
        break;
      case 159:                     // 'insert'
        this.shiftT(159);           // 'insert'
        break;
      case 160:                     // 'instance'
        this.shiftT(160);           // 'instance'
        break;
      case 162:                     // 'intersect'
        this.shiftT(162);           // 'intersect'
        break;
      case 163:                     // 'into'
        this.shiftT(163);           // 'into'
        break;
      case 164:                     // 'is'
        this.shiftT(164);           // 'is'
        break;
      case 170:                     // 'last'
        this.shiftT(170);           // 'last'
        break;
      case 172:                     // 'le'
        this.shiftT(172);           // 'le'
        break;
      case 174:                     // 'let'
        this.shiftT(174);           // 'let'
        break;
      case 178:                     // 'lt'
        this.shiftT(178);           // 'lt'
        break;
      case 180:                     // 'mod'
        this.shiftT(180);           // 'mod'
        break;
      case 181:                     // 'modify'
        this.shiftT(181);           // 'modify'
        break;
      case 182:                     // 'module'
        this.shiftT(182);           // 'module'
        break;
      case 184:                     // 'namespace'
        this.shiftT(184);           // 'namespace'
        break;
      case 186:                     // 'ne'
        this.shiftT(186);           // 'ne'
        break;
      case 198:                     // 'only'
        this.shiftT(198);           // 'only'
        break;
      case 200:                     // 'or'
        this.shiftT(200);           // 'or'
        break;
      case 201:                     // 'order'
        this.shiftT(201);           // 'order'
        break;
      case 202:                     // 'ordered'
        this.shiftT(202);           // 'ordered'
        break;
      case 206:                     // 'parent'
        this.shiftT(206);           // 'parent'
        break;
      case 212:                     // 'preceding'
        this.shiftT(212);           // 'preceding'
        break;
      case 213:                     // 'preceding-sibling'
        this.shiftT(213);           // 'preceding-sibling'
        break;
      case 218:                     // 'rename'
        this.shiftT(218);           // 'rename'
        break;
      case 219:                     // 'replace'
        this.shiftT(219);           // 'replace'
        break;
      case 220:                     // 'return'
        this.shiftT(220);           // 'return'
        break;
      case 224:                     // 'satisfies'
        this.shiftT(224);           // 'satisfies'
        break;
      case 229:                     // 'self'
        this.shiftT(229);           // 'self'
        break;
      case 235:                     // 'some'
        this.shiftT(235);           // 'some'
        break;
      case 236:                     // 'stable'
        this.shiftT(236);           // 'stable'
        break;
      case 237:                     // 'start'
        this.shiftT(237);           // 'start'
        break;
      case 248:                     // 'to'
        this.shiftT(248);           // 'to'
        break;
      case 249:                     // 'treat'
        this.shiftT(249);           // 'treat'
        break;
      case 250:                     // 'try'
        this.shiftT(250);           // 'try'
        break;
      case 254:                     // 'union'
        this.shiftT(254);           // 'union'
        break;
      case 256:                     // 'unordered'
        this.shiftT(256);           // 'unordered'
        break;
      case 260:                     // 'validate'
        this.shiftT(260);           // 'validate'
        break;
      case 266:                     // 'where'
        this.shiftT(266);           // 'where'
        break;
      case 270:                     // 'with'
        this.shiftT(270);           // 'with'
        break;
      case 274:                     // 'xquery'
        this.shiftT(274);           // 'xquery'
        break;
      case 72:                      // 'allowing'
        this.shiftT(72);            // 'allowing'
        break;
      case 81:                      // 'at'
        this.shiftT(81);            // 'at'
        break;
      case 83:                      // 'base-uri'
        this.shiftT(83);            // 'base-uri'
        break;
      case 85:                      // 'boundary-space'
        this.shiftT(85);            // 'boundary-space'
        break;
      case 86:                      // 'break'
        this.shiftT(86);            // 'break'
        break;
      case 91:                      // 'catch'
        this.shiftT(91);            // 'catch'
        break;
      case 98:                      // 'construction'
        this.shiftT(98);            // 'construction'
        break;
      case 101:                     // 'context'
        this.shiftT(101);           // 'context'
        break;
      case 102:                     // 'continue'
        this.shiftT(102);           // 'continue'
        break;
      case 104:                     // 'copy-namespaces'
        this.shiftT(104);           // 'copy-namespaces'
        break;
      case 106:                     // 'decimal-format'
        this.shiftT(106);           // 'decimal-format'
        break;
      case 125:                     // 'encoding'
        this.shiftT(125);           // 'encoding'
        break;
      case 132:                     // 'exit'
        this.shiftT(132);           // 'exit'
        break;
      case 133:                     // 'external'
        this.shiftT(133);           // 'external'
        break;
      case 141:                     // 'ft-option'
        this.shiftT(141);           // 'ft-option'
        break;
      case 154:                     // 'in'
        this.shiftT(154);           // 'in'
        break;
      case 155:                     // 'index'
        this.shiftT(155);           // 'index'
        break;
      case 161:                     // 'integrity'
        this.shiftT(161);           // 'integrity'
        break;
      case 171:                     // 'lax'
        this.shiftT(171);           // 'lax'
        break;
      case 192:                     // 'nodes'
        this.shiftT(192);           // 'nodes'
        break;
      case 199:                     // 'option'
        this.shiftT(199);           // 'option'
        break;
      case 203:                     // 'ordering'
        this.shiftT(203);           // 'ordering'
        break;
      case 222:                     // 'revalidation'
        this.shiftT(222);           // 'revalidation'
        break;
      case 225:                     // 'schema'
        this.shiftT(225);           // 'schema'
        break;
      case 228:                     // 'score'
        this.shiftT(228);           // 'score'
        break;
      case 234:                     // 'sliding'
        this.shiftT(234);           // 'sliding'
        break;
      case 240:                     // 'strict'
        this.shiftT(240);           // 'strict'
        break;
      case 251:                     // 'tumbling'
        this.shiftT(251);           // 'tumbling'
        break;
      case 252:                     // 'type'
        this.shiftT(252);           // 'type'
        break;
      case 257:                     // 'updating'
        this.shiftT(257);           // 'updating'
        break;
      case 261:                     // 'value'
        this.shiftT(261);           // 'value'
        break;
      case 262:                     // 'variable'
        this.shiftT(262);           // 'variable'
        break;
      case 263:                     // 'version'
        this.shiftT(263);           // 'version'
        break;
      case 267:                     // 'while'
        this.shiftT(267);           // 'while'
        break;
      case 97:                      // 'constraint'
        this.shiftT(97);            // 'constraint'
        break;
      case 176:                     // 'loop'
        this.shiftT(176);           // 'loop'
        break;
      case 221:                     // 'returning'
        this.shiftT(221);           // 'returning'
        break;
      case 77:                      // 'append'
        this.shiftT(77);            // 'append'
        break;
      case 166:                     // 'json'
        this.shiftT(166);           // 'json'
        break;
      default:
        this.shiftT(194);           // 'object'
      }
    }

    private parse_NCName()
    {
      this.eventHandler.startNonterminal("NCName", this.e0);
      switch (this.l1)
      {
      case 19:                      // NCName^Token
        this.shift(19);             // NCName^Token
        break;
      case 70:                      // 'after'
        this.shift(70);             // 'after'
        break;
      case 75:                      // 'and'
        this.shift(75);             // 'and'
        break;
      case 79:                      // 'as'
        this.shift(79);             // 'as'
        break;
      case 80:                      // 'ascending'
        this.shift(80);             // 'ascending'
        break;
      case 84:                      // 'before'
        this.shift(84);             // 'before'
        break;
      case 88:                      // 'case'
        this.shift(88);             // 'case'
        break;
      case 89:                      // 'cast'
        this.shift(89);             // 'cast'
        break;
      case 90:                      // 'castable'
        this.shift(90);             // 'castable'
        break;
      case 94:                      // 'collation'
        this.shift(94);             // 'collation'
        break;
      case 105:                     // 'count'
        this.shift(105);            // 'count'
        break;
      case 109:                     // 'default'
        this.shift(109);            // 'default'
        break;
      case 113:                     // 'descending'
        this.shift(113);            // 'descending'
        break;
      case 118:                     // 'div'
        this.shift(118);            // 'div'
        break;
      case 122:                     // 'else'
        this.shift(122);            // 'else'
        break;
      case 123:                     // 'empty'
        this.shift(123);            // 'empty'
        break;
      case 126:                     // 'end'
        this.shift(126);            // 'end'
        break;
      case 128:                     // 'eq'
        this.shift(128);            // 'eq'
        break;
      case 131:                     // 'except'
        this.shift(131);            // 'except'
        break;
      case 137:                     // 'for'
        this.shift(137);            // 'for'
        break;
      case 146:                     // 'ge'
        this.shift(146);            // 'ge'
        break;
      case 148:                     // 'group'
        this.shift(148);            // 'group'
        break;
      case 150:                     // 'gt'
        this.shift(150);            // 'gt'
        break;
      case 151:                     // 'idiv'
        this.shift(151);            // 'idiv'
        break;
      case 160:                     // 'instance'
        this.shift(160);            // 'instance'
        break;
      case 162:                     // 'intersect'
        this.shift(162);            // 'intersect'
        break;
      case 163:                     // 'into'
        this.shift(163);            // 'into'
        break;
      case 164:                     // 'is'
        this.shift(164);            // 'is'
        break;
      case 172:                     // 'le'
        this.shift(172);            // 'le'
        break;
      case 174:                     // 'let'
        this.shift(174);            // 'let'
        break;
      case 178:                     // 'lt'
        this.shift(178);            // 'lt'
        break;
      case 180:                     // 'mod'
        this.shift(180);            // 'mod'
        break;
      case 181:                     // 'modify'
        this.shift(181);            // 'modify'
        break;
      case 186:                     // 'ne'
        this.shift(186);            // 'ne'
        break;
      case 198:                     // 'only'
        this.shift(198);            // 'only'
        break;
      case 200:                     // 'or'
        this.shift(200);            // 'or'
        break;
      case 201:                     // 'order'
        this.shift(201);            // 'order'
        break;
      case 220:                     // 'return'
        this.shift(220);            // 'return'
        break;
      case 224:                     // 'satisfies'
        this.shift(224);            // 'satisfies'
        break;
      case 236:                     // 'stable'
        this.shift(236);            // 'stable'
        break;
      case 237:                     // 'start'
        this.shift(237);            // 'start'
        break;
      case 248:                     // 'to'
        this.shift(248);            // 'to'
        break;
      case 249:                     // 'treat'
        this.shift(249);            // 'treat'
        break;
      case 254:                     // 'union'
        this.shift(254);            // 'union'
        break;
      case 266:                     // 'where'
        this.shift(266);            // 'where'
        break;
      case 270:                     // 'with'
        this.shift(270);            // 'with'
        break;
      case 73:                      // 'ancestor'
        this.shift(73);             // 'ancestor'
        break;
      case 74:                      // 'ancestor-or-self'
        this.shift(74);             // 'ancestor-or-self'
        break;
      case 82:                      // 'attribute'
        this.shift(82);             // 'attribute'
        break;
      case 93:                      // 'child'
        this.shift(93);             // 'child'
        break;
      case 96:                      // 'comment'
        this.shift(96);             // 'comment'
        break;
      case 103:                     // 'copy'
        this.shift(103);            // 'copy'
        break;
      case 108:                     // 'declare'
        this.shift(108);            // 'declare'
        break;
      case 110:                     // 'delete'
        this.shift(110);            // 'delete'
        break;
      case 111:                     // 'descendant'
        this.shift(111);            // 'descendant'
        break;
      case 112:                     // 'descendant-or-self'
        this.shift(112);            // 'descendant-or-self'
        break;
      case 119:                     // 'document'
        this.shift(119);            // 'document'
        break;
      case 120:                     // 'document-node'
        this.shift(120);            // 'document-node'
        break;
      case 121:                     // 'element'
        this.shift(121);            // 'element'
        break;
      case 124:                     // 'empty-sequence'
        this.shift(124);            // 'empty-sequence'
        break;
      case 129:                     // 'every'
        this.shift(129);            // 'every'
        break;
      case 134:                     // 'first'
        this.shift(134);            // 'first'
        break;
      case 135:                     // 'following'
        this.shift(135);            // 'following'
        break;
      case 136:                     // 'following-sibling'
        this.shift(136);            // 'following-sibling'
        break;
      case 145:                     // 'function'
        this.shift(145);            // 'function'
        break;
      case 152:                     // 'if'
        this.shift(152);            // 'if'
        break;
      case 153:                     // 'import'
        this.shift(153);            // 'import'
        break;
      case 159:                     // 'insert'
        this.shift(159);            // 'insert'
        break;
      case 165:                     // 'item'
        this.shift(165);            // 'item'
        break;
      case 170:                     // 'last'
        this.shift(170);            // 'last'
        break;
      case 182:                     // 'module'
        this.shift(182);            // 'module'
        break;
      case 184:                     // 'namespace'
        this.shift(184);            // 'namespace'
        break;
      case 185:                     // 'namespace-node'
        this.shift(185);            // 'namespace-node'
        break;
      case 191:                     // 'node'
        this.shift(191);            // 'node'
        break;
      case 202:                     // 'ordered'
        this.shift(202);            // 'ordered'
        break;
      case 206:                     // 'parent'
        this.shift(206);            // 'parent'
        break;
      case 212:                     // 'preceding'
        this.shift(212);            // 'preceding'
        break;
      case 213:                     // 'preceding-sibling'
        this.shift(213);            // 'preceding-sibling'
        break;
      case 216:                     // 'processing-instruction'
        this.shift(216);            // 'processing-instruction'
        break;
      case 218:                     // 'rename'
        this.shift(218);            // 'rename'
        break;
      case 219:                     // 'replace'
        this.shift(219);            // 'replace'
        break;
      case 226:                     // 'schema-attribute'
        this.shift(226);            // 'schema-attribute'
        break;
      case 227:                     // 'schema-element'
        this.shift(227);            // 'schema-element'
        break;
      case 229:                     // 'self'
        this.shift(229);            // 'self'
        break;
      case 235:                     // 'some'
        this.shift(235);            // 'some'
        break;
      case 243:                     // 'switch'
        this.shift(243);            // 'switch'
        break;
      case 244:                     // 'text'
        this.shift(244);            // 'text'
        break;
      case 250:                     // 'try'
        this.shift(250);            // 'try'
        break;
      case 253:                     // 'typeswitch'
        this.shift(253);            // 'typeswitch'
        break;
      case 256:                     // 'unordered'
        this.shift(256);            // 'unordered'
        break;
      case 260:                     // 'validate'
        this.shift(260);            // 'validate'
        break;
      case 262:                     // 'variable'
        this.shift(262);            // 'variable'
        break;
      case 274:                     // 'xquery'
        this.shift(274);            // 'xquery'
        break;
      case 72:                      // 'allowing'
        this.shift(72);             // 'allowing'
        break;
      case 81:                      // 'at'
        this.shift(81);             // 'at'
        break;
      case 83:                      // 'base-uri'
        this.shift(83);             // 'base-uri'
        break;
      case 85:                      // 'boundary-space'
        this.shift(85);             // 'boundary-space'
        break;
      case 86:                      // 'break'
        this.shift(86);             // 'break'
        break;
      case 91:                      // 'catch'
        this.shift(91);             // 'catch'
        break;
      case 98:                      // 'construction'
        this.shift(98);             // 'construction'
        break;
      case 101:                     // 'context'
        this.shift(101);            // 'context'
        break;
      case 102:                     // 'continue'
        this.shift(102);            // 'continue'
        break;
      case 104:                     // 'copy-namespaces'
        this.shift(104);            // 'copy-namespaces'
        break;
      case 106:                     // 'decimal-format'
        this.shift(106);            // 'decimal-format'
        break;
      case 125:                     // 'encoding'
        this.shift(125);            // 'encoding'
        break;
      case 132:                     // 'exit'
        this.shift(132);            // 'exit'
        break;
      case 133:                     // 'external'
        this.shift(133);            // 'external'
        break;
      case 141:                     // 'ft-option'
        this.shift(141);            // 'ft-option'
        break;
      case 154:                     // 'in'
        this.shift(154);            // 'in'
        break;
      case 155:                     // 'index'
        this.shift(155);            // 'index'
        break;
      case 161:                     // 'integrity'
        this.shift(161);            // 'integrity'
        break;
      case 171:                     // 'lax'
        this.shift(171);            // 'lax'
        break;
      case 192:                     // 'nodes'
        this.shift(192);            // 'nodes'
        break;
      case 199:                     // 'option'
        this.shift(199);            // 'option'
        break;
      case 203:                     // 'ordering'
        this.shift(203);            // 'ordering'
        break;
      case 222:                     // 'revalidation'
        this.shift(222);            // 'revalidation'
        break;
      case 225:                     // 'schema'
        this.shift(225);            // 'schema'
        break;
      case 228:                     // 'score'
        this.shift(228);            // 'score'
        break;
      case 234:                     // 'sliding'
        this.shift(234);            // 'sliding'
        break;
      case 240:                     // 'strict'
        this.shift(240);            // 'strict'
        break;
      case 251:                     // 'tumbling'
        this.shift(251);            // 'tumbling'
        break;
      case 252:                     // 'type'
        this.shift(252);            // 'type'
        break;
      case 257:                     // 'updating'
        this.shift(257);            // 'updating'
        break;
      case 261:                     // 'value'
        this.shift(261);            // 'value'
        break;
      case 263:                     // 'version'
        this.shift(263);            // 'version'
        break;
      case 267:                     // 'while'
        this.shift(267);            // 'while'
        break;
      case 97:                      // 'constraint'
        this.shift(97);             // 'constraint'
        break;
      case 176:                     // 'loop'
        this.shift(176);            // 'loop'
        break;
      case 221:                     // 'returning'
        this.shift(221);            // 'returning'
        break;
      case 77:                      // 'append'
        this.shift(77);             // 'append'
        break;
      case 166:                     // 'json'
        this.shift(166);            // 'json'
        break;
      default:
        this.shift(194);            // 'object'
      }
      this.eventHandler.endNonterminal("NCName", this.e0);
    }

    private try_NCName()
    {
      switch (this.l1)
      {
      case 19:                      // NCName^Token
        this.shiftT(19);            // NCName^Token
        break;
      case 70:                      // 'after'
        this.shiftT(70);            // 'after'
        break;
      case 75:                      // 'and'
        this.shiftT(75);            // 'and'
        break;
      case 79:                      // 'as'
        this.shiftT(79);            // 'as'
        break;
      case 80:                      // 'ascending'
        this.shiftT(80);            // 'ascending'
        break;
      case 84:                      // 'before'
        this.shiftT(84);            // 'before'
        break;
      case 88:                      // 'case'
        this.shiftT(88);            // 'case'
        break;
      case 89:                      // 'cast'
        this.shiftT(89);            // 'cast'
        break;
      case 90:                      // 'castable'
        this.shiftT(90);            // 'castable'
        break;
      case 94:                      // 'collation'
        this.shiftT(94);            // 'collation'
        break;
      case 105:                     // 'count'
        this.shiftT(105);           // 'count'
        break;
      case 109:                     // 'default'
        this.shiftT(109);           // 'default'
        break;
      case 113:                     // 'descending'
        this.shiftT(113);           // 'descending'
        break;
      case 118:                     // 'div'
        this.shiftT(118);           // 'div'
        break;
      case 122:                     // 'else'
        this.shiftT(122);           // 'else'
        break;
      case 123:                     // 'empty'
        this.shiftT(123);           // 'empty'
        break;
      case 126:                     // 'end'
        this.shiftT(126);           // 'end'
        break;
      case 128:                     // 'eq'
        this.shiftT(128);           // 'eq'
        break;
      case 131:                     // 'except'
        this.shiftT(131);           // 'except'
        break;
      case 137:                     // 'for'
        this.shiftT(137);           // 'for'
        break;
      case 146:                     // 'ge'
        this.shiftT(146);           // 'ge'
        break;
      case 148:                     // 'group'
        this.shiftT(148);           // 'group'
        break;
      case 150:                     // 'gt'
        this.shiftT(150);           // 'gt'
        break;
      case 151:                     // 'idiv'
        this.shiftT(151);           // 'idiv'
        break;
      case 160:                     // 'instance'
        this.shiftT(160);           // 'instance'
        break;
      case 162:                     // 'intersect'
        this.shiftT(162);           // 'intersect'
        break;
      case 163:                     // 'into'
        this.shiftT(163);           // 'into'
        break;
      case 164:                     // 'is'
        this.shiftT(164);           // 'is'
        break;
      case 172:                     // 'le'
        this.shiftT(172);           // 'le'
        break;
      case 174:                     // 'let'
        this.shiftT(174);           // 'let'
        break;
      case 178:                     // 'lt'
        this.shiftT(178);           // 'lt'
        break;
      case 180:                     // 'mod'
        this.shiftT(180);           // 'mod'
        break;
      case 181:                     // 'modify'
        this.shiftT(181);           // 'modify'
        break;
      case 186:                     // 'ne'
        this.shiftT(186);           // 'ne'
        break;
      case 198:                     // 'only'
        this.shiftT(198);           // 'only'
        break;
      case 200:                     // 'or'
        this.shiftT(200);           // 'or'
        break;
      case 201:                     // 'order'
        this.shiftT(201);           // 'order'
        break;
      case 220:                     // 'return'
        this.shiftT(220);           // 'return'
        break;
      case 224:                     // 'satisfies'
        this.shiftT(224);           // 'satisfies'
        break;
      case 236:                     // 'stable'
        this.shiftT(236);           // 'stable'
        break;
      case 237:                     // 'start'
        this.shiftT(237);           // 'start'
        break;
      case 248:                     // 'to'
        this.shiftT(248);           // 'to'
        break;
      case 249:                     // 'treat'
        this.shiftT(249);           // 'treat'
        break;
      case 254:                     // 'union'
        this.shiftT(254);           // 'union'
        break;
      case 266:                     // 'where'
        this.shiftT(266);           // 'where'
        break;
      case 270:                     // 'with'
        this.shiftT(270);           // 'with'
        break;
      case 73:                      // 'ancestor'
        this.shiftT(73);            // 'ancestor'
        break;
      case 74:                      // 'ancestor-or-self'
        this.shiftT(74);            // 'ancestor-or-self'
        break;
      case 82:                      // 'attribute'
        this.shiftT(82);            // 'attribute'
        break;
      case 93:                      // 'child'
        this.shiftT(93);            // 'child'
        break;
      case 96:                      // 'comment'
        this.shiftT(96);            // 'comment'
        break;
      case 103:                     // 'copy'
        this.shiftT(103);           // 'copy'
        break;
      case 108:                     // 'declare'
        this.shiftT(108);           // 'declare'
        break;
      case 110:                     // 'delete'
        this.shiftT(110);           // 'delete'
        break;
      case 111:                     // 'descendant'
        this.shiftT(111);           // 'descendant'
        break;
      case 112:                     // 'descendant-or-self'
        this.shiftT(112);           // 'descendant-or-self'
        break;
      case 119:                     // 'document'
        this.shiftT(119);           // 'document'
        break;
      case 120:                     // 'document-node'
        this.shiftT(120);           // 'document-node'
        break;
      case 121:                     // 'element'
        this.shiftT(121);           // 'element'
        break;
      case 124:                     // 'empty-sequence'
        this.shiftT(124);           // 'empty-sequence'
        break;
      case 129:                     // 'every'
        this.shiftT(129);           // 'every'
        break;
      case 134:                     // 'first'
        this.shiftT(134);           // 'first'
        break;
      case 135:                     // 'following'
        this.shiftT(135);           // 'following'
        break;
      case 136:                     // 'following-sibling'
        this.shiftT(136);           // 'following-sibling'
        break;
      case 145:                     // 'function'
        this.shiftT(145);           // 'function'
        break;
      case 152:                     // 'if'
        this.shiftT(152);           // 'if'
        break;
      case 153:                     // 'import'
        this.shiftT(153);           // 'import'
        break;
      case 159:                     // 'insert'
        this.shiftT(159);           // 'insert'
        break;
      case 165:                     // 'item'
        this.shiftT(165);           // 'item'
        break;
      case 170:                     // 'last'
        this.shiftT(170);           // 'last'
        break;
      case 182:                     // 'module'
        this.shiftT(182);           // 'module'
        break;
      case 184:                     // 'namespace'
        this.shiftT(184);           // 'namespace'
        break;
      case 185:                     // 'namespace-node'
        this.shiftT(185);           // 'namespace-node'
        break;
      case 191:                     // 'node'
        this.shiftT(191);           // 'node'
        break;
      case 202:                     // 'ordered'
        this.shiftT(202);           // 'ordered'
        break;
      case 206:                     // 'parent'
        this.shiftT(206);           // 'parent'
        break;
      case 212:                     // 'preceding'
        this.shiftT(212);           // 'preceding'
        break;
      case 213:                     // 'preceding-sibling'
        this.shiftT(213);           // 'preceding-sibling'
        break;
      case 216:                     // 'processing-instruction'
        this.shiftT(216);           // 'processing-instruction'
        break;
      case 218:                     // 'rename'
        this.shiftT(218);           // 'rename'
        break;
      case 219:                     // 'replace'
        this.shiftT(219);           // 'replace'
        break;
      case 226:                     // 'schema-attribute'
        this.shiftT(226);           // 'schema-attribute'
        break;
      case 227:                     // 'schema-element'
        this.shiftT(227);           // 'schema-element'
        break;
      case 229:                     // 'self'
        this.shiftT(229);           // 'self'
        break;
      case 235:                     // 'some'
        this.shiftT(235);           // 'some'
        break;
      case 243:                     // 'switch'
        this.shiftT(243);           // 'switch'
        break;
      case 244:                     // 'text'
        this.shiftT(244);           // 'text'
        break;
      case 250:                     // 'try'
        this.shiftT(250);           // 'try'
        break;
      case 253:                     // 'typeswitch'
        this.shiftT(253);           // 'typeswitch'
        break;
      case 256:                     // 'unordered'
        this.shiftT(256);           // 'unordered'
        break;
      case 260:                     // 'validate'
        this.shiftT(260);           // 'validate'
        break;
      case 262:                     // 'variable'
        this.shiftT(262);           // 'variable'
        break;
      case 274:                     // 'xquery'
        this.shiftT(274);           // 'xquery'
        break;
      case 72:                      // 'allowing'
        this.shiftT(72);            // 'allowing'
        break;
      case 81:                      // 'at'
        this.shiftT(81);            // 'at'
        break;
      case 83:                      // 'base-uri'
        this.shiftT(83);            // 'base-uri'
        break;
      case 85:                      // 'boundary-space'
        this.shiftT(85);            // 'boundary-space'
        break;
      case 86:                      // 'break'
        this.shiftT(86);            // 'break'
        break;
      case 91:                      // 'catch'
        this.shiftT(91);            // 'catch'
        break;
      case 98:                      // 'construction'
        this.shiftT(98);            // 'construction'
        break;
      case 101:                     // 'context'
        this.shiftT(101);           // 'context'
        break;
      case 102:                     // 'continue'
        this.shiftT(102);           // 'continue'
        break;
      case 104:                     // 'copy-namespaces'
        this.shiftT(104);           // 'copy-namespaces'
        break;
      case 106:                     // 'decimal-format'
        this.shiftT(106);           // 'decimal-format'
        break;
      case 125:                     // 'encoding'
        this.shiftT(125);           // 'encoding'
        break;
      case 132:                     // 'exit'
        this.shiftT(132);           // 'exit'
        break;
      case 133:                     // 'external'
        this.shiftT(133);           // 'external'
        break;
      case 141:                     // 'ft-option'
        this.shiftT(141);           // 'ft-option'
        break;
      case 154:                     // 'in'
        this.shiftT(154);           // 'in'
        break;
      case 155:                     // 'index'
        this.shiftT(155);           // 'index'
        break;
      case 161:                     // 'integrity'
        this.shiftT(161);           // 'integrity'
        break;
      case 171:                     // 'lax'
        this.shiftT(171);           // 'lax'
        break;
      case 192:                     // 'nodes'
        this.shiftT(192);           // 'nodes'
        break;
      case 199:                     // 'option'
        this.shiftT(199);           // 'option'
        break;
      case 203:                     // 'ordering'
        this.shiftT(203);           // 'ordering'
        break;
      case 222:                     // 'revalidation'
        this.shiftT(222);           // 'revalidation'
        break;
      case 225:                     // 'schema'
        this.shiftT(225);           // 'schema'
        break;
      case 228:                     // 'score'
        this.shiftT(228);           // 'score'
        break;
      case 234:                     // 'sliding'
        this.shiftT(234);           // 'sliding'
        break;
      case 240:                     // 'strict'
        this.shiftT(240);           // 'strict'
        break;
      case 251:                     // 'tumbling'
        this.shiftT(251);           // 'tumbling'
        break;
      case 252:                     // 'type'
        this.shiftT(252);           // 'type'
        break;
      case 257:                     // 'updating'
        this.shiftT(257);           // 'updating'
        break;
      case 261:                     // 'value'
        this.shiftT(261);           // 'value'
        break;
      case 263:                     // 'version'
        this.shiftT(263);           // 'version'
        break;
      case 267:                     // 'while'
        this.shiftT(267);           // 'while'
        break;
      case 97:                      // 'constraint'
        this.shiftT(97);            // 'constraint'
        break;
      case 176:                     // 'loop'
        this.shiftT(176);           // 'loop'
        break;
      case 221:                     // 'returning'
        this.shiftT(221);           // 'returning'
        break;
      case 77:                      // 'append'
        this.shiftT(77);            // 'append'
        break;
      case 166:                     // 'json'
        this.shiftT(166);           // 'json'
        break;
      default:
        this.shiftT(194);           // 'object'
      }
    }

    private parse_MainModule()
    {
      this.eventHandler.startNonterminal("MainModule", this.e0);
      this.parse_Prolog();
      this.whitespace();
      this.parse_Program();
      this.eventHandler.endNonterminal("MainModule", this.e0);
    }

    private parse_Program()
    {
      this.eventHandler.startNonterminal("Program", this.e0);
      this.parse_StatementsAndOptionalExpr();
      this.eventHandler.endNonterminal("Program", this.e0);
    }

    private parse_Statements()
    {
      this.eventHandler.startNonterminal("Statements", this.e0);
      for (;;)
      {
        this.lookahead1W(277);      // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | EOF | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' |
                                    // '..' | '/' | '//' | ';' | '<' | '<!--' | '<?' | '@' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|' | '}'
        switch (this.l1)
        {
        case 34:                    // '('
          this.lookahead2W(268);    // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | ')' | '+' | '-' | '.' |
                                    // '..' | '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
          break;
        case 35:                    // '(#'
          this.lookahead2(251);     // EQName^Token | S | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' |
                                    // 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
          break;
        case 46:                    // '/'
          this.lookahead2W(283);    // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | EOF | '!' | '!=' | '$' | '%' | '(' | '(:' | '*' | '+' |
                                    // ',' | '-' | '.' | '..' | ';' | '<' | '<!--' | '<<' | '<=' | '<?' | '=' | '>' |
                                    // '>=' | '>>' | '@' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'contains' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|' | '|' | '||' | '}'
          break;
        case 47:                    // '//'
          this.lookahead2W(264);    // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '<' | '<!--' |
                                    // '<?' | '@' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' |
                                    // 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
          break;
        case 54:                    // '<'
          this.lookahead2(4);       // QName
          break;
        case 55:                    // '<!--'
          this.lookahead2(1);       // DirCommentContents
          break;
        case 59:                    // '<?'
          this.lookahead2(3);       // PITarget
          break;
        case 66:                    // '@'
          this.lookahead2W(256);    // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
          break;
        case 68:                    // '['
          this.lookahead2W(271);    // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | ']' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
          break;
        case 77:                    // 'append'
          this.lookahead2W(199);    // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'json' | 'le' | 'lt' | 'mod' | 'ne' | 'or' |
                                    // 'to' | 'treat' | 'union' | '|' | '||' | '}'
          break;
        case 82:                    // 'attribute'
          this.lookahead2W(280);    // EQName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' |
                                    // '-' | '/' | '//' | '::' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'contains' |
                                    // 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' |
                                    // 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '|' | '||' | '}'
          break;
        case 121:                   // 'element'
          this.lookahead2W(279);    // EQName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' |
                                    // '-' | '/' | '//' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' |
                                    // 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'contains' |
                                    // 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' |
                                    // 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '|' | '||' | '}'
          break;
        case 132:                   // 'exit'
          this.lookahead2W(202);    // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' |
                                    // 'returning' | 'to' | 'treat' | 'union' | '|' | '||' | '}'
          break;
        case 137:                   // 'for'
          this.lookahead2W(207);    // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'sliding' |
                                    // 'to' | 'treat' | 'tumbling' | 'union' | '|' | '||' | '}'
          break;
        case 174:                   // 'let'
          this.lookahead2W(204);    // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'score' |
                                    // 'to' | 'treat' | 'union' | '|' | '||' | '}'
          break;
        case 218:                   // 'rename'
          this.lookahead2W(205);    // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'json' | 'le' | 'lt' | 'mod' | 'ne' | 'node' |
                                    // 'or' | 'to' | 'treat' | 'union' | '|' | '||' | '}'
          break;
        case 219:                   // 'replace'
          this.lookahead2W(206);    // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'node' | 'or' |
                                    // 'to' | 'treat' | 'union' | 'value' | '|' | '||' | '}'
          break;
        case 260:                   // 'validate'
          this.lookahead2W(209);    // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'lax' | 'le' | 'lt' | 'mod' | 'ne' | 'or' |
                                    // 'strict' | 'to' | 'treat' | 'type' | 'union' | '{' | '|' | '||' | '}'
          break;
        case 276:                   // '{'
          this.lookahead2W(276);    // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|' | '}'
          break;
        case 278:                   // '{|'
          this.lookahead2W(272);    // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|' | '|}'
          break;
        case 5:                     // Wildcard
        case 45:                    // '..'
          this.lookahead2W(185);    // S^WS | EOF | '!' | '!=' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' | ';' | '<' |
                                    // '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' | 'castable' |
                                    // 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' | 'treat' |
                                    // 'union' | '|' | '||' | '}'
          break;
        case 31:                    // '$'
        case 32:                    // '%'
          this.lookahead2W(254);    // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
          break;
        case 40:                    // '+'
        case 42:                    // '-'
          this.lookahead2W(266);    // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
          break;
        case 86:                    // 'break'
        case 102:                   // 'continue'
          this.lookahead2W(200);    // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'loop' | 'lt' | 'mod' | 'ne' | 'or' |
                                    // 'to' | 'treat' | 'union' | '|' | '||' | '}'
          break;
        case 110:                   // 'delete'
        case 159:                   // 'insert'
          this.lookahead2W(208);    // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'json' | 'le' | 'lt' | 'mod' | 'ne' | 'node' |
                                    // 'nodes' | 'or' | 'to' | 'treat' | 'union' | '|' | '||' | '}'
          break;
        case 184:                   // 'namespace'
        case 216:                   // 'processing-instruction'
          this.lookahead2W(267);    // NCName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' |
                                    // '-' | '/' | '//' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' |
                                    // 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'contains' |
                                    // 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'last' | 'lax' | 'le' | 'let' |
                                    // 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '|' | '||' | '}'
          break;
        case 103:                   // 'copy'
        case 129:                   // 'every'
        case 235:                   // 'some'
        case 262:                   // 'variable'
          this.lookahead2W(196);    // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' |
                                    // 'treat' | 'union' | '|' | '||' | '}'
          break;
        case 8:                     // IntegerLiteral
        case 9:                     // DecimalLiteral
        case 10:                    // DoubleLiteral
        case 11:                    // StringLiteral
        case 44:                    // '.'
          this.lookahead2W(191);    // S^WS | EOF | '!' | '!=' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' | 'castable' |
                                    // 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' | 'treat' |
                                    // 'union' | '|' | '||' | '}'
          break;
        case 78:                    // 'array'
        case 124:                   // 'empty-sequence'
        case 165:                   // 'item'
        case 167:                   // 'json-item'
        case 242:                   // 'structured-item'
          this.lookahead2W(190);    // S^WS | EOF | '!' | '!=' | '#' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' | 'castable' |
                                    // 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' | 'treat' |
                                    // 'union' | '|' | '||' | '}'
          break;
        case 96:                    // 'comment'
        case 119:                   // 'document'
        case 202:                   // 'ordered'
        case 244:                   // 'text'
        case 250:                   // 'try'
        case 256:                   // 'unordered'
          this.lookahead2W(203);    // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' |
                                    // 'treat' | 'union' | '{' | '|' | '||' | '}'
          break;
        case 73:                    // 'ancestor'
        case 74:                    // 'ancestor-or-self'
        case 93:                    // 'child'
        case 111:                   // 'descendant'
        case 112:                   // 'descendant-or-self'
        case 135:                   // 'following'
        case 136:                   // 'following-sibling'
        case 206:                   // 'parent'
        case 212:                   // 'preceding'
        case 213:                   // 'preceding-sibling'
        case 229:                   // 'self'
          this.lookahead2W(197);    // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // '::' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' |
                                    // 'treat' | 'union' | '|' | '||' | '}'
          break;
        case 6:                     // EQName^Token
        case 70:                    // 'after'
        case 72:                    // 'allowing'
        case 75:                    // 'and'
        case 79:                    // 'as'
        case 80:                    // 'ascending'
        case 81:                    // 'at'
        case 83:                    // 'base-uri'
        case 84:                    // 'before'
        case 85:                    // 'boundary-space'
        case 88:                    // 'case'
        case 89:                    // 'cast'
        case 90:                    // 'castable'
        case 91:                    // 'catch'
        case 94:                    // 'collation'
        case 97:                    // 'constraint'
        case 98:                    // 'construction'
        case 101:                   // 'context'
        case 104:                   // 'copy-namespaces'
        case 105:                   // 'count'
        case 106:                   // 'decimal-format'
        case 108:                   // 'declare'
        case 109:                   // 'default'
        case 113:                   // 'descending'
        case 118:                   // 'div'
        case 120:                   // 'document-node'
        case 122:                   // 'else'
        case 123:                   // 'empty'
        case 125:                   // 'encoding'
        case 126:                   // 'end'
        case 128:                   // 'eq'
        case 131:                   // 'except'
        case 133:                   // 'external'
        case 134:                   // 'first'
        case 141:                   // 'ft-option'
        case 145:                   // 'function'
        case 146:                   // 'ge'
        case 148:                   // 'group'
        case 150:                   // 'gt'
        case 151:                   // 'idiv'
        case 152:                   // 'if'
        case 153:                   // 'import'
        case 154:                   // 'in'
        case 155:                   // 'index'
        case 160:                   // 'instance'
        case 161:                   // 'integrity'
        case 162:                   // 'intersect'
        case 163:                   // 'into'
        case 164:                   // 'is'
        case 166:                   // 'json'
        case 170:                   // 'last'
        case 171:                   // 'lax'
        case 172:                   // 'le'
        case 176:                   // 'loop'
        case 178:                   // 'lt'
        case 180:                   // 'mod'
        case 181:                   // 'modify'
        case 182:                   // 'module'
        case 185:                   // 'namespace-node'
        case 186:                   // 'ne'
        case 191:                   // 'node'
        case 192:                   // 'nodes'
        case 194:                   // 'object'
        case 198:                   // 'only'
        case 199:                   // 'option'
        case 200:                   // 'or'
        case 201:                   // 'order'
        case 203:                   // 'ordering'
        case 220:                   // 'return'
        case 221:                   // 'returning'
        case 222:                   // 'revalidation'
        case 224:                   // 'satisfies'
        case 225:                   // 'schema'
        case 226:                   // 'schema-attribute'
        case 227:                   // 'schema-element'
        case 228:                   // 'score'
        case 234:                   // 'sliding'
        case 236:                   // 'stable'
        case 237:                   // 'start'
        case 240:                   // 'strict'
        case 243:                   // 'switch'
        case 248:                   // 'to'
        case 249:                   // 'treat'
        case 251:                   // 'tumbling'
        case 252:                   // 'type'
        case 253:                   // 'typeswitch'
        case 254:                   // 'union'
        case 257:                   // 'updating'
        case 261:                   // 'value'
        case 263:                   // 'version'
        case 266:                   // 'where'
        case 267:                   // 'while'
        case 270:                   // 'with'
        case 274:                   // 'xquery'
          this.lookahead2W(194);    // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' |
                                    // 'treat' | 'union' | '|' | '||' | '}'
          break;
        default:
          this.lk = this.l1;
        }
        if (this.lk != 25           // EOF
         && this.lk != 53           // ';'
         && this.lk != 282          // '}'
         && this.lk != 12805        // Wildcard EOF
         && this.lk != 12806        // EQName^Token EOF
         && this.lk != 12808        // IntegerLiteral EOF
         && this.lk != 12809        // DecimalLiteral EOF
         && this.lk != 12810        // DoubleLiteral EOF
         && this.lk != 12811        // StringLiteral EOF
         && this.lk != 12844        // '.' EOF
         && this.lk != 12845        // '..' EOF
         && this.lk != 12846        // '/' EOF
         && this.lk != 12870        // 'after' EOF
         && this.lk != 12872        // 'allowing' EOF
         && this.lk != 12873        // 'ancestor' EOF
         && this.lk != 12874        // 'ancestor-or-self' EOF
         && this.lk != 12875        // 'and' EOF
         && this.lk != 12877        // 'append' EOF
         && this.lk != 12878        // 'array' EOF
         && this.lk != 12879        // 'as' EOF
         && this.lk != 12880        // 'ascending' EOF
         && this.lk != 12881        // 'at' EOF
         && this.lk != 12882        // 'attribute' EOF
         && this.lk != 12883        // 'base-uri' EOF
         && this.lk != 12884        // 'before' EOF
         && this.lk != 12885        // 'boundary-space' EOF
         && this.lk != 12886        // 'break' EOF
         && this.lk != 12888        // 'case' EOF
         && this.lk != 12889        // 'cast' EOF
         && this.lk != 12890        // 'castable' EOF
         && this.lk != 12891        // 'catch' EOF
         && this.lk != 12893        // 'child' EOF
         && this.lk != 12894        // 'collation' EOF
         && this.lk != 12896        // 'comment' EOF
         && this.lk != 12897        // 'constraint' EOF
         && this.lk != 12898        // 'construction' EOF
         && this.lk != 12901        // 'context' EOF
         && this.lk != 12902        // 'continue' EOF
         && this.lk != 12903        // 'copy' EOF
         && this.lk != 12904        // 'copy-namespaces' EOF
         && this.lk != 12905        // 'count' EOF
         && this.lk != 12906        // 'decimal-format' EOF
         && this.lk != 12908        // 'declare' EOF
         && this.lk != 12909        // 'default' EOF
         && this.lk != 12910        // 'delete' EOF
         && this.lk != 12911        // 'descendant' EOF
         && this.lk != 12912        // 'descendant-or-self' EOF
         && this.lk != 12913        // 'descending' EOF
         && this.lk != 12918        // 'div' EOF
         && this.lk != 12919        // 'document' EOF
         && this.lk != 12920        // 'document-node' EOF
         && this.lk != 12921        // 'element' EOF
         && this.lk != 12922        // 'else' EOF
         && this.lk != 12923        // 'empty' EOF
         && this.lk != 12924        // 'empty-sequence' EOF
         && this.lk != 12925        // 'encoding' EOF
         && this.lk != 12926        // 'end' EOF
         && this.lk != 12928        // 'eq' EOF
         && this.lk != 12929        // 'every' EOF
         && this.lk != 12931        // 'except' EOF
         && this.lk != 12932        // 'exit' EOF
         && this.lk != 12933        // 'external' EOF
         && this.lk != 12934        // 'first' EOF
         && this.lk != 12935        // 'following' EOF
         && this.lk != 12936        // 'following-sibling' EOF
         && this.lk != 12937        // 'for' EOF
         && this.lk != 12941        // 'ft-option' EOF
         && this.lk != 12945        // 'function' EOF
         && this.lk != 12946        // 'ge' EOF
         && this.lk != 12948        // 'group' EOF
         && this.lk != 12950        // 'gt' EOF
         && this.lk != 12951        // 'idiv' EOF
         && this.lk != 12952        // 'if' EOF
         && this.lk != 12953        // 'import' EOF
         && this.lk != 12954        // 'in' EOF
         && this.lk != 12955        // 'index' EOF
         && this.lk != 12959        // 'insert' EOF
         && this.lk != 12960        // 'instance' EOF
         && this.lk != 12961        // 'integrity' EOF
         && this.lk != 12962        // 'intersect' EOF
         && this.lk != 12963        // 'into' EOF
         && this.lk != 12964        // 'is' EOF
         && this.lk != 12965        // 'item' EOF
         && this.lk != 12966        // 'json' EOF
         && this.lk != 12967        // 'json-item' EOF
         && this.lk != 12970        // 'last' EOF
         && this.lk != 12971        // 'lax' EOF
         && this.lk != 12972        // 'le' EOF
         && this.lk != 12974        // 'let' EOF
         && this.lk != 12976        // 'loop' EOF
         && this.lk != 12978        // 'lt' EOF
         && this.lk != 12980        // 'mod' EOF
         && this.lk != 12981        // 'modify' EOF
         && this.lk != 12982        // 'module' EOF
         && this.lk != 12984        // 'namespace' EOF
         && this.lk != 12985        // 'namespace-node' EOF
         && this.lk != 12986        // 'ne' EOF
         && this.lk != 12991        // 'node' EOF
         && this.lk != 12992        // 'nodes' EOF
         && this.lk != 12994        // 'object' EOF
         && this.lk != 12998        // 'only' EOF
         && this.lk != 12999        // 'option' EOF
         && this.lk != 13000        // 'or' EOF
         && this.lk != 13001        // 'order' EOF
         && this.lk != 13002        // 'ordered' EOF
         && this.lk != 13003        // 'ordering' EOF
         && this.lk != 13006        // 'parent' EOF
         && this.lk != 13012        // 'preceding' EOF
         && this.lk != 13013        // 'preceding-sibling' EOF
         && this.lk != 13016        // 'processing-instruction' EOF
         && this.lk != 13018        // 'rename' EOF
         && this.lk != 13019        // 'replace' EOF
         && this.lk != 13020        // 'return' EOF
         && this.lk != 13021        // 'returning' EOF
         && this.lk != 13022        // 'revalidation' EOF
         && this.lk != 13024        // 'satisfies' EOF
         && this.lk != 13025        // 'schema' EOF
         && this.lk != 13026        // 'schema-attribute' EOF
         && this.lk != 13027        // 'schema-element' EOF
         && this.lk != 13028        // 'score' EOF
         && this.lk != 13029        // 'self' EOF
         && this.lk != 13034        // 'sliding' EOF
         && this.lk != 13035        // 'some' EOF
         && this.lk != 13036        // 'stable' EOF
         && this.lk != 13037        // 'start' EOF
         && this.lk != 13040        // 'strict' EOF
         && this.lk != 13042        // 'structured-item' EOF
         && this.lk != 13043        // 'switch' EOF
         && this.lk != 13044        // 'text' EOF
         && this.lk != 13048        // 'to' EOF
         && this.lk != 13049        // 'treat' EOF
         && this.lk != 13050        // 'try' EOF
         && this.lk != 13051        // 'tumbling' EOF
         && this.lk != 13052        // 'type' EOF
         && this.lk != 13053        // 'typeswitch' EOF
         && this.lk != 13054        // 'union' EOF
         && this.lk != 13056        // 'unordered' EOF
         && this.lk != 13057        // 'updating' EOF
         && this.lk != 13060        // 'validate' EOF
         && this.lk != 13061        // 'value' EOF
         && this.lk != 13062        // 'variable' EOF
         && this.lk != 13063        // 'version' EOF
         && this.lk != 13066        // 'where' EOF
         && this.lk != 13067        // 'while' EOF
         && this.lk != 13070        // 'with' EOF
         && this.lk != 13074        // 'xquery' EOF
         && this.lk != 16134        // 'variable' '$'
         && this.lk != 20997        // Wildcard ','
         && this.lk != 20998        // EQName^Token ','
         && this.lk != 21000        // IntegerLiteral ','
         && this.lk != 21001        // DecimalLiteral ','
         && this.lk != 21002        // DoubleLiteral ','
         && this.lk != 21003        // StringLiteral ','
         && this.lk != 21036        // '.' ','
         && this.lk != 21037        // '..' ','
         && this.lk != 21038        // '/' ','
         && this.lk != 21062        // 'after' ','
         && this.lk != 21064        // 'allowing' ','
         && this.lk != 21065        // 'ancestor' ','
         && this.lk != 21066        // 'ancestor-or-self' ','
         && this.lk != 21067        // 'and' ','
         && this.lk != 21069        // 'append' ','
         && this.lk != 21070        // 'array' ','
         && this.lk != 21071        // 'as' ','
         && this.lk != 21072        // 'ascending' ','
         && this.lk != 21073        // 'at' ','
         && this.lk != 21074        // 'attribute' ','
         && this.lk != 21075        // 'base-uri' ','
         && this.lk != 21076        // 'before' ','
         && this.lk != 21077        // 'boundary-space' ','
         && this.lk != 21078        // 'break' ','
         && this.lk != 21080        // 'case' ','
         && this.lk != 21081        // 'cast' ','
         && this.lk != 21082        // 'castable' ','
         && this.lk != 21083        // 'catch' ','
         && this.lk != 21085        // 'child' ','
         && this.lk != 21086        // 'collation' ','
         && this.lk != 21088        // 'comment' ','
         && this.lk != 21089        // 'constraint' ','
         && this.lk != 21090        // 'construction' ','
         && this.lk != 21093        // 'context' ','
         && this.lk != 21094        // 'continue' ','
         && this.lk != 21095        // 'copy' ','
         && this.lk != 21096        // 'copy-namespaces' ','
         && this.lk != 21097        // 'count' ','
         && this.lk != 21098        // 'decimal-format' ','
         && this.lk != 21100        // 'declare' ','
         && this.lk != 21101        // 'default' ','
         && this.lk != 21102        // 'delete' ','
         && this.lk != 21103        // 'descendant' ','
         && this.lk != 21104        // 'descendant-or-self' ','
         && this.lk != 21105        // 'descending' ','
         && this.lk != 21110        // 'div' ','
         && this.lk != 21111        // 'document' ','
         && this.lk != 21112        // 'document-node' ','
         && this.lk != 21113        // 'element' ','
         && this.lk != 21114        // 'else' ','
         && this.lk != 21115        // 'empty' ','
         && this.lk != 21116        // 'empty-sequence' ','
         && this.lk != 21117        // 'encoding' ','
         && this.lk != 21118        // 'end' ','
         && this.lk != 21120        // 'eq' ','
         && this.lk != 21121        // 'every' ','
         && this.lk != 21123        // 'except' ','
         && this.lk != 21124        // 'exit' ','
         && this.lk != 21125        // 'external' ','
         && this.lk != 21126        // 'first' ','
         && this.lk != 21127        // 'following' ','
         && this.lk != 21128        // 'following-sibling' ','
         && this.lk != 21129        // 'for' ','
         && this.lk != 21133        // 'ft-option' ','
         && this.lk != 21137        // 'function' ','
         && this.lk != 21138        // 'ge' ','
         && this.lk != 21140        // 'group' ','
         && this.lk != 21142        // 'gt' ','
         && this.lk != 21143        // 'idiv' ','
         && this.lk != 21144        // 'if' ','
         && this.lk != 21145        // 'import' ','
         && this.lk != 21146        // 'in' ','
         && this.lk != 21147        // 'index' ','
         && this.lk != 21151        // 'insert' ','
         && this.lk != 21152        // 'instance' ','
         && this.lk != 21153        // 'integrity' ','
         && this.lk != 21154        // 'intersect' ','
         && this.lk != 21155        // 'into' ','
         && this.lk != 21156        // 'is' ','
         && this.lk != 21157        // 'item' ','
         && this.lk != 21158        // 'json' ','
         && this.lk != 21159        // 'json-item' ','
         && this.lk != 21162        // 'last' ','
         && this.lk != 21163        // 'lax' ','
         && this.lk != 21164        // 'le' ','
         && this.lk != 21166        // 'let' ','
         && this.lk != 21168        // 'loop' ','
         && this.lk != 21170        // 'lt' ','
         && this.lk != 21172        // 'mod' ','
         && this.lk != 21173        // 'modify' ','
         && this.lk != 21174        // 'module' ','
         && this.lk != 21176        // 'namespace' ','
         && this.lk != 21177        // 'namespace-node' ','
         && this.lk != 21178        // 'ne' ','
         && this.lk != 21183        // 'node' ','
         && this.lk != 21184        // 'nodes' ','
         && this.lk != 21186        // 'object' ','
         && this.lk != 21190        // 'only' ','
         && this.lk != 21191        // 'option' ','
         && this.lk != 21192        // 'or' ','
         && this.lk != 21193        // 'order' ','
         && this.lk != 21194        // 'ordered' ','
         && this.lk != 21195        // 'ordering' ','
         && this.lk != 21198        // 'parent' ','
         && this.lk != 21204        // 'preceding' ','
         && this.lk != 21205        // 'preceding-sibling' ','
         && this.lk != 21208        // 'processing-instruction' ','
         && this.lk != 21210        // 'rename' ','
         && this.lk != 21211        // 'replace' ','
         && this.lk != 21212        // 'return' ','
         && this.lk != 21213        // 'returning' ','
         && this.lk != 21214        // 'revalidation' ','
         && this.lk != 21216        // 'satisfies' ','
         && this.lk != 21217        // 'schema' ','
         && this.lk != 21218        // 'schema-attribute' ','
         && this.lk != 21219        // 'schema-element' ','
         && this.lk != 21220        // 'score' ','
         && this.lk != 21221        // 'self' ','
         && this.lk != 21226        // 'sliding' ','
         && this.lk != 21227        // 'some' ','
         && this.lk != 21228        // 'stable' ','
         && this.lk != 21229        // 'start' ','
         && this.lk != 21232        // 'strict' ','
         && this.lk != 21234        // 'structured-item' ','
         && this.lk != 21235        // 'switch' ','
         && this.lk != 21236        // 'text' ','
         && this.lk != 21240        // 'to' ','
         && this.lk != 21241        // 'treat' ','
         && this.lk != 21242        // 'try' ','
         && this.lk != 21243        // 'tumbling' ','
         && this.lk != 21244        // 'type' ','
         && this.lk != 21245        // 'typeswitch' ','
         && this.lk != 21246        // 'union' ','
         && this.lk != 21248        // 'unordered' ','
         && this.lk != 21249        // 'updating' ','
         && this.lk != 21252        // 'validate' ','
         && this.lk != 21253        // 'value' ','
         && this.lk != 21254        // 'variable' ','
         && this.lk != 21255        // 'version' ','
         && this.lk != 21258        // 'where' ','
         && this.lk != 21259        // 'while' ','
         && this.lk != 21262        // 'with' ','
         && this.lk != 21266        // 'xquery' ','
         && this.lk != 27141        // Wildcard ';'
         && this.lk != 27142        // EQName^Token ';'
         && this.lk != 27144        // IntegerLiteral ';'
         && this.lk != 27145        // DecimalLiteral ';'
         && this.lk != 27146        // DoubleLiteral ';'
         && this.lk != 27147        // StringLiteral ';'
         && this.lk != 27180        // '.' ';'
         && this.lk != 27181        // '..' ';'
         && this.lk != 27182        // '/' ';'
         && this.lk != 27206        // 'after' ';'
         && this.lk != 27208        // 'allowing' ';'
         && this.lk != 27209        // 'ancestor' ';'
         && this.lk != 27210        // 'ancestor-or-self' ';'
         && this.lk != 27211        // 'and' ';'
         && this.lk != 27213        // 'append' ';'
         && this.lk != 27214        // 'array' ';'
         && this.lk != 27215        // 'as' ';'
         && this.lk != 27216        // 'ascending' ';'
         && this.lk != 27217        // 'at' ';'
         && this.lk != 27218        // 'attribute' ';'
         && this.lk != 27219        // 'base-uri' ';'
         && this.lk != 27220        // 'before' ';'
         && this.lk != 27221        // 'boundary-space' ';'
         && this.lk != 27222        // 'break' ';'
         && this.lk != 27224        // 'case' ';'
         && this.lk != 27225        // 'cast' ';'
         && this.lk != 27226        // 'castable' ';'
         && this.lk != 27227        // 'catch' ';'
         && this.lk != 27229        // 'child' ';'
         && this.lk != 27230        // 'collation' ';'
         && this.lk != 27232        // 'comment' ';'
         && this.lk != 27233        // 'constraint' ';'
         && this.lk != 27234        // 'construction' ';'
         && this.lk != 27237        // 'context' ';'
         && this.lk != 27238        // 'continue' ';'
         && this.lk != 27239        // 'copy' ';'
         && this.lk != 27240        // 'copy-namespaces' ';'
         && this.lk != 27241        // 'count' ';'
         && this.lk != 27242        // 'decimal-format' ';'
         && this.lk != 27244        // 'declare' ';'
         && this.lk != 27245        // 'default' ';'
         && this.lk != 27246        // 'delete' ';'
         && this.lk != 27247        // 'descendant' ';'
         && this.lk != 27248        // 'descendant-or-self' ';'
         && this.lk != 27249        // 'descending' ';'
         && this.lk != 27254        // 'div' ';'
         && this.lk != 27255        // 'document' ';'
         && this.lk != 27256        // 'document-node' ';'
         && this.lk != 27257        // 'element' ';'
         && this.lk != 27258        // 'else' ';'
         && this.lk != 27259        // 'empty' ';'
         && this.lk != 27260        // 'empty-sequence' ';'
         && this.lk != 27261        // 'encoding' ';'
         && this.lk != 27262        // 'end' ';'
         && this.lk != 27264        // 'eq' ';'
         && this.lk != 27265        // 'every' ';'
         && this.lk != 27267        // 'except' ';'
         && this.lk != 27268        // 'exit' ';'
         && this.lk != 27269        // 'external' ';'
         && this.lk != 27270        // 'first' ';'
         && this.lk != 27271        // 'following' ';'
         && this.lk != 27272        // 'following-sibling' ';'
         && this.lk != 27273        // 'for' ';'
         && this.lk != 27277        // 'ft-option' ';'
         && this.lk != 27281        // 'function' ';'
         && this.lk != 27282        // 'ge' ';'
         && this.lk != 27284        // 'group' ';'
         && this.lk != 27286        // 'gt' ';'
         && this.lk != 27287        // 'idiv' ';'
         && this.lk != 27288        // 'if' ';'
         && this.lk != 27289        // 'import' ';'
         && this.lk != 27290        // 'in' ';'
         && this.lk != 27291        // 'index' ';'
         && this.lk != 27295        // 'insert' ';'
         && this.lk != 27296        // 'instance' ';'
         && this.lk != 27297        // 'integrity' ';'
         && this.lk != 27298        // 'intersect' ';'
         && this.lk != 27299        // 'into' ';'
         && this.lk != 27300        // 'is' ';'
         && this.lk != 27301        // 'item' ';'
         && this.lk != 27302        // 'json' ';'
         && this.lk != 27303        // 'json-item' ';'
         && this.lk != 27306        // 'last' ';'
         && this.lk != 27307        // 'lax' ';'
         && this.lk != 27308        // 'le' ';'
         && this.lk != 27310        // 'let' ';'
         && this.lk != 27312        // 'loop' ';'
         && this.lk != 27314        // 'lt' ';'
         && this.lk != 27316        // 'mod' ';'
         && this.lk != 27317        // 'modify' ';'
         && this.lk != 27318        // 'module' ';'
         && this.lk != 27320        // 'namespace' ';'
         && this.lk != 27321        // 'namespace-node' ';'
         && this.lk != 27322        // 'ne' ';'
         && this.lk != 27327        // 'node' ';'
         && this.lk != 27328        // 'nodes' ';'
         && this.lk != 27330        // 'object' ';'
         && this.lk != 27334        // 'only' ';'
         && this.lk != 27335        // 'option' ';'
         && this.lk != 27336        // 'or' ';'
         && this.lk != 27337        // 'order' ';'
         && this.lk != 27338        // 'ordered' ';'
         && this.lk != 27339        // 'ordering' ';'
         && this.lk != 27342        // 'parent' ';'
         && this.lk != 27348        // 'preceding' ';'
         && this.lk != 27349        // 'preceding-sibling' ';'
         && this.lk != 27352        // 'processing-instruction' ';'
         && this.lk != 27354        // 'rename' ';'
         && this.lk != 27355        // 'replace' ';'
         && this.lk != 27356        // 'return' ';'
         && this.lk != 27357        // 'returning' ';'
         && this.lk != 27358        // 'revalidation' ';'
         && this.lk != 27360        // 'satisfies' ';'
         && this.lk != 27361        // 'schema' ';'
         && this.lk != 27362        // 'schema-attribute' ';'
         && this.lk != 27363        // 'schema-element' ';'
         && this.lk != 27364        // 'score' ';'
         && this.lk != 27365        // 'self' ';'
         && this.lk != 27370        // 'sliding' ';'
         && this.lk != 27371        // 'some' ';'
         && this.lk != 27372        // 'stable' ';'
         && this.lk != 27373        // 'start' ';'
         && this.lk != 27376        // 'strict' ';'
         && this.lk != 27378        // 'structured-item' ';'
         && this.lk != 27379        // 'switch' ';'
         && this.lk != 27380        // 'text' ';'
         && this.lk != 27384        // 'to' ';'
         && this.lk != 27385        // 'treat' ';'
         && this.lk != 27386        // 'try' ';'
         && this.lk != 27387        // 'tumbling' ';'
         && this.lk != 27388        // 'type' ';'
         && this.lk != 27389        // 'typeswitch' ';'
         && this.lk != 27390        // 'union' ';'
         && this.lk != 27392        // 'unordered' ';'
         && this.lk != 27393        // 'updating' ';'
         && this.lk != 27396        // 'validate' ';'
         && this.lk != 27397        // 'value' ';'
         && this.lk != 27398        // 'variable' ';'
         && this.lk != 27399        // 'version' ';'
         && this.lk != 27402        // 'where' ';'
         && this.lk != 27403        // 'while' ';'
         && this.lk != 27406        // 'with' ';'
         && this.lk != 27410        // 'xquery' ';'
         && this.lk != 90198        // 'break' 'loop'
         && this.lk != 90214        // 'continue' 'loop'
         && this.lk != 113284       // 'exit' 'returning'
         && this.lk != 144389       // Wildcard '}'
         && this.lk != 144390       // EQName^Token '}'
         && this.lk != 144392       // IntegerLiteral '}'
         && this.lk != 144393       // DecimalLiteral '}'
         && this.lk != 144394       // DoubleLiteral '}'
         && this.lk != 144395       // StringLiteral '}'
         && this.lk != 144428       // '.' '}'
         && this.lk != 144429       // '..' '}'
         && this.lk != 144430       // '/' '}'
         && this.lk != 144454       // 'after' '}'
         && this.lk != 144456       // 'allowing' '}'
         && this.lk != 144457       // 'ancestor' '}'
         && this.lk != 144458       // 'ancestor-or-self' '}'
         && this.lk != 144459       // 'and' '}'
         && this.lk != 144461       // 'append' '}'
         && this.lk != 144462       // 'array' '}'
         && this.lk != 144463       // 'as' '}'
         && this.lk != 144464       // 'ascending' '}'
         && this.lk != 144465       // 'at' '}'
         && this.lk != 144466       // 'attribute' '}'
         && this.lk != 144467       // 'base-uri' '}'
         && this.lk != 144468       // 'before' '}'
         && this.lk != 144469       // 'boundary-space' '}'
         && this.lk != 144470       // 'break' '}'
         && this.lk != 144472       // 'case' '}'
         && this.lk != 144473       // 'cast' '}'
         && this.lk != 144474       // 'castable' '}'
         && this.lk != 144475       // 'catch' '}'
         && this.lk != 144477       // 'child' '}'
         && this.lk != 144478       // 'collation' '}'
         && this.lk != 144480       // 'comment' '}'
         && this.lk != 144481       // 'constraint' '}'
         && this.lk != 144482       // 'construction' '}'
         && this.lk != 144485       // 'context' '}'
         && this.lk != 144486       // 'continue' '}'
         && this.lk != 144487       // 'copy' '}'
         && this.lk != 144488       // 'copy-namespaces' '}'
         && this.lk != 144489       // 'count' '}'
         && this.lk != 144490       // 'decimal-format' '}'
         && this.lk != 144492       // 'declare' '}'
         && this.lk != 144493       // 'default' '}'
         && this.lk != 144494       // 'delete' '}'
         && this.lk != 144495       // 'descendant' '}'
         && this.lk != 144496       // 'descendant-or-self' '}'
         && this.lk != 144497       // 'descending' '}'
         && this.lk != 144502       // 'div' '}'
         && this.lk != 144503       // 'document' '}'
         && this.lk != 144504       // 'document-node' '}'
         && this.lk != 144505       // 'element' '}'
         && this.lk != 144506       // 'else' '}'
         && this.lk != 144507       // 'empty' '}'
         && this.lk != 144508       // 'empty-sequence' '}'
         && this.lk != 144509       // 'encoding' '}'
         && this.lk != 144510       // 'end' '}'
         && this.lk != 144512       // 'eq' '}'
         && this.lk != 144513       // 'every' '}'
         && this.lk != 144515       // 'except' '}'
         && this.lk != 144516       // 'exit' '}'
         && this.lk != 144517       // 'external' '}'
         && this.lk != 144518       // 'first' '}'
         && this.lk != 144519       // 'following' '}'
         && this.lk != 144520       // 'following-sibling' '}'
         && this.lk != 144521       // 'for' '}'
         && this.lk != 144525       // 'ft-option' '}'
         && this.lk != 144529       // 'function' '}'
         && this.lk != 144530       // 'ge' '}'
         && this.lk != 144532       // 'group' '}'
         && this.lk != 144534       // 'gt' '}'
         && this.lk != 144535       // 'idiv' '}'
         && this.lk != 144536       // 'if' '}'
         && this.lk != 144537       // 'import' '}'
         && this.lk != 144538       // 'in' '}'
         && this.lk != 144539       // 'index' '}'
         && this.lk != 144543       // 'insert' '}'
         && this.lk != 144544       // 'instance' '}'
         && this.lk != 144545       // 'integrity' '}'
         && this.lk != 144546       // 'intersect' '}'
         && this.lk != 144547       // 'into' '}'
         && this.lk != 144548       // 'is' '}'
         && this.lk != 144549       // 'item' '}'
         && this.lk != 144550       // 'json' '}'
         && this.lk != 144551       // 'json-item' '}'
         && this.lk != 144554       // 'last' '}'
         && this.lk != 144555       // 'lax' '}'
         && this.lk != 144556       // 'le' '}'
         && this.lk != 144558       // 'let' '}'
         && this.lk != 144560       // 'loop' '}'
         && this.lk != 144562       // 'lt' '}'
         && this.lk != 144564       // 'mod' '}'
         && this.lk != 144565       // 'modify' '}'
         && this.lk != 144566       // 'module' '}'
         && this.lk != 144568       // 'namespace' '}'
         && this.lk != 144569       // 'namespace-node' '}'
         && this.lk != 144570       // 'ne' '}'
         && this.lk != 144575       // 'node' '}'
         && this.lk != 144576       // 'nodes' '}'
         && this.lk != 144578       // 'object' '}'
         && this.lk != 144582       // 'only' '}'
         && this.lk != 144583       // 'option' '}'
         && this.lk != 144584       // 'or' '}'
         && this.lk != 144585       // 'order' '}'
         && this.lk != 144586       // 'ordered' '}'
         && this.lk != 144587       // 'ordering' '}'
         && this.lk != 144590       // 'parent' '}'
         && this.lk != 144596       // 'preceding' '}'
         && this.lk != 144597       // 'preceding-sibling' '}'
         && this.lk != 144600       // 'processing-instruction' '}'
         && this.lk != 144602       // 'rename' '}'
         && this.lk != 144603       // 'replace' '}'
         && this.lk != 144604       // 'return' '}'
         && this.lk != 144605       // 'returning' '}'
         && this.lk != 144606       // 'revalidation' '}'
         && this.lk != 144608       // 'satisfies' '}'
         && this.lk != 144609       // 'schema' '}'
         && this.lk != 144610       // 'schema-attribute' '}'
         && this.lk != 144611       // 'schema-element' '}'
         && this.lk != 144612       // 'score' '}'
         && this.lk != 144613       // 'self' '}'
         && this.lk != 144618       // 'sliding' '}'
         && this.lk != 144619       // 'some' '}'
         && this.lk != 144620       // 'stable' '}'
         && this.lk != 144621       // 'start' '}'
         && this.lk != 144624       // 'strict' '}'
         && this.lk != 144626       // 'structured-item' '}'
         && this.lk != 144627       // 'switch' '}'
         && this.lk != 144628       // 'text' '}'
         && this.lk != 144632       // 'to' '}'
         && this.lk != 144633       // 'treat' '}'
         && this.lk != 144634       // 'try' '}'
         && this.lk != 144635       // 'tumbling' '}'
         && this.lk != 144636       // 'type' '}'
         && this.lk != 144637       // 'typeswitch' '}'
         && this.lk != 144638       // 'union' '}'
         && this.lk != 144640       // 'unordered' '}'
         && this.lk != 144641       // 'updating' '}'
         && this.lk != 144644       // 'validate' '}'
         && this.lk != 144645       // 'value' '}'
         && this.lk != 144646       // 'variable' '}'
         && this.lk != 144647       // 'version' '}'
         && this.lk != 144650       // 'where' '}'
         && this.lk != 144651       // 'while' '}'
         && this.lk != 144654       // 'with' '}'
         && this.lk != 144658)      // 'xquery' '}'
        {
          this.lk = this.memoized(6, this.e0);
          if (this.lk == 0)
          {
            var b0A = this.b0; var e0A = this.e0; var l1A = this.l1;
            var b1A = this.b1; var e1A = this.e1; var l2A = this.l2;
            var b2A = this.b2; var e2A = this.e2;
            try
            {
              this.try_Statement();
              this.lk = -1;
            }
            catch (p1A)
            {
              this.lk = -2;
            }
            this.b0 = b0A; this.e0 = e0A; this.l1 = l1A; if (this.l1 == 0) {this.end = e0A;} else {
            this.b1 = b1A; this.e1 = e1A; this.l2 = l2A; if (this.l2 == 0) {this.end = e1A;} else {
            this.b2 = b2A; this.e2 = e2A; this.end = e2A; }}
            this.memoize(6, this.e0, this.lk);
          }
        }
        if (this.lk != -1
         && this.lk != 53           // ';'
         && this.lk != 16134        // 'variable' '$'
         && this.lk != 27141        // Wildcard ';'
         && this.lk != 27142        // EQName^Token ';'
         && this.lk != 27144        // IntegerLiteral ';'
         && this.lk != 27145        // DecimalLiteral ';'
         && this.lk != 27146        // DoubleLiteral ';'
         && this.lk != 27147        // StringLiteral ';'
         && this.lk != 27180        // '.' ';'
         && this.lk != 27181        // '..' ';'
         && this.lk != 27182        // '/' ';'
         && this.lk != 27206        // 'after' ';'
         && this.lk != 27208        // 'allowing' ';'
         && this.lk != 27209        // 'ancestor' ';'
         && this.lk != 27210        // 'ancestor-or-self' ';'
         && this.lk != 27211        // 'and' ';'
         && this.lk != 27213        // 'append' ';'
         && this.lk != 27214        // 'array' ';'
         && this.lk != 27215        // 'as' ';'
         && this.lk != 27216        // 'ascending' ';'
         && this.lk != 27217        // 'at' ';'
         && this.lk != 27218        // 'attribute' ';'
         && this.lk != 27219        // 'base-uri' ';'
         && this.lk != 27220        // 'before' ';'
         && this.lk != 27221        // 'boundary-space' ';'
         && this.lk != 27222        // 'break' ';'
         && this.lk != 27224        // 'case' ';'
         && this.lk != 27225        // 'cast' ';'
         && this.lk != 27226        // 'castable' ';'
         && this.lk != 27227        // 'catch' ';'
         && this.lk != 27229        // 'child' ';'
         && this.lk != 27230        // 'collation' ';'
         && this.lk != 27232        // 'comment' ';'
         && this.lk != 27233        // 'constraint' ';'
         && this.lk != 27234        // 'construction' ';'
         && this.lk != 27237        // 'context' ';'
         && this.lk != 27238        // 'continue' ';'
         && this.lk != 27239        // 'copy' ';'
         && this.lk != 27240        // 'copy-namespaces' ';'
         && this.lk != 27241        // 'count' ';'
         && this.lk != 27242        // 'decimal-format' ';'
         && this.lk != 27244        // 'declare' ';'
         && this.lk != 27245        // 'default' ';'
         && this.lk != 27246        // 'delete' ';'
         && this.lk != 27247        // 'descendant' ';'
         && this.lk != 27248        // 'descendant-or-self' ';'
         && this.lk != 27249        // 'descending' ';'
         && this.lk != 27254        // 'div' ';'
         && this.lk != 27255        // 'document' ';'
         && this.lk != 27256        // 'document-node' ';'
         && this.lk != 27257        // 'element' ';'
         && this.lk != 27258        // 'else' ';'
         && this.lk != 27259        // 'empty' ';'
         && this.lk != 27260        // 'empty-sequence' ';'
         && this.lk != 27261        // 'encoding' ';'
         && this.lk != 27262        // 'end' ';'
         && this.lk != 27264        // 'eq' ';'
         && this.lk != 27265        // 'every' ';'
         && this.lk != 27267        // 'except' ';'
         && this.lk != 27268        // 'exit' ';'
         && this.lk != 27269        // 'external' ';'
         && this.lk != 27270        // 'first' ';'
         && this.lk != 27271        // 'following' ';'
         && this.lk != 27272        // 'following-sibling' ';'
         && this.lk != 27273        // 'for' ';'
         && this.lk != 27277        // 'ft-option' ';'
         && this.lk != 27281        // 'function' ';'
         && this.lk != 27282        // 'ge' ';'
         && this.lk != 27284        // 'group' ';'
         && this.lk != 27286        // 'gt' ';'
         && this.lk != 27287        // 'idiv' ';'
         && this.lk != 27288        // 'if' ';'
         && this.lk != 27289        // 'import' ';'
         && this.lk != 27290        // 'in' ';'
         && this.lk != 27291        // 'index' ';'
         && this.lk != 27295        // 'insert' ';'
         && this.lk != 27296        // 'instance' ';'
         && this.lk != 27297        // 'integrity' ';'
         && this.lk != 27298        // 'intersect' ';'
         && this.lk != 27299        // 'into' ';'
         && this.lk != 27300        // 'is' ';'
         && this.lk != 27301        // 'item' ';'
         && this.lk != 27302        // 'json' ';'
         && this.lk != 27303        // 'json-item' ';'
         && this.lk != 27306        // 'last' ';'
         && this.lk != 27307        // 'lax' ';'
         && this.lk != 27308        // 'le' ';'
         && this.lk != 27310        // 'let' ';'
         && this.lk != 27312        // 'loop' ';'
         && this.lk != 27314        // 'lt' ';'
         && this.lk != 27316        // 'mod' ';'
         && this.lk != 27317        // 'modify' ';'
         && this.lk != 27318        // 'module' ';'
         && this.lk != 27320        // 'namespace' ';'
         && this.lk != 27321        // 'namespace-node' ';'
         && this.lk != 27322        // 'ne' ';'
         && this.lk != 27327        // 'node' ';'
         && this.lk != 27328        // 'nodes' ';'
         && this.lk != 27330        // 'object' ';'
         && this.lk != 27334        // 'only' ';'
         && this.lk != 27335        // 'option' ';'
         && this.lk != 27336        // 'or' ';'
         && this.lk != 27337        // 'order' ';'
         && this.lk != 27338        // 'ordered' ';'
         && this.lk != 27339        // 'ordering' ';'
         && this.lk != 27342        // 'parent' ';'
         && this.lk != 27348        // 'preceding' ';'
         && this.lk != 27349        // 'preceding-sibling' ';'
         && this.lk != 27352        // 'processing-instruction' ';'
         && this.lk != 27354        // 'rename' ';'
         && this.lk != 27355        // 'replace' ';'
         && this.lk != 27356        // 'return' ';'
         && this.lk != 27357        // 'returning' ';'
         && this.lk != 27358        // 'revalidation' ';'
         && this.lk != 27360        // 'satisfies' ';'
         && this.lk != 27361        // 'schema' ';'
         && this.lk != 27362        // 'schema-attribute' ';'
         && this.lk != 27363        // 'schema-element' ';'
         && this.lk != 27364        // 'score' ';'
         && this.lk != 27365        // 'self' ';'
         && this.lk != 27370        // 'sliding' ';'
         && this.lk != 27371        // 'some' ';'
         && this.lk != 27372        // 'stable' ';'
         && this.lk != 27373        // 'start' ';'
         && this.lk != 27376        // 'strict' ';'
         && this.lk != 27378        // 'structured-item' ';'
         && this.lk != 27379        // 'switch' ';'
         && this.lk != 27380        // 'text' ';'
         && this.lk != 27384        // 'to' ';'
         && this.lk != 27385        // 'treat' ';'
         && this.lk != 27386        // 'try' ';'
         && this.lk != 27387        // 'tumbling' ';'
         && this.lk != 27388        // 'type' ';'
         && this.lk != 27389        // 'typeswitch' ';'
         && this.lk != 27390        // 'union' ';'
         && this.lk != 27392        // 'unordered' ';'
         && this.lk != 27393        // 'updating' ';'
         && this.lk != 27396        // 'validate' ';'
         && this.lk != 27397        // 'value' ';'
         && this.lk != 27398        // 'variable' ';'
         && this.lk != 27399        // 'version' ';'
         && this.lk != 27402        // 'where' ';'
         && this.lk != 27403        // 'while' ';'
         && this.lk != 27406        // 'with' ';'
         && this.lk != 27410        // 'xquery' ';'
         && this.lk != 90198        // 'break' 'loop'
         && this.lk != 90214        // 'continue' 'loop'
         && this.lk != 113284)      // 'exit' 'returning'
        {
          break;
        }
        this.whitespace();
        this.parse_Statement();
      }
      this.eventHandler.endNonterminal("Statements", this.e0);
    }

    private try_Statements()
    {
      for (;;)
      {
        this.lookahead1W(277);      // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | EOF | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' |
                                    // '..' | '/' | '//' | ';' | '<' | '<!--' | '<?' | '@' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|' | '}'
        switch (this.l1)
        {
        case 34:                    // '('
          this.lookahead2W(268);    // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | ')' | '+' | '-' | '.' |
                                    // '..' | '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
          break;
        case 35:                    // '(#'
          this.lookahead2(251);     // EQName^Token | S | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' |
                                    // 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
          break;
        case 46:                    // '/'
          this.lookahead2W(283);    // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | EOF | '!' | '!=' | '$' | '%' | '(' | '(:' | '*' | '+' |
                                    // ',' | '-' | '.' | '..' | ';' | '<' | '<!--' | '<<' | '<=' | '<?' | '=' | '>' |
                                    // '>=' | '>>' | '@' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'contains' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|' | '|' | '||' | '}'
          break;
        case 47:                    // '//'
          this.lookahead2W(264);    // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '<' | '<!--' |
                                    // '<?' | '@' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' |
                                    // 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
          break;
        case 54:                    // '<'
          this.lookahead2(4);       // QName
          break;
        case 55:                    // '<!--'
          this.lookahead2(1);       // DirCommentContents
          break;
        case 59:                    // '<?'
          this.lookahead2(3);       // PITarget
          break;
        case 66:                    // '@'
          this.lookahead2W(256);    // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
          break;
        case 68:                    // '['
          this.lookahead2W(271);    // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | ']' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
          break;
        case 77:                    // 'append'
          this.lookahead2W(199);    // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'json' | 'le' | 'lt' | 'mod' | 'ne' | 'or' |
                                    // 'to' | 'treat' | 'union' | '|' | '||' | '}'
          break;
        case 82:                    // 'attribute'
          this.lookahead2W(280);    // EQName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' |
                                    // '-' | '/' | '//' | '::' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'contains' |
                                    // 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' |
                                    // 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '|' | '||' | '}'
          break;
        case 121:                   // 'element'
          this.lookahead2W(279);    // EQName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' |
                                    // '-' | '/' | '//' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' |
                                    // 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'contains' |
                                    // 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' |
                                    // 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '|' | '||' | '}'
          break;
        case 132:                   // 'exit'
          this.lookahead2W(202);    // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' |
                                    // 'returning' | 'to' | 'treat' | 'union' | '|' | '||' | '}'
          break;
        case 137:                   // 'for'
          this.lookahead2W(207);    // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'sliding' |
                                    // 'to' | 'treat' | 'tumbling' | 'union' | '|' | '||' | '}'
          break;
        case 174:                   // 'let'
          this.lookahead2W(204);    // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'score' |
                                    // 'to' | 'treat' | 'union' | '|' | '||' | '}'
          break;
        case 218:                   // 'rename'
          this.lookahead2W(205);    // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'json' | 'le' | 'lt' | 'mod' | 'ne' | 'node' |
                                    // 'or' | 'to' | 'treat' | 'union' | '|' | '||' | '}'
          break;
        case 219:                   // 'replace'
          this.lookahead2W(206);    // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'node' | 'or' |
                                    // 'to' | 'treat' | 'union' | 'value' | '|' | '||' | '}'
          break;
        case 260:                   // 'validate'
          this.lookahead2W(209);    // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'lax' | 'le' | 'lt' | 'mod' | 'ne' | 'or' |
                                    // 'strict' | 'to' | 'treat' | 'type' | 'union' | '{' | '|' | '||' | '}'
          break;
        case 276:                   // '{'
          this.lookahead2W(276);    // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|' | '}'
          break;
        case 278:                   // '{|'
          this.lookahead2W(272);    // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|' | '|}'
          break;
        case 5:                     // Wildcard
        case 45:                    // '..'
          this.lookahead2W(185);    // S^WS | EOF | '!' | '!=' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' | ';' | '<' |
                                    // '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' | 'castable' |
                                    // 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' | 'treat' |
                                    // 'union' | '|' | '||' | '}'
          break;
        case 31:                    // '$'
        case 32:                    // '%'
          this.lookahead2W(254);    // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
          break;
        case 40:                    // '+'
        case 42:                    // '-'
          this.lookahead2W(266);    // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
          break;
        case 86:                    // 'break'
        case 102:                   // 'continue'
          this.lookahead2W(200);    // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'loop' | 'lt' | 'mod' | 'ne' | 'or' |
                                    // 'to' | 'treat' | 'union' | '|' | '||' | '}'
          break;
        case 110:                   // 'delete'
        case 159:                   // 'insert'
          this.lookahead2W(208);    // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'json' | 'le' | 'lt' | 'mod' | 'ne' | 'node' |
                                    // 'nodes' | 'or' | 'to' | 'treat' | 'union' | '|' | '||' | '}'
          break;
        case 184:                   // 'namespace'
        case 216:                   // 'processing-instruction'
          this.lookahead2W(267);    // NCName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' |
                                    // '-' | '/' | '//' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' |
                                    // 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'contains' |
                                    // 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'last' | 'lax' | 'le' | 'let' |
                                    // 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '|' | '||' | '}'
          break;
        case 103:                   // 'copy'
        case 129:                   // 'every'
        case 235:                   // 'some'
        case 262:                   // 'variable'
          this.lookahead2W(196);    // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' |
                                    // 'treat' | 'union' | '|' | '||' | '}'
          break;
        case 8:                     // IntegerLiteral
        case 9:                     // DecimalLiteral
        case 10:                    // DoubleLiteral
        case 11:                    // StringLiteral
        case 44:                    // '.'
          this.lookahead2W(191);    // S^WS | EOF | '!' | '!=' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' | 'castable' |
                                    // 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' | 'treat' |
                                    // 'union' | '|' | '||' | '}'
          break;
        case 78:                    // 'array'
        case 124:                   // 'empty-sequence'
        case 165:                   // 'item'
        case 167:                   // 'json-item'
        case 242:                   // 'structured-item'
          this.lookahead2W(190);    // S^WS | EOF | '!' | '!=' | '#' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' | 'castable' |
                                    // 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' | 'treat' |
                                    // 'union' | '|' | '||' | '}'
          break;
        case 96:                    // 'comment'
        case 119:                   // 'document'
        case 202:                   // 'ordered'
        case 244:                   // 'text'
        case 250:                   // 'try'
        case 256:                   // 'unordered'
          this.lookahead2W(203);    // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' |
                                    // 'treat' | 'union' | '{' | '|' | '||' | '}'
          break;
        case 73:                    // 'ancestor'
        case 74:                    // 'ancestor-or-self'
        case 93:                    // 'child'
        case 111:                   // 'descendant'
        case 112:                   // 'descendant-or-self'
        case 135:                   // 'following'
        case 136:                   // 'following-sibling'
        case 206:                   // 'parent'
        case 212:                   // 'preceding'
        case 213:                   // 'preceding-sibling'
        case 229:                   // 'self'
          this.lookahead2W(197);    // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // '::' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' |
                                    // 'treat' | 'union' | '|' | '||' | '}'
          break;
        case 6:                     // EQName^Token
        case 70:                    // 'after'
        case 72:                    // 'allowing'
        case 75:                    // 'and'
        case 79:                    // 'as'
        case 80:                    // 'ascending'
        case 81:                    // 'at'
        case 83:                    // 'base-uri'
        case 84:                    // 'before'
        case 85:                    // 'boundary-space'
        case 88:                    // 'case'
        case 89:                    // 'cast'
        case 90:                    // 'castable'
        case 91:                    // 'catch'
        case 94:                    // 'collation'
        case 97:                    // 'constraint'
        case 98:                    // 'construction'
        case 101:                   // 'context'
        case 104:                   // 'copy-namespaces'
        case 105:                   // 'count'
        case 106:                   // 'decimal-format'
        case 108:                   // 'declare'
        case 109:                   // 'default'
        case 113:                   // 'descending'
        case 118:                   // 'div'
        case 120:                   // 'document-node'
        case 122:                   // 'else'
        case 123:                   // 'empty'
        case 125:                   // 'encoding'
        case 126:                   // 'end'
        case 128:                   // 'eq'
        case 131:                   // 'except'
        case 133:                   // 'external'
        case 134:                   // 'first'
        case 141:                   // 'ft-option'
        case 145:                   // 'function'
        case 146:                   // 'ge'
        case 148:                   // 'group'
        case 150:                   // 'gt'
        case 151:                   // 'idiv'
        case 152:                   // 'if'
        case 153:                   // 'import'
        case 154:                   // 'in'
        case 155:                   // 'index'
        case 160:                   // 'instance'
        case 161:                   // 'integrity'
        case 162:                   // 'intersect'
        case 163:                   // 'into'
        case 164:                   // 'is'
        case 166:                   // 'json'
        case 170:                   // 'last'
        case 171:                   // 'lax'
        case 172:                   // 'le'
        case 176:                   // 'loop'
        case 178:                   // 'lt'
        case 180:                   // 'mod'
        case 181:                   // 'modify'
        case 182:                   // 'module'
        case 185:                   // 'namespace-node'
        case 186:                   // 'ne'
        case 191:                   // 'node'
        case 192:                   // 'nodes'
        case 194:                   // 'object'
        case 198:                   // 'only'
        case 199:                   // 'option'
        case 200:                   // 'or'
        case 201:                   // 'order'
        case 203:                   // 'ordering'
        case 220:                   // 'return'
        case 221:                   // 'returning'
        case 222:                   // 'revalidation'
        case 224:                   // 'satisfies'
        case 225:                   // 'schema'
        case 226:                   // 'schema-attribute'
        case 227:                   // 'schema-element'
        case 228:                   // 'score'
        case 234:                   // 'sliding'
        case 236:                   // 'stable'
        case 237:                   // 'start'
        case 240:                   // 'strict'
        case 243:                   // 'switch'
        case 248:                   // 'to'
        case 249:                   // 'treat'
        case 251:                   // 'tumbling'
        case 252:                   // 'type'
        case 253:                   // 'typeswitch'
        case 254:                   // 'union'
        case 257:                   // 'updating'
        case 261:                   // 'value'
        case 263:                   // 'version'
        case 266:                   // 'where'
        case 267:                   // 'while'
        case 270:                   // 'with'
        case 274:                   // 'xquery'
          this.lookahead2W(194);    // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' |
                                    // 'treat' | 'union' | '|' | '||' | '}'
          break;
        default:
          this.lk = this.l1;
        }
        if (this.lk != 25           // EOF
         && this.lk != 53           // ';'
         && this.lk != 282          // '}'
         && this.lk != 12805        // Wildcard EOF
         && this.lk != 12806        // EQName^Token EOF
         && this.lk != 12808        // IntegerLiteral EOF
         && this.lk != 12809        // DecimalLiteral EOF
         && this.lk != 12810        // DoubleLiteral EOF
         && this.lk != 12811        // StringLiteral EOF
         && this.lk != 12844        // '.' EOF
         && this.lk != 12845        // '..' EOF
         && this.lk != 12846        // '/' EOF
         && this.lk != 12870        // 'after' EOF
         && this.lk != 12872        // 'allowing' EOF
         && this.lk != 12873        // 'ancestor' EOF
         && this.lk != 12874        // 'ancestor-or-self' EOF
         && this.lk != 12875        // 'and' EOF
         && this.lk != 12877        // 'append' EOF
         && this.lk != 12878        // 'array' EOF
         && this.lk != 12879        // 'as' EOF
         && this.lk != 12880        // 'ascending' EOF
         && this.lk != 12881        // 'at' EOF
         && this.lk != 12882        // 'attribute' EOF
         && this.lk != 12883        // 'base-uri' EOF
         && this.lk != 12884        // 'before' EOF
         && this.lk != 12885        // 'boundary-space' EOF
         && this.lk != 12886        // 'break' EOF
         && this.lk != 12888        // 'case' EOF
         && this.lk != 12889        // 'cast' EOF
         && this.lk != 12890        // 'castable' EOF
         && this.lk != 12891        // 'catch' EOF
         && this.lk != 12893        // 'child' EOF
         && this.lk != 12894        // 'collation' EOF
         && this.lk != 12896        // 'comment' EOF
         && this.lk != 12897        // 'constraint' EOF
         && this.lk != 12898        // 'construction' EOF
         && this.lk != 12901        // 'context' EOF
         && this.lk != 12902        // 'continue' EOF
         && this.lk != 12903        // 'copy' EOF
         && this.lk != 12904        // 'copy-namespaces' EOF
         && this.lk != 12905        // 'count' EOF
         && this.lk != 12906        // 'decimal-format' EOF
         && this.lk != 12908        // 'declare' EOF
         && this.lk != 12909        // 'default' EOF
         && this.lk != 12910        // 'delete' EOF
         && this.lk != 12911        // 'descendant' EOF
         && this.lk != 12912        // 'descendant-or-self' EOF
         && this.lk != 12913        // 'descending' EOF
         && this.lk != 12918        // 'div' EOF
         && this.lk != 12919        // 'document' EOF
         && this.lk != 12920        // 'document-node' EOF
         && this.lk != 12921        // 'element' EOF
         && this.lk != 12922        // 'else' EOF
         && this.lk != 12923        // 'empty' EOF
         && this.lk != 12924        // 'empty-sequence' EOF
         && this.lk != 12925        // 'encoding' EOF
         && this.lk != 12926        // 'end' EOF
         && this.lk != 12928        // 'eq' EOF
         && this.lk != 12929        // 'every' EOF
         && this.lk != 12931        // 'except' EOF
         && this.lk != 12932        // 'exit' EOF
         && this.lk != 12933        // 'external' EOF
         && this.lk != 12934        // 'first' EOF
         && this.lk != 12935        // 'following' EOF
         && this.lk != 12936        // 'following-sibling' EOF
         && this.lk != 12937        // 'for' EOF
         && this.lk != 12941        // 'ft-option' EOF
         && this.lk != 12945        // 'function' EOF
         && this.lk != 12946        // 'ge' EOF
         && this.lk != 12948        // 'group' EOF
         && this.lk != 12950        // 'gt' EOF
         && this.lk != 12951        // 'idiv' EOF
         && this.lk != 12952        // 'if' EOF
         && this.lk != 12953        // 'import' EOF
         && this.lk != 12954        // 'in' EOF
         && this.lk != 12955        // 'index' EOF
         && this.lk != 12959        // 'insert' EOF
         && this.lk != 12960        // 'instance' EOF
         && this.lk != 12961        // 'integrity' EOF
         && this.lk != 12962        // 'intersect' EOF
         && this.lk != 12963        // 'into' EOF
         && this.lk != 12964        // 'is' EOF
         && this.lk != 12965        // 'item' EOF
         && this.lk != 12966        // 'json' EOF
         && this.lk != 12967        // 'json-item' EOF
         && this.lk != 12970        // 'last' EOF
         && this.lk != 12971        // 'lax' EOF
         && this.lk != 12972        // 'le' EOF
         && this.lk != 12974        // 'let' EOF
         && this.lk != 12976        // 'loop' EOF
         && this.lk != 12978        // 'lt' EOF
         && this.lk != 12980        // 'mod' EOF
         && this.lk != 12981        // 'modify' EOF
         && this.lk != 12982        // 'module' EOF
         && this.lk != 12984        // 'namespace' EOF
         && this.lk != 12985        // 'namespace-node' EOF
         && this.lk != 12986        // 'ne' EOF
         && this.lk != 12991        // 'node' EOF
         && this.lk != 12992        // 'nodes' EOF
         && this.lk != 12994        // 'object' EOF
         && this.lk != 12998        // 'only' EOF
         && this.lk != 12999        // 'option' EOF
         && this.lk != 13000        // 'or' EOF
         && this.lk != 13001        // 'order' EOF
         && this.lk != 13002        // 'ordered' EOF
         && this.lk != 13003        // 'ordering' EOF
         && this.lk != 13006        // 'parent' EOF
         && this.lk != 13012        // 'preceding' EOF
         && this.lk != 13013        // 'preceding-sibling' EOF
         && this.lk != 13016        // 'processing-instruction' EOF
         && this.lk != 13018        // 'rename' EOF
         && this.lk != 13019        // 'replace' EOF
         && this.lk != 13020        // 'return' EOF
         && this.lk != 13021        // 'returning' EOF
         && this.lk != 13022        // 'revalidation' EOF
         && this.lk != 13024        // 'satisfies' EOF
         && this.lk != 13025        // 'schema' EOF
         && this.lk != 13026        // 'schema-attribute' EOF
         && this.lk != 13027        // 'schema-element' EOF
         && this.lk != 13028        // 'score' EOF
         && this.lk != 13029        // 'self' EOF
         && this.lk != 13034        // 'sliding' EOF
         && this.lk != 13035        // 'some' EOF
         && this.lk != 13036        // 'stable' EOF
         && this.lk != 13037        // 'start' EOF
         && this.lk != 13040        // 'strict' EOF
         && this.lk != 13042        // 'structured-item' EOF
         && this.lk != 13043        // 'switch' EOF
         && this.lk != 13044        // 'text' EOF
         && this.lk != 13048        // 'to' EOF
         && this.lk != 13049        // 'treat' EOF
         && this.lk != 13050        // 'try' EOF
         && this.lk != 13051        // 'tumbling' EOF
         && this.lk != 13052        // 'type' EOF
         && this.lk != 13053        // 'typeswitch' EOF
         && this.lk != 13054        // 'union' EOF
         && this.lk != 13056        // 'unordered' EOF
         && this.lk != 13057        // 'updating' EOF
         && this.lk != 13060        // 'validate' EOF
         && this.lk != 13061        // 'value' EOF
         && this.lk != 13062        // 'variable' EOF
         && this.lk != 13063        // 'version' EOF
         && this.lk != 13066        // 'where' EOF
         && this.lk != 13067        // 'while' EOF
         && this.lk != 13070        // 'with' EOF
         && this.lk != 13074        // 'xquery' EOF
         && this.lk != 16134        // 'variable' '$'
         && this.lk != 20997        // Wildcard ','
         && this.lk != 20998        // EQName^Token ','
         && this.lk != 21000        // IntegerLiteral ','
         && this.lk != 21001        // DecimalLiteral ','
         && this.lk != 21002        // DoubleLiteral ','
         && this.lk != 21003        // StringLiteral ','
         && this.lk != 21036        // '.' ','
         && this.lk != 21037        // '..' ','
         && this.lk != 21038        // '/' ','
         && this.lk != 21062        // 'after' ','
         && this.lk != 21064        // 'allowing' ','
         && this.lk != 21065        // 'ancestor' ','
         && this.lk != 21066        // 'ancestor-or-self' ','
         && this.lk != 21067        // 'and' ','
         && this.lk != 21069        // 'append' ','
         && this.lk != 21070        // 'array' ','
         && this.lk != 21071        // 'as' ','
         && this.lk != 21072        // 'ascending' ','
         && this.lk != 21073        // 'at' ','
         && this.lk != 21074        // 'attribute' ','
         && this.lk != 21075        // 'base-uri' ','
         && this.lk != 21076        // 'before' ','
         && this.lk != 21077        // 'boundary-space' ','
         && this.lk != 21078        // 'break' ','
         && this.lk != 21080        // 'case' ','
         && this.lk != 21081        // 'cast' ','
         && this.lk != 21082        // 'castable' ','
         && this.lk != 21083        // 'catch' ','
         && this.lk != 21085        // 'child' ','
         && this.lk != 21086        // 'collation' ','
         && this.lk != 21088        // 'comment' ','
         && this.lk != 21089        // 'constraint' ','
         && this.lk != 21090        // 'construction' ','
         && this.lk != 21093        // 'context' ','
         && this.lk != 21094        // 'continue' ','
         && this.lk != 21095        // 'copy' ','
         && this.lk != 21096        // 'copy-namespaces' ','
         && this.lk != 21097        // 'count' ','
         && this.lk != 21098        // 'decimal-format' ','
         && this.lk != 21100        // 'declare' ','
         && this.lk != 21101        // 'default' ','
         && this.lk != 21102        // 'delete' ','
         && this.lk != 21103        // 'descendant' ','
         && this.lk != 21104        // 'descendant-or-self' ','
         && this.lk != 21105        // 'descending' ','
         && this.lk != 21110        // 'div' ','
         && this.lk != 21111        // 'document' ','
         && this.lk != 21112        // 'document-node' ','
         && this.lk != 21113        // 'element' ','
         && this.lk != 21114        // 'else' ','
         && this.lk != 21115        // 'empty' ','
         && this.lk != 21116        // 'empty-sequence' ','
         && this.lk != 21117        // 'encoding' ','
         && this.lk != 21118        // 'end' ','
         && this.lk != 21120        // 'eq' ','
         && this.lk != 21121        // 'every' ','
         && this.lk != 21123        // 'except' ','
         && this.lk != 21124        // 'exit' ','
         && this.lk != 21125        // 'external' ','
         && this.lk != 21126        // 'first' ','
         && this.lk != 21127        // 'following' ','
         && this.lk != 21128        // 'following-sibling' ','
         && this.lk != 21129        // 'for' ','
         && this.lk != 21133        // 'ft-option' ','
         && this.lk != 21137        // 'function' ','
         && this.lk != 21138        // 'ge' ','
         && this.lk != 21140        // 'group' ','
         && this.lk != 21142        // 'gt' ','
         && this.lk != 21143        // 'idiv' ','
         && this.lk != 21144        // 'if' ','
         && this.lk != 21145        // 'import' ','
         && this.lk != 21146        // 'in' ','
         && this.lk != 21147        // 'index' ','
         && this.lk != 21151        // 'insert' ','
         && this.lk != 21152        // 'instance' ','
         && this.lk != 21153        // 'integrity' ','
         && this.lk != 21154        // 'intersect' ','
         && this.lk != 21155        // 'into' ','
         && this.lk != 21156        // 'is' ','
         && this.lk != 21157        // 'item' ','
         && this.lk != 21158        // 'json' ','
         && this.lk != 21159        // 'json-item' ','
         && this.lk != 21162        // 'last' ','
         && this.lk != 21163        // 'lax' ','
         && this.lk != 21164        // 'le' ','
         && this.lk != 21166        // 'let' ','
         && this.lk != 21168        // 'loop' ','
         && this.lk != 21170        // 'lt' ','
         && this.lk != 21172        // 'mod' ','
         && this.lk != 21173        // 'modify' ','
         && this.lk != 21174        // 'module' ','
         && this.lk != 21176        // 'namespace' ','
         && this.lk != 21177        // 'namespace-node' ','
         && this.lk != 21178        // 'ne' ','
         && this.lk != 21183        // 'node' ','
         && this.lk != 21184        // 'nodes' ','
         && this.lk != 21186        // 'object' ','
         && this.lk != 21190        // 'only' ','
         && this.lk != 21191        // 'option' ','
         && this.lk != 21192        // 'or' ','
         && this.lk != 21193        // 'order' ','
         && this.lk != 21194        // 'ordered' ','
         && this.lk != 21195        // 'ordering' ','
         && this.lk != 21198        // 'parent' ','
         && this.lk != 21204        // 'preceding' ','
         && this.lk != 21205        // 'preceding-sibling' ','
         && this.lk != 21208        // 'processing-instruction' ','
         && this.lk != 21210        // 'rename' ','
         && this.lk != 21211        // 'replace' ','
         && this.lk != 21212        // 'return' ','
         && this.lk != 21213        // 'returning' ','
         && this.lk != 21214        // 'revalidation' ','
         && this.lk != 21216        // 'satisfies' ','
         && this.lk != 21217        // 'schema' ','
         && this.lk != 21218        // 'schema-attribute' ','
         && this.lk != 21219        // 'schema-element' ','
         && this.lk != 21220        // 'score' ','
         && this.lk != 21221        // 'self' ','
         && this.lk != 21226        // 'sliding' ','
         && this.lk != 21227        // 'some' ','
         && this.lk != 21228        // 'stable' ','
         && this.lk != 21229        // 'start' ','
         && this.lk != 21232        // 'strict' ','
         && this.lk != 21234        // 'structured-item' ','
         && this.lk != 21235        // 'switch' ','
         && this.lk != 21236        // 'text' ','
         && this.lk != 21240        // 'to' ','
         && this.lk != 21241        // 'treat' ','
         && this.lk != 21242        // 'try' ','
         && this.lk != 21243        // 'tumbling' ','
         && this.lk != 21244        // 'type' ','
         && this.lk != 21245        // 'typeswitch' ','
         && this.lk != 21246        // 'union' ','
         && this.lk != 21248        // 'unordered' ','
         && this.lk != 21249        // 'updating' ','
         && this.lk != 21252        // 'validate' ','
         && this.lk != 21253        // 'value' ','
         && this.lk != 21254        // 'variable' ','
         && this.lk != 21255        // 'version' ','
         && this.lk != 21258        // 'where' ','
         && this.lk != 21259        // 'while' ','
         && this.lk != 21262        // 'with' ','
         && this.lk != 21266        // 'xquery' ','
         && this.lk != 27141        // Wildcard ';'
         && this.lk != 27142        // EQName^Token ';'
         && this.lk != 27144        // IntegerLiteral ';'
         && this.lk != 27145        // DecimalLiteral ';'
         && this.lk != 27146        // DoubleLiteral ';'
         && this.lk != 27147        // StringLiteral ';'
         && this.lk != 27180        // '.' ';'
         && this.lk != 27181        // '..' ';'
         && this.lk != 27182        // '/' ';'
         && this.lk != 27206        // 'after' ';'
         && this.lk != 27208        // 'allowing' ';'
         && this.lk != 27209        // 'ancestor' ';'
         && this.lk != 27210        // 'ancestor-or-self' ';'
         && this.lk != 27211        // 'and' ';'
         && this.lk != 27213        // 'append' ';'
         && this.lk != 27214        // 'array' ';'
         && this.lk != 27215        // 'as' ';'
         && this.lk != 27216        // 'ascending' ';'
         && this.lk != 27217        // 'at' ';'
         && this.lk != 27218        // 'attribute' ';'
         && this.lk != 27219        // 'base-uri' ';'
         && this.lk != 27220        // 'before' ';'
         && this.lk != 27221        // 'boundary-space' ';'
         && this.lk != 27222        // 'break' ';'
         && this.lk != 27224        // 'case' ';'
         && this.lk != 27225        // 'cast' ';'
         && this.lk != 27226        // 'castable' ';'
         && this.lk != 27227        // 'catch' ';'
         && this.lk != 27229        // 'child' ';'
         && this.lk != 27230        // 'collation' ';'
         && this.lk != 27232        // 'comment' ';'
         && this.lk != 27233        // 'constraint' ';'
         && this.lk != 27234        // 'construction' ';'
         && this.lk != 27237        // 'context' ';'
         && this.lk != 27238        // 'continue' ';'
         && this.lk != 27239        // 'copy' ';'
         && this.lk != 27240        // 'copy-namespaces' ';'
         && this.lk != 27241        // 'count' ';'
         && this.lk != 27242        // 'decimal-format' ';'
         && this.lk != 27244        // 'declare' ';'
         && this.lk != 27245        // 'default' ';'
         && this.lk != 27246        // 'delete' ';'
         && this.lk != 27247        // 'descendant' ';'
         && this.lk != 27248        // 'descendant-or-self' ';'
         && this.lk != 27249        // 'descending' ';'
         && this.lk != 27254        // 'div' ';'
         && this.lk != 27255        // 'document' ';'
         && this.lk != 27256        // 'document-node' ';'
         && this.lk != 27257        // 'element' ';'
         && this.lk != 27258        // 'else' ';'
         && this.lk != 27259        // 'empty' ';'
         && this.lk != 27260        // 'empty-sequence' ';'
         && this.lk != 27261        // 'encoding' ';'
         && this.lk != 27262        // 'end' ';'
         && this.lk != 27264        // 'eq' ';'
         && this.lk != 27265        // 'every' ';'
         && this.lk != 27267        // 'except' ';'
         && this.lk != 27268        // 'exit' ';'
         && this.lk != 27269        // 'external' ';'
         && this.lk != 27270        // 'first' ';'
         && this.lk != 27271        // 'following' ';'
         && this.lk != 27272        // 'following-sibling' ';'
         && this.lk != 27273        // 'for' ';'
         && this.lk != 27277        // 'ft-option' ';'
         && this.lk != 27281        // 'function' ';'
         && this.lk != 27282        // 'ge' ';'
         && this.lk != 27284        // 'group' ';'
         && this.lk != 27286        // 'gt' ';'
         && this.lk != 27287        // 'idiv' ';'
         && this.lk != 27288        // 'if' ';'
         && this.lk != 27289        // 'import' ';'
         && this.lk != 27290        // 'in' ';'
         && this.lk != 27291        // 'index' ';'
         && this.lk != 27295        // 'insert' ';'
         && this.lk != 27296        // 'instance' ';'
         && this.lk != 27297        // 'integrity' ';'
         && this.lk != 27298        // 'intersect' ';'
         && this.lk != 27299        // 'into' ';'
         && this.lk != 27300        // 'is' ';'
         && this.lk != 27301        // 'item' ';'
         && this.lk != 27302        // 'json' ';'
         && this.lk != 27303        // 'json-item' ';'
         && this.lk != 27306        // 'last' ';'
         && this.lk != 27307        // 'lax' ';'
         && this.lk != 27308        // 'le' ';'
         && this.lk != 27310        // 'let' ';'
         && this.lk != 27312        // 'loop' ';'
         && this.lk != 27314        // 'lt' ';'
         && this.lk != 27316        // 'mod' ';'
         && this.lk != 27317        // 'modify' ';'
         && this.lk != 27318        // 'module' ';'
         && this.lk != 27320        // 'namespace' ';'
         && this.lk != 27321        // 'namespace-node' ';'
         && this.lk != 27322        // 'ne' ';'
         && this.lk != 27327        // 'node' ';'
         && this.lk != 27328        // 'nodes' ';'
         && this.lk != 27330        // 'object' ';'
         && this.lk != 27334        // 'only' ';'
         && this.lk != 27335        // 'option' ';'
         && this.lk != 27336        // 'or' ';'
         && this.lk != 27337        // 'order' ';'
         && this.lk != 27338        // 'ordered' ';'
         && this.lk != 27339        // 'ordering' ';'
         && this.lk != 27342        // 'parent' ';'
         && this.lk != 27348        // 'preceding' ';'
         && this.lk != 27349        // 'preceding-sibling' ';'
         && this.lk != 27352        // 'processing-instruction' ';'
         && this.lk != 27354        // 'rename' ';'
         && this.lk != 27355        // 'replace' ';'
         && this.lk != 27356        // 'return' ';'
         && this.lk != 27357        // 'returning' ';'
         && this.lk != 27358        // 'revalidation' ';'
         && this.lk != 27360        // 'satisfies' ';'
         && this.lk != 27361        // 'schema' ';'
         && this.lk != 27362        // 'schema-attribute' ';'
         && this.lk != 27363        // 'schema-element' ';'
         && this.lk != 27364        // 'score' ';'
         && this.lk != 27365        // 'self' ';'
         && this.lk != 27370        // 'sliding' ';'
         && this.lk != 27371        // 'some' ';'
         && this.lk != 27372        // 'stable' ';'
         && this.lk != 27373        // 'start' ';'
         && this.lk != 27376        // 'strict' ';'
         && this.lk != 27378        // 'structured-item' ';'
         && this.lk != 27379        // 'switch' ';'
         && this.lk != 27380        // 'text' ';'
         && this.lk != 27384        // 'to' ';'
         && this.lk != 27385        // 'treat' ';'
         && this.lk != 27386        // 'try' ';'
         && this.lk != 27387        // 'tumbling' ';'
         && this.lk != 27388        // 'type' ';'
         && this.lk != 27389        // 'typeswitch' ';'
         && this.lk != 27390        // 'union' ';'
         && this.lk != 27392        // 'unordered' ';'
         && this.lk != 27393        // 'updating' ';'
         && this.lk != 27396        // 'validate' ';'
         && this.lk != 27397        // 'value' ';'
         && this.lk != 27398        // 'variable' ';'
         && this.lk != 27399        // 'version' ';'
         && this.lk != 27402        // 'where' ';'
         && this.lk != 27403        // 'while' ';'
         && this.lk != 27406        // 'with' ';'
         && this.lk != 27410        // 'xquery' ';'
         && this.lk != 90198        // 'break' 'loop'
         && this.lk != 90214        // 'continue' 'loop'
         && this.lk != 113284       // 'exit' 'returning'
         && this.lk != 144389       // Wildcard '}'
         && this.lk != 144390       // EQName^Token '}'
         && this.lk != 144392       // IntegerLiteral '}'
         && this.lk != 144393       // DecimalLiteral '}'
         && this.lk != 144394       // DoubleLiteral '}'
         && this.lk != 144395       // StringLiteral '}'
         && this.lk != 144428       // '.' '}'
         && this.lk != 144429       // '..' '}'
         && this.lk != 144430       // '/' '}'
         && this.lk != 144454       // 'after' '}'
         && this.lk != 144456       // 'allowing' '}'
         && this.lk != 144457       // 'ancestor' '}'
         && this.lk != 144458       // 'ancestor-or-self' '}'
         && this.lk != 144459       // 'and' '}'
         && this.lk != 144461       // 'append' '}'
         && this.lk != 144462       // 'array' '}'
         && this.lk != 144463       // 'as' '}'
         && this.lk != 144464       // 'ascending' '}'
         && this.lk != 144465       // 'at' '}'
         && this.lk != 144466       // 'attribute' '}'
         && this.lk != 144467       // 'base-uri' '}'
         && this.lk != 144468       // 'before' '}'
         && this.lk != 144469       // 'boundary-space' '}'
         && this.lk != 144470       // 'break' '}'
         && this.lk != 144472       // 'case' '}'
         && this.lk != 144473       // 'cast' '}'
         && this.lk != 144474       // 'castable' '}'
         && this.lk != 144475       // 'catch' '}'
         && this.lk != 144477       // 'child' '}'
         && this.lk != 144478       // 'collation' '}'
         && this.lk != 144480       // 'comment' '}'
         && this.lk != 144481       // 'constraint' '}'
         && this.lk != 144482       // 'construction' '}'
         && this.lk != 144485       // 'context' '}'
         && this.lk != 144486       // 'continue' '}'
         && this.lk != 144487       // 'copy' '}'
         && this.lk != 144488       // 'copy-namespaces' '}'
         && this.lk != 144489       // 'count' '}'
         && this.lk != 144490       // 'decimal-format' '}'
         && this.lk != 144492       // 'declare' '}'
         && this.lk != 144493       // 'default' '}'
         && this.lk != 144494       // 'delete' '}'
         && this.lk != 144495       // 'descendant' '}'
         && this.lk != 144496       // 'descendant-or-self' '}'
         && this.lk != 144497       // 'descending' '}'
         && this.lk != 144502       // 'div' '}'
         && this.lk != 144503       // 'document' '}'
         && this.lk != 144504       // 'document-node' '}'
         && this.lk != 144505       // 'element' '}'
         && this.lk != 144506       // 'else' '}'
         && this.lk != 144507       // 'empty' '}'
         && this.lk != 144508       // 'empty-sequence' '}'
         && this.lk != 144509       // 'encoding' '}'
         && this.lk != 144510       // 'end' '}'
         && this.lk != 144512       // 'eq' '}'
         && this.lk != 144513       // 'every' '}'
         && this.lk != 144515       // 'except' '}'
         && this.lk != 144516       // 'exit' '}'
         && this.lk != 144517       // 'external' '}'
         && this.lk != 144518       // 'first' '}'
         && this.lk != 144519       // 'following' '}'
         && this.lk != 144520       // 'following-sibling' '}'
         && this.lk != 144521       // 'for' '}'
         && this.lk != 144525       // 'ft-option' '}'
         && this.lk != 144529       // 'function' '}'
         && this.lk != 144530       // 'ge' '}'
         && this.lk != 144532       // 'group' '}'
         && this.lk != 144534       // 'gt' '}'
         && this.lk != 144535       // 'idiv' '}'
         && this.lk != 144536       // 'if' '}'
         && this.lk != 144537       // 'import' '}'
         && this.lk != 144538       // 'in' '}'
         && this.lk != 144539       // 'index' '}'
         && this.lk != 144543       // 'insert' '}'
         && this.lk != 144544       // 'instance' '}'
         && this.lk != 144545       // 'integrity' '}'
         && this.lk != 144546       // 'intersect' '}'
         && this.lk != 144547       // 'into' '}'
         && this.lk != 144548       // 'is' '}'
         && this.lk != 144549       // 'item' '}'
         && this.lk != 144550       // 'json' '}'
         && this.lk != 144551       // 'json-item' '}'
         && this.lk != 144554       // 'last' '}'
         && this.lk != 144555       // 'lax' '}'
         && this.lk != 144556       // 'le' '}'
         && this.lk != 144558       // 'let' '}'
         && this.lk != 144560       // 'loop' '}'
         && this.lk != 144562       // 'lt' '}'
         && this.lk != 144564       // 'mod' '}'
         && this.lk != 144565       // 'modify' '}'
         && this.lk != 144566       // 'module' '}'
         && this.lk != 144568       // 'namespace' '}'
         && this.lk != 144569       // 'namespace-node' '}'
         && this.lk != 144570       // 'ne' '}'
         && this.lk != 144575       // 'node' '}'
         && this.lk != 144576       // 'nodes' '}'
         && this.lk != 144578       // 'object' '}'
         && this.lk != 144582       // 'only' '}'
         && this.lk != 144583       // 'option' '}'
         && this.lk != 144584       // 'or' '}'
         && this.lk != 144585       // 'order' '}'
         && this.lk != 144586       // 'ordered' '}'
         && this.lk != 144587       // 'ordering' '}'
         && this.lk != 144590       // 'parent' '}'
         && this.lk != 144596       // 'preceding' '}'
         && this.lk != 144597       // 'preceding-sibling' '}'
         && this.lk != 144600       // 'processing-instruction' '}'
         && this.lk != 144602       // 'rename' '}'
         && this.lk != 144603       // 'replace' '}'
         && this.lk != 144604       // 'return' '}'
         && this.lk != 144605       // 'returning' '}'
         && this.lk != 144606       // 'revalidation' '}'
         && this.lk != 144608       // 'satisfies' '}'
         && this.lk != 144609       // 'schema' '}'
         && this.lk != 144610       // 'schema-attribute' '}'
         && this.lk != 144611       // 'schema-element' '}'
         && this.lk != 144612       // 'score' '}'
         && this.lk != 144613       // 'self' '}'
         && this.lk != 144618       // 'sliding' '}'
         && this.lk != 144619       // 'some' '}'
         && this.lk != 144620       // 'stable' '}'
         && this.lk != 144621       // 'start' '}'
         && this.lk != 144624       // 'strict' '}'
         && this.lk != 144626       // 'structured-item' '}'
         && this.lk != 144627       // 'switch' '}'
         && this.lk != 144628       // 'text' '}'
         && this.lk != 144632       // 'to' '}'
         && this.lk != 144633       // 'treat' '}'
         && this.lk != 144634       // 'try' '}'
         && this.lk != 144635       // 'tumbling' '}'
         && this.lk != 144636       // 'type' '}'
         && this.lk != 144637       // 'typeswitch' '}'
         && this.lk != 144638       // 'union' '}'
         && this.lk != 144640       // 'unordered' '}'
         && this.lk != 144641       // 'updating' '}'
         && this.lk != 144644       // 'validate' '}'
         && this.lk != 144645       // 'value' '}'
         && this.lk != 144646       // 'variable' '}'
         && this.lk != 144647       // 'version' '}'
         && this.lk != 144650       // 'where' '}'
         && this.lk != 144651       // 'while' '}'
         && this.lk != 144654       // 'with' '}'
         && this.lk != 144658)      // 'xquery' '}'
        {
          this.lk = this.memoized(6, this.e0);
          if (this.lk == 0)
          {
            var b0A = this.b0; var e0A = this.e0; var l1A = this.l1;
            var b1A = this.b1; var e1A = this.e1; var l2A = this.l2;
            var b2A = this.b2; var e2A = this.e2;
            try
            {
              this.try_Statement();
              this.memoize(6, e0A, -1);
              continue;
            }
            catch (p1A)
            {
              this.b0 = b0A; this.e0 = e0A; this.l1 = l1A; if (this.l1 == 0) {this.end = e0A;} else {
              this.b1 = b1A; this.e1 = e1A; this.l2 = l2A; if (this.l2 == 0) {this.end = e1A;} else {
              this.b2 = b2A; this.e2 = e2A; this.end = e2A; }}
              this.memoize(6, e0A, -2);
              break;
            }
          }
        }
        if (this.lk != -1
         && this.lk != 53           // ';'
         && this.lk != 16134        // 'variable' '$'
         && this.lk != 27141        // Wildcard ';'
         && this.lk != 27142        // EQName^Token ';'
         && this.lk != 27144        // IntegerLiteral ';'
         && this.lk != 27145        // DecimalLiteral ';'
         && this.lk != 27146        // DoubleLiteral ';'
         && this.lk != 27147        // StringLiteral ';'
         && this.lk != 27180        // '.' ';'
         && this.lk != 27181        // '..' ';'
         && this.lk != 27182        // '/' ';'
         && this.lk != 27206        // 'after' ';'
         && this.lk != 27208        // 'allowing' ';'
         && this.lk != 27209        // 'ancestor' ';'
         && this.lk != 27210        // 'ancestor-or-self' ';'
         && this.lk != 27211        // 'and' ';'
         && this.lk != 27213        // 'append' ';'
         && this.lk != 27214        // 'array' ';'
         && this.lk != 27215        // 'as' ';'
         && this.lk != 27216        // 'ascending' ';'
         && this.lk != 27217        // 'at' ';'
         && this.lk != 27218        // 'attribute' ';'
         && this.lk != 27219        // 'base-uri' ';'
         && this.lk != 27220        // 'before' ';'
         && this.lk != 27221        // 'boundary-space' ';'
         && this.lk != 27222        // 'break' ';'
         && this.lk != 27224        // 'case' ';'
         && this.lk != 27225        // 'cast' ';'
         && this.lk != 27226        // 'castable' ';'
         && this.lk != 27227        // 'catch' ';'
         && this.lk != 27229        // 'child' ';'
         && this.lk != 27230        // 'collation' ';'
         && this.lk != 27232        // 'comment' ';'
         && this.lk != 27233        // 'constraint' ';'
         && this.lk != 27234        // 'construction' ';'
         && this.lk != 27237        // 'context' ';'
         && this.lk != 27238        // 'continue' ';'
         && this.lk != 27239        // 'copy' ';'
         && this.lk != 27240        // 'copy-namespaces' ';'
         && this.lk != 27241        // 'count' ';'
         && this.lk != 27242        // 'decimal-format' ';'
         && this.lk != 27244        // 'declare' ';'
         && this.lk != 27245        // 'default' ';'
         && this.lk != 27246        // 'delete' ';'
         && this.lk != 27247        // 'descendant' ';'
         && this.lk != 27248        // 'descendant-or-self' ';'
         && this.lk != 27249        // 'descending' ';'
         && this.lk != 27254        // 'div' ';'
         && this.lk != 27255        // 'document' ';'
         && this.lk != 27256        // 'document-node' ';'
         && this.lk != 27257        // 'element' ';'
         && this.lk != 27258        // 'else' ';'
         && this.lk != 27259        // 'empty' ';'
         && this.lk != 27260        // 'empty-sequence' ';'
         && this.lk != 27261        // 'encoding' ';'
         && this.lk != 27262        // 'end' ';'
         && this.lk != 27264        // 'eq' ';'
         && this.lk != 27265        // 'every' ';'
         && this.lk != 27267        // 'except' ';'
         && this.lk != 27268        // 'exit' ';'
         && this.lk != 27269        // 'external' ';'
         && this.lk != 27270        // 'first' ';'
         && this.lk != 27271        // 'following' ';'
         && this.lk != 27272        // 'following-sibling' ';'
         && this.lk != 27273        // 'for' ';'
         && this.lk != 27277        // 'ft-option' ';'
         && this.lk != 27281        // 'function' ';'
         && this.lk != 27282        // 'ge' ';'
         && this.lk != 27284        // 'group' ';'
         && this.lk != 27286        // 'gt' ';'
         && this.lk != 27287        // 'idiv' ';'
         && this.lk != 27288        // 'if' ';'
         && this.lk != 27289        // 'import' ';'
         && this.lk != 27290        // 'in' ';'
         && this.lk != 27291        // 'index' ';'
         && this.lk != 27295        // 'insert' ';'
         && this.lk != 27296        // 'instance' ';'
         && this.lk != 27297        // 'integrity' ';'
         && this.lk != 27298        // 'intersect' ';'
         && this.lk != 27299        // 'into' ';'
         && this.lk != 27300        // 'is' ';'
         && this.lk != 27301        // 'item' ';'
         && this.lk != 27302        // 'json' ';'
         && this.lk != 27303        // 'json-item' ';'
         && this.lk != 27306        // 'last' ';'
         && this.lk != 27307        // 'lax' ';'
         && this.lk != 27308        // 'le' ';'
         && this.lk != 27310        // 'let' ';'
         && this.lk != 27312        // 'loop' ';'
         && this.lk != 27314        // 'lt' ';'
         && this.lk != 27316        // 'mod' ';'
         && this.lk != 27317        // 'modify' ';'
         && this.lk != 27318        // 'module' ';'
         && this.lk != 27320        // 'namespace' ';'
         && this.lk != 27321        // 'namespace-node' ';'
         && this.lk != 27322        // 'ne' ';'
         && this.lk != 27327        // 'node' ';'
         && this.lk != 27328        // 'nodes' ';'
         && this.lk != 27330        // 'object' ';'
         && this.lk != 27334        // 'only' ';'
         && this.lk != 27335        // 'option' ';'
         && this.lk != 27336        // 'or' ';'
         && this.lk != 27337        // 'order' ';'
         && this.lk != 27338        // 'ordered' ';'
         && this.lk != 27339        // 'ordering' ';'
         && this.lk != 27342        // 'parent' ';'
         && this.lk != 27348        // 'preceding' ';'
         && this.lk != 27349        // 'preceding-sibling' ';'
         && this.lk != 27352        // 'processing-instruction' ';'
         && this.lk != 27354        // 'rename' ';'
         && this.lk != 27355        // 'replace' ';'
         && this.lk != 27356        // 'return' ';'
         && this.lk != 27357        // 'returning' ';'
         && this.lk != 27358        // 'revalidation' ';'
         && this.lk != 27360        // 'satisfies' ';'
         && this.lk != 27361        // 'schema' ';'
         && this.lk != 27362        // 'schema-attribute' ';'
         && this.lk != 27363        // 'schema-element' ';'
         && this.lk != 27364        // 'score' ';'
         && this.lk != 27365        // 'self' ';'
         && this.lk != 27370        // 'sliding' ';'
         && this.lk != 27371        // 'some' ';'
         && this.lk != 27372        // 'stable' ';'
         && this.lk != 27373        // 'start' ';'
         && this.lk != 27376        // 'strict' ';'
         && this.lk != 27378        // 'structured-item' ';'
         && this.lk != 27379        // 'switch' ';'
         && this.lk != 27380        // 'text' ';'
         && this.lk != 27384        // 'to' ';'
         && this.lk != 27385        // 'treat' ';'
         && this.lk != 27386        // 'try' ';'
         && this.lk != 27387        // 'tumbling' ';'
         && this.lk != 27388        // 'type' ';'
         && this.lk != 27389        // 'typeswitch' ';'
         && this.lk != 27390        // 'union' ';'
         && this.lk != 27392        // 'unordered' ';'
         && this.lk != 27393        // 'updating' ';'
         && this.lk != 27396        // 'validate' ';'
         && this.lk != 27397        // 'value' ';'
         && this.lk != 27398        // 'variable' ';'
         && this.lk != 27399        // 'version' ';'
         && this.lk != 27402        // 'where' ';'
         && this.lk != 27403        // 'while' ';'
         && this.lk != 27406        // 'with' ';'
         && this.lk != 27410        // 'xquery' ';'
         && this.lk != 90198        // 'break' 'loop'
         && this.lk != 90214        // 'continue' 'loop'
         && this.lk != 113284)      // 'exit' 'returning'
        {
          break;
        }
        this.try_Statement();
      }
    }

    private parse_StatementsAndExpr()
    {
      this.eventHandler.startNonterminal("StatementsAndExpr", this.e0);
      this.parse_Statements();
      this.whitespace();
      this.parse_Expr();
      this.eventHandler.endNonterminal("StatementsAndExpr", this.e0);
    }

    private try_StatementsAndExpr()
    {
      this.try_Statements();
      this.try_Expr();
    }

    private parse_StatementsAndOptionalExpr()
    {
      this.eventHandler.startNonterminal("StatementsAndOptionalExpr", this.e0);
      this.parse_Statements();
      if (this.l1 != 25             // EOF
       && this.l1 != 282)           // '}'
      {
        this.whitespace();
        this.parse_Expr();
      }
      this.eventHandler.endNonterminal("StatementsAndOptionalExpr", this.e0);
    }

    private try_StatementsAndOptionalExpr()
    {
      this.try_Statements();
      if (this.l1 != 25             // EOF
       && this.l1 != 282)           // '}'
      {
        this.try_Expr();
      }
    }

    private parse_Statement()
    {
      this.eventHandler.startNonterminal("Statement", this.e0);
      switch (this.l1)
      {
      case 132:                     // 'exit'
        this.lookahead2W(188);      // S^WS | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | '-' | '/' | '//' | ';' | '<' |
                                    // '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' | 'castable' |
                                    // 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'returning' | 'to' |
                                    // 'treat' | 'union' | '|' | '||'
        break;
      case 137:                     // 'for'
        this.lookahead2W(195);      // S^WS | '!' | '!=' | '#' | '$' | '(' | '(:' | '*' | '+' | '-' | '/' | '//' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' | 'castable' |
                                    // 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'sliding' | 'to' |
                                    // 'treat' | 'tumbling' | 'union' | '|' | '||'
        break;
      case 174:                     // 'let'
        this.lookahead2W(192);      // S^WS | '!' | '!=' | '#' | '$' | '(' | '(:' | '*' | '+' | '-' | '/' | '//' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' | 'castable' |
                                    // 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'score' | 'to' |
                                    // 'treat' | 'union' | '|' | '||'
        break;
      case 250:                     // 'try'
        this.lookahead2W(189);      // S^WS | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | '-' | '/' | '//' | ';' | '<' |
                                    // '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' | 'castable' |
                                    // 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' | 'treat' |
                                    // 'union' | '{' | '|' | '||'
        break;
      case 262:                     // 'variable'
        this.lookahead2W(186);      // S^WS | '!' | '!=' | '#' | '$' | '(' | '(:' | '*' | '+' | '-' | '/' | '//' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' | 'castable' |
                                    // 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' | 'treat' |
                                    // 'union' | '|' | '||'
        break;
      case 276:                     // '{'
        this.lookahead2W(276);      // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|' | '}'
        break;
      case 31:                      // '$'
      case 32:                      // '%'
        this.lookahead2W(254);      // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
        break;
      case 86:                      // 'break'
      case 102:                     // 'continue'
        this.lookahead2W(187);      // S^WS | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | '-' | '/' | '//' | ';' | '<' |
                                    // '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' | 'castable' |
                                    // 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'loop' | 'lt' | 'mod' | 'ne' | 'or' | 'to' |
                                    // 'treat' | 'union' | '|' | '||'
        break;
      case 152:                     // 'if'
      case 243:                     // 'switch'
      case 253:                     // 'typeswitch'
      case 267:                     // 'while'
        this.lookahead2W(184);      // S^WS | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | '-' | '/' | '//' | ';' | '<' |
                                    // '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' | 'castable' |
                                    // 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' | 'treat' |
                                    // 'union' | '|' | '||'
        break;
      default:
        this.lk = this.l1;
      }
      if (this.lk == 2836           // '{' Wildcard
       || this.lk == 3103           // '$' EQName^Token
       || this.lk == 3104           // '%' EQName^Token
       || this.lk == 3348           // '{' EQName^Token
       || this.lk == 4372           // '{' IntegerLiteral
       || this.lk == 4884           // '{' DecimalLiteral
       || this.lk == 5396           // '{' DoubleLiteral
       || this.lk == 5908           // '{' StringLiteral
       || this.lk == 16148          // '{' '$'
       || this.lk == 16660          // '{' '%'
       || this.lk == 17675          // 'while' '('
       || this.lk == 17684          // '{' '('
       || this.lk == 18196          // '{' '(#'
       || this.lk == 20756          // '{' '+'
       || this.lk == 21780          // '{' '-'
       || this.lk == 22804          // '{' '.'
       || this.lk == 23316          // '{' '..'
       || this.lk == 23828          // '{' '/'
       || this.lk == 24340          // '{' '//'
       || this.lk == 27412          // '{' ';'
       || this.lk == 27924          // '{' '<'
       || this.lk == 28436          // '{' '<!--'
       || this.lk == 30484          // '{' '<?'
       || this.lk == 34068          // '{' '@'
       || this.lk == 35092          // '{' '['
       || this.lk == 35871          // '$' 'after'
       || this.lk == 35872          // '%' 'after'
       || this.lk == 36116          // '{' 'after'
       || this.lk == 36895          // '$' 'allowing'
       || this.lk == 36896          // '%' 'allowing'
       || this.lk == 37140          // '{' 'allowing'
       || this.lk == 37407          // '$' 'ancestor'
       || this.lk == 37408          // '%' 'ancestor'
       || this.lk == 37652          // '{' 'ancestor'
       || this.lk == 37919          // '$' 'ancestor-or-self'
       || this.lk == 37920          // '%' 'ancestor-or-self'
       || this.lk == 38164          // '{' 'ancestor-or-self'
       || this.lk == 38431          // '$' 'and'
       || this.lk == 38432          // '%' 'and'
       || this.lk == 38676          // '{' 'and'
       || this.lk == 39455          // '$' 'append'
       || this.lk == 39456          // '%' 'append'
       || this.lk == 39700          // '{' 'append'
       || this.lk == 39967          // '$' 'array'
       || this.lk == 39968          // '%' 'array'
       || this.lk == 40212          // '{' 'array'
       || this.lk == 40479          // '$' 'as'
       || this.lk == 40480          // '%' 'as'
       || this.lk == 40724          // '{' 'as'
       || this.lk == 40991          // '$' 'ascending'
       || this.lk == 40992          // '%' 'ascending'
       || this.lk == 41236          // '{' 'ascending'
       || this.lk == 41503          // '$' 'at'
       || this.lk == 41504          // '%' 'at'
       || this.lk == 41748          // '{' 'at'
       || this.lk == 42015          // '$' 'attribute'
       || this.lk == 42016          // '%' 'attribute'
       || this.lk == 42260          // '{' 'attribute'
       || this.lk == 42527          // '$' 'base-uri'
       || this.lk == 42528          // '%' 'base-uri'
       || this.lk == 42772          // '{' 'base-uri'
       || this.lk == 43039          // '$' 'before'
       || this.lk == 43040          // '%' 'before'
       || this.lk == 43284          // '{' 'before'
       || this.lk == 43551          // '$' 'boundary-space'
       || this.lk == 43552          // '%' 'boundary-space'
       || this.lk == 43796          // '{' 'boundary-space'
       || this.lk == 44063          // '$' 'break'
       || this.lk == 44064          // '%' 'break'
       || this.lk == 44308          // '{' 'break'
       || this.lk == 45087          // '$' 'case'
       || this.lk == 45088          // '%' 'case'
       || this.lk == 45332          // '{' 'case'
       || this.lk == 45599          // '$' 'cast'
       || this.lk == 45600          // '%' 'cast'
       || this.lk == 45844          // '{' 'cast'
       || this.lk == 46111          // '$' 'castable'
       || this.lk == 46112          // '%' 'castable'
       || this.lk == 46356          // '{' 'castable'
       || this.lk == 46623          // '$' 'catch'
       || this.lk == 46624          // '%' 'catch'
       || this.lk == 46868          // '{' 'catch'
       || this.lk == 47647          // '$' 'child'
       || this.lk == 47648          // '%' 'child'
       || this.lk == 47892          // '{' 'child'
       || this.lk == 48159          // '$' 'collation'
       || this.lk == 48160          // '%' 'collation'
       || this.lk == 48404          // '{' 'collation'
       || this.lk == 49183          // '$' 'comment'
       || this.lk == 49184          // '%' 'comment'
       || this.lk == 49428          // '{' 'comment'
       || this.lk == 49695          // '$' 'constraint'
       || this.lk == 49696          // '%' 'constraint'
       || this.lk == 49940          // '{' 'constraint'
       || this.lk == 50207          // '$' 'construction'
       || this.lk == 50208          // '%' 'construction'
       || this.lk == 50452          // '{' 'construction'
       || this.lk == 51743          // '$' 'context'
       || this.lk == 51744          // '%' 'context'
       || this.lk == 51988          // '{' 'context'
       || this.lk == 52255          // '$' 'continue'
       || this.lk == 52256          // '%' 'continue'
       || this.lk == 52500          // '{' 'continue'
       || this.lk == 52767          // '$' 'copy'
       || this.lk == 52768          // '%' 'copy'
       || this.lk == 53012          // '{' 'copy'
       || this.lk == 53279          // '$' 'copy-namespaces'
       || this.lk == 53280          // '%' 'copy-namespaces'
       || this.lk == 53524          // '{' 'copy-namespaces'
       || this.lk == 53791          // '$' 'count'
       || this.lk == 53792          // '%' 'count'
       || this.lk == 54036          // '{' 'count'
       || this.lk == 54303          // '$' 'decimal-format'
       || this.lk == 54304          // '%' 'decimal-format'
       || this.lk == 54548          // '{' 'decimal-format'
       || this.lk == 55327          // '$' 'declare'
       || this.lk == 55328          // '%' 'declare'
       || this.lk == 55572          // '{' 'declare'
       || this.lk == 55839          // '$' 'default'
       || this.lk == 55840          // '%' 'default'
       || this.lk == 56084          // '{' 'default'
       || this.lk == 56351          // '$' 'delete'
       || this.lk == 56352          // '%' 'delete'
       || this.lk == 56596          // '{' 'delete'
       || this.lk == 56863          // '$' 'descendant'
       || this.lk == 56864          // '%' 'descendant'
       || this.lk == 57108          // '{' 'descendant'
       || this.lk == 57375          // '$' 'descendant-or-self'
       || this.lk == 57376          // '%' 'descendant-or-self'
       || this.lk == 57620          // '{' 'descendant-or-self'
       || this.lk == 57887          // '$' 'descending'
       || this.lk == 57888          // '%' 'descending'
       || this.lk == 58132          // '{' 'descending'
       || this.lk == 60447          // '$' 'div'
       || this.lk == 60448          // '%' 'div'
       || this.lk == 60692          // '{' 'div'
       || this.lk == 60959          // '$' 'document'
       || this.lk == 60960          // '%' 'document'
       || this.lk == 61204          // '{' 'document'
       || this.lk == 61471          // '$' 'document-node'
       || this.lk == 61472          // '%' 'document-node'
       || this.lk == 61716          // '{' 'document-node'
       || this.lk == 61983          // '$' 'element'
       || this.lk == 61984          // '%' 'element'
       || this.lk == 62228          // '{' 'element'
       || this.lk == 62495          // '$' 'else'
       || this.lk == 62496          // '%' 'else'
       || this.lk == 62740          // '{' 'else'
       || this.lk == 63007          // '$' 'empty'
       || this.lk == 63008          // '%' 'empty'
       || this.lk == 63252          // '{' 'empty'
       || this.lk == 63519          // '$' 'empty-sequence'
       || this.lk == 63520          // '%' 'empty-sequence'
       || this.lk == 63764          // '{' 'empty-sequence'
       || this.lk == 64031          // '$' 'encoding'
       || this.lk == 64032          // '%' 'encoding'
       || this.lk == 64276          // '{' 'encoding'
       || this.lk == 64543          // '$' 'end'
       || this.lk == 64544          // '%' 'end'
       || this.lk == 64788          // '{' 'end'
       || this.lk == 65567          // '$' 'eq'
       || this.lk == 65568          // '%' 'eq'
       || this.lk == 65812          // '{' 'eq'
       || this.lk == 66079          // '$' 'every'
       || this.lk == 66080          // '%' 'every'
       || this.lk == 66324          // '{' 'every'
       || this.lk == 67103          // '$' 'except'
       || this.lk == 67104          // '%' 'except'
       || this.lk == 67348          // '{' 'except'
       || this.lk == 67615          // '$' 'exit'
       || this.lk == 67616          // '%' 'exit'
       || this.lk == 67860          // '{' 'exit'
       || this.lk == 68127          // '$' 'external'
       || this.lk == 68128          // '%' 'external'
       || this.lk == 68372          // '{' 'external'
       || this.lk == 68639          // '$' 'first'
       || this.lk == 68640          // '%' 'first'
       || this.lk == 68884          // '{' 'first'
       || this.lk == 69151          // '$' 'following'
       || this.lk == 69152          // '%' 'following'
       || this.lk == 69396          // '{' 'following'
       || this.lk == 69663          // '$' 'following-sibling'
       || this.lk == 69664          // '%' 'following-sibling'
       || this.lk == 69908          // '{' 'following-sibling'
       || this.lk == 70175          // '$' 'for'
       || this.lk == 70176          // '%' 'for'
       || this.lk == 70420          // '{' 'for'
       || this.lk == 72223          // '$' 'ft-option'
       || this.lk == 72224          // '%' 'ft-option'
       || this.lk == 72468          // '{' 'ft-option'
       || this.lk == 74271          // '$' 'function'
       || this.lk == 74272          // '%' 'function'
       || this.lk == 74516          // '{' 'function'
       || this.lk == 74783          // '$' 'ge'
       || this.lk == 74784          // '%' 'ge'
       || this.lk == 75028          // '{' 'ge'
       || this.lk == 75807          // '$' 'group'
       || this.lk == 75808          // '%' 'group'
       || this.lk == 76052          // '{' 'group'
       || this.lk == 76831          // '$' 'gt'
       || this.lk == 76832          // '%' 'gt'
       || this.lk == 77076          // '{' 'gt'
       || this.lk == 77343          // '$' 'idiv'
       || this.lk == 77344          // '%' 'idiv'
       || this.lk == 77588          // '{' 'idiv'
       || this.lk == 77855          // '$' 'if'
       || this.lk == 77856          // '%' 'if'
       || this.lk == 78100          // '{' 'if'
       || this.lk == 78367          // '$' 'import'
       || this.lk == 78368          // '%' 'import'
       || this.lk == 78612          // '{' 'import'
       || this.lk == 78879          // '$' 'in'
       || this.lk == 78880          // '%' 'in'
       || this.lk == 79124          // '{' 'in'
       || this.lk == 79391          // '$' 'index'
       || this.lk == 79392          // '%' 'index'
       || this.lk == 79636          // '{' 'index'
       || this.lk == 81439          // '$' 'insert'
       || this.lk == 81440          // '%' 'insert'
       || this.lk == 81684          // '{' 'insert'
       || this.lk == 81951          // '$' 'instance'
       || this.lk == 81952          // '%' 'instance'
       || this.lk == 82196          // '{' 'instance'
       || this.lk == 82463          // '$' 'integrity'
       || this.lk == 82464          // '%' 'integrity'
       || this.lk == 82708          // '{' 'integrity'
       || this.lk == 82975          // '$' 'intersect'
       || this.lk == 82976          // '%' 'intersect'
       || this.lk == 83220          // '{' 'intersect'
       || this.lk == 83487          // '$' 'into'
       || this.lk == 83488          // '%' 'into'
       || this.lk == 83732          // '{' 'into'
       || this.lk == 83999          // '$' 'is'
       || this.lk == 84000          // '%' 'is'
       || this.lk == 84244          // '{' 'is'
       || this.lk == 84511          // '$' 'item'
       || this.lk == 84512          // '%' 'item'
       || this.lk == 84756          // '{' 'item'
       || this.lk == 85023          // '$' 'json'
       || this.lk == 85024          // '%' 'json'
       || this.lk == 85268          // '{' 'json'
       || this.lk == 85535          // '$' 'json-item'
       || this.lk == 85536          // '%' 'json-item'
       || this.lk == 85780          // '{' 'json-item'
       || this.lk == 87071          // '$' 'last'
       || this.lk == 87072          // '%' 'last'
       || this.lk == 87316          // '{' 'last'
       || this.lk == 87583          // '$' 'lax'
       || this.lk == 87584          // '%' 'lax'
       || this.lk == 87828          // '{' 'lax'
       || this.lk == 88095          // '$' 'le'
       || this.lk == 88096          // '%' 'le'
       || this.lk == 88340          // '{' 'le'
       || this.lk == 89119          // '$' 'let'
       || this.lk == 89120          // '%' 'let'
       || this.lk == 89364          // '{' 'let'
       || this.lk == 90143          // '$' 'loop'
       || this.lk == 90144          // '%' 'loop'
       || this.lk == 90388          // '{' 'loop'
       || this.lk == 91167          // '$' 'lt'
       || this.lk == 91168          // '%' 'lt'
       || this.lk == 91412          // '{' 'lt'
       || this.lk == 92191          // '$' 'mod'
       || this.lk == 92192          // '%' 'mod'
       || this.lk == 92436          // '{' 'mod'
       || this.lk == 92703          // '$' 'modify'
       || this.lk == 92704          // '%' 'modify'
       || this.lk == 92948          // '{' 'modify'
       || this.lk == 93215          // '$' 'module'
       || this.lk == 93216          // '%' 'module'
       || this.lk == 93460          // '{' 'module'
       || this.lk == 94239          // '$' 'namespace'
       || this.lk == 94240          // '%' 'namespace'
       || this.lk == 94484          // '{' 'namespace'
       || this.lk == 94751          // '$' 'namespace-node'
       || this.lk == 94752          // '%' 'namespace-node'
       || this.lk == 94996          // '{' 'namespace-node'
       || this.lk == 95263          // '$' 'ne'
       || this.lk == 95264          // '%' 'ne'
       || this.lk == 95508          // '{' 'ne'
       || this.lk == 97823          // '$' 'node'
       || this.lk == 97824          // '%' 'node'
       || this.lk == 98068          // '{' 'node'
       || this.lk == 98335          // '$' 'nodes'
       || this.lk == 98336          // '%' 'nodes'
       || this.lk == 98580          // '{' 'nodes'
       || this.lk == 99359          // '$' 'object'
       || this.lk == 99360          // '%' 'object'
       || this.lk == 99604          // '{' 'object'
       || this.lk == 101407         // '$' 'only'
       || this.lk == 101408         // '%' 'only'
       || this.lk == 101652         // '{' 'only'
       || this.lk == 101919         // '$' 'option'
       || this.lk == 101920         // '%' 'option'
       || this.lk == 102164         // '{' 'option'
       || this.lk == 102431         // '$' 'or'
       || this.lk == 102432         // '%' 'or'
       || this.lk == 102676         // '{' 'or'
       || this.lk == 102943         // '$' 'order'
       || this.lk == 102944         // '%' 'order'
       || this.lk == 103188         // '{' 'order'
       || this.lk == 103455         // '$' 'ordered'
       || this.lk == 103456         // '%' 'ordered'
       || this.lk == 103700         // '{' 'ordered'
       || this.lk == 103967         // '$' 'ordering'
       || this.lk == 103968         // '%' 'ordering'
       || this.lk == 104212         // '{' 'ordering'
       || this.lk == 105503         // '$' 'parent'
       || this.lk == 105504         // '%' 'parent'
       || this.lk == 105748         // '{' 'parent'
       || this.lk == 108575         // '$' 'preceding'
       || this.lk == 108576         // '%' 'preceding'
       || this.lk == 108820         // '{' 'preceding'
       || this.lk == 109087         // '$' 'preceding-sibling'
       || this.lk == 109088         // '%' 'preceding-sibling'
       || this.lk == 109332         // '{' 'preceding-sibling'
       || this.lk == 110623         // '$' 'processing-instruction'
       || this.lk == 110624         // '%' 'processing-instruction'
       || this.lk == 110868         // '{' 'processing-instruction'
       || this.lk == 111647         // '$' 'rename'
       || this.lk == 111648         // '%' 'rename'
       || this.lk == 111892         // '{' 'rename'
       || this.lk == 112159         // '$' 'replace'
       || this.lk == 112160         // '%' 'replace'
       || this.lk == 112404         // '{' 'replace'
       || this.lk == 112671         // '$' 'return'
       || this.lk == 112672         // '%' 'return'
       || this.lk == 112916         // '{' 'return'
       || this.lk == 113183         // '$' 'returning'
       || this.lk == 113184         // '%' 'returning'
       || this.lk == 113428         // '{' 'returning'
       || this.lk == 113695         // '$' 'revalidation'
       || this.lk == 113696         // '%' 'revalidation'
       || this.lk == 113940         // '{' 'revalidation'
       || this.lk == 114719         // '$' 'satisfies'
       || this.lk == 114720         // '%' 'satisfies'
       || this.lk == 114964         // '{' 'satisfies'
       || this.lk == 115231         // '$' 'schema'
       || this.lk == 115232         // '%' 'schema'
       || this.lk == 115476         // '{' 'schema'
       || this.lk == 115743         // '$' 'schema-attribute'
       || this.lk == 115744         // '%' 'schema-attribute'
       || this.lk == 115988         // '{' 'schema-attribute'
       || this.lk == 116255         // '$' 'schema-element'
       || this.lk == 116256         // '%' 'schema-element'
       || this.lk == 116500         // '{' 'schema-element'
       || this.lk == 116767         // '$' 'score'
       || this.lk == 116768         // '%' 'score'
       || this.lk == 117012         // '{' 'score'
       || this.lk == 117279         // '$' 'self'
       || this.lk == 117280         // '%' 'self'
       || this.lk == 117524         // '{' 'self'
       || this.lk == 119839         // '$' 'sliding'
       || this.lk == 119840         // '%' 'sliding'
       || this.lk == 120084         // '{' 'sliding'
       || this.lk == 120351         // '$' 'some'
       || this.lk == 120352         // '%' 'some'
       || this.lk == 120596         // '{' 'some'
       || this.lk == 120863         // '$' 'stable'
       || this.lk == 120864         // '%' 'stable'
       || this.lk == 121108         // '{' 'stable'
       || this.lk == 121375         // '$' 'start'
       || this.lk == 121376         // '%' 'start'
       || this.lk == 121620         // '{' 'start'
       || this.lk == 122911         // '$' 'strict'
       || this.lk == 122912         // '%' 'strict'
       || this.lk == 123156         // '{' 'strict'
       || this.lk == 123935         // '$' 'structured-item'
       || this.lk == 123936         // '%' 'structured-item'
       || this.lk == 124180         // '{' 'structured-item'
       || this.lk == 124447         // '$' 'switch'
       || this.lk == 124448         // '%' 'switch'
       || this.lk == 124692         // '{' 'switch'
       || this.lk == 124959         // '$' 'text'
       || this.lk == 124960         // '%' 'text'
       || this.lk == 125204         // '{' 'text'
       || this.lk == 127007         // '$' 'to'
       || this.lk == 127008         // '%' 'to'
       || this.lk == 127252         // '{' 'to'
       || this.lk == 127519         // '$' 'treat'
       || this.lk == 127520         // '%' 'treat'
       || this.lk == 127764         // '{' 'treat'
       || this.lk == 128031         // '$' 'try'
       || this.lk == 128032         // '%' 'try'
       || this.lk == 128276         // '{' 'try'
       || this.lk == 128543         // '$' 'tumbling'
       || this.lk == 128544         // '%' 'tumbling'
       || this.lk == 128788         // '{' 'tumbling'
       || this.lk == 129055         // '$' 'type'
       || this.lk == 129056         // '%' 'type'
       || this.lk == 129300         // '{' 'type'
       || this.lk == 129567         // '$' 'typeswitch'
       || this.lk == 129568         // '%' 'typeswitch'
       || this.lk == 129812         // '{' 'typeswitch'
       || this.lk == 130079         // '$' 'union'
       || this.lk == 130080         // '%' 'union'
       || this.lk == 130324         // '{' 'union'
       || this.lk == 131103         // '$' 'unordered'
       || this.lk == 131104         // '%' 'unordered'
       || this.lk == 131348         // '{' 'unordered'
       || this.lk == 131615         // '$' 'updating'
       || this.lk == 131616         // '%' 'updating'
       || this.lk == 131860         // '{' 'updating'
       || this.lk == 133151         // '$' 'validate'
       || this.lk == 133152         // '%' 'validate'
       || this.lk == 133396         // '{' 'validate'
       || this.lk == 133663         // '$' 'value'
       || this.lk == 133664         // '%' 'value'
       || this.lk == 133908         // '{' 'value'
       || this.lk == 134175         // '$' 'variable'
       || this.lk == 134176         // '%' 'variable'
       || this.lk == 134420         // '{' 'variable'
       || this.lk == 134687         // '$' 'version'
       || this.lk == 134688         // '%' 'version'
       || this.lk == 134932         // '{' 'version'
       || this.lk == 136223         // '$' 'where'
       || this.lk == 136224         // '%' 'where'
       || this.lk == 136468         // '{' 'where'
       || this.lk == 136735         // '$' 'while'
       || this.lk == 136736         // '%' 'while'
       || this.lk == 136980         // '{' 'while'
       || this.lk == 138271         // '$' 'with'
       || this.lk == 138272         // '%' 'with'
       || this.lk == 138516         // '{' 'with'
       || this.lk == 140319         // '$' 'xquery'
       || this.lk == 140320         // '%' 'xquery'
       || this.lk == 140564         // '{' 'xquery'
       || this.lk == 141588         // '{' '{'
       || this.lk == 142612         // '{' '{|'
       || this.lk == 144660)        // '{' '}'
      {
        this.lk = this.memoized(7, this.e0);
        if (this.lk == 0)
        {
          var b0A = this.b0; var e0A = this.e0; var l1A = this.l1;
          var b1A = this.b1; var e1A = this.e1; var l2A = this.l2;
          var b2A = this.b2; var e2A = this.e2;
          try
          {
            this.try_ApplyStatement();
            this.lk = -1;
          }
          catch (p1A)
          {
            try
            {
              this.b0 = b0A; this.e0 = e0A; this.l1 = l1A; if (this.l1 == 0) {this.end = e0A;} else {
              this.b1 = b1A; this.e1 = e1A; this.l2 = l2A; if (this.l2 == 0) {this.end = e1A;} else {
              this.b2 = b2A; this.e2 = e2A; this.end = e2A; }}
              this.try_AssignStatement();
              this.lk = -2;
            }
            catch (p2A)
            {
              try
              {
                this.b0 = b0A; this.e0 = e0A; this.l1 = l1A; if (this.l1 == 0) {this.end = e0A;} else {
                this.b1 = b1A; this.e1 = e1A; this.l2 = l2A; if (this.l2 == 0) {this.end = e1A;} else {
                this.b2 = b2A; this.e2 = e2A; this.end = e2A; }}
                this.try_BlockStatement();
                this.lk = -3;
              }
              catch (p3A)
              {
                try
                {
                  this.b0 = b0A; this.e0 = e0A; this.l1 = l1A; if (this.l1 == 0) {this.end = e0A;} else {
                  this.b1 = b1A; this.e1 = e1A; this.l2 = l2A; if (this.l2 == 0) {this.end = e1A;} else {
                  this.b2 = b2A; this.e2 = e2A; this.end = e2A; }}
                  this.try_VarDeclStatement();
                  this.lk = -12;
                }
                catch (p12A)
                {
                  this.lk = -13;
                }
              }
            }
          }
          this.b0 = b0A; this.e0 = e0A; this.l1 = l1A; if (this.l1 == 0) {this.end = e0A;} else {
          this.b1 = b1A; this.e1 = e1A; this.l2 = l2A; if (this.l2 == 0) {this.end = e1A;} else {
          this.b2 = b2A; this.e2 = e2A; this.end = e2A; }}
          this.memoize(7, this.e0, this.lk);
        }
      }
      switch (this.lk)
      {
      case -2:
        this.parse_AssignStatement();
        break;
      case -3:
        this.parse_BlockStatement();
        break;
      case 90198:                   // 'break' 'loop'
        this.parse_BreakStatement();
        break;
      case 90214:                   // 'continue' 'loop'
        this.parse_ContinueStatement();
        break;
      case 113284:                  // 'exit' 'returning'
        this.parse_ExitStatement();
        break;
      case 16009:                   // 'for' '$'
      case 16046:                   // 'let' '$'
      case 116910:                  // 'let' 'score'
      case 119945:                  // 'for' 'sliding'
      case 128649:                  // 'for' 'tumbling'
        this.parse_FLWORStatement();
        break;
      case 17560:                   // 'if' '('
        this.parse_IfStatement();
        break;
      case 17651:                   // 'switch' '('
        this.parse_SwitchStatement();
        break;
      case 141562:                  // 'try' '{'
        this.parse_TryCatchStatement();
        break;
      case 17661:                   // 'typeswitch' '('
        this.parse_TypeswitchStatement();
        break;
      case -12:
      case 16134:                   // 'variable' '$'
        this.parse_VarDeclStatement();
        break;
      case -13:
        this.parse_WhileStatement();
        break;
      case 53:                      // ';'
        this.parse_VoidStatement();
        break;
      default:
        this.parse_ApplyStatement();
      }
      this.eventHandler.endNonterminal("Statement", this.e0);
    }

    private try_Statement()
    {
      switch (this.l1)
      {
      case 132:                     // 'exit'
        this.lookahead2W(188);      // S^WS | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | '-' | '/' | '//' | ';' | '<' |
                                    // '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' | 'castable' |
                                    // 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'returning' | 'to' |
                                    // 'treat' | 'union' | '|' | '||'
        break;
      case 137:                     // 'for'
        this.lookahead2W(195);      // S^WS | '!' | '!=' | '#' | '$' | '(' | '(:' | '*' | '+' | '-' | '/' | '//' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' | 'castable' |
                                    // 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'sliding' | 'to' |
                                    // 'treat' | 'tumbling' | 'union' | '|' | '||'
        break;
      case 174:                     // 'let'
        this.lookahead2W(192);      // S^WS | '!' | '!=' | '#' | '$' | '(' | '(:' | '*' | '+' | '-' | '/' | '//' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' | 'castable' |
                                    // 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'score' | 'to' |
                                    // 'treat' | 'union' | '|' | '||'
        break;
      case 250:                     // 'try'
        this.lookahead2W(189);      // S^WS | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | '-' | '/' | '//' | ';' | '<' |
                                    // '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' | 'castable' |
                                    // 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' | 'treat' |
                                    // 'union' | '{' | '|' | '||'
        break;
      case 262:                     // 'variable'
        this.lookahead2W(186);      // S^WS | '!' | '!=' | '#' | '$' | '(' | '(:' | '*' | '+' | '-' | '/' | '//' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' | 'castable' |
                                    // 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' | 'treat' |
                                    // 'union' | '|' | '||'
        break;
      case 276:                     // '{'
        this.lookahead2W(276);      // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|' | '}'
        break;
      case 31:                      // '$'
      case 32:                      // '%'
        this.lookahead2W(254);      // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
        break;
      case 86:                      // 'break'
      case 102:                     // 'continue'
        this.lookahead2W(187);      // S^WS | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | '-' | '/' | '//' | ';' | '<' |
                                    // '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' | 'castable' |
                                    // 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'loop' | 'lt' | 'mod' | 'ne' | 'or' | 'to' |
                                    // 'treat' | 'union' | '|' | '||'
        break;
      case 152:                     // 'if'
      case 243:                     // 'switch'
      case 253:                     // 'typeswitch'
      case 267:                     // 'while'
        this.lookahead2W(184);      // S^WS | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | '-' | '/' | '//' | ';' | '<' |
                                    // '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' | 'castable' |
                                    // 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' | 'treat' |
                                    // 'union' | '|' | '||'
        break;
      default:
        this.lk = this.l1;
      }
      if (this.lk == 2836           // '{' Wildcard
       || this.lk == 3103           // '$' EQName^Token
       || this.lk == 3104           // '%' EQName^Token
       || this.lk == 3348           // '{' EQName^Token
       || this.lk == 4372           // '{' IntegerLiteral
       || this.lk == 4884           // '{' DecimalLiteral
       || this.lk == 5396           // '{' DoubleLiteral
       || this.lk == 5908           // '{' StringLiteral
       || this.lk == 16148          // '{' '$'
       || this.lk == 16660          // '{' '%'
       || this.lk == 17675          // 'while' '('
       || this.lk == 17684          // '{' '('
       || this.lk == 18196          // '{' '(#'
       || this.lk == 20756          // '{' '+'
       || this.lk == 21780          // '{' '-'
       || this.lk == 22804          // '{' '.'
       || this.lk == 23316          // '{' '..'
       || this.lk == 23828          // '{' '/'
       || this.lk == 24340          // '{' '//'
       || this.lk == 27412          // '{' ';'
       || this.lk == 27924          // '{' '<'
       || this.lk == 28436          // '{' '<!--'
       || this.lk == 30484          // '{' '<?'
       || this.lk == 34068          // '{' '@'
       || this.lk == 35092          // '{' '['
       || this.lk == 35871          // '$' 'after'
       || this.lk == 35872          // '%' 'after'
       || this.lk == 36116          // '{' 'after'
       || this.lk == 36895          // '$' 'allowing'
       || this.lk == 36896          // '%' 'allowing'
       || this.lk == 37140          // '{' 'allowing'
       || this.lk == 37407          // '$' 'ancestor'
       || this.lk == 37408          // '%' 'ancestor'
       || this.lk == 37652          // '{' 'ancestor'
       || this.lk == 37919          // '$' 'ancestor-or-self'
       || this.lk == 37920          // '%' 'ancestor-or-self'
       || this.lk == 38164          // '{' 'ancestor-or-self'
       || this.lk == 38431          // '$' 'and'
       || this.lk == 38432          // '%' 'and'
       || this.lk == 38676          // '{' 'and'
       || this.lk == 39455          // '$' 'append'
       || this.lk == 39456          // '%' 'append'
       || this.lk == 39700          // '{' 'append'
       || this.lk == 39967          // '$' 'array'
       || this.lk == 39968          // '%' 'array'
       || this.lk == 40212          // '{' 'array'
       || this.lk == 40479          // '$' 'as'
       || this.lk == 40480          // '%' 'as'
       || this.lk == 40724          // '{' 'as'
       || this.lk == 40991          // '$' 'ascending'
       || this.lk == 40992          // '%' 'ascending'
       || this.lk == 41236          // '{' 'ascending'
       || this.lk == 41503          // '$' 'at'
       || this.lk == 41504          // '%' 'at'
       || this.lk == 41748          // '{' 'at'
       || this.lk == 42015          // '$' 'attribute'
       || this.lk == 42016          // '%' 'attribute'
       || this.lk == 42260          // '{' 'attribute'
       || this.lk == 42527          // '$' 'base-uri'
       || this.lk == 42528          // '%' 'base-uri'
       || this.lk == 42772          // '{' 'base-uri'
       || this.lk == 43039          // '$' 'before'
       || this.lk == 43040          // '%' 'before'
       || this.lk == 43284          // '{' 'before'
       || this.lk == 43551          // '$' 'boundary-space'
       || this.lk == 43552          // '%' 'boundary-space'
       || this.lk == 43796          // '{' 'boundary-space'
       || this.lk == 44063          // '$' 'break'
       || this.lk == 44064          // '%' 'break'
       || this.lk == 44308          // '{' 'break'
       || this.lk == 45087          // '$' 'case'
       || this.lk == 45088          // '%' 'case'
       || this.lk == 45332          // '{' 'case'
       || this.lk == 45599          // '$' 'cast'
       || this.lk == 45600          // '%' 'cast'
       || this.lk == 45844          // '{' 'cast'
       || this.lk == 46111          // '$' 'castable'
       || this.lk == 46112          // '%' 'castable'
       || this.lk == 46356          // '{' 'castable'
       || this.lk == 46623          // '$' 'catch'
       || this.lk == 46624          // '%' 'catch'
       || this.lk == 46868          // '{' 'catch'
       || this.lk == 47647          // '$' 'child'
       || this.lk == 47648          // '%' 'child'
       || this.lk == 47892          // '{' 'child'
       || this.lk == 48159          // '$' 'collation'
       || this.lk == 48160          // '%' 'collation'
       || this.lk == 48404          // '{' 'collation'
       || this.lk == 49183          // '$' 'comment'
       || this.lk == 49184          // '%' 'comment'
       || this.lk == 49428          // '{' 'comment'
       || this.lk == 49695          // '$' 'constraint'
       || this.lk == 49696          // '%' 'constraint'
       || this.lk == 49940          // '{' 'constraint'
       || this.lk == 50207          // '$' 'construction'
       || this.lk == 50208          // '%' 'construction'
       || this.lk == 50452          // '{' 'construction'
       || this.lk == 51743          // '$' 'context'
       || this.lk == 51744          // '%' 'context'
       || this.lk == 51988          // '{' 'context'
       || this.lk == 52255          // '$' 'continue'
       || this.lk == 52256          // '%' 'continue'
       || this.lk == 52500          // '{' 'continue'
       || this.lk == 52767          // '$' 'copy'
       || this.lk == 52768          // '%' 'copy'
       || this.lk == 53012          // '{' 'copy'
       || this.lk == 53279          // '$' 'copy-namespaces'
       || this.lk == 53280          // '%' 'copy-namespaces'
       || this.lk == 53524          // '{' 'copy-namespaces'
       || this.lk == 53791          // '$' 'count'
       || this.lk == 53792          // '%' 'count'
       || this.lk == 54036          // '{' 'count'
       || this.lk == 54303          // '$' 'decimal-format'
       || this.lk == 54304          // '%' 'decimal-format'
       || this.lk == 54548          // '{' 'decimal-format'
       || this.lk == 55327          // '$' 'declare'
       || this.lk == 55328          // '%' 'declare'
       || this.lk == 55572          // '{' 'declare'
       || this.lk == 55839          // '$' 'default'
       || this.lk == 55840          // '%' 'default'
       || this.lk == 56084          // '{' 'default'
       || this.lk == 56351          // '$' 'delete'
       || this.lk == 56352          // '%' 'delete'
       || this.lk == 56596          // '{' 'delete'
       || this.lk == 56863          // '$' 'descendant'
       || this.lk == 56864          // '%' 'descendant'
       || this.lk == 57108          // '{' 'descendant'
       || this.lk == 57375          // '$' 'descendant-or-self'
       || this.lk == 57376          // '%' 'descendant-or-self'
       || this.lk == 57620          // '{' 'descendant-or-self'
       || this.lk == 57887          // '$' 'descending'
       || this.lk == 57888          // '%' 'descending'
       || this.lk == 58132          // '{' 'descending'
       || this.lk == 60447          // '$' 'div'
       || this.lk == 60448          // '%' 'div'
       || this.lk == 60692          // '{' 'div'
       || this.lk == 60959          // '$' 'document'
       || this.lk == 60960          // '%' 'document'
       || this.lk == 61204          // '{' 'document'
       || this.lk == 61471          // '$' 'document-node'
       || this.lk == 61472          // '%' 'document-node'
       || this.lk == 61716          // '{' 'document-node'
       || this.lk == 61983          // '$' 'element'
       || this.lk == 61984          // '%' 'element'
       || this.lk == 62228          // '{' 'element'
       || this.lk == 62495          // '$' 'else'
       || this.lk == 62496          // '%' 'else'
       || this.lk == 62740          // '{' 'else'
       || this.lk == 63007          // '$' 'empty'
       || this.lk == 63008          // '%' 'empty'
       || this.lk == 63252          // '{' 'empty'
       || this.lk == 63519          // '$' 'empty-sequence'
       || this.lk == 63520          // '%' 'empty-sequence'
       || this.lk == 63764          // '{' 'empty-sequence'
       || this.lk == 64031          // '$' 'encoding'
       || this.lk == 64032          // '%' 'encoding'
       || this.lk == 64276          // '{' 'encoding'
       || this.lk == 64543          // '$' 'end'
       || this.lk == 64544          // '%' 'end'
       || this.lk == 64788          // '{' 'end'
       || this.lk == 65567          // '$' 'eq'
       || this.lk == 65568          // '%' 'eq'
       || this.lk == 65812          // '{' 'eq'
       || this.lk == 66079          // '$' 'every'
       || this.lk == 66080          // '%' 'every'
       || this.lk == 66324          // '{' 'every'
       || this.lk == 67103          // '$' 'except'
       || this.lk == 67104          // '%' 'except'
       || this.lk == 67348          // '{' 'except'
       || this.lk == 67615          // '$' 'exit'
       || this.lk == 67616          // '%' 'exit'
       || this.lk == 67860          // '{' 'exit'
       || this.lk == 68127          // '$' 'external'
       || this.lk == 68128          // '%' 'external'
       || this.lk == 68372          // '{' 'external'
       || this.lk == 68639          // '$' 'first'
       || this.lk == 68640          // '%' 'first'
       || this.lk == 68884          // '{' 'first'
       || this.lk == 69151          // '$' 'following'
       || this.lk == 69152          // '%' 'following'
       || this.lk == 69396          // '{' 'following'
       || this.lk == 69663          // '$' 'following-sibling'
       || this.lk == 69664          // '%' 'following-sibling'
       || this.lk == 69908          // '{' 'following-sibling'
       || this.lk == 70175          // '$' 'for'
       || this.lk == 70176          // '%' 'for'
       || this.lk == 70420          // '{' 'for'
       || this.lk == 72223          // '$' 'ft-option'
       || this.lk == 72224          // '%' 'ft-option'
       || this.lk == 72468          // '{' 'ft-option'
       || this.lk == 74271          // '$' 'function'
       || this.lk == 74272          // '%' 'function'
       || this.lk == 74516          // '{' 'function'
       || this.lk == 74783          // '$' 'ge'
       || this.lk == 74784          // '%' 'ge'
       || this.lk == 75028          // '{' 'ge'
       || this.lk == 75807          // '$' 'group'
       || this.lk == 75808          // '%' 'group'
       || this.lk == 76052          // '{' 'group'
       || this.lk == 76831          // '$' 'gt'
       || this.lk == 76832          // '%' 'gt'
       || this.lk == 77076          // '{' 'gt'
       || this.lk == 77343          // '$' 'idiv'
       || this.lk == 77344          // '%' 'idiv'
       || this.lk == 77588          // '{' 'idiv'
       || this.lk == 77855          // '$' 'if'
       || this.lk == 77856          // '%' 'if'
       || this.lk == 78100          // '{' 'if'
       || this.lk == 78367          // '$' 'import'
       || this.lk == 78368          // '%' 'import'
       || this.lk == 78612          // '{' 'import'
       || this.lk == 78879          // '$' 'in'
       || this.lk == 78880          // '%' 'in'
       || this.lk == 79124          // '{' 'in'
       || this.lk == 79391          // '$' 'index'
       || this.lk == 79392          // '%' 'index'
       || this.lk == 79636          // '{' 'index'
       || this.lk == 81439          // '$' 'insert'
       || this.lk == 81440          // '%' 'insert'
       || this.lk == 81684          // '{' 'insert'
       || this.lk == 81951          // '$' 'instance'
       || this.lk == 81952          // '%' 'instance'
       || this.lk == 82196          // '{' 'instance'
       || this.lk == 82463          // '$' 'integrity'
       || this.lk == 82464          // '%' 'integrity'
       || this.lk == 82708          // '{' 'integrity'
       || this.lk == 82975          // '$' 'intersect'
       || this.lk == 82976          // '%' 'intersect'
       || this.lk == 83220          // '{' 'intersect'
       || this.lk == 83487          // '$' 'into'
       || this.lk == 83488          // '%' 'into'
       || this.lk == 83732          // '{' 'into'
       || this.lk == 83999          // '$' 'is'
       || this.lk == 84000          // '%' 'is'
       || this.lk == 84244          // '{' 'is'
       || this.lk == 84511          // '$' 'item'
       || this.lk == 84512          // '%' 'item'
       || this.lk == 84756          // '{' 'item'
       || this.lk == 85023          // '$' 'json'
       || this.lk == 85024          // '%' 'json'
       || this.lk == 85268          // '{' 'json'
       || this.lk == 85535          // '$' 'json-item'
       || this.lk == 85536          // '%' 'json-item'
       || this.lk == 85780          // '{' 'json-item'
       || this.lk == 87071          // '$' 'last'
       || this.lk == 87072          // '%' 'last'
       || this.lk == 87316          // '{' 'last'
       || this.lk == 87583          // '$' 'lax'
       || this.lk == 87584          // '%' 'lax'
       || this.lk == 87828          // '{' 'lax'
       || this.lk == 88095          // '$' 'le'
       || this.lk == 88096          // '%' 'le'
       || this.lk == 88340          // '{' 'le'
       || this.lk == 89119          // '$' 'let'
       || this.lk == 89120          // '%' 'let'
       || this.lk == 89364          // '{' 'let'
       || this.lk == 90143          // '$' 'loop'
       || this.lk == 90144          // '%' 'loop'
       || this.lk == 90388          // '{' 'loop'
       || this.lk == 91167          // '$' 'lt'
       || this.lk == 91168          // '%' 'lt'
       || this.lk == 91412          // '{' 'lt'
       || this.lk == 92191          // '$' 'mod'
       || this.lk == 92192          // '%' 'mod'
       || this.lk == 92436          // '{' 'mod'
       || this.lk == 92703          // '$' 'modify'
       || this.lk == 92704          // '%' 'modify'
       || this.lk == 92948          // '{' 'modify'
       || this.lk == 93215          // '$' 'module'
       || this.lk == 93216          // '%' 'module'
       || this.lk == 93460          // '{' 'module'
       || this.lk == 94239          // '$' 'namespace'
       || this.lk == 94240          // '%' 'namespace'
       || this.lk == 94484          // '{' 'namespace'
       || this.lk == 94751          // '$' 'namespace-node'
       || this.lk == 94752          // '%' 'namespace-node'
       || this.lk == 94996          // '{' 'namespace-node'
       || this.lk == 95263          // '$' 'ne'
       || this.lk == 95264          // '%' 'ne'
       || this.lk == 95508          // '{' 'ne'
       || this.lk == 97823          // '$' 'node'
       || this.lk == 97824          // '%' 'node'
       || this.lk == 98068          // '{' 'node'
       || this.lk == 98335          // '$' 'nodes'
       || this.lk == 98336          // '%' 'nodes'
       || this.lk == 98580          // '{' 'nodes'
       || this.lk == 99359          // '$' 'object'
       || this.lk == 99360          // '%' 'object'
       || this.lk == 99604          // '{' 'object'
       || this.lk == 101407         // '$' 'only'
       || this.lk == 101408         // '%' 'only'
       || this.lk == 101652         // '{' 'only'
       || this.lk == 101919         // '$' 'option'
       || this.lk == 101920         // '%' 'option'
       || this.lk == 102164         // '{' 'option'
       || this.lk == 102431         // '$' 'or'
       || this.lk == 102432         // '%' 'or'
       || this.lk == 102676         // '{' 'or'
       || this.lk == 102943         // '$' 'order'
       || this.lk == 102944         // '%' 'order'
       || this.lk == 103188         // '{' 'order'
       || this.lk == 103455         // '$' 'ordered'
       || this.lk == 103456         // '%' 'ordered'
       || this.lk == 103700         // '{' 'ordered'
       || this.lk == 103967         // '$' 'ordering'
       || this.lk == 103968         // '%' 'ordering'
       || this.lk == 104212         // '{' 'ordering'
       || this.lk == 105503         // '$' 'parent'
       || this.lk == 105504         // '%' 'parent'
       || this.lk == 105748         // '{' 'parent'
       || this.lk == 108575         // '$' 'preceding'
       || this.lk == 108576         // '%' 'preceding'
       || this.lk == 108820         // '{' 'preceding'
       || this.lk == 109087         // '$' 'preceding-sibling'
       || this.lk == 109088         // '%' 'preceding-sibling'
       || this.lk == 109332         // '{' 'preceding-sibling'
       || this.lk == 110623         // '$' 'processing-instruction'
       || this.lk == 110624         // '%' 'processing-instruction'
       || this.lk == 110868         // '{' 'processing-instruction'
       || this.lk == 111647         // '$' 'rename'
       || this.lk == 111648         // '%' 'rename'
       || this.lk == 111892         // '{' 'rename'
       || this.lk == 112159         // '$' 'replace'
       || this.lk == 112160         // '%' 'replace'
       || this.lk == 112404         // '{' 'replace'
       || this.lk == 112671         // '$' 'return'
       || this.lk == 112672         // '%' 'return'
       || this.lk == 112916         // '{' 'return'
       || this.lk == 113183         // '$' 'returning'
       || this.lk == 113184         // '%' 'returning'
       || this.lk == 113428         // '{' 'returning'
       || this.lk == 113695         // '$' 'revalidation'
       || this.lk == 113696         // '%' 'revalidation'
       || this.lk == 113940         // '{' 'revalidation'
       || this.lk == 114719         // '$' 'satisfies'
       || this.lk == 114720         // '%' 'satisfies'
       || this.lk == 114964         // '{' 'satisfies'
       || this.lk == 115231         // '$' 'schema'
       || this.lk == 115232         // '%' 'schema'
       || this.lk == 115476         // '{' 'schema'
       || this.lk == 115743         // '$' 'schema-attribute'
       || this.lk == 115744         // '%' 'schema-attribute'
       || this.lk == 115988         // '{' 'schema-attribute'
       || this.lk == 116255         // '$' 'schema-element'
       || this.lk == 116256         // '%' 'schema-element'
       || this.lk == 116500         // '{' 'schema-element'
       || this.lk == 116767         // '$' 'score'
       || this.lk == 116768         // '%' 'score'
       || this.lk == 117012         // '{' 'score'
       || this.lk == 117279         // '$' 'self'
       || this.lk == 117280         // '%' 'self'
       || this.lk == 117524         // '{' 'self'
       || this.lk == 119839         // '$' 'sliding'
       || this.lk == 119840         // '%' 'sliding'
       || this.lk == 120084         // '{' 'sliding'
       || this.lk == 120351         // '$' 'some'
       || this.lk == 120352         // '%' 'some'
       || this.lk == 120596         // '{' 'some'
       || this.lk == 120863         // '$' 'stable'
       || this.lk == 120864         // '%' 'stable'
       || this.lk == 121108         // '{' 'stable'
       || this.lk == 121375         // '$' 'start'
       || this.lk == 121376         // '%' 'start'
       || this.lk == 121620         // '{' 'start'
       || this.lk == 122911         // '$' 'strict'
       || this.lk == 122912         // '%' 'strict'
       || this.lk == 123156         // '{' 'strict'
       || this.lk == 123935         // '$' 'structured-item'
       || this.lk == 123936         // '%' 'structured-item'
       || this.lk == 124180         // '{' 'structured-item'
       || this.lk == 124447         // '$' 'switch'
       || this.lk == 124448         // '%' 'switch'
       || this.lk == 124692         // '{' 'switch'
       || this.lk == 124959         // '$' 'text'
       || this.lk == 124960         // '%' 'text'
       || this.lk == 125204         // '{' 'text'
       || this.lk == 127007         // '$' 'to'
       || this.lk == 127008         // '%' 'to'
       || this.lk == 127252         // '{' 'to'
       || this.lk == 127519         // '$' 'treat'
       || this.lk == 127520         // '%' 'treat'
       || this.lk == 127764         // '{' 'treat'
       || this.lk == 128031         // '$' 'try'
       || this.lk == 128032         // '%' 'try'
       || this.lk == 128276         // '{' 'try'
       || this.lk == 128543         // '$' 'tumbling'
       || this.lk == 128544         // '%' 'tumbling'
       || this.lk == 128788         // '{' 'tumbling'
       || this.lk == 129055         // '$' 'type'
       || this.lk == 129056         // '%' 'type'
       || this.lk == 129300         // '{' 'type'
       || this.lk == 129567         // '$' 'typeswitch'
       || this.lk == 129568         // '%' 'typeswitch'
       || this.lk == 129812         // '{' 'typeswitch'
       || this.lk == 130079         // '$' 'union'
       || this.lk == 130080         // '%' 'union'
       || this.lk == 130324         // '{' 'union'
       || this.lk == 131103         // '$' 'unordered'
       || this.lk == 131104         // '%' 'unordered'
       || this.lk == 131348         // '{' 'unordered'
       || this.lk == 131615         // '$' 'updating'
       || this.lk == 131616         // '%' 'updating'
       || this.lk == 131860         // '{' 'updating'
       || this.lk == 133151         // '$' 'validate'
       || this.lk == 133152         // '%' 'validate'
       || this.lk == 133396         // '{' 'validate'
       || this.lk == 133663         // '$' 'value'
       || this.lk == 133664         // '%' 'value'
       || this.lk == 133908         // '{' 'value'
       || this.lk == 134175         // '$' 'variable'
       || this.lk == 134176         // '%' 'variable'
       || this.lk == 134420         // '{' 'variable'
       || this.lk == 134687         // '$' 'version'
       || this.lk == 134688         // '%' 'version'
       || this.lk == 134932         // '{' 'version'
       || this.lk == 136223         // '$' 'where'
       || this.lk == 136224         // '%' 'where'
       || this.lk == 136468         // '{' 'where'
       || this.lk == 136735         // '$' 'while'
       || this.lk == 136736         // '%' 'while'
       || this.lk == 136980         // '{' 'while'
       || this.lk == 138271         // '$' 'with'
       || this.lk == 138272         // '%' 'with'
       || this.lk == 138516         // '{' 'with'
       || this.lk == 140319         // '$' 'xquery'
       || this.lk == 140320         // '%' 'xquery'
       || this.lk == 140564         // '{' 'xquery'
       || this.lk == 141588         // '{' '{'
       || this.lk == 142612         // '{' '{|'
       || this.lk == 144660)        // '{' '}'
      {
        this.lk = this.memoized(7, this.e0);
        if (this.lk == 0)
        {
          var b0A = this.b0; var e0A = this.e0; var l1A = this.l1;
          var b1A = this.b1; var e1A = this.e1; var l2A = this.l2;
          var b2A = this.b2; var e2A = this.e2;
          try
          {
            this.try_ApplyStatement();
            this.memoize(7, e0A, -1);
            this.lk = -15;
          }
          catch (p1A)
          {
            try
            {
              this.b0 = b0A; this.e0 = e0A; this.l1 = l1A; if (this.l1 == 0) {this.end = e0A;} else {
              this.b1 = b1A; this.e1 = e1A; this.l2 = l2A; if (this.l2 == 0) {this.end = e1A;} else {
              this.b2 = b2A; this.e2 = e2A; this.end = e2A; }}
              this.try_AssignStatement();
              this.memoize(7, e0A, -2);
              this.lk = -15;
            }
            catch (p2A)
            {
              try
              {
                this.b0 = b0A; this.e0 = e0A; this.l1 = l1A; if (this.l1 == 0) {this.end = e0A;} else {
                this.b1 = b1A; this.e1 = e1A; this.l2 = l2A; if (this.l2 == 0) {this.end = e1A;} else {
                this.b2 = b2A; this.e2 = e2A; this.end = e2A; }}
                this.try_BlockStatement();
                this.memoize(7, e0A, -3);
                this.lk = -15;
              }
              catch (p3A)
              {
                try
                {
                  this.b0 = b0A; this.e0 = e0A; this.l1 = l1A; if (this.l1 == 0) {this.end = e0A;} else {
                  this.b1 = b1A; this.e1 = e1A; this.l2 = l2A; if (this.l2 == 0) {this.end = e1A;} else {
                  this.b2 = b2A; this.e2 = e2A; this.end = e2A; }}
                  this.try_VarDeclStatement();
                  this.memoize(7, e0A, -12);
                  this.lk = -15;
                }
                catch (p12A)
                {
                  this.lk = -13;
                  this.b0 = b0A; this.e0 = e0A; this.l1 = l1A; if (this.l1 == 0) {this.end = e0A;} else {
                  this.b1 = b1A; this.e1 = e1A; this.l2 = l2A; if (this.l2 == 0) {this.end = e1A;} else {
                  this.b2 = b2A; this.e2 = e2A; this.end = e2A; }}
                  this.memoize(7, e0A, -13);
                }
              }
            }
          }
        }
      }
      switch (this.lk)
      {
      case -2:
        this.try_AssignStatement();
        break;
      case -3:
        this.try_BlockStatement();
        break;
      case 90198:                   // 'break' 'loop'
        this.try_BreakStatement();
        break;
      case 90214:                   // 'continue' 'loop'
        this.try_ContinueStatement();
        break;
      case 113284:                  // 'exit' 'returning'
        this.try_ExitStatement();
        break;
      case 16009:                   // 'for' '$'
      case 16046:                   // 'let' '$'
      case 116910:                  // 'let' 'score'
      case 119945:                  // 'for' 'sliding'
      case 128649:                  // 'for' 'tumbling'
        this.try_FLWORStatement();
        break;
      case 17560:                   // 'if' '('
        this.try_IfStatement();
        break;
      case 17651:                   // 'switch' '('
        this.try_SwitchStatement();
        break;
      case 141562:                  // 'try' '{'
        this.try_TryCatchStatement();
        break;
      case 17661:                   // 'typeswitch' '('
        this.try_TypeswitchStatement();
        break;
      case -12:
      case 16134:                   // 'variable' '$'
        this.try_VarDeclStatement();
        break;
      case -13:
        this.try_WhileStatement();
        break;
      case 53:                      // ';'
        this.try_VoidStatement();
        break;
      case -15:
        break;
      default:
        this.try_ApplyStatement();
      }
    }

    private parse_ApplyStatement()
    {
      this.eventHandler.startNonterminal("ApplyStatement", this.e0);
      this.parse_ExprSimple();
      this.shift(53);               // ';'
      this.eventHandler.endNonterminal("ApplyStatement", this.e0);
    }

    private try_ApplyStatement()
    {
      this.try_ExprSimple();
      this.shiftT(53);              // ';'
    }

    private parse_AssignStatement()
    {
      this.eventHandler.startNonterminal("AssignStatement", this.e0);
      this.shift(31);               // '$'
      this.lookahead1W(254);        // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
      this.whitespace();
      this.parse_VarName();
      this.lookahead1W(27);         // S^WS | '(:' | ':='
      this.shift(52);               // ':='
      this.lookahead1W(266);        // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      this.whitespace();
      this.parse_ExprSingle();
      this.shift(53);               // ';'
      this.eventHandler.endNonterminal("AssignStatement", this.e0);
    }

    private try_AssignStatement()
    {
      this.shiftT(31);              // '$'
      this.lookahead1W(254);        // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
      this.try_VarName();
      this.lookahead1W(27);         // S^WS | '(:' | ':='
      this.shiftT(52);              // ':='
      this.lookahead1W(266);        // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      this.try_ExprSingle();
      this.shiftT(53);              // ';'
    }

    private parse_BlockStatement()
    {
      this.eventHandler.startNonterminal("BlockStatement", this.e0);
      this.shift(276);              // '{'
      this.lookahead1W(276);        // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|' | '}'
      this.whitespace();
      this.parse_Statements();
      this.shift(282);              // '}'
      this.eventHandler.endNonterminal("BlockStatement", this.e0);
    }

    private try_BlockStatement()
    {
      this.shiftT(276);             // '{'
      this.lookahead1W(276);        // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|' | '}'
      this.try_Statements();
      this.shiftT(282);             // '}'
    }

    private parse_BreakStatement()
    {
      this.eventHandler.startNonterminal("BreakStatement", this.e0);
      this.shift(86);               // 'break'
      this.lookahead1W(59);         // S^WS | '(:' | 'loop'
      this.shift(176);              // 'loop'
      this.lookahead1W(28);         // S^WS | '(:' | ';'
      this.shift(53);               // ';'
      this.eventHandler.endNonterminal("BreakStatement", this.e0);
    }

    private try_BreakStatement()
    {
      this.shiftT(86);              // 'break'
      this.lookahead1W(59);         // S^WS | '(:' | 'loop'
      this.shiftT(176);             // 'loop'
      this.lookahead1W(28);         // S^WS | '(:' | ';'
      this.shiftT(53);              // ';'
    }

    private parse_ContinueStatement()
    {
      this.eventHandler.startNonterminal("ContinueStatement", this.e0);
      this.shift(102);              // 'continue'
      this.lookahead1W(59);         // S^WS | '(:' | 'loop'
      this.shift(176);              // 'loop'
      this.lookahead1W(28);         // S^WS | '(:' | ';'
      this.shift(53);               // ';'
      this.eventHandler.endNonterminal("ContinueStatement", this.e0);
    }

    private try_ContinueStatement()
    {
      this.shiftT(102);             // 'continue'
      this.lookahead1W(59);         // S^WS | '(:' | 'loop'
      this.shiftT(176);             // 'loop'
      this.lookahead1W(28);         // S^WS | '(:' | ';'
      this.shiftT(53);              // ';'
    }

    private parse_ExitStatement()
    {
      this.eventHandler.startNonterminal("ExitStatement", this.e0);
      this.shift(132);              // 'exit'
      this.lookahead1W(71);         // S^WS | '(:' | 'returning'
      this.shift(221);              // 'returning'
      this.lookahead1W(266);        // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      this.whitespace();
      this.parse_ExprSingle();
      this.shift(53);               // ';'
      this.eventHandler.endNonterminal("ExitStatement", this.e0);
    }

    private try_ExitStatement()
    {
      this.shiftT(132);             // 'exit'
      this.lookahead1W(71);         // S^WS | '(:' | 'returning'
      this.shiftT(221);             // 'returning'
      this.lookahead1W(266);        // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      this.try_ExprSingle();
      this.shiftT(53);              // ';'
    }

    private parse_FLWORStatement()
    {
      this.eventHandler.startNonterminal("FLWORStatement", this.e0);
      this.parse_InitialClause();
      for (;;)
      {
        this.lookahead1W(173);      // S^WS | '(:' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' | 'stable' |
                                    // 'where'
        if (this.l1 == 220)         // 'return'
        {
          break;
        }
        this.whitespace();
        this.parse_IntermediateClause();
      }
      this.whitespace();
      this.parse_ReturnStatement();
      this.eventHandler.endNonterminal("FLWORStatement", this.e0);
    }

    private try_FLWORStatement()
    {
      this.try_InitialClause();
      for (;;)
      {
        this.lookahead1W(173);      // S^WS | '(:' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' | 'stable' |
                                    // 'where'
        if (this.l1 == 220)         // 'return'
        {
          break;
        }
        this.try_IntermediateClause();
      }
      this.try_ReturnStatement();
    }

    private parse_ReturnStatement()
    {
      this.eventHandler.startNonterminal("ReturnStatement", this.e0);
      this.shift(220);              // 'return'
      this.lookahead1W(269);        // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      this.whitespace();
      this.parse_Statement();
      this.eventHandler.endNonterminal("ReturnStatement", this.e0);
    }

    private try_ReturnStatement()
    {
      this.shiftT(220);             // 'return'
      this.lookahead1W(269);        // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      this.try_Statement();
    }

    private parse_IfStatement()
    {
      this.eventHandler.startNonterminal("IfStatement", this.e0);
      this.shift(152);              // 'if'
      this.lookahead1W(22);         // S^WS | '(' | '(:'
      this.shift(34);               // '('
      this.lookahead1W(266);        // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      this.whitespace();
      this.parse_Expr();
      this.shift(37);               // ')'
      this.lookahead1W(77);         // S^WS | '(:' | 'then'
      this.shift(245);              // 'then'
      this.lookahead1W(269);        // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      this.whitespace();
      this.parse_Statement();
      this.lookahead1W(48);         // S^WS | '(:' | 'else'
      this.shift(122);              // 'else'
      this.lookahead1W(269);        // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      this.whitespace();
      this.parse_Statement();
      this.eventHandler.endNonterminal("IfStatement", this.e0);
    }

    private try_IfStatement()
    {
      this.shiftT(152);             // 'if'
      this.lookahead1W(22);         // S^WS | '(' | '(:'
      this.shiftT(34);              // '('
      this.lookahead1W(266);        // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      this.try_Expr();
      this.shiftT(37);              // ')'
      this.lookahead1W(77);         // S^WS | '(:' | 'then'
      this.shiftT(245);             // 'then'
      this.lookahead1W(269);        // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      this.try_Statement();
      this.lookahead1W(48);         // S^WS | '(:' | 'else'
      this.shiftT(122);             // 'else'
      this.lookahead1W(269);        // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      this.try_Statement();
    }

    private parse_SwitchStatement()
    {
      this.eventHandler.startNonterminal("SwitchStatement", this.e0);
      this.shift(243);              // 'switch'
      this.lookahead1W(22);         // S^WS | '(' | '(:'
      this.shift(34);               // '('
      this.lookahead1W(266);        // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      this.whitespace();
      this.parse_Expr();
      this.shift(37);               // ')'
      for (;;)
      {
        this.lookahead1W(35);       // S^WS | '(:' | 'case'
        this.whitespace();
        this.parse_SwitchCaseStatement();
        this.lookahead1W(113);      // S^WS | '(:' | 'case' | 'default'
        if (this.l1 != 88)          // 'case'
        {
          break;
        }
      }
      this.shift(109);              // 'default'
      this.lookahead1W(70);         // S^WS | '(:' | 'return'
      this.shift(220);              // 'return'
      this.lookahead1W(269);        // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      this.whitespace();
      this.parse_Statement();
      this.eventHandler.endNonterminal("SwitchStatement", this.e0);
    }

    private try_SwitchStatement()
    {
      this.shiftT(243);             // 'switch'
      this.lookahead1W(22);         // S^WS | '(' | '(:'
      this.shiftT(34);              // '('
      this.lookahead1W(266);        // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      this.try_Expr();
      this.shiftT(37);              // ')'
      for (;;)
      {
        this.lookahead1W(35);       // S^WS | '(:' | 'case'
        this.try_SwitchCaseStatement();
        this.lookahead1W(113);      // S^WS | '(:' | 'case' | 'default'
        if (this.l1 != 88)          // 'case'
        {
          break;
        }
      }
      this.shiftT(109);             // 'default'
      this.lookahead1W(70);         // S^WS | '(:' | 'return'
      this.shiftT(220);             // 'return'
      this.lookahead1W(269);        // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      this.try_Statement();
    }

    private parse_SwitchCaseStatement()
    {
      this.eventHandler.startNonterminal("SwitchCaseStatement", this.e0);
      for (;;)
      {
        this.shift(88);             // 'case'
        this.lookahead1W(266);      // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
        this.whitespace();
        this.parse_SwitchCaseOperand();
        if (this.l1 != 88)          // 'case'
        {
          break;
        }
      }
      this.shift(220);              // 'return'
      this.lookahead1W(269);        // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      this.whitespace();
      this.parse_Statement();
      this.eventHandler.endNonterminal("SwitchCaseStatement", this.e0);
    }

    private try_SwitchCaseStatement()
    {
      for (;;)
      {
        this.shiftT(88);            // 'case'
        this.lookahead1W(266);      // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
        this.try_SwitchCaseOperand();
        if (this.l1 != 88)          // 'case'
        {
          break;
        }
      }
      this.shiftT(220);             // 'return'
      this.lookahead1W(269);        // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      this.try_Statement();
    }

    private parse_TryCatchStatement()
    {
      this.eventHandler.startNonterminal("TryCatchStatement", this.e0);
      this.shift(250);              // 'try'
      this.lookahead1W(87);         // S^WS | '(:' | '{'
      this.whitespace();
      this.parse_BlockStatement();
      for (;;)
      {
        this.lookahead1W(36);       // S^WS | '(:' | 'catch'
        this.shift(91);             // 'catch'
        this.lookahead1W(256);      // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
        this.whitespace();
        this.parse_CatchErrorList();
        this.whitespace();
        this.parse_BlockStatement();
        this.lookahead1W(277);      // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | EOF | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' |
                                    // '..' | '/' | '//' | ';' | '<' | '<!--' | '<?' | '@' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|' | '}'
        switch (this.l1)
        {
        case 91:                    // 'catch'
          this.lookahead2W(278);    // Wildcard | EQName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' |
                                    // '+' | ',' | '-' | '/' | '//' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' |
                                    // '>>' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'contains' |
                                    // 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' |
                                    // 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '|' | '||' | '}'
          break;
        default:
          this.lk = this.l1;
        }
        if (this.lk == 38491        // 'catch' 'and'
         || this.lk == 45659        // 'catch' 'cast'
         || this.lk == 46171        // 'catch' 'castable'
         || this.lk == 60507        // 'catch' 'div'
         || this.lk == 65627        // 'catch' 'eq'
         || this.lk == 67163        // 'catch' 'except'
         || this.lk == 74843        // 'catch' 'ge'
         || this.lk == 76891        // 'catch' 'gt'
         || this.lk == 77403        // 'catch' 'idiv'
         || this.lk == 82011        // 'catch' 'instance'
         || this.lk == 83035        // 'catch' 'intersect'
         || this.lk == 84059        // 'catch' 'is'
         || this.lk == 88155        // 'catch' 'le'
         || this.lk == 91227        // 'catch' 'lt'
         || this.lk == 92251        // 'catch' 'mod'
         || this.lk == 95323        // 'catch' 'ne'
         || this.lk == 102491       // 'catch' 'or'
         || this.lk == 127067       // 'catch' 'to'
         || this.lk == 127579       // 'catch' 'treat'
         || this.lk == 130139)      // 'catch' 'union'
        {
          this.lk = this.memoized(8, this.e0);
          if (this.lk == 0)
          {
            var b0A = this.b0; var e0A = this.e0; var l1A = this.l1;
            var b1A = this.b1; var e1A = this.e1; var l2A = this.l2;
            var b2A = this.b2; var e2A = this.e2;
            try
            {
              this.lookahead1W(36); // S^WS | '(:' | 'catch'
              this.shiftT(91);      // 'catch'
              this.lookahead1W(256); // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                     // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                     // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                     // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                     // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                     // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                     // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                     // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                     // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                     // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                     // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                     // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                     // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                     // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                     // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                     // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                     // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                     // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                     // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                     // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                     // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                     // 'with' | 'xquery'
              this.try_CatchErrorList();
              this.try_BlockStatement();
              this.lk = -1;
            }
            catch (p1A)
            {
              this.lk = -2;
            }
            this.b0 = b0A; this.e0 = e0A; this.l1 = l1A; if (this.l1 == 0) {this.end = e0A;} else {
            this.b1 = b1A; this.e1 = e1A; this.l2 = l2A; if (this.l2 == 0) {this.end = e1A;} else {
            this.b2 = b2A; this.e2 = e2A; this.end = e2A; }}
            this.memoize(8, this.e0, this.lk);
          }
        }
        if (this.lk != -1
         && this.lk != 2651         // 'catch' Wildcard
         && this.lk != 3163         // 'catch' EQName^Token
         && this.lk != 35931        // 'catch' 'after'
         && this.lk != 36955        // 'catch' 'allowing'
         && this.lk != 37467        // 'catch' 'ancestor'
         && this.lk != 37979        // 'catch' 'ancestor-or-self'
         && this.lk != 39515        // 'catch' 'append'
         && this.lk != 40027        // 'catch' 'array'
         && this.lk != 40539        // 'catch' 'as'
         && this.lk != 41051        // 'catch' 'ascending'
         && this.lk != 41563        // 'catch' 'at'
         && this.lk != 42075        // 'catch' 'attribute'
         && this.lk != 42587        // 'catch' 'base-uri'
         && this.lk != 43099        // 'catch' 'before'
         && this.lk != 43611        // 'catch' 'boundary-space'
         && this.lk != 44123        // 'catch' 'break'
         && this.lk != 45147        // 'catch' 'case'
         && this.lk != 46683        // 'catch' 'catch'
         && this.lk != 47707        // 'catch' 'child'
         && this.lk != 48219        // 'catch' 'collation'
         && this.lk != 49243        // 'catch' 'comment'
         && this.lk != 49755        // 'catch' 'constraint'
         && this.lk != 50267        // 'catch' 'construction'
         && this.lk != 51803        // 'catch' 'context'
         && this.lk != 52315        // 'catch' 'continue'
         && this.lk != 52827        // 'catch' 'copy'
         && this.lk != 53339        // 'catch' 'copy-namespaces'
         && this.lk != 53851        // 'catch' 'count'
         && this.lk != 54363        // 'catch' 'decimal-format'
         && this.lk != 55387        // 'catch' 'declare'
         && this.lk != 55899        // 'catch' 'default'
         && this.lk != 56411        // 'catch' 'delete'
         && this.lk != 56923        // 'catch' 'descendant'
         && this.lk != 57435        // 'catch' 'descendant-or-self'
         && this.lk != 57947        // 'catch' 'descending'
         && this.lk != 61019        // 'catch' 'document'
         && this.lk != 61531        // 'catch' 'document-node'
         && this.lk != 62043        // 'catch' 'element'
         && this.lk != 62555        // 'catch' 'else'
         && this.lk != 63067        // 'catch' 'empty'
         && this.lk != 63579        // 'catch' 'empty-sequence'
         && this.lk != 64091        // 'catch' 'encoding'
         && this.lk != 64603        // 'catch' 'end'
         && this.lk != 66139        // 'catch' 'every'
         && this.lk != 67675        // 'catch' 'exit'
         && this.lk != 68187        // 'catch' 'external'
         && this.lk != 68699        // 'catch' 'first'
         && this.lk != 69211        // 'catch' 'following'
         && this.lk != 69723        // 'catch' 'following-sibling'
         && this.lk != 70235        // 'catch' 'for'
         && this.lk != 72283        // 'catch' 'ft-option'
         && this.lk != 74331        // 'catch' 'function'
         && this.lk != 75867        // 'catch' 'group'
         && this.lk != 77915        // 'catch' 'if'
         && this.lk != 78427        // 'catch' 'import'
         && this.lk != 78939        // 'catch' 'in'
         && this.lk != 79451        // 'catch' 'index'
         && this.lk != 81499        // 'catch' 'insert'
         && this.lk != 82523        // 'catch' 'integrity'
         && this.lk != 83547        // 'catch' 'into'
         && this.lk != 84571        // 'catch' 'item'
         && this.lk != 85083        // 'catch' 'json'
         && this.lk != 85595        // 'catch' 'json-item'
         && this.lk != 87131        // 'catch' 'last'
         && this.lk != 87643        // 'catch' 'lax'
         && this.lk != 89179        // 'catch' 'let'
         && this.lk != 90203        // 'catch' 'loop'
         && this.lk != 92763        // 'catch' 'modify'
         && this.lk != 93275        // 'catch' 'module'
         && this.lk != 94299        // 'catch' 'namespace'
         && this.lk != 94811        // 'catch' 'namespace-node'
         && this.lk != 97883        // 'catch' 'node'
         && this.lk != 98395        // 'catch' 'nodes'
         && this.lk != 99419        // 'catch' 'object'
         && this.lk != 101467       // 'catch' 'only'
         && this.lk != 101979       // 'catch' 'option'
         && this.lk != 103003       // 'catch' 'order'
         && this.lk != 103515       // 'catch' 'ordered'
         && this.lk != 104027       // 'catch' 'ordering'
         && this.lk != 105563       // 'catch' 'parent'
         && this.lk != 108635       // 'catch' 'preceding'
         && this.lk != 109147       // 'catch' 'preceding-sibling'
         && this.lk != 110683       // 'catch' 'processing-instruction'
         && this.lk != 111707       // 'catch' 'rename'
         && this.lk != 112219       // 'catch' 'replace'
         && this.lk != 112731       // 'catch' 'return'
         && this.lk != 113243       // 'catch' 'returning'
         && this.lk != 113755       // 'catch' 'revalidation'
         && this.lk != 114779       // 'catch' 'satisfies'
         && this.lk != 115291       // 'catch' 'schema'
         && this.lk != 115803       // 'catch' 'schema-attribute'
         && this.lk != 116315       // 'catch' 'schema-element'
         && this.lk != 116827       // 'catch' 'score'
         && this.lk != 117339       // 'catch' 'self'
         && this.lk != 119899       // 'catch' 'sliding'
         && this.lk != 120411       // 'catch' 'some'
         && this.lk != 120923       // 'catch' 'stable'
         && this.lk != 121435       // 'catch' 'start'
         && this.lk != 122971       // 'catch' 'strict'
         && this.lk != 123995       // 'catch' 'structured-item'
         && this.lk != 124507       // 'catch' 'switch'
         && this.lk != 125019       // 'catch' 'text'
         && this.lk != 128091       // 'catch' 'try'
         && this.lk != 128603       // 'catch' 'tumbling'
         && this.lk != 129115       // 'catch' 'type'
         && this.lk != 129627       // 'catch' 'typeswitch'
         && this.lk != 131163       // 'catch' 'unordered'
         && this.lk != 131675       // 'catch' 'updating'
         && this.lk != 133211       // 'catch' 'validate'
         && this.lk != 133723       // 'catch' 'value'
         && this.lk != 134235       // 'catch' 'variable'
         && this.lk != 134747       // 'catch' 'version'
         && this.lk != 136283       // 'catch' 'where'
         && this.lk != 136795       // 'catch' 'while'
         && this.lk != 138331       // 'catch' 'with'
         && this.lk != 140379)      // 'catch' 'xquery'
        {
          break;
        }
      }
      this.eventHandler.endNonterminal("TryCatchStatement", this.e0);
    }

    private try_TryCatchStatement()
    {
      this.shiftT(250);             // 'try'
      this.lookahead1W(87);         // S^WS | '(:' | '{'
      this.try_BlockStatement();
      this.lookahead1W(36);         // S^WS | '(:' | 'catch'
      this.shiftT(91);              // 'catch'
      this.lookahead1W(256);        // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
      this.try_CatchErrorList();
      this.try_BlockStatement();
      for (;;)
      {
        this.lookahead1W(277);      // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | EOF | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' |
                                    // '..' | '/' | '//' | ';' | '<' | '<!--' | '<?' | '@' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|' | '}'
        switch (this.l1)
        {
        case 91:                    // 'catch'
          this.lookahead2W(278);    // Wildcard | EQName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' |
                                    // '+' | ',' | '-' | '/' | '//' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' |
                                    // '>>' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'contains' |
                                    // 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' |
                                    // 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '|' | '||' | '}'
          break;
        default:
          this.lk = this.l1;
        }
        if (this.lk == 38491        // 'catch' 'and'
         || this.lk == 45659        // 'catch' 'cast'
         || this.lk == 46171        // 'catch' 'castable'
         || this.lk == 60507        // 'catch' 'div'
         || this.lk == 65627        // 'catch' 'eq'
         || this.lk == 67163        // 'catch' 'except'
         || this.lk == 74843        // 'catch' 'ge'
         || this.lk == 76891        // 'catch' 'gt'
         || this.lk == 77403        // 'catch' 'idiv'
         || this.lk == 82011        // 'catch' 'instance'
         || this.lk == 83035        // 'catch' 'intersect'
         || this.lk == 84059        // 'catch' 'is'
         || this.lk == 88155        // 'catch' 'le'
         || this.lk == 91227        // 'catch' 'lt'
         || this.lk == 92251        // 'catch' 'mod'
         || this.lk == 95323        // 'catch' 'ne'
         || this.lk == 102491       // 'catch' 'or'
         || this.lk == 127067       // 'catch' 'to'
         || this.lk == 127579       // 'catch' 'treat'
         || this.lk == 130139)      // 'catch' 'union'
        {
          this.lk = this.memoized(8, this.e0);
          if (this.lk == 0)
          {
            var b0A = this.b0; var e0A = this.e0; var l1A = this.l1;
            var b1A = this.b1; var e1A = this.e1; var l2A = this.l2;
            var b2A = this.b2; var e2A = this.e2;
            try
            {
              this.lookahead1W(36); // S^WS | '(:' | 'catch'
              this.shiftT(91);      // 'catch'
              this.lookahead1W(256); // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                     // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                     // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                     // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                     // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                     // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                     // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                     // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                     // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                     // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                     // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                     // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                     // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                     // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                     // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                     // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                     // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                     // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                     // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                     // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                     // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                     // 'with' | 'xquery'
              this.try_CatchErrorList();
              this.try_BlockStatement();
              this.memoize(8, e0A, -1);
              continue;
            }
            catch (p1A)
            {
              this.b0 = b0A; this.e0 = e0A; this.l1 = l1A; if (this.l1 == 0) {this.end = e0A;} else {
              this.b1 = b1A; this.e1 = e1A; this.l2 = l2A; if (this.l2 == 0) {this.end = e1A;} else {
              this.b2 = b2A; this.e2 = e2A; this.end = e2A; }}
              this.memoize(8, e0A, -2);
              break;
            }
          }
        }
        if (this.lk != -1
         && this.lk != 2651         // 'catch' Wildcard
         && this.lk != 3163         // 'catch' EQName^Token
         && this.lk != 35931        // 'catch' 'after'
         && this.lk != 36955        // 'catch' 'allowing'
         && this.lk != 37467        // 'catch' 'ancestor'
         && this.lk != 37979        // 'catch' 'ancestor-or-self'
         && this.lk != 39515        // 'catch' 'append'
         && this.lk != 40027        // 'catch' 'array'
         && this.lk != 40539        // 'catch' 'as'
         && this.lk != 41051        // 'catch' 'ascending'
         && this.lk != 41563        // 'catch' 'at'
         && this.lk != 42075        // 'catch' 'attribute'
         && this.lk != 42587        // 'catch' 'base-uri'
         && this.lk != 43099        // 'catch' 'before'
         && this.lk != 43611        // 'catch' 'boundary-space'
         && this.lk != 44123        // 'catch' 'break'
         && this.lk != 45147        // 'catch' 'case'
         && this.lk != 46683        // 'catch' 'catch'
         && this.lk != 47707        // 'catch' 'child'
         && this.lk != 48219        // 'catch' 'collation'
         && this.lk != 49243        // 'catch' 'comment'
         && this.lk != 49755        // 'catch' 'constraint'
         && this.lk != 50267        // 'catch' 'construction'
         && this.lk != 51803        // 'catch' 'context'
         && this.lk != 52315        // 'catch' 'continue'
         && this.lk != 52827        // 'catch' 'copy'
         && this.lk != 53339        // 'catch' 'copy-namespaces'
         && this.lk != 53851        // 'catch' 'count'
         && this.lk != 54363        // 'catch' 'decimal-format'
         && this.lk != 55387        // 'catch' 'declare'
         && this.lk != 55899        // 'catch' 'default'
         && this.lk != 56411        // 'catch' 'delete'
         && this.lk != 56923        // 'catch' 'descendant'
         && this.lk != 57435        // 'catch' 'descendant-or-self'
         && this.lk != 57947        // 'catch' 'descending'
         && this.lk != 61019        // 'catch' 'document'
         && this.lk != 61531        // 'catch' 'document-node'
         && this.lk != 62043        // 'catch' 'element'
         && this.lk != 62555        // 'catch' 'else'
         && this.lk != 63067        // 'catch' 'empty'
         && this.lk != 63579        // 'catch' 'empty-sequence'
         && this.lk != 64091        // 'catch' 'encoding'
         && this.lk != 64603        // 'catch' 'end'
         && this.lk != 66139        // 'catch' 'every'
         && this.lk != 67675        // 'catch' 'exit'
         && this.lk != 68187        // 'catch' 'external'
         && this.lk != 68699        // 'catch' 'first'
         && this.lk != 69211        // 'catch' 'following'
         && this.lk != 69723        // 'catch' 'following-sibling'
         && this.lk != 70235        // 'catch' 'for'
         && this.lk != 72283        // 'catch' 'ft-option'
         && this.lk != 74331        // 'catch' 'function'
         && this.lk != 75867        // 'catch' 'group'
         && this.lk != 77915        // 'catch' 'if'
         && this.lk != 78427        // 'catch' 'import'
         && this.lk != 78939        // 'catch' 'in'
         && this.lk != 79451        // 'catch' 'index'
         && this.lk != 81499        // 'catch' 'insert'
         && this.lk != 82523        // 'catch' 'integrity'
         && this.lk != 83547        // 'catch' 'into'
         && this.lk != 84571        // 'catch' 'item'
         && this.lk != 85083        // 'catch' 'json'
         && this.lk != 85595        // 'catch' 'json-item'
         && this.lk != 87131        // 'catch' 'last'
         && this.lk != 87643        // 'catch' 'lax'
         && this.lk != 89179        // 'catch' 'let'
         && this.lk != 90203        // 'catch' 'loop'
         && this.lk != 92763        // 'catch' 'modify'
         && this.lk != 93275        // 'catch' 'module'
         && this.lk != 94299        // 'catch' 'namespace'
         && this.lk != 94811        // 'catch' 'namespace-node'
         && this.lk != 97883        // 'catch' 'node'
         && this.lk != 98395        // 'catch' 'nodes'
         && this.lk != 99419        // 'catch' 'object'
         && this.lk != 101467       // 'catch' 'only'
         && this.lk != 101979       // 'catch' 'option'
         && this.lk != 103003       // 'catch' 'order'
         && this.lk != 103515       // 'catch' 'ordered'
         && this.lk != 104027       // 'catch' 'ordering'
         && this.lk != 105563       // 'catch' 'parent'
         && this.lk != 108635       // 'catch' 'preceding'
         && this.lk != 109147       // 'catch' 'preceding-sibling'
         && this.lk != 110683       // 'catch' 'processing-instruction'
         && this.lk != 111707       // 'catch' 'rename'
         && this.lk != 112219       // 'catch' 'replace'
         && this.lk != 112731       // 'catch' 'return'
         && this.lk != 113243       // 'catch' 'returning'
         && this.lk != 113755       // 'catch' 'revalidation'
         && this.lk != 114779       // 'catch' 'satisfies'
         && this.lk != 115291       // 'catch' 'schema'
         && this.lk != 115803       // 'catch' 'schema-attribute'
         && this.lk != 116315       // 'catch' 'schema-element'
         && this.lk != 116827       // 'catch' 'score'
         && this.lk != 117339       // 'catch' 'self'
         && this.lk != 119899       // 'catch' 'sliding'
         && this.lk != 120411       // 'catch' 'some'
         && this.lk != 120923       // 'catch' 'stable'
         && this.lk != 121435       // 'catch' 'start'
         && this.lk != 122971       // 'catch' 'strict'
         && this.lk != 123995       // 'catch' 'structured-item'
         && this.lk != 124507       // 'catch' 'switch'
         && this.lk != 125019       // 'catch' 'text'
         && this.lk != 128091       // 'catch' 'try'
         && this.lk != 128603       // 'catch' 'tumbling'
         && this.lk != 129115       // 'catch' 'type'
         && this.lk != 129627       // 'catch' 'typeswitch'
         && this.lk != 131163       // 'catch' 'unordered'
         && this.lk != 131675       // 'catch' 'updating'
         && this.lk != 133211       // 'catch' 'validate'
         && this.lk != 133723       // 'catch' 'value'
         && this.lk != 134235       // 'catch' 'variable'
         && this.lk != 134747       // 'catch' 'version'
         && this.lk != 136283       // 'catch' 'where'
         && this.lk != 136795       // 'catch' 'while'
         && this.lk != 138331       // 'catch' 'with'
         && this.lk != 140379)      // 'catch' 'xquery'
        {
          break;
        }
        this.lookahead1W(36);       // S^WS | '(:' | 'catch'
        this.shiftT(91);            // 'catch'
        this.lookahead1W(256);      // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
        this.try_CatchErrorList();
        this.try_BlockStatement();
      }
    }

    private parse_TypeswitchStatement()
    {
      this.eventHandler.startNonterminal("TypeswitchStatement", this.e0);
      this.shift(253);              // 'typeswitch'
      this.lookahead1W(22);         // S^WS | '(' | '(:'
      this.shift(34);               // '('
      this.lookahead1W(266);        // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      this.whitespace();
      this.parse_Expr();
      this.shift(37);               // ')'
      for (;;)
      {
        this.lookahead1W(35);       // S^WS | '(:' | 'case'
        this.whitespace();
        this.parse_CaseStatement();
        this.lookahead1W(113);      // S^WS | '(:' | 'case' | 'default'
        if (this.l1 != 88)          // 'case'
        {
          break;
        }
      }
      this.shift(109);              // 'default'
      this.lookahead1W(95);         // S^WS | '$' | '(:' | 'return'
      if (this.l1 == 31)            // '$'
      {
        this.shift(31);             // '$'
        this.lookahead1W(254);      // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
        this.whitespace();
        this.parse_VarName();
      }
      this.lookahead1W(70);         // S^WS | '(:' | 'return'
      this.shift(220);              // 'return'
      this.lookahead1W(269);        // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      this.whitespace();
      this.parse_Statement();
      this.eventHandler.endNonterminal("TypeswitchStatement", this.e0);
    }

    private try_TypeswitchStatement()
    {
      this.shiftT(253);             // 'typeswitch'
      this.lookahead1W(22);         // S^WS | '(' | '(:'
      this.shiftT(34);              // '('
      this.lookahead1W(266);        // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      this.try_Expr();
      this.shiftT(37);              // ')'
      for (;;)
      {
        this.lookahead1W(35);       // S^WS | '(:' | 'case'
        this.try_CaseStatement();
        this.lookahead1W(113);      // S^WS | '(:' | 'case' | 'default'
        if (this.l1 != 88)          // 'case'
        {
          break;
        }
      }
      this.shiftT(109);             // 'default'
      this.lookahead1W(95);         // S^WS | '$' | '(:' | 'return'
      if (this.l1 == 31)            // '$'
      {
        this.shiftT(31);            // '$'
        this.lookahead1W(254);      // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
        this.try_VarName();
      }
      this.lookahead1W(70);         // S^WS | '(:' | 'return'
      this.shiftT(220);             // 'return'
      this.lookahead1W(269);        // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      this.try_Statement();
    }

    private parse_CaseStatement()
    {
      this.eventHandler.startNonterminal("CaseStatement", this.e0);
      this.shift(88);               // 'case'
      this.lookahead1W(261);        // EQName^Token | S^WS | '$' | '%' | '(' | '(:' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
      if (this.l1 == 31)            // '$'
      {
        this.shift(31);             // '$'
        this.lookahead1W(254);      // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
        this.whitespace();
        this.parse_VarName();
        this.lookahead1W(30);       // S^WS | '(:' | 'as'
        this.shift(79);             // 'as'
      }
      this.lookahead1W(259);        // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
      this.whitespace();
      this.parse_SequenceType();
      this.lookahead1W(70);         // S^WS | '(:' | 'return'
      this.shift(220);              // 'return'
      this.lookahead1W(269);        // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      this.whitespace();
      this.parse_Statement();
      this.eventHandler.endNonterminal("CaseStatement", this.e0);
    }

    private try_CaseStatement()
    {
      this.shiftT(88);              // 'case'
      this.lookahead1W(261);        // EQName^Token | S^WS | '$' | '%' | '(' | '(:' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
      if (this.l1 == 31)            // '$'
      {
        this.shiftT(31);            // '$'
        this.lookahead1W(254);      // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
        this.try_VarName();
        this.lookahead1W(30);       // S^WS | '(:' | 'as'
        this.shiftT(79);            // 'as'
      }
      this.lookahead1W(259);        // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
      this.try_SequenceType();
      this.lookahead1W(70);         // S^WS | '(:' | 'return'
      this.shiftT(220);             // 'return'
      this.lookahead1W(269);        // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      this.try_Statement();
    }

    private parse_VarDeclStatement()
    {
      this.eventHandler.startNonterminal("VarDeclStatement", this.e0);
      for (;;)
      {
        this.lookahead1W(98);       // S^WS | '%' | '(:' | 'variable'
        if (this.l1 != 32)          // '%'
        {
          break;
        }
        this.whitespace();
        this.parse_Annotation();
      }
      this.shift(262);              // 'variable'
      this.lookahead1W(21);         // S^WS | '$' | '(:'
      this.shift(31);               // '$'
      this.lookahead1W(254);        // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
      this.whitespace();
      this.parse_VarName();
      this.lookahead1W(157);        // S^WS | '(:' | ',' | ':=' | ';' | 'as'
      if (this.l1 == 79)            // 'as'
      {
        this.whitespace();
        this.parse_TypeDeclaration();
      }
      this.lookahead1W(145);        // S^WS | '(:' | ',' | ':=' | ';'
      if (this.l1 == 52)            // ':='
      {
        this.shift(52);             // ':='
        this.lookahead1W(266);      // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
        this.whitespace();
        this.parse_ExprSingle();
      }
      for (;;)
      {
        if (this.l1 != 41)          // ','
        {
          break;
        }
        this.shift(41);             // ','
        this.lookahead1W(21);       // S^WS | '$' | '(:'
        this.shift(31);             // '$'
        this.lookahead1W(254);      // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
        this.whitespace();
        this.parse_VarName();
        this.lookahead1W(157);      // S^WS | '(:' | ',' | ':=' | ';' | 'as'
        if (this.l1 == 79)          // 'as'
        {
          this.whitespace();
          this.parse_TypeDeclaration();
        }
        this.lookahead1W(145);      // S^WS | '(:' | ',' | ':=' | ';'
        if (this.l1 == 52)          // ':='
        {
          this.shift(52);           // ':='
          this.lookahead1W(266);    // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
          this.whitespace();
          this.parse_ExprSingle();
        }
      }
      this.shift(53);               // ';'
      this.eventHandler.endNonterminal("VarDeclStatement", this.e0);
    }

    private try_VarDeclStatement()
    {
      for (;;)
      {
        this.lookahead1W(98);       // S^WS | '%' | '(:' | 'variable'
        if (this.l1 != 32)          // '%'
        {
          break;
        }
        this.try_Annotation();
      }
      this.shiftT(262);             // 'variable'
      this.lookahead1W(21);         // S^WS | '$' | '(:'
      this.shiftT(31);              // '$'
      this.lookahead1W(254);        // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
      this.try_VarName();
      this.lookahead1W(157);        // S^WS | '(:' | ',' | ':=' | ';' | 'as'
      if (this.l1 == 79)            // 'as'
      {
        this.try_TypeDeclaration();
      }
      this.lookahead1W(145);        // S^WS | '(:' | ',' | ':=' | ';'
      if (this.l1 == 52)            // ':='
      {
        this.shiftT(52);            // ':='
        this.lookahead1W(266);      // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
        this.try_ExprSingle();
      }
      for (;;)
      {
        if (this.l1 != 41)          // ','
        {
          break;
        }
        this.shiftT(41);            // ','
        this.lookahead1W(21);       // S^WS | '$' | '(:'
        this.shiftT(31);            // '$'
        this.lookahead1W(254);      // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
        this.try_VarName();
        this.lookahead1W(157);      // S^WS | '(:' | ',' | ':=' | ';' | 'as'
        if (this.l1 == 79)          // 'as'
        {
          this.try_TypeDeclaration();
        }
        this.lookahead1W(145);      // S^WS | '(:' | ',' | ':=' | ';'
        if (this.l1 == 52)          // ':='
        {
          this.shiftT(52);          // ':='
          this.lookahead1W(266);    // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
          this.try_ExprSingle();
        }
      }
      this.shiftT(53);              // ';'
    }

    private parse_WhileStatement()
    {
      this.eventHandler.startNonterminal("WhileStatement", this.e0);
      this.shift(267);              // 'while'
      this.lookahead1W(22);         // S^WS | '(' | '(:'
      this.shift(34);               // '('
      this.lookahead1W(266);        // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      this.whitespace();
      this.parse_Expr();
      this.shift(37);               // ')'
      this.lookahead1W(269);        // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      this.whitespace();
      this.parse_Statement();
      this.eventHandler.endNonterminal("WhileStatement", this.e0);
    }

    private try_WhileStatement()
    {
      this.shiftT(267);             // 'while'
      this.lookahead1W(22);         // S^WS | '(' | '(:'
      this.shiftT(34);              // '('
      this.lookahead1W(266);        // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      this.try_Expr();
      this.shiftT(37);              // ')'
      this.lookahead1W(269);        // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      this.try_Statement();
    }

    private parse_VoidStatement()
    {
      this.eventHandler.startNonterminal("VoidStatement", this.e0);
      this.shift(53);               // ';'
      this.eventHandler.endNonterminal("VoidStatement", this.e0);
    }

    private try_VoidStatement()
    {
      this.shiftT(53);              // ';'
    }

    private parse_ExprSingle()
    {
      this.eventHandler.startNonterminal("ExprSingle", this.e0);
      switch (this.l1)
      {
      case 137:                     // 'for'
        this.lookahead2W(235);      // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' |
                                    // '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                    // 'sliding' | 'stable' | 'start' | 'to' | 'treat' | 'tumbling' | 'union' |
                                    // 'where' | 'with' | '|' | '||' | '|}' | '}'
        break;
      case 174:                     // 'let'
        this.lookahead2W(232);      // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' |
                                    // '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                    // 'score' | 'stable' | 'start' | 'to' | 'treat' | 'union' | 'where' | 'with' |
                                    // '|' | '||' | '|}' | '}'
        break;
      case 250:                     // 'try'
        this.lookahead2W(231);      // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                    // 'stable' | 'start' | 'to' | 'treat' | 'union' | 'where' | 'with' | '{' | '|' |
                                    // '||' | '|}' | '}'
        break;
      case 152:                     // 'if'
      case 243:                     // 'switch'
      case 253:                     // 'typeswitch'
        this.lookahead2W(228);      // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                    // 'stable' | 'start' | 'to' | 'treat' | 'union' | 'where' | 'with' | '|' | '||' |
                                    // '|}' | '}'
        break;
      default:
        this.lk = this.l1;
      }
      switch (this.lk)
      {
      case 16009:                   // 'for' '$'
      case 16046:                   // 'let' '$'
      case 116910:                  // 'let' 'score'
      case 119945:                  // 'for' 'sliding'
      case 128649:                  // 'for' 'tumbling'
        this.parse_FLWORExpr();
        break;
      case 17560:                   // 'if' '('
        this.parse_IfExpr();
        break;
      case 17651:                   // 'switch' '('
        this.parse_SwitchExpr();
        break;
      case 141562:                  // 'try' '{'
        this.parse_TryCatchExpr();
        break;
      case 17661:                   // 'typeswitch' '('
        this.parse_TypeswitchExpr();
        break;
      default:
        this.parse_ExprSimple();
      }
      this.eventHandler.endNonterminal("ExprSingle", this.e0);
    }

    private try_ExprSingle()
    {
      switch (this.l1)
      {
      case 137:                     // 'for'
        this.lookahead2W(235);      // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' |
                                    // '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                    // 'sliding' | 'stable' | 'start' | 'to' | 'treat' | 'tumbling' | 'union' |
                                    // 'where' | 'with' | '|' | '||' | '|}' | '}'
        break;
      case 174:                     // 'let'
        this.lookahead2W(232);      // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' |
                                    // '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                    // 'score' | 'stable' | 'start' | 'to' | 'treat' | 'union' | 'where' | 'with' |
                                    // '|' | '||' | '|}' | '}'
        break;
      case 250:                     // 'try'
        this.lookahead2W(231);      // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                    // 'stable' | 'start' | 'to' | 'treat' | 'union' | 'where' | 'with' | '{' | '|' |
                                    // '||' | '|}' | '}'
        break;
      case 152:                     // 'if'
      case 243:                     // 'switch'
      case 253:                     // 'typeswitch'
        this.lookahead2W(228);      // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                    // 'stable' | 'start' | 'to' | 'treat' | 'union' | 'where' | 'with' | '|' | '||' |
                                    // '|}' | '}'
        break;
      default:
        this.lk = this.l1;
      }
      switch (this.lk)
      {
      case 16009:                   // 'for' '$'
      case 16046:                   // 'let' '$'
      case 116910:                  // 'let' 'score'
      case 119945:                  // 'for' 'sliding'
      case 128649:                  // 'for' 'tumbling'
        this.try_FLWORExpr();
        break;
      case 17560:                   // 'if' '('
        this.try_IfExpr();
        break;
      case 17651:                   // 'switch' '('
        this.try_SwitchExpr();
        break;
      case 141562:                  // 'try' '{'
        this.try_TryCatchExpr();
        break;
      case 17661:                   // 'typeswitch' '('
        this.try_TypeswitchExpr();
        break;
      default:
        this.try_ExprSimple();
      }
    }

    private parse_ExprSimple()
    {
      this.eventHandler.startNonterminal("ExprSimple", this.e0);
      switch (this.l1)
      {
      case 77:                      // 'append'
        this.lookahead2W(230);      // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'json' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'return' |
                                    // 'satisfies' | 'stable' | 'start' | 'to' | 'treat' | 'union' | 'where' | 'with' |
                                    // '|' | '||' | '|}' | '}'
        break;
      case 218:                     // 'rename'
        this.lookahead2W(233);      // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'json' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'treat' | 'union' |
                                    // 'where' | 'with' | '|' | '||' | '|}' | '}'
        break;
      case 219:                     // 'replace'
        this.lookahead2W(234);      // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'return' |
                                    // 'satisfies' | 'stable' | 'start' | 'to' | 'treat' | 'union' | 'value' | 'where' |
                                    // 'with' | '|' | '||' | '|}' | '}'
        break;
      case 110:                     // 'delete'
      case 159:                     // 'insert'
        this.lookahead2W(236);      // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'json' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'node' | 'nodes' | 'only' | 'or' |
                                    // 'order' | 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | '|' | '||' | '|}' | '}'
        break;
      case 103:                     // 'copy'
      case 129:                     // 'every'
      case 235:                     // 'some'
        this.lookahead2W(229);      // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' |
                                    // '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                    // 'stable' | 'start' | 'to' | 'treat' | 'union' | 'where' | 'with' | '|' | '||' |
                                    // '|}' | '}'
        break;
      default:
        this.lk = this.l1;
      }
      if (this.lk == 133851)        // 'replace' 'value'
      {
        this.lk = this.memoized(9, this.e0);
        if (this.lk == 0)
        {
          var b0A = this.b0; var e0A = this.e0; var l1A = this.l1;
          var b1A = this.b1; var e1A = this.e1; var l2A = this.l2;
          var b2A = this.b2; var e2A = this.e2;
          try
          {
            this.try_ReplaceExpr();
            this.lk = -6;
          }
          catch (p6A)
          {
            this.lk = -11;
          }
          this.b0 = b0A; this.e0 = e0A; this.l1 = l1A; if (this.l1 == 0) {this.end = e0A;} else {
          this.b1 = b1A; this.e1 = e1A; this.l2 = l2A; if (this.l2 == 0) {this.end = e1A;} else {
          this.b2 = b2A; this.e2 = e2A; this.end = e2A; }}
          this.memoize(9, this.e0, this.lk);
        }
      }
      switch (this.lk)
      {
      case 16001:                   // 'every' '$'
      case 16107:                   // 'some' '$'
        this.parse_QuantifiedExpr();
        break;
      case 97951:                   // 'insert' 'node'
      case 98463:                   // 'insert' 'nodes'
        this.parse_InsertExpr();
        break;
      case 97902:                   // 'delete' 'node'
      case 98414:                   // 'delete' 'nodes'
        this.parse_DeleteExpr();
        break;
      case 98010:                   // 'rename' 'node'
        this.parse_RenameExpr();
        break;
      case -6:
      case 98011:                   // 'replace' 'node'
        this.parse_ReplaceExpr();
        break;
      case 15975:                   // 'copy' '$'
        this.parse_TransformExpr();
        break;
      case 85102:                   // 'delete' 'json'
        this.parse_JSONDeleteExpr();
        break;
      case 85151:                   // 'insert' 'json'
        this.parse_JSONInsertExpr();
        break;
      case 85210:                   // 'rename' 'json'
        this.parse_JSONRenameExpr();
        break;
      case -11:
        this.parse_JSONReplaceExpr();
        break;
      case 85069:                   // 'append' 'json'
        this.parse_JSONAppendExpr();
        break;
      default:
        this.parse_OrExpr();
      }
      this.eventHandler.endNonterminal("ExprSimple", this.e0);
    }

    private try_ExprSimple()
    {
      switch (this.l1)
      {
      case 77:                      // 'append'
        this.lookahead2W(230);      // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'json' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'return' |
                                    // 'satisfies' | 'stable' | 'start' | 'to' | 'treat' | 'union' | 'where' | 'with' |
                                    // '|' | '||' | '|}' | '}'
        break;
      case 218:                     // 'rename'
        this.lookahead2W(233);      // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'json' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'treat' | 'union' |
                                    // 'where' | 'with' | '|' | '||' | '|}' | '}'
        break;
      case 219:                     // 'replace'
        this.lookahead2W(234);      // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'return' |
                                    // 'satisfies' | 'stable' | 'start' | 'to' | 'treat' | 'union' | 'value' | 'where' |
                                    // 'with' | '|' | '||' | '|}' | '}'
        break;
      case 110:                     // 'delete'
      case 159:                     // 'insert'
        this.lookahead2W(236);      // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'json' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'node' | 'nodes' | 'only' | 'or' |
                                    // 'order' | 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | '|' | '||' | '|}' | '}'
        break;
      case 103:                     // 'copy'
      case 129:                     // 'every'
      case 235:                     // 'some'
        this.lookahead2W(229);      // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' |
                                    // '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                    // 'stable' | 'start' | 'to' | 'treat' | 'union' | 'where' | 'with' | '|' | '||' |
                                    // '|}' | '}'
        break;
      default:
        this.lk = this.l1;
      }
      if (this.lk == 133851)        // 'replace' 'value'
      {
        this.lk = this.memoized(9, this.e0);
        if (this.lk == 0)
        {
          var b0A = this.b0; var e0A = this.e0; var l1A = this.l1;
          var b1A = this.b1; var e1A = this.e1; var l2A = this.l2;
          var b2A = this.b2; var e2A = this.e2;
          try
          {
            this.try_ReplaceExpr();
            this.memoize(9, e0A, -6);
            this.lk = -13;
          }
          catch (p6A)
          {
            this.lk = -11;
            this.b0 = b0A; this.e0 = e0A; this.l1 = l1A; if (this.l1 == 0) {this.end = e0A;} else {
            this.b1 = b1A; this.e1 = e1A; this.l2 = l2A; if (this.l2 == 0) {this.end = e1A;} else {
            this.b2 = b2A; this.e2 = e2A; this.end = e2A; }}
            this.memoize(9, e0A, -11);
          }
        }
      }
      switch (this.lk)
      {
      case 16001:                   // 'every' '$'
      case 16107:                   // 'some' '$'
        this.try_QuantifiedExpr();
        break;
      case 97951:                   // 'insert' 'node'
      case 98463:                   // 'insert' 'nodes'
        this.try_InsertExpr();
        break;
      case 97902:                   // 'delete' 'node'
      case 98414:                   // 'delete' 'nodes'
        this.try_DeleteExpr();
        break;
      case 98010:                   // 'rename' 'node'
        this.try_RenameExpr();
        break;
      case -6:
      case 98011:                   // 'replace' 'node'
        this.try_ReplaceExpr();
        break;
      case 15975:                   // 'copy' '$'
        this.try_TransformExpr();
        break;
      case 85102:                   // 'delete' 'json'
        this.try_JSONDeleteExpr();
        break;
      case 85151:                   // 'insert' 'json'
        this.try_JSONInsertExpr();
        break;
      case 85210:                   // 'rename' 'json'
        this.try_JSONRenameExpr();
        break;
      case -11:
        this.try_JSONReplaceExpr();
        break;
      case 85069:                   // 'append' 'json'
        this.try_JSONAppendExpr();
        break;
      case -13:
        break;
      default:
        this.try_OrExpr();
      }
    }

    private parse_JSONDeleteExpr()
    {
      this.eventHandler.startNonterminal("JSONDeleteExpr", this.e0);
      this.shift(110);              // 'delete'
      this.lookahead1W(56);         // S^WS | '(:' | 'json'
      this.shift(166);              // 'json'
      this.lookahead1W(263);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(:' | '.' | '<' | '<!--' | '<?' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
      this.whitespace();
      this.parse_PostfixExpr();
      this.eventHandler.endNonterminal("JSONDeleteExpr", this.e0);
    }

    private try_JSONDeleteExpr()
    {
      this.shiftT(110);             // 'delete'
      this.lookahead1W(56);         // S^WS | '(:' | 'json'
      this.shiftT(166);             // 'json'
      this.lookahead1W(263);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(:' | '.' | '<' | '<!--' | '<?' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
      this.try_PostfixExpr();
    }

    private parse_JSONInsertExpr()
    {
      this.eventHandler.startNonterminal("JSONInsertExpr", this.e0);
      switch (this.l1)
      {
      case 159:                     // 'insert'
        this.lookahead2W(56);       // S^WS | '(:' | 'json'
        break;
      default:
        this.lk = this.l1;
      }
      this.lk = this.memoized(10, this.e0);
      if (this.lk == 0)
      {
        var b0A = this.b0; var e0A = this.e0; var l1A = this.l1;
        var b1A = this.b1; var e1A = this.e1; var l2A = this.l2;
        var b2A = this.b2; var e2A = this.e2;
        try
        {
          this.shiftT(159);         // 'insert'
          this.lookahead1W(56);     // S^WS | '(:' | 'json'
          this.shiftT(166);         // 'json'
          this.lookahead1W(266);    // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
          this.try_ExprSingle();
          this.shiftT(163);         // 'into'
          this.lookahead1W(266);    // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
          this.try_ExprSingle();
          switch (this.l1)
          {
          case 81:                  // 'at'
            this.lookahead2W(69);   // S^WS | '(:' | 'position'
            break;
          default:
            this.lk = this.l1;
          }
          if (this.lk == 108113)    // 'at' 'position'
          {
            this.lk = this.memoized(11, this.e0);
            if (this.lk == 0)
            {
              var b0B = this.b0; var e0B = this.e0; var l1B = this.l1;
              var b1B = this.b1; var e1B = this.e1; var l2B = this.l2;
              var b2B = this.b2; var e2B = this.e2;
              try
              {
                this.shiftT(81);    // 'at'
                this.lookahead1W(69); // S^WS | '(:' | 'position'
                this.shiftT(211);   // 'position'
                this.lookahead1W(266); // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                       // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' |
                                       // '..' | '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                       // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                       // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                       // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                       // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                       // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                       // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                       // 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                       // 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' |
                                       // 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                       // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                       // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                       // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' |
                                       // 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                       // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                       // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                       // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                       // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' |
                                       // 'schema-element' | 'score' | 'self' | 'sliding' | 'some' | 'stable' |
                                       // 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' |
                                       // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                       // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' |
                                       // 'while' | 'with' | 'xquery' | '{' | '{|'
                this.try_ExprSingle();
                this.memoize(11, e0B, -1);
              }
              catch (p1B)
              {
                this.b0 = b0B; this.e0 = e0B; this.l1 = l1B; if (this.l1 == 0) {this.end = e0B;} else {
                this.b1 = b1B; this.e1 = e1B; this.l2 = l2B; if (this.l2 == 0) {this.end = e1B;} else {
                this.b2 = b2B; this.e2 = e2B; this.end = e2B; }}
                this.memoize(11, e0B, -2);
              }
              this.lk = -2;
            }
          }
          if (this.lk == -1)
          {
            this.shiftT(81);        // 'at'
            this.lookahead1W(69);   // S^WS | '(:' | 'position'
            this.shiftT(211);       // 'position'
            this.lookahead1W(266);  // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
            this.try_ExprSingle();
          }
          this.lk = -1;
        }
        catch (p1A)
        {
          this.lk = -2;
        }
        this.b0 = b0A; this.e0 = e0A; this.l1 = l1A; if (this.l1 == 0) {this.end = e0A;} else {
        this.b1 = b1A; this.e1 = e1A; this.l2 = l2A; if (this.l2 == 0) {this.end = e1A;} else {
        this.b2 = b2A; this.e2 = e2A; this.end = e2A; }}
        this.memoize(10, this.e0, this.lk);
      }
      switch (this.lk)
      {
      case -1:
        this.shift(159);            // 'insert'
        this.lookahead1W(56);       // S^WS | '(:' | 'json'
        this.shift(166);            // 'json'
        this.lookahead1W(266);      // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
        this.whitespace();
        this.parse_ExprSingle();
        this.shift(163);            // 'into'
        this.lookahead1W(266);      // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
        this.whitespace();
        this.parse_ExprSingle();
        switch (this.l1)
        {
        case 81:                    // 'at'
          this.lookahead2W(69);     // S^WS | '(:' | 'position'
          break;
        default:
          this.lk = this.l1;
        }
        if (this.lk == 108113)      // 'at' 'position'
        {
          this.lk = this.memoized(11, this.e0);
          if (this.lk == 0)
          {
            var b0B = this.b0; var e0B = this.e0; var l1B = this.l1;
            var b1B = this.b1; var e1B = this.e1; var l2B = this.l2;
            var b2B = this.b2; var e2B = this.e2;
            try
            {
              this.shiftT(81);      // 'at'
              this.lookahead1W(69); // S^WS | '(:' | 'position'
              this.shiftT(211);     // 'position'
              this.lookahead1W(266); // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                     // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                     // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                     // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                     // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                     // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                     // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                     // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                     // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                     // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                     // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                     // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                     // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                     // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                     // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                     // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                     // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                     // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                     // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                     // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                     // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                     // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                     // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                     // 'with' | 'xquery' | '{' | '{|'
              this.try_ExprSingle();
              this.lk = -1;
            }
            catch (p1B)
            {
              this.lk = -2;
            }
            this.b0 = b0B; this.e0 = e0B; this.l1 = l1B; if (this.l1 == 0) {this.end = e0B;} else {
            this.b1 = b1B; this.e1 = e1B; this.l2 = l2B; if (this.l2 == 0) {this.end = e1B;} else {
            this.b2 = b2B; this.e2 = e2B; this.end = e2B; }}
            this.memoize(11, this.e0, this.lk);
          }
        }
        if (this.lk == -1)
        {
          this.shift(81);           // 'at'
          this.lookahead1W(69);     // S^WS | '(:' | 'position'
          this.shift(211);          // 'position'
          this.lookahead1W(266);    // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
          this.whitespace();
          this.parse_ExprSingle();
        }
        break;
      default:
        this.shift(159);            // 'insert'
        this.lookahead1W(56);       // S^WS | '(:' | 'json'
        this.shift(166);            // 'json'
        this.lookahead1W(266);      // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
        this.whitespace();
        this.parse_PairConstructorList();
        this.shift(163);            // 'into'
        this.lookahead1W(266);      // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
        this.whitespace();
        this.parse_ExprSingle();
      }
      this.eventHandler.endNonterminal("JSONInsertExpr", this.e0);
    }

    private try_JSONInsertExpr()
    {
      switch (this.l1)
      {
      case 159:                     // 'insert'
        this.lookahead2W(56);       // S^WS | '(:' | 'json'
        break;
      default:
        this.lk = this.l1;
      }
      this.lk = this.memoized(10, this.e0);
      if (this.lk == 0)
      {
        var b0A = this.b0; var e0A = this.e0; var l1A = this.l1;
        var b1A = this.b1; var e1A = this.e1; var l2A = this.l2;
        var b2A = this.b2; var e2A = this.e2;
        try
        {
          this.shiftT(159);         // 'insert'
          this.lookahead1W(56);     // S^WS | '(:' | 'json'
          this.shiftT(166);         // 'json'
          this.lookahead1W(266);    // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
          this.try_ExprSingle();
          this.shiftT(163);         // 'into'
          this.lookahead1W(266);    // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
          this.try_ExprSingle();
          switch (this.l1)
          {
          case 81:                  // 'at'
            this.lookahead2W(69);   // S^WS | '(:' | 'position'
            break;
          default:
            this.lk = this.l1;
          }
          if (this.lk == 108113)    // 'at' 'position'
          {
            this.lk = this.memoized(11, this.e0);
            if (this.lk == 0)
            {
              var b0B = this.b0; var e0B = this.e0; var l1B = this.l1;
              var b1B = this.b1; var e1B = this.e1; var l2B = this.l2;
              var b2B = this.b2; var e2B = this.e2;
              try
              {
                this.shiftT(81);    // 'at'
                this.lookahead1W(69); // S^WS | '(:' | 'position'
                this.shiftT(211);   // 'position'
                this.lookahead1W(266); // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                       // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' |
                                       // '..' | '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                       // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                       // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                       // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                       // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                       // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                       // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                       // 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                       // 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' |
                                       // 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                       // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                       // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                       // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' |
                                       // 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                       // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                       // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                       // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                       // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' |
                                       // 'schema-element' | 'score' | 'self' | 'sliding' | 'some' | 'stable' |
                                       // 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' |
                                       // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                       // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' |
                                       // 'while' | 'with' | 'xquery' | '{' | '{|'
                this.try_ExprSingle();
                this.memoize(11, e0B, -1);
              }
              catch (p1B)
              {
                this.b0 = b0B; this.e0 = e0B; this.l1 = l1B; if (this.l1 == 0) {this.end = e0B;} else {
                this.b1 = b1B; this.e1 = e1B; this.l2 = l2B; if (this.l2 == 0) {this.end = e1B;} else {
                this.b2 = b2B; this.e2 = e2B; this.end = e2B; }}
                this.memoize(11, e0B, -2);
              }
              this.lk = -2;
            }
          }
          if (this.lk == -1)
          {
            this.shiftT(81);        // 'at'
            this.lookahead1W(69);   // S^WS | '(:' | 'position'
            this.shiftT(211);       // 'position'
            this.lookahead1W(266);  // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
            this.try_ExprSingle();
          }
          this.memoize(10, e0A, -1);
          this.lk = -3;
        }
        catch (p1A)
        {
          this.lk = -2;
          this.b0 = b0A; this.e0 = e0A; this.l1 = l1A; if (this.l1 == 0) {this.end = e0A;} else {
          this.b1 = b1A; this.e1 = e1A; this.l2 = l2A; if (this.l2 == 0) {this.end = e1A;} else {
          this.b2 = b2A; this.e2 = e2A; this.end = e2A; }}
          this.memoize(10, e0A, -2);
        }
      }
      switch (this.lk)
      {
      case -1:
        this.shiftT(159);           // 'insert'
        this.lookahead1W(56);       // S^WS | '(:' | 'json'
        this.shiftT(166);           // 'json'
        this.lookahead1W(266);      // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
        this.try_ExprSingle();
        this.shiftT(163);           // 'into'
        this.lookahead1W(266);      // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
        this.try_ExprSingle();
        switch (this.l1)
        {
        case 81:                    // 'at'
          this.lookahead2W(69);     // S^WS | '(:' | 'position'
          break;
        default:
          this.lk = this.l1;
        }
        if (this.lk == 108113)      // 'at' 'position'
        {
          this.lk = this.memoized(11, this.e0);
          if (this.lk == 0)
          {
            var b0B = this.b0; var e0B = this.e0; var l1B = this.l1;
            var b1B = this.b1; var e1B = this.e1; var l2B = this.l2;
            var b2B = this.b2; var e2B = this.e2;
            try
            {
              this.shiftT(81);      // 'at'
              this.lookahead1W(69); // S^WS | '(:' | 'position'
              this.shiftT(211);     // 'position'
              this.lookahead1W(266); // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                     // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                     // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                     // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                     // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                     // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                     // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                     // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                     // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                     // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                     // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                     // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                     // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                     // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                     // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                     // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                     // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                     // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                     // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                     // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                     // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                     // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                     // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                     // 'with' | 'xquery' | '{' | '{|'
              this.try_ExprSingle();
              this.memoize(11, e0B, -1);
            }
            catch (p1B)
            {
              this.b0 = b0B; this.e0 = e0B; this.l1 = l1B; if (this.l1 == 0) {this.end = e0B;} else {
              this.b1 = b1B; this.e1 = e1B; this.l2 = l2B; if (this.l2 == 0) {this.end = e1B;} else {
              this.b2 = b2B; this.e2 = e2B; this.end = e2B; }}
              this.memoize(11, e0B, -2);
            }
            this.lk = -2;
          }
        }
        if (this.lk == -1)
        {
          this.shiftT(81);          // 'at'
          this.lookahead1W(69);     // S^WS | '(:' | 'position'
          this.shiftT(211);         // 'position'
          this.lookahead1W(266);    // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
          this.try_ExprSingle();
        }
        break;
      case -3:
        break;
      default:
        this.shiftT(159);           // 'insert'
        this.lookahead1W(56);       // S^WS | '(:' | 'json'
        this.shiftT(166);           // 'json'
        this.lookahead1W(266);      // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
        this.try_PairConstructorList();
        this.shiftT(163);           // 'into'
        this.lookahead1W(266);      // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
        this.try_ExprSingle();
      }
    }

    private parse_JSONRenameExpr()
    {
      this.eventHandler.startNonterminal("JSONRenameExpr", this.e0);
      this.shift(218);              // 'rename'
      this.lookahead1W(56);         // S^WS | '(:' | 'json'
      this.shift(166);              // 'json'
      this.lookahead1W(263);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(:' | '.' | '<' | '<!--' | '<?' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
      this.whitespace();
      this.parse_PostfixExpr();
      this.shift(79);               // 'as'
      this.lookahead1W(266);        // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      this.whitespace();
      this.parse_ExprSingle();
      this.eventHandler.endNonterminal("JSONRenameExpr", this.e0);
    }

    private try_JSONRenameExpr()
    {
      this.shiftT(218);             // 'rename'
      this.lookahead1W(56);         // S^WS | '(:' | 'json'
      this.shiftT(166);             // 'json'
      this.lookahead1W(263);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(:' | '.' | '<' | '<!--' | '<?' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
      this.try_PostfixExpr();
      this.shiftT(79);              // 'as'
      this.lookahead1W(266);        // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      this.try_ExprSingle();
    }

    private parse_JSONReplaceExpr()
    {
      this.eventHandler.startNonterminal("JSONReplaceExpr", this.e0);
      this.shift(219);              // 'replace'
      this.lookahead1W(82);         // S^WS | '(:' | 'value'
      this.shift(261);              // 'value'
      this.lookahead1W(64);         // S^WS | '(:' | 'of'
      this.shift(196);              // 'of'
      this.lookahead1W(56);         // S^WS | '(:' | 'json'
      this.shift(166);              // 'json'
      this.lookahead1W(263);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(:' | '.' | '<' | '<!--' | '<?' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
      this.whitespace();
      this.parse_PostfixExpr();
      this.shift(270);              // 'with'
      this.lookahead1W(266);        // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      this.whitespace();
      this.parse_ExprSingle();
      this.eventHandler.endNonterminal("JSONReplaceExpr", this.e0);
    }

    private try_JSONReplaceExpr()
    {
      this.shiftT(219);             // 'replace'
      this.lookahead1W(82);         // S^WS | '(:' | 'value'
      this.shiftT(261);             // 'value'
      this.lookahead1W(64);         // S^WS | '(:' | 'of'
      this.shiftT(196);             // 'of'
      this.lookahead1W(56);         // S^WS | '(:' | 'json'
      this.shiftT(166);             // 'json'
      this.lookahead1W(263);        // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(:' | '.' | '<' | '<!--' | '<?' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
      this.try_PostfixExpr();
      this.shiftT(270);             // 'with'
      this.lookahead1W(266);        // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      this.try_ExprSingle();
    }

    private parse_JSONAppendExpr()
    {
      this.eventHandler.startNonterminal("JSONAppendExpr", this.e0);
      this.shift(77);               // 'append'
      this.lookahead1W(56);         // S^WS | '(:' | 'json'
      this.shift(166);              // 'json'
      this.lookahead1W(266);        // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      this.whitespace();
      this.parse_ExprSingle();
      this.shift(163);              // 'into'
      this.lookahead1W(266);        // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      this.whitespace();
      this.parse_ExprSingle();
      this.eventHandler.endNonterminal("JSONAppendExpr", this.e0);
    }

    private try_JSONAppendExpr()
    {
      this.shiftT(77);              // 'append'
      this.lookahead1W(56);         // S^WS | '(:' | 'json'
      this.shiftT(166);             // 'json'
      this.lookahead1W(266);        // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      this.try_ExprSingle();
      this.shiftT(163);             // 'into'
      this.lookahead1W(266);        // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      this.try_ExprSingle();
    }

    private parse_CommonContent()
    {
      this.eventHandler.startNonterminal("CommonContent", this.e0);
      switch (this.l1)
      {
      case 12:                      // PredefinedEntityRef
        this.shift(12);             // PredefinedEntityRef
        break;
      case 23:                      // CharRef
        this.shift(23);             // CharRef
        break;
      case 277:                     // '{{'
        this.shift(277);            // '{{'
        break;
      case 283:                     // '}}'
        this.shift(283);            // '}}'
        break;
      default:
        this.parse_BlockExpr();
      }
      this.eventHandler.endNonterminal("CommonContent", this.e0);
    }

    private try_CommonContent()
    {
      switch (this.l1)
      {
      case 12:                      // PredefinedEntityRef
        this.shiftT(12);            // PredefinedEntityRef
        break;
      case 23:                      // CharRef
        this.shiftT(23);            // CharRef
        break;
      case 277:                     // '{{'
        this.shiftT(277);           // '{{'
        break;
      case 283:                     // '}}'
        this.shiftT(283);           // '}}'
        break;
      default:
        this.try_BlockExpr();
      }
    }

    private parse_ContentExpr()
    {
      this.eventHandler.startNonterminal("ContentExpr", this.e0);
      this.parse_StatementsAndExpr();
      this.eventHandler.endNonterminal("ContentExpr", this.e0);
    }

    private try_ContentExpr()
    {
      this.try_StatementsAndExpr();
    }

    private parse_CompDocConstructor()
    {
      this.eventHandler.startNonterminal("CompDocConstructor", this.e0);
      this.shift(119);              // 'document'
      this.lookahead1W(87);         // S^WS | '(:' | '{'
      this.whitespace();
      this.parse_BlockExpr();
      this.eventHandler.endNonterminal("CompDocConstructor", this.e0);
    }

    private try_CompDocConstructor()
    {
      this.shiftT(119);             // 'document'
      this.lookahead1W(87);         // S^WS | '(:' | '{'
      this.try_BlockExpr();
    }

    private parse_CompAttrConstructor()
    {
      this.eventHandler.startNonterminal("CompAttrConstructor", this.e0);
      this.shift(82);               // 'attribute'
      this.lookahead1W(257);        // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{'
      switch (this.l1)
      {
      case 276:                     // '{'
        this.shift(276);            // '{'
        this.lookahead1W(266);      // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
        this.whitespace();
        this.parse_Expr();
        this.shift(282);            // '}'
        break;
      default:
        this.whitespace();
        this.parse_EQName();
      }
      this.lookahead1W(87);         // S^WS | '(:' | '{'
      switch (this.l1)
      {
      case 276:                     // '{'
        this.lookahead2W(276);      // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|' | '}'
        break;
      default:
        this.lk = this.l1;
      }
      if (this.lk == 144660)        // '{' '}'
      {
        this.lk = this.memoized(12, this.e0);
        if (this.lk == 0)
        {
          var b0A = this.b0; var e0A = this.e0; var l1A = this.l1;
          var b1A = this.b1; var e1A = this.e1; var l2A = this.l2;
          var b2A = this.b2; var e2A = this.e2;
          try
          {
            this.shiftT(276);       // '{'
            this.lookahead1W(88);   // S^WS | '(:' | '}'
            this.shiftT(282);       // '}'
            this.lk = -1;
          }
          catch (p1A)
          {
            this.lk = -2;
          }
          this.b0 = b0A; this.e0 = e0A; this.l1 = l1A; if (this.l1 == 0) {this.end = e0A;} else {
          this.b1 = b1A; this.e1 = e1A; this.l2 = l2A; if (this.l2 == 0) {this.end = e1A;} else {
          this.b2 = b2A; this.e2 = e2A; this.end = e2A; }}
          this.memoize(12, this.e0, this.lk);
        }
      }
      switch (this.lk)
      {
      case -1:
        this.shift(276);            // '{'
        this.lookahead1W(88);       // S^WS | '(:' | '}'
        this.shift(282);            // '}'
        break;
      default:
        this.whitespace();
        this.parse_BlockExpr();
      }
      this.eventHandler.endNonterminal("CompAttrConstructor", this.e0);
    }

    private try_CompAttrConstructor()
    {
      this.shiftT(82);              // 'attribute'
      this.lookahead1W(257);        // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{'
      switch (this.l1)
      {
      case 276:                     // '{'
        this.shiftT(276);           // '{'
        this.lookahead1W(266);      // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
        this.try_Expr();
        this.shiftT(282);           // '}'
        break;
      default:
        this.try_EQName();
      }
      this.lookahead1W(87);         // S^WS | '(:' | '{'
      switch (this.l1)
      {
      case 276:                     // '{'
        this.lookahead2W(276);      // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|' | '}'
        break;
      default:
        this.lk = this.l1;
      }
      if (this.lk == 144660)        // '{' '}'
      {
        this.lk = this.memoized(12, this.e0);
        if (this.lk == 0)
        {
          var b0A = this.b0; var e0A = this.e0; var l1A = this.l1;
          var b1A = this.b1; var e1A = this.e1; var l2A = this.l2;
          var b2A = this.b2; var e2A = this.e2;
          try
          {
            this.shiftT(276);       // '{'
            this.lookahead1W(88);   // S^WS | '(:' | '}'
            this.shiftT(282);       // '}'
            this.memoize(12, e0A, -1);
            this.lk = -3;
          }
          catch (p1A)
          {
            this.lk = -2;
            this.b0 = b0A; this.e0 = e0A; this.l1 = l1A; if (this.l1 == 0) {this.end = e0A;} else {
            this.b1 = b1A; this.e1 = e1A; this.l2 = l2A; if (this.l2 == 0) {this.end = e1A;} else {
            this.b2 = b2A; this.e2 = e2A; this.end = e2A; }}
            this.memoize(12, e0A, -2);
          }
        }
      }
      switch (this.lk)
      {
      case -1:
        this.shiftT(276);           // '{'
        this.lookahead1W(88);       // S^WS | '(:' | '}'
        this.shiftT(282);           // '}'
        break;
      case -3:
        break;
      default:
        this.try_BlockExpr();
      }
    }

    private parse_CompPIConstructor()
    {
      this.eventHandler.startNonterminal("CompPIConstructor", this.e0);
      this.shift(216);              // 'processing-instruction'
      this.lookahead1W(250);        // NCName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'last' | 'lax' | 'le' | 'let' |
                                    // 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{'
      switch (this.l1)
      {
      case 276:                     // '{'
        this.shift(276);            // '{'
        this.lookahead1W(266);      // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
        this.whitespace();
        this.parse_Expr();
        this.shift(282);            // '}'
        break;
      default:
        this.whitespace();
        this.parse_NCName();
      }
      this.lookahead1W(87);         // S^WS | '(:' | '{'
      switch (this.l1)
      {
      case 276:                     // '{'
        this.lookahead2W(276);      // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|' | '}'
        break;
      default:
        this.lk = this.l1;
      }
      if (this.lk == 144660)        // '{' '}'
      {
        this.lk = this.memoized(13, this.e0);
        if (this.lk == 0)
        {
          var b0A = this.b0; var e0A = this.e0; var l1A = this.l1;
          var b1A = this.b1; var e1A = this.e1; var l2A = this.l2;
          var b2A = this.b2; var e2A = this.e2;
          try
          {
            this.shiftT(276);       // '{'
            this.lookahead1W(88);   // S^WS | '(:' | '}'
            this.shiftT(282);       // '}'
            this.lk = -1;
          }
          catch (p1A)
          {
            this.lk = -2;
          }
          this.b0 = b0A; this.e0 = e0A; this.l1 = l1A; if (this.l1 == 0) {this.end = e0A;} else {
          this.b1 = b1A; this.e1 = e1A; this.l2 = l2A; if (this.l2 == 0) {this.end = e1A;} else {
          this.b2 = b2A; this.e2 = e2A; this.end = e2A; }}
          this.memoize(13, this.e0, this.lk);
        }
      }
      switch (this.lk)
      {
      case -1:
        this.shift(276);            // '{'
        this.lookahead1W(88);       // S^WS | '(:' | '}'
        this.shift(282);            // '}'
        break;
      default:
        this.whitespace();
        this.parse_BlockExpr();
      }
      this.eventHandler.endNonterminal("CompPIConstructor", this.e0);
    }

    private try_CompPIConstructor()
    {
      this.shiftT(216);             // 'processing-instruction'
      this.lookahead1W(250);        // NCName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'last' | 'lax' | 'le' | 'let' |
                                    // 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{'
      switch (this.l1)
      {
      case 276:                     // '{'
        this.shiftT(276);           // '{'
        this.lookahead1W(266);      // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
        this.try_Expr();
        this.shiftT(282);           // '}'
        break;
      default:
        this.try_NCName();
      }
      this.lookahead1W(87);         // S^WS | '(:' | '{'
      switch (this.l1)
      {
      case 276:                     // '{'
        this.lookahead2W(276);      // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|' | '}'
        break;
      default:
        this.lk = this.l1;
      }
      if (this.lk == 144660)        // '{' '}'
      {
        this.lk = this.memoized(13, this.e0);
        if (this.lk == 0)
        {
          var b0A = this.b0; var e0A = this.e0; var l1A = this.l1;
          var b1A = this.b1; var e1A = this.e1; var l2A = this.l2;
          var b2A = this.b2; var e2A = this.e2;
          try
          {
            this.shiftT(276);       // '{'
            this.lookahead1W(88);   // S^WS | '(:' | '}'
            this.shiftT(282);       // '}'
            this.memoize(13, e0A, -1);
            this.lk = -3;
          }
          catch (p1A)
          {
            this.lk = -2;
            this.b0 = b0A; this.e0 = e0A; this.l1 = l1A; if (this.l1 == 0) {this.end = e0A;} else {
            this.b1 = b1A; this.e1 = e1A; this.l2 = l2A; if (this.l2 == 0) {this.end = e1A;} else {
            this.b2 = b2A; this.e2 = e2A; this.end = e2A; }}
            this.memoize(13, e0A, -2);
          }
        }
      }
      switch (this.lk)
      {
      case -1:
        this.shiftT(276);           // '{'
        this.lookahead1W(88);       // S^WS | '(:' | '}'
        this.shiftT(282);           // '}'
        break;
      case -3:
        break;
      default:
        this.try_BlockExpr();
      }
    }

    private parse_CompCommentConstructor()
    {
      this.eventHandler.startNonterminal("CompCommentConstructor", this.e0);
      this.shift(96);               // 'comment'
      this.lookahead1W(87);         // S^WS | '(:' | '{'
      this.whitespace();
      this.parse_BlockExpr();
      this.eventHandler.endNonterminal("CompCommentConstructor", this.e0);
    }

    private try_CompCommentConstructor()
    {
      this.shiftT(96);              // 'comment'
      this.lookahead1W(87);         // S^WS | '(:' | '{'
      this.try_BlockExpr();
    }

    private parse_CompTextConstructor()
    {
      this.eventHandler.startNonterminal("CompTextConstructor", this.e0);
      this.shift(244);              // 'text'
      this.lookahead1W(87);         // S^WS | '(:' | '{'
      this.whitespace();
      this.parse_BlockExpr();
      this.eventHandler.endNonterminal("CompTextConstructor", this.e0);
    }

    private try_CompTextConstructor()
    {
      this.shiftT(244);             // 'text'
      this.lookahead1W(87);         // S^WS | '(:' | '{'
      this.try_BlockExpr();
    }

    private parse_PrimaryExpr()
    {
      this.eventHandler.startNonterminal("PrimaryExpr", this.e0);
      switch (this.l1)
      {
      case 184:                     // 'namespace'
        this.lookahead2W(255);      // NCName^Token | S^WS | '#' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'last' | 'lax' | 'le' | 'let' |
                                    // 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{'
        break;
      case 216:                     // 'processing-instruction'
        this.lookahead2W(253);      // NCName^Token | S^WS | '#' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'last' | 'lax' | 'le' | 'let' |
                                    // 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{'
        break;
      case 276:                     // '{'
        this.lookahead2W(276);      // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|' | '}'
        break;
      case 82:                      // 'attribute'
      case 121:                     // 'element'
        this.lookahead2W(258);      // EQName^Token | S^WS | '#' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{'
        break;
      case 96:                      // 'comment'
      case 244:                     // 'text'
        this.lookahead2W(93);       // S^WS | '#' | '(:' | '{'
        break;
      case 119:                     // 'document'
      case 202:                     // 'ordered'
      case 256:                     // 'unordered'
        this.lookahead2W(139);      // S^WS | '#' | '(' | '(:' | '{'
        break;
      case 6:                       // EQName^Token
      case 70:                      // 'after'
      case 72:                      // 'allowing'
      case 73:                      // 'ancestor'
      case 74:                      // 'ancestor-or-self'
      case 75:                      // 'and'
      case 77:                      // 'append'
      case 79:                      // 'as'
      case 80:                      // 'ascending'
      case 81:                      // 'at'
      case 83:                      // 'base-uri'
      case 84:                      // 'before'
      case 85:                      // 'boundary-space'
      case 86:                      // 'break'
      case 88:                      // 'case'
      case 89:                      // 'cast'
      case 90:                      // 'castable'
      case 91:                      // 'catch'
      case 93:                      // 'child'
      case 94:                      // 'collation'
      case 97:                      // 'constraint'
      case 98:                      // 'construction'
      case 101:                     // 'context'
      case 102:                     // 'continue'
      case 103:                     // 'copy'
      case 104:                     // 'copy-namespaces'
      case 105:                     // 'count'
      case 106:                     // 'decimal-format'
      case 108:                     // 'declare'
      case 109:                     // 'default'
      case 110:                     // 'delete'
      case 111:                     // 'descendant'
      case 112:                     // 'descendant-or-self'
      case 113:                     // 'descending'
      case 118:                     // 'div'
      case 122:                     // 'else'
      case 123:                     // 'empty'
      case 125:                     // 'encoding'
      case 126:                     // 'end'
      case 128:                     // 'eq'
      case 129:                     // 'every'
      case 131:                     // 'except'
      case 132:                     // 'exit'
      case 133:                     // 'external'
      case 134:                     // 'first'
      case 135:                     // 'following'
      case 136:                     // 'following-sibling'
      case 137:                     // 'for'
      case 141:                     // 'ft-option'
      case 146:                     // 'ge'
      case 148:                     // 'group'
      case 150:                     // 'gt'
      case 151:                     // 'idiv'
      case 153:                     // 'import'
      case 154:                     // 'in'
      case 155:                     // 'index'
      case 159:                     // 'insert'
      case 160:                     // 'instance'
      case 161:                     // 'integrity'
      case 162:                     // 'intersect'
      case 163:                     // 'into'
      case 164:                     // 'is'
      case 166:                     // 'json'
      case 170:                     // 'last'
      case 171:                     // 'lax'
      case 172:                     // 'le'
      case 174:                     // 'let'
      case 176:                     // 'loop'
      case 178:                     // 'lt'
      case 180:                     // 'mod'
      case 181:                     // 'modify'
      case 182:                     // 'module'
      case 186:                     // 'ne'
      case 192:                     // 'nodes'
      case 194:                     // 'object'
      case 198:                     // 'only'
      case 199:                     // 'option'
      case 200:                     // 'or'
      case 201:                     // 'order'
      case 203:                     // 'ordering'
      case 206:                     // 'parent'
      case 212:                     // 'preceding'
      case 213:                     // 'preceding-sibling'
      case 218:                     // 'rename'
      case 219:                     // 'replace'
      case 220:                     // 'return'
      case 221:                     // 'returning'
      case 222:                     // 'revalidation'
      case 224:                     // 'satisfies'
      case 225:                     // 'schema'
      case 228:                     // 'score'
      case 229:                     // 'self'
      case 234:                     // 'sliding'
      case 235:                     // 'some'
      case 236:                     // 'stable'
      case 237:                     // 'start'
      case 240:                     // 'strict'
      case 248:                     // 'to'
      case 249:                     // 'treat'
      case 250:                     // 'try'
      case 251:                     // 'tumbling'
      case 252:                     // 'type'
      case 254:                     // 'union'
      case 257:                     // 'updating'
      case 260:                     // 'validate'
      case 261:                     // 'value'
      case 262:                     // 'variable'
      case 263:                     // 'version'
      case 266:                     // 'where'
      case 267:                     // 'while'
      case 270:                     // 'with'
      case 274:                     // 'xquery'
        this.lookahead2W(92);       // S^WS | '#' | '(' | '(:'
        break;
      default:
        this.lk = this.l1;
      }
      if (this.lk == 2836           // '{' Wildcard
       || this.lk == 3348           // '{' EQName^Token
       || this.lk == 4372           // '{' IntegerLiteral
       || this.lk == 4884           // '{' DecimalLiteral
       || this.lk == 5396           // '{' DoubleLiteral
       || this.lk == 5908           // '{' StringLiteral
       || this.lk == 16148          // '{' '$'
       || this.lk == 16660          // '{' '%'
       || this.lk == 17684          // '{' '('
       || this.lk == 18196          // '{' '(#'
       || this.lk == 20756          // '{' '+'
       || this.lk == 21780          // '{' '-'
       || this.lk == 22804          // '{' '.'
       || this.lk == 23316          // '{' '..'
       || this.lk == 23828          // '{' '/'
       || this.lk == 24340          // '{' '//'
       || this.lk == 27924          // '{' '<'
       || this.lk == 28436          // '{' '<!--'
       || this.lk == 30484          // '{' '<?'
       || this.lk == 34068          // '{' '@'
       || this.lk == 35092          // '{' '['
       || this.lk == 36116          // '{' 'after'
       || this.lk == 37140          // '{' 'allowing'
       || this.lk == 37652          // '{' 'ancestor'
       || this.lk == 38164          // '{' 'ancestor-or-self'
       || this.lk == 38676          // '{' 'and'
       || this.lk == 39700          // '{' 'append'
       || this.lk == 40212          // '{' 'array'
       || this.lk == 40724          // '{' 'as'
       || this.lk == 41236          // '{' 'ascending'
       || this.lk == 41748          // '{' 'at'
       || this.lk == 42260          // '{' 'attribute'
       || this.lk == 42772          // '{' 'base-uri'
       || this.lk == 43284          // '{' 'before'
       || this.lk == 43796          // '{' 'boundary-space'
       || this.lk == 44308          // '{' 'break'
       || this.lk == 45332          // '{' 'case'
       || this.lk == 45844          // '{' 'cast'
       || this.lk == 46356          // '{' 'castable'
       || this.lk == 46868          // '{' 'catch'
       || this.lk == 47892          // '{' 'child'
       || this.lk == 48404          // '{' 'collation'
       || this.lk == 49428          // '{' 'comment'
       || this.lk == 49940          // '{' 'constraint'
       || this.lk == 50452          // '{' 'construction'
       || this.lk == 51988          // '{' 'context'
       || this.lk == 52500          // '{' 'continue'
       || this.lk == 53012          // '{' 'copy'
       || this.lk == 53524          // '{' 'copy-namespaces'
       || this.lk == 54036          // '{' 'count'
       || this.lk == 54548          // '{' 'decimal-format'
       || this.lk == 55572          // '{' 'declare'
       || this.lk == 56084          // '{' 'default'
       || this.lk == 56596          // '{' 'delete'
       || this.lk == 57108          // '{' 'descendant'
       || this.lk == 57620          // '{' 'descendant-or-self'
       || this.lk == 58132          // '{' 'descending'
       || this.lk == 60692          // '{' 'div'
       || this.lk == 61204          // '{' 'document'
       || this.lk == 61716          // '{' 'document-node'
       || this.lk == 62228          // '{' 'element'
       || this.lk == 62740          // '{' 'else'
       || this.lk == 63252          // '{' 'empty'
       || this.lk == 63764          // '{' 'empty-sequence'
       || this.lk == 64276          // '{' 'encoding'
       || this.lk == 64788          // '{' 'end'
       || this.lk == 65812          // '{' 'eq'
       || this.lk == 66324          // '{' 'every'
       || this.lk == 67348          // '{' 'except'
       || this.lk == 67860          // '{' 'exit'
       || this.lk == 68372          // '{' 'external'
       || this.lk == 68884          // '{' 'first'
       || this.lk == 69396          // '{' 'following'
       || this.lk == 69908          // '{' 'following-sibling'
       || this.lk == 70420          // '{' 'for'
       || this.lk == 72468          // '{' 'ft-option'
       || this.lk == 74516          // '{' 'function'
       || this.lk == 75028          // '{' 'ge'
       || this.lk == 76052          // '{' 'group'
       || this.lk == 77076          // '{' 'gt'
       || this.lk == 77588          // '{' 'idiv'
       || this.lk == 78100          // '{' 'if'
       || this.lk == 78612          // '{' 'import'
       || this.lk == 79124          // '{' 'in'
       || this.lk == 79636          // '{' 'index'
       || this.lk == 81684          // '{' 'insert'
       || this.lk == 82196          // '{' 'instance'
       || this.lk == 82708          // '{' 'integrity'
       || this.lk == 83220          // '{' 'intersect'
       || this.lk == 83732          // '{' 'into'
       || this.lk == 84244          // '{' 'is'
       || this.lk == 84756          // '{' 'item'
       || this.lk == 85268          // '{' 'json'
       || this.lk == 85780          // '{' 'json-item'
       || this.lk == 87316          // '{' 'last'
       || this.lk == 87828          // '{' 'lax'
       || this.lk == 88340          // '{' 'le'
       || this.lk == 89364          // '{' 'let'
       || this.lk == 90388          // '{' 'loop'
       || this.lk == 91412          // '{' 'lt'
       || this.lk == 92436          // '{' 'mod'
       || this.lk == 92948          // '{' 'modify'
       || this.lk == 93460          // '{' 'module'
       || this.lk == 94484          // '{' 'namespace'
       || this.lk == 94996          // '{' 'namespace-node'
       || this.lk == 95508          // '{' 'ne'
       || this.lk == 98068          // '{' 'node'
       || this.lk == 98580          // '{' 'nodes'
       || this.lk == 99604          // '{' 'object'
       || this.lk == 101652         // '{' 'only'
       || this.lk == 102164         // '{' 'option'
       || this.lk == 102676         // '{' 'or'
       || this.lk == 103188         // '{' 'order'
       || this.lk == 103700         // '{' 'ordered'
       || this.lk == 104212         // '{' 'ordering'
       || this.lk == 105748         // '{' 'parent'
       || this.lk == 108820         // '{' 'preceding'
       || this.lk == 109332         // '{' 'preceding-sibling'
       || this.lk == 110868         // '{' 'processing-instruction'
       || this.lk == 111892         // '{' 'rename'
       || this.lk == 112404         // '{' 'replace'
       || this.lk == 112916         // '{' 'return'
       || this.lk == 113428         // '{' 'returning'
       || this.lk == 113940         // '{' 'revalidation'
       || this.lk == 114964         // '{' 'satisfies'
       || this.lk == 115476         // '{' 'schema'
       || this.lk == 115988         // '{' 'schema-attribute'
       || this.lk == 116500         // '{' 'schema-element'
       || this.lk == 117012         // '{' 'score'
       || this.lk == 117524         // '{' 'self'
       || this.lk == 120084         // '{' 'sliding'
       || this.lk == 120596         // '{' 'some'
       || this.lk == 121108         // '{' 'stable'
       || this.lk == 121620         // '{' 'start'
       || this.lk == 123156         // '{' 'strict'
       || this.lk == 124180         // '{' 'structured-item'
       || this.lk == 124692         // '{' 'switch'
       || this.lk == 125204         // '{' 'text'
       || this.lk == 127252         // '{' 'to'
       || this.lk == 127764         // '{' 'treat'
       || this.lk == 128276         // '{' 'try'
       || this.lk == 128788         // '{' 'tumbling'
       || this.lk == 129300         // '{' 'type'
       || this.lk == 129812         // '{' 'typeswitch'
       || this.lk == 130324         // '{' 'union'
       || this.lk == 131348         // '{' 'unordered'
       || this.lk == 131860         // '{' 'updating'
       || this.lk == 133396         // '{' 'validate'
       || this.lk == 133908         // '{' 'value'
       || this.lk == 134420         // '{' 'variable'
       || this.lk == 134932         // '{' 'version'
       || this.lk == 136468         // '{' 'where'
       || this.lk == 136980         // '{' 'while'
       || this.lk == 138516         // '{' 'with'
       || this.lk == 140564         // '{' 'xquery'
       || this.lk == 141588         // '{' '{'
       || this.lk == 142612         // '{' '{|'
       || this.lk == 144660)        // '{' '}'
      {
        this.lk = this.memoized(14, this.e0);
        if (this.lk == 0)
        {
          var b0A = this.b0; var e0A = this.e0; var l1A = this.l1;
          var b1A = this.b1; var e1A = this.e1; var l2A = this.l2;
          var b2A = this.b2; var e2A = this.e2;
          try
          {
            this.try_BlockExpr();
            this.lk = -10;
          }
          catch (p10A)
          {
            this.lk = -11;
          }
          this.b0 = b0A; this.e0 = e0A; this.l1 = l1A; if (this.l1 == 0) {this.end = e0A;} else {
          this.b1 = b1A; this.e1 = e1A; this.l2 = l2A; if (this.l2 == 0) {this.end = e1A;} else {
          this.b2 = b2A; this.e2 = e2A; this.end = e2A; }}
          this.memoize(14, this.e0, this.lk);
        }
      }
      switch (this.lk)
      {
      case 8:                       // IntegerLiteral
      case 9:                       // DecimalLiteral
      case 10:                      // DoubleLiteral
      case 11:                      // StringLiteral
        this.parse_Literal();
        break;
      case 31:                      // '$'
        this.parse_VarRef();
        break;
      case 34:                      // '('
        this.parse_ParenthesizedExpr();
        break;
      case 44:                      // '.'
        this.parse_ContextItemExpr();
        break;
      case 17414:                   // EQName^Token '('
      case 17478:                   // 'after' '('
      case 17480:                   // 'allowing' '('
      case 17481:                   // 'ancestor' '('
      case 17482:                   // 'ancestor-or-self' '('
      case 17483:                   // 'and' '('
      case 17485:                   // 'append' '('
      case 17487:                   // 'as' '('
      case 17488:                   // 'ascending' '('
      case 17489:                   // 'at' '('
      case 17491:                   // 'base-uri' '('
      case 17492:                   // 'before' '('
      case 17493:                   // 'boundary-space' '('
      case 17494:                   // 'break' '('
      case 17496:                   // 'case' '('
      case 17497:                   // 'cast' '('
      case 17498:                   // 'castable' '('
      case 17499:                   // 'catch' '('
      case 17501:                   // 'child' '('
      case 17502:                   // 'collation' '('
      case 17505:                   // 'constraint' '('
      case 17506:                   // 'construction' '('
      case 17509:                   // 'context' '('
      case 17510:                   // 'continue' '('
      case 17511:                   // 'copy' '('
      case 17512:                   // 'copy-namespaces' '('
      case 17513:                   // 'count' '('
      case 17514:                   // 'decimal-format' '('
      case 17516:                   // 'declare' '('
      case 17517:                   // 'default' '('
      case 17518:                   // 'delete' '('
      case 17519:                   // 'descendant' '('
      case 17520:                   // 'descendant-or-self' '('
      case 17521:                   // 'descending' '('
      case 17526:                   // 'div' '('
      case 17527:                   // 'document' '('
      case 17530:                   // 'else' '('
      case 17531:                   // 'empty' '('
      case 17533:                   // 'encoding' '('
      case 17534:                   // 'end' '('
      case 17536:                   // 'eq' '('
      case 17537:                   // 'every' '('
      case 17539:                   // 'except' '('
      case 17540:                   // 'exit' '('
      case 17541:                   // 'external' '('
      case 17542:                   // 'first' '('
      case 17543:                   // 'following' '('
      case 17544:                   // 'following-sibling' '('
      case 17545:                   // 'for' '('
      case 17549:                   // 'ft-option' '('
      case 17554:                   // 'ge' '('
      case 17556:                   // 'group' '('
      case 17558:                   // 'gt' '('
      case 17559:                   // 'idiv' '('
      case 17561:                   // 'import' '('
      case 17562:                   // 'in' '('
      case 17563:                   // 'index' '('
      case 17567:                   // 'insert' '('
      case 17568:                   // 'instance' '('
      case 17569:                   // 'integrity' '('
      case 17570:                   // 'intersect' '('
      case 17571:                   // 'into' '('
      case 17572:                   // 'is' '('
      case 17574:                   // 'json' '('
      case 17578:                   // 'last' '('
      case 17579:                   // 'lax' '('
      case 17580:                   // 'le' '('
      case 17582:                   // 'let' '('
      case 17584:                   // 'loop' '('
      case 17586:                   // 'lt' '('
      case 17588:                   // 'mod' '('
      case 17589:                   // 'modify' '('
      case 17590:                   // 'module' '('
      case 17592:                   // 'namespace' '('
      case 17594:                   // 'ne' '('
      case 17600:                   // 'nodes' '('
      case 17602:                   // 'object' '('
      case 17606:                   // 'only' '('
      case 17607:                   // 'option' '('
      case 17608:                   // 'or' '('
      case 17609:                   // 'order' '('
      case 17610:                   // 'ordered' '('
      case 17611:                   // 'ordering' '('
      case 17614:                   // 'parent' '('
      case 17620:                   // 'preceding' '('
      case 17621:                   // 'preceding-sibling' '('
      case 17626:                   // 'rename' '('
      case 17627:                   // 'replace' '('
      case 17628:                   // 'return' '('
      case 17629:                   // 'returning' '('
      case 17630:                   // 'revalidation' '('
      case 17632:                   // 'satisfies' '('
      case 17633:                   // 'schema' '('
      case 17636:                   // 'score' '('
      case 17637:                   // 'self' '('
      case 17642:                   // 'sliding' '('
      case 17643:                   // 'some' '('
      case 17644:                   // 'stable' '('
      case 17645:                   // 'start' '('
      case 17648:                   // 'strict' '('
      case 17656:                   // 'to' '('
      case 17657:                   // 'treat' '('
      case 17658:                   // 'try' '('
      case 17659:                   // 'tumbling' '('
      case 17660:                   // 'type' '('
      case 17662:                   // 'union' '('
      case 17664:                   // 'unordered' '('
      case 17665:                   // 'updating' '('
      case 17668:                   // 'validate' '('
      case 17669:                   // 'value' '('
      case 17670:                   // 'variable' '('
      case 17671:                   // 'version' '('
      case 17674:                   // 'where' '('
      case 17675:                   // 'while' '('
      case 17678:                   // 'with' '('
      case 17682:                   // 'xquery' '('
        this.parse_FunctionCall();
        break;
      case 141514:                  // 'ordered' '{'
        this.parse_OrderedExpr();
        break;
      case 141568:                  // 'unordered' '{'
        this.parse_UnorderedExpr();
        break;
      case 32:                      // '%'
      case 78:                      // 'array'
      case 120:                     // 'document-node'
      case 124:                     // 'empty-sequence'
      case 145:                     // 'function'
      case 152:                     // 'if'
      case 165:                     // 'item'
      case 167:                     // 'json-item'
      case 185:                     // 'namespace-node'
      case 191:                     // 'node'
      case 226:                     // 'schema-attribute'
      case 227:                     // 'schema-element'
      case 242:                     // 'structured-item'
      case 243:                     // 'switch'
      case 253:                     // 'typeswitch'
      case 14854:                   // EQName^Token '#'
      case 14918:                   // 'after' '#'
      case 14920:                   // 'allowing' '#'
      case 14921:                   // 'ancestor' '#'
      case 14922:                   // 'ancestor-or-self' '#'
      case 14923:                   // 'and' '#'
      case 14925:                   // 'append' '#'
      case 14927:                   // 'as' '#'
      case 14928:                   // 'ascending' '#'
      case 14929:                   // 'at' '#'
      case 14930:                   // 'attribute' '#'
      case 14931:                   // 'base-uri' '#'
      case 14932:                   // 'before' '#'
      case 14933:                   // 'boundary-space' '#'
      case 14934:                   // 'break' '#'
      case 14936:                   // 'case' '#'
      case 14937:                   // 'cast' '#'
      case 14938:                   // 'castable' '#'
      case 14939:                   // 'catch' '#'
      case 14941:                   // 'child' '#'
      case 14942:                   // 'collation' '#'
      case 14944:                   // 'comment' '#'
      case 14945:                   // 'constraint' '#'
      case 14946:                   // 'construction' '#'
      case 14949:                   // 'context' '#'
      case 14950:                   // 'continue' '#'
      case 14951:                   // 'copy' '#'
      case 14952:                   // 'copy-namespaces' '#'
      case 14953:                   // 'count' '#'
      case 14954:                   // 'decimal-format' '#'
      case 14956:                   // 'declare' '#'
      case 14957:                   // 'default' '#'
      case 14958:                   // 'delete' '#'
      case 14959:                   // 'descendant' '#'
      case 14960:                   // 'descendant-or-self' '#'
      case 14961:                   // 'descending' '#'
      case 14966:                   // 'div' '#'
      case 14967:                   // 'document' '#'
      case 14969:                   // 'element' '#'
      case 14970:                   // 'else' '#'
      case 14971:                   // 'empty' '#'
      case 14973:                   // 'encoding' '#'
      case 14974:                   // 'end' '#'
      case 14976:                   // 'eq' '#'
      case 14977:                   // 'every' '#'
      case 14979:                   // 'except' '#'
      case 14980:                   // 'exit' '#'
      case 14981:                   // 'external' '#'
      case 14982:                   // 'first' '#'
      case 14983:                   // 'following' '#'
      case 14984:                   // 'following-sibling' '#'
      case 14985:                   // 'for' '#'
      case 14989:                   // 'ft-option' '#'
      case 14994:                   // 'ge' '#'
      case 14996:                   // 'group' '#'
      case 14998:                   // 'gt' '#'
      case 14999:                   // 'idiv' '#'
      case 15001:                   // 'import' '#'
      case 15002:                   // 'in' '#'
      case 15003:                   // 'index' '#'
      case 15007:                   // 'insert' '#'
      case 15008:                   // 'instance' '#'
      case 15009:                   // 'integrity' '#'
      case 15010:                   // 'intersect' '#'
      case 15011:                   // 'into' '#'
      case 15012:                   // 'is' '#'
      case 15014:                   // 'json' '#'
      case 15018:                   // 'last' '#'
      case 15019:                   // 'lax' '#'
      case 15020:                   // 'le' '#'
      case 15022:                   // 'let' '#'
      case 15024:                   // 'loop' '#'
      case 15026:                   // 'lt' '#'
      case 15028:                   // 'mod' '#'
      case 15029:                   // 'modify' '#'
      case 15030:                   // 'module' '#'
      case 15032:                   // 'namespace' '#'
      case 15034:                   // 'ne' '#'
      case 15040:                   // 'nodes' '#'
      case 15042:                   // 'object' '#'
      case 15046:                   // 'only' '#'
      case 15047:                   // 'option' '#'
      case 15048:                   // 'or' '#'
      case 15049:                   // 'order' '#'
      case 15050:                   // 'ordered' '#'
      case 15051:                   // 'ordering' '#'
      case 15054:                   // 'parent' '#'
      case 15060:                   // 'preceding' '#'
      case 15061:                   // 'preceding-sibling' '#'
      case 15064:                   // 'processing-instruction' '#'
      case 15066:                   // 'rename' '#'
      case 15067:                   // 'replace' '#'
      case 15068:                   // 'return' '#'
      case 15069:                   // 'returning' '#'
      case 15070:                   // 'revalidation' '#'
      case 15072:                   // 'satisfies' '#'
      case 15073:                   // 'schema' '#'
      case 15076:                   // 'score' '#'
      case 15077:                   // 'self' '#'
      case 15082:                   // 'sliding' '#'
      case 15083:                   // 'some' '#'
      case 15084:                   // 'stable' '#'
      case 15085:                   // 'start' '#'
      case 15088:                   // 'strict' '#'
      case 15092:                   // 'text' '#'
      case 15096:                   // 'to' '#'
      case 15097:                   // 'treat' '#'
      case 15098:                   // 'try' '#'
      case 15099:                   // 'tumbling' '#'
      case 15100:                   // 'type' '#'
      case 15102:                   // 'union' '#'
      case 15104:                   // 'unordered' '#'
      case 15105:                   // 'updating' '#'
      case 15108:                   // 'validate' '#'
      case 15109:                   // 'value' '#'
      case 15110:                   // 'variable' '#'
      case 15111:                   // 'version' '#'
      case 15114:                   // 'where' '#'
      case 15115:                   // 'while' '#'
      case 15118:                   // 'with' '#'
      case 15122:                   // 'xquery' '#'
        this.parse_FunctionItemExpr();
        break;
      case -10:
      case 27412:                   // '{' ';'
        this.parse_BlockExpr();
        break;
      case -11:
        this.parse_ObjectConstructor();
        break;
      case 68:                      // '['
        this.parse_ArrayConstructor();
        break;
      case 278:                     // '{|'
        this.parse_JSONSimpleObjectUnion();
        break;
      default:
        this.parse_Constructor();
      }
      this.eventHandler.endNonterminal("PrimaryExpr", this.e0);
    }

    private try_PrimaryExpr()
    {
      switch (this.l1)
      {
      case 184:                     // 'namespace'
        this.lookahead2W(255);      // NCName^Token | S^WS | '#' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'last' | 'lax' | 'le' | 'let' |
                                    // 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{'
        break;
      case 216:                     // 'processing-instruction'
        this.lookahead2W(253);      // NCName^Token | S^WS | '#' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'last' | 'lax' | 'le' | 'let' |
                                    // 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{'
        break;
      case 276:                     // '{'
        this.lookahead2W(276);      // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|' | '}'
        break;
      case 82:                      // 'attribute'
      case 121:                     // 'element'
        this.lookahead2W(258);      // EQName^Token | S^WS | '#' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{'
        break;
      case 96:                      // 'comment'
      case 244:                     // 'text'
        this.lookahead2W(93);       // S^WS | '#' | '(:' | '{'
        break;
      case 119:                     // 'document'
      case 202:                     // 'ordered'
      case 256:                     // 'unordered'
        this.lookahead2W(139);      // S^WS | '#' | '(' | '(:' | '{'
        break;
      case 6:                       // EQName^Token
      case 70:                      // 'after'
      case 72:                      // 'allowing'
      case 73:                      // 'ancestor'
      case 74:                      // 'ancestor-or-self'
      case 75:                      // 'and'
      case 77:                      // 'append'
      case 79:                      // 'as'
      case 80:                      // 'ascending'
      case 81:                      // 'at'
      case 83:                      // 'base-uri'
      case 84:                      // 'before'
      case 85:                      // 'boundary-space'
      case 86:                      // 'break'
      case 88:                      // 'case'
      case 89:                      // 'cast'
      case 90:                      // 'castable'
      case 91:                      // 'catch'
      case 93:                      // 'child'
      case 94:                      // 'collation'
      case 97:                      // 'constraint'
      case 98:                      // 'construction'
      case 101:                     // 'context'
      case 102:                     // 'continue'
      case 103:                     // 'copy'
      case 104:                     // 'copy-namespaces'
      case 105:                     // 'count'
      case 106:                     // 'decimal-format'
      case 108:                     // 'declare'
      case 109:                     // 'default'
      case 110:                     // 'delete'
      case 111:                     // 'descendant'
      case 112:                     // 'descendant-or-self'
      case 113:                     // 'descending'
      case 118:                     // 'div'
      case 122:                     // 'else'
      case 123:                     // 'empty'
      case 125:                     // 'encoding'
      case 126:                     // 'end'
      case 128:                     // 'eq'
      case 129:                     // 'every'
      case 131:                     // 'except'
      case 132:                     // 'exit'
      case 133:                     // 'external'
      case 134:                     // 'first'
      case 135:                     // 'following'
      case 136:                     // 'following-sibling'
      case 137:                     // 'for'
      case 141:                     // 'ft-option'
      case 146:                     // 'ge'
      case 148:                     // 'group'
      case 150:                     // 'gt'
      case 151:                     // 'idiv'
      case 153:                     // 'import'
      case 154:                     // 'in'
      case 155:                     // 'index'
      case 159:                     // 'insert'
      case 160:                     // 'instance'
      case 161:                     // 'integrity'
      case 162:                     // 'intersect'
      case 163:                     // 'into'
      case 164:                     // 'is'
      case 166:                     // 'json'
      case 170:                     // 'last'
      case 171:                     // 'lax'
      case 172:                     // 'le'
      case 174:                     // 'let'
      case 176:                     // 'loop'
      case 178:                     // 'lt'
      case 180:                     // 'mod'
      case 181:                     // 'modify'
      case 182:                     // 'module'
      case 186:                     // 'ne'
      case 192:                     // 'nodes'
      case 194:                     // 'object'
      case 198:                     // 'only'
      case 199:                     // 'option'
      case 200:                     // 'or'
      case 201:                     // 'order'
      case 203:                     // 'ordering'
      case 206:                     // 'parent'
      case 212:                     // 'preceding'
      case 213:                     // 'preceding-sibling'
      case 218:                     // 'rename'
      case 219:                     // 'replace'
      case 220:                     // 'return'
      case 221:                     // 'returning'
      case 222:                     // 'revalidation'
      case 224:                     // 'satisfies'
      case 225:                     // 'schema'
      case 228:                     // 'score'
      case 229:                     // 'self'
      case 234:                     // 'sliding'
      case 235:                     // 'some'
      case 236:                     // 'stable'
      case 237:                     // 'start'
      case 240:                     // 'strict'
      case 248:                     // 'to'
      case 249:                     // 'treat'
      case 250:                     // 'try'
      case 251:                     // 'tumbling'
      case 252:                     // 'type'
      case 254:                     // 'union'
      case 257:                     // 'updating'
      case 260:                     // 'validate'
      case 261:                     // 'value'
      case 262:                     // 'variable'
      case 263:                     // 'version'
      case 266:                     // 'where'
      case 267:                     // 'while'
      case 270:                     // 'with'
      case 274:                     // 'xquery'
        this.lookahead2W(92);       // S^WS | '#' | '(' | '(:'
        break;
      default:
        this.lk = this.l1;
      }
      if (this.lk == 2836           // '{' Wildcard
       || this.lk == 3348           // '{' EQName^Token
       || this.lk == 4372           // '{' IntegerLiteral
       || this.lk == 4884           // '{' DecimalLiteral
       || this.lk == 5396           // '{' DoubleLiteral
       || this.lk == 5908           // '{' StringLiteral
       || this.lk == 16148          // '{' '$'
       || this.lk == 16660          // '{' '%'
       || this.lk == 17684          // '{' '('
       || this.lk == 18196          // '{' '(#'
       || this.lk == 20756          // '{' '+'
       || this.lk == 21780          // '{' '-'
       || this.lk == 22804          // '{' '.'
       || this.lk == 23316          // '{' '..'
       || this.lk == 23828          // '{' '/'
       || this.lk == 24340          // '{' '//'
       || this.lk == 27924          // '{' '<'
       || this.lk == 28436          // '{' '<!--'
       || this.lk == 30484          // '{' '<?'
       || this.lk == 34068          // '{' '@'
       || this.lk == 35092          // '{' '['
       || this.lk == 36116          // '{' 'after'
       || this.lk == 37140          // '{' 'allowing'
       || this.lk == 37652          // '{' 'ancestor'
       || this.lk == 38164          // '{' 'ancestor-or-self'
       || this.lk == 38676          // '{' 'and'
       || this.lk == 39700          // '{' 'append'
       || this.lk == 40212          // '{' 'array'
       || this.lk == 40724          // '{' 'as'
       || this.lk == 41236          // '{' 'ascending'
       || this.lk == 41748          // '{' 'at'
       || this.lk == 42260          // '{' 'attribute'
       || this.lk == 42772          // '{' 'base-uri'
       || this.lk == 43284          // '{' 'before'
       || this.lk == 43796          // '{' 'boundary-space'
       || this.lk == 44308          // '{' 'break'
       || this.lk == 45332          // '{' 'case'
       || this.lk == 45844          // '{' 'cast'
       || this.lk == 46356          // '{' 'castable'
       || this.lk == 46868          // '{' 'catch'
       || this.lk == 47892          // '{' 'child'
       || this.lk == 48404          // '{' 'collation'
       || this.lk == 49428          // '{' 'comment'
       || this.lk == 49940          // '{' 'constraint'
       || this.lk == 50452          // '{' 'construction'
       || this.lk == 51988          // '{' 'context'
       || this.lk == 52500          // '{' 'continue'
       || this.lk == 53012          // '{' 'copy'
       || this.lk == 53524          // '{' 'copy-namespaces'
       || this.lk == 54036          // '{' 'count'
       || this.lk == 54548          // '{' 'decimal-format'
       || this.lk == 55572          // '{' 'declare'
       || this.lk == 56084          // '{' 'default'
       || this.lk == 56596          // '{' 'delete'
       || this.lk == 57108          // '{' 'descendant'
       || this.lk == 57620          // '{' 'descendant-or-self'
       || this.lk == 58132          // '{' 'descending'
       || this.lk == 60692          // '{' 'div'
       || this.lk == 61204          // '{' 'document'
       || this.lk == 61716          // '{' 'document-node'
       || this.lk == 62228          // '{' 'element'
       || this.lk == 62740          // '{' 'else'
       || this.lk == 63252          // '{' 'empty'
       || this.lk == 63764          // '{' 'empty-sequence'
       || this.lk == 64276          // '{' 'encoding'
       || this.lk == 64788          // '{' 'end'
       || this.lk == 65812          // '{' 'eq'
       || this.lk == 66324          // '{' 'every'
       || this.lk == 67348          // '{' 'except'
       || this.lk == 67860          // '{' 'exit'
       || this.lk == 68372          // '{' 'external'
       || this.lk == 68884          // '{' 'first'
       || this.lk == 69396          // '{' 'following'
       || this.lk == 69908          // '{' 'following-sibling'
       || this.lk == 70420          // '{' 'for'
       || this.lk == 72468          // '{' 'ft-option'
       || this.lk == 74516          // '{' 'function'
       || this.lk == 75028          // '{' 'ge'
       || this.lk == 76052          // '{' 'group'
       || this.lk == 77076          // '{' 'gt'
       || this.lk == 77588          // '{' 'idiv'
       || this.lk == 78100          // '{' 'if'
       || this.lk == 78612          // '{' 'import'
       || this.lk == 79124          // '{' 'in'
       || this.lk == 79636          // '{' 'index'
       || this.lk == 81684          // '{' 'insert'
       || this.lk == 82196          // '{' 'instance'
       || this.lk == 82708          // '{' 'integrity'
       || this.lk == 83220          // '{' 'intersect'
       || this.lk == 83732          // '{' 'into'
       || this.lk == 84244          // '{' 'is'
       || this.lk == 84756          // '{' 'item'
       || this.lk == 85268          // '{' 'json'
       || this.lk == 85780          // '{' 'json-item'
       || this.lk == 87316          // '{' 'last'
       || this.lk == 87828          // '{' 'lax'
       || this.lk == 88340          // '{' 'le'
       || this.lk == 89364          // '{' 'let'
       || this.lk == 90388          // '{' 'loop'
       || this.lk == 91412          // '{' 'lt'
       || this.lk == 92436          // '{' 'mod'
       || this.lk == 92948          // '{' 'modify'
       || this.lk == 93460          // '{' 'module'
       || this.lk == 94484          // '{' 'namespace'
       || this.lk == 94996          // '{' 'namespace-node'
       || this.lk == 95508          // '{' 'ne'
       || this.lk == 98068          // '{' 'node'
       || this.lk == 98580          // '{' 'nodes'
       || this.lk == 99604          // '{' 'object'
       || this.lk == 101652         // '{' 'only'
       || this.lk == 102164         // '{' 'option'
       || this.lk == 102676         // '{' 'or'
       || this.lk == 103188         // '{' 'order'
       || this.lk == 103700         // '{' 'ordered'
       || this.lk == 104212         // '{' 'ordering'
       || this.lk == 105748         // '{' 'parent'
       || this.lk == 108820         // '{' 'preceding'
       || this.lk == 109332         // '{' 'preceding-sibling'
       || this.lk == 110868         // '{' 'processing-instruction'
       || this.lk == 111892         // '{' 'rename'
       || this.lk == 112404         // '{' 'replace'
       || this.lk == 112916         // '{' 'return'
       || this.lk == 113428         // '{' 'returning'
       || this.lk == 113940         // '{' 'revalidation'
       || this.lk == 114964         // '{' 'satisfies'
       || this.lk == 115476         // '{' 'schema'
       || this.lk == 115988         // '{' 'schema-attribute'
       || this.lk == 116500         // '{' 'schema-element'
       || this.lk == 117012         // '{' 'score'
       || this.lk == 117524         // '{' 'self'
       || this.lk == 120084         // '{' 'sliding'
       || this.lk == 120596         // '{' 'some'
       || this.lk == 121108         // '{' 'stable'
       || this.lk == 121620         // '{' 'start'
       || this.lk == 123156         // '{' 'strict'
       || this.lk == 124180         // '{' 'structured-item'
       || this.lk == 124692         // '{' 'switch'
       || this.lk == 125204         // '{' 'text'
       || this.lk == 127252         // '{' 'to'
       || this.lk == 127764         // '{' 'treat'
       || this.lk == 128276         // '{' 'try'
       || this.lk == 128788         // '{' 'tumbling'
       || this.lk == 129300         // '{' 'type'
       || this.lk == 129812         // '{' 'typeswitch'
       || this.lk == 130324         // '{' 'union'
       || this.lk == 131348         // '{' 'unordered'
       || this.lk == 131860         // '{' 'updating'
       || this.lk == 133396         // '{' 'validate'
       || this.lk == 133908         // '{' 'value'
       || this.lk == 134420         // '{' 'variable'
       || this.lk == 134932         // '{' 'version'
       || this.lk == 136468         // '{' 'where'
       || this.lk == 136980         // '{' 'while'
       || this.lk == 138516         // '{' 'with'
       || this.lk == 140564         // '{' 'xquery'
       || this.lk == 141588         // '{' '{'
       || this.lk == 142612         // '{' '{|'
       || this.lk == 144660)        // '{' '}'
      {
        this.lk = this.memoized(14, this.e0);
        if (this.lk == 0)
        {
          var b0A = this.b0; var e0A = this.e0; var l1A = this.l1;
          var b1A = this.b1; var e1A = this.e1; var l2A = this.l2;
          var b2A = this.b2; var e2A = this.e2;
          try
          {
            this.try_BlockExpr();
            this.memoize(14, e0A, -10);
            this.lk = -14;
          }
          catch (p10A)
          {
            this.lk = -11;
            this.b0 = b0A; this.e0 = e0A; this.l1 = l1A; if (this.l1 == 0) {this.end = e0A;} else {
            this.b1 = b1A; this.e1 = e1A; this.l2 = l2A; if (this.l2 == 0) {this.end = e1A;} else {
            this.b2 = b2A; this.e2 = e2A; this.end = e2A; }}
            this.memoize(14, e0A, -11);
          }
        }
      }
      switch (this.lk)
      {
      case 8:                       // IntegerLiteral
      case 9:                       // DecimalLiteral
      case 10:                      // DoubleLiteral
      case 11:                      // StringLiteral
        this.try_Literal();
        break;
      case 31:                      // '$'
        this.try_VarRef();
        break;
      case 34:                      // '('
        this.try_ParenthesizedExpr();
        break;
      case 44:                      // '.'
        this.try_ContextItemExpr();
        break;
      case 17414:                   // EQName^Token '('
      case 17478:                   // 'after' '('
      case 17480:                   // 'allowing' '('
      case 17481:                   // 'ancestor' '('
      case 17482:                   // 'ancestor-or-self' '('
      case 17483:                   // 'and' '('
      case 17485:                   // 'append' '('
      case 17487:                   // 'as' '('
      case 17488:                   // 'ascending' '('
      case 17489:                   // 'at' '('
      case 17491:                   // 'base-uri' '('
      case 17492:                   // 'before' '('
      case 17493:                   // 'boundary-space' '('
      case 17494:                   // 'break' '('
      case 17496:                   // 'case' '('
      case 17497:                   // 'cast' '('
      case 17498:                   // 'castable' '('
      case 17499:                   // 'catch' '('
      case 17501:                   // 'child' '('
      case 17502:                   // 'collation' '('
      case 17505:                   // 'constraint' '('
      case 17506:                   // 'construction' '('
      case 17509:                   // 'context' '('
      case 17510:                   // 'continue' '('
      case 17511:                   // 'copy' '('
      case 17512:                   // 'copy-namespaces' '('
      case 17513:                   // 'count' '('
      case 17514:                   // 'decimal-format' '('
      case 17516:                   // 'declare' '('
      case 17517:                   // 'default' '('
      case 17518:                   // 'delete' '('
      case 17519:                   // 'descendant' '('
      case 17520:                   // 'descendant-or-self' '('
      case 17521:                   // 'descending' '('
      case 17526:                   // 'div' '('
      case 17527:                   // 'document' '('
      case 17530:                   // 'else' '('
      case 17531:                   // 'empty' '('
      case 17533:                   // 'encoding' '('
      case 17534:                   // 'end' '('
      case 17536:                   // 'eq' '('
      case 17537:                   // 'every' '('
      case 17539:                   // 'except' '('
      case 17540:                   // 'exit' '('
      case 17541:                   // 'external' '('
      case 17542:                   // 'first' '('
      case 17543:                   // 'following' '('
      case 17544:                   // 'following-sibling' '('
      case 17545:                   // 'for' '('
      case 17549:                   // 'ft-option' '('
      case 17554:                   // 'ge' '('
      case 17556:                   // 'group' '('
      case 17558:                   // 'gt' '('
      case 17559:                   // 'idiv' '('
      case 17561:                   // 'import' '('
      case 17562:                   // 'in' '('
      case 17563:                   // 'index' '('
      case 17567:                   // 'insert' '('
      case 17568:                   // 'instance' '('
      case 17569:                   // 'integrity' '('
      case 17570:                   // 'intersect' '('
      case 17571:                   // 'into' '('
      case 17572:                   // 'is' '('
      case 17574:                   // 'json' '('
      case 17578:                   // 'last' '('
      case 17579:                   // 'lax' '('
      case 17580:                   // 'le' '('
      case 17582:                   // 'let' '('
      case 17584:                   // 'loop' '('
      case 17586:                   // 'lt' '('
      case 17588:                   // 'mod' '('
      case 17589:                   // 'modify' '('
      case 17590:                   // 'module' '('
      case 17592:                   // 'namespace' '('
      case 17594:                   // 'ne' '('
      case 17600:                   // 'nodes' '('
      case 17602:                   // 'object' '('
      case 17606:                   // 'only' '('
      case 17607:                   // 'option' '('
      case 17608:                   // 'or' '('
      case 17609:                   // 'order' '('
      case 17610:                   // 'ordered' '('
      case 17611:                   // 'ordering' '('
      case 17614:                   // 'parent' '('
      case 17620:                   // 'preceding' '('
      case 17621:                   // 'preceding-sibling' '('
      case 17626:                   // 'rename' '('
      case 17627:                   // 'replace' '('
      case 17628:                   // 'return' '('
      case 17629:                   // 'returning' '('
      case 17630:                   // 'revalidation' '('
      case 17632:                   // 'satisfies' '('
      case 17633:                   // 'schema' '('
      case 17636:                   // 'score' '('
      case 17637:                   // 'self' '('
      case 17642:                   // 'sliding' '('
      case 17643:                   // 'some' '('
      case 17644:                   // 'stable' '('
      case 17645:                   // 'start' '('
      case 17648:                   // 'strict' '('
      case 17656:                   // 'to' '('
      case 17657:                   // 'treat' '('
      case 17658:                   // 'try' '('
      case 17659:                   // 'tumbling' '('
      case 17660:                   // 'type' '('
      case 17662:                   // 'union' '('
      case 17664:                   // 'unordered' '('
      case 17665:                   // 'updating' '('
      case 17668:                   // 'validate' '('
      case 17669:                   // 'value' '('
      case 17670:                   // 'variable' '('
      case 17671:                   // 'version' '('
      case 17674:                   // 'where' '('
      case 17675:                   // 'while' '('
      case 17678:                   // 'with' '('
      case 17682:                   // 'xquery' '('
        this.try_FunctionCall();
        break;
      case 141514:                  // 'ordered' '{'
        this.try_OrderedExpr();
        break;
      case 141568:                  // 'unordered' '{'
        this.try_UnorderedExpr();
        break;
      case 32:                      // '%'
      case 78:                      // 'array'
      case 120:                     // 'document-node'
      case 124:                     // 'empty-sequence'
      case 145:                     // 'function'
      case 152:                     // 'if'
      case 165:                     // 'item'
      case 167:                     // 'json-item'
      case 185:                     // 'namespace-node'
      case 191:                     // 'node'
      case 226:                     // 'schema-attribute'
      case 227:                     // 'schema-element'
      case 242:                     // 'structured-item'
      case 243:                     // 'switch'
      case 253:                     // 'typeswitch'
      case 14854:                   // EQName^Token '#'
      case 14918:                   // 'after' '#'
      case 14920:                   // 'allowing' '#'
      case 14921:                   // 'ancestor' '#'
      case 14922:                   // 'ancestor-or-self' '#'
      case 14923:                   // 'and' '#'
      case 14925:                   // 'append' '#'
      case 14927:                   // 'as' '#'
      case 14928:                   // 'ascending' '#'
      case 14929:                   // 'at' '#'
      case 14930:                   // 'attribute' '#'
      case 14931:                   // 'base-uri' '#'
      case 14932:                   // 'before' '#'
      case 14933:                   // 'boundary-space' '#'
      case 14934:                   // 'break' '#'
      case 14936:                   // 'case' '#'
      case 14937:                   // 'cast' '#'
      case 14938:                   // 'castable' '#'
      case 14939:                   // 'catch' '#'
      case 14941:                   // 'child' '#'
      case 14942:                   // 'collation' '#'
      case 14944:                   // 'comment' '#'
      case 14945:                   // 'constraint' '#'
      case 14946:                   // 'construction' '#'
      case 14949:                   // 'context' '#'
      case 14950:                   // 'continue' '#'
      case 14951:                   // 'copy' '#'
      case 14952:                   // 'copy-namespaces' '#'
      case 14953:                   // 'count' '#'
      case 14954:                   // 'decimal-format' '#'
      case 14956:                   // 'declare' '#'
      case 14957:                   // 'default' '#'
      case 14958:                   // 'delete' '#'
      case 14959:                   // 'descendant' '#'
      case 14960:                   // 'descendant-or-self' '#'
      case 14961:                   // 'descending' '#'
      case 14966:                   // 'div' '#'
      case 14967:                   // 'document' '#'
      case 14969:                   // 'element' '#'
      case 14970:                   // 'else' '#'
      case 14971:                   // 'empty' '#'
      case 14973:                   // 'encoding' '#'
      case 14974:                   // 'end' '#'
      case 14976:                   // 'eq' '#'
      case 14977:                   // 'every' '#'
      case 14979:                   // 'except' '#'
      case 14980:                   // 'exit' '#'
      case 14981:                   // 'external' '#'
      case 14982:                   // 'first' '#'
      case 14983:                   // 'following' '#'
      case 14984:                   // 'following-sibling' '#'
      case 14985:                   // 'for' '#'
      case 14989:                   // 'ft-option' '#'
      case 14994:                   // 'ge' '#'
      case 14996:                   // 'group' '#'
      case 14998:                   // 'gt' '#'
      case 14999:                   // 'idiv' '#'
      case 15001:                   // 'import' '#'
      case 15002:                   // 'in' '#'
      case 15003:                   // 'index' '#'
      case 15007:                   // 'insert' '#'
      case 15008:                   // 'instance' '#'
      case 15009:                   // 'integrity' '#'
      case 15010:                   // 'intersect' '#'
      case 15011:                   // 'into' '#'
      case 15012:                   // 'is' '#'
      case 15014:                   // 'json' '#'
      case 15018:                   // 'last' '#'
      case 15019:                   // 'lax' '#'
      case 15020:                   // 'le' '#'
      case 15022:                   // 'let' '#'
      case 15024:                   // 'loop' '#'
      case 15026:                   // 'lt' '#'
      case 15028:                   // 'mod' '#'
      case 15029:                   // 'modify' '#'
      case 15030:                   // 'module' '#'
      case 15032:                   // 'namespace' '#'
      case 15034:                   // 'ne' '#'
      case 15040:                   // 'nodes' '#'
      case 15042:                   // 'object' '#'
      case 15046:                   // 'only' '#'
      case 15047:                   // 'option' '#'
      case 15048:                   // 'or' '#'
      case 15049:                   // 'order' '#'
      case 15050:                   // 'ordered' '#'
      case 15051:                   // 'ordering' '#'
      case 15054:                   // 'parent' '#'
      case 15060:                   // 'preceding' '#'
      case 15061:                   // 'preceding-sibling' '#'
      case 15064:                   // 'processing-instruction' '#'
      case 15066:                   // 'rename' '#'
      case 15067:                   // 'replace' '#'
      case 15068:                   // 'return' '#'
      case 15069:                   // 'returning' '#'
      case 15070:                   // 'revalidation' '#'
      case 15072:                   // 'satisfies' '#'
      case 15073:                   // 'schema' '#'
      case 15076:                   // 'score' '#'
      case 15077:                   // 'self' '#'
      case 15082:                   // 'sliding' '#'
      case 15083:                   // 'some' '#'
      case 15084:                   // 'stable' '#'
      case 15085:                   // 'start' '#'
      case 15088:                   // 'strict' '#'
      case 15092:                   // 'text' '#'
      case 15096:                   // 'to' '#'
      case 15097:                   // 'treat' '#'
      case 15098:                   // 'try' '#'
      case 15099:                   // 'tumbling' '#'
      case 15100:                   // 'type' '#'
      case 15102:                   // 'union' '#'
      case 15104:                   // 'unordered' '#'
      case 15105:                   // 'updating' '#'
      case 15108:                   // 'validate' '#'
      case 15109:                   // 'value' '#'
      case 15110:                   // 'variable' '#'
      case 15111:                   // 'version' '#'
      case 15114:                   // 'where' '#'
      case 15115:                   // 'while' '#'
      case 15118:                   // 'with' '#'
      case 15122:                   // 'xquery' '#'
        this.try_FunctionItemExpr();
        break;
      case -10:
      case 27412:                   // '{' ';'
        this.try_BlockExpr();
        break;
      case -11:
        this.try_ObjectConstructor();
        break;
      case 68:                      // '['
        this.try_ArrayConstructor();
        break;
      case 278:                     // '{|'
        this.try_JSONSimpleObjectUnion();
        break;
      case -14:
        break;
      default:
        this.try_Constructor();
      }
    }

    private parse_JSONSimpleObjectUnion()
    {
      this.eventHandler.startNonterminal("JSONSimpleObjectUnion", this.e0);
      this.shift(278);              // '{|'
      this.lookahead1W(272);        // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|' | '|}'
      if (this.l1 != 281)           // '|}'
      {
        this.whitespace();
        this.parse_Expr();
      }
      this.shift(281);              // '|}'
      this.eventHandler.endNonterminal("JSONSimpleObjectUnion", this.e0);
    }

    private try_JSONSimpleObjectUnion()
    {
      this.shiftT(278);             // '{|'
      this.lookahead1W(272);        // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|' | '|}'
      if (this.l1 != 281)           // '|}'
      {
        this.try_Expr();
      }
      this.shiftT(281);             // '|}'
    }

    private parse_ObjectConstructor()
    {
      this.eventHandler.startNonterminal("ObjectConstructor", this.e0);
      this.shift(276);              // '{'
      this.lookahead1W(273);        // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|' | '}'
      if (this.l1 != 282)           // '}'
      {
        this.whitespace();
        this.parse_PairConstructorList();
      }
      this.shift(282);              // '}'
      this.eventHandler.endNonterminal("ObjectConstructor", this.e0);
    }

    private try_ObjectConstructor()
    {
      this.shiftT(276);             // '{'
      this.lookahead1W(273);        // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|' | '}'
      if (this.l1 != 282)           // '}'
      {
        this.try_PairConstructorList();
      }
      this.shiftT(282);             // '}'
    }

    private parse_PairConstructorList()
    {
      this.eventHandler.startNonterminal("PairConstructorList", this.e0);
      this.parse_PairConstructor();
      for (;;)
      {
        if (this.l1 != 41)          // ','
        {
          break;
        }
        this.shift(41);             // ','
        this.lookahead1W(266);      // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
        this.whitespace();
        this.parse_PairConstructor();
      }
      this.eventHandler.endNonterminal("PairConstructorList", this.e0);
    }

    private try_PairConstructorList()
    {
      this.try_PairConstructor();
      for (;;)
      {
        if (this.l1 != 41)          // ','
        {
          break;
        }
        this.shiftT(41);            // ','
        this.lookahead1W(266);      // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
        this.try_PairConstructor();
      }
    }

    private parse_PairConstructor()
    {
      this.eventHandler.startNonterminal("PairConstructor", this.e0);
      this.parse_ExprSingle();
      this.shift(49);               // ':'
      this.lookahead1W(266);        // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      this.whitespace();
      this.parse_ExprSingle();
      this.eventHandler.endNonterminal("PairConstructor", this.e0);
    }

    private try_PairConstructor()
    {
      this.try_ExprSingle();
      this.shiftT(49);              // ':'
      this.lookahead1W(266);        // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      this.try_ExprSingle();
    }

    private parse_ArrayConstructor()
    {
      this.eventHandler.startNonterminal("ArrayConstructor", this.e0);
      this.shift(68);               // '['
      this.lookahead1W(271);        // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | ']' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      if (this.l1 != 69)            // ']'
      {
        this.whitespace();
        this.parse_Expr();
      }
      this.shift(69);               // ']'
      this.eventHandler.endNonterminal("ArrayConstructor", this.e0);
    }

    private try_ArrayConstructor()
    {
      this.shiftT(68);              // '['
      this.lookahead1W(271);        // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | ']' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      if (this.l1 != 69)            // ']'
      {
        this.try_Expr();
      }
      this.shiftT(69);              // ']'
    }

    private parse_BlockExpr()
    {
      this.eventHandler.startNonterminal("BlockExpr", this.e0);
      this.shift(276);              // '{'
      this.lookahead1W(276);        // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|' | '}'
      this.whitespace();
      this.parse_StatementsAndOptionalExpr();
      this.shift(282);              // '}'
      this.eventHandler.endNonterminal("BlockExpr", this.e0);
    }

    private try_BlockExpr()
    {
      this.shiftT(276);             // '{'
      this.lookahead1W(276);        // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|' | '}'
      this.try_StatementsAndOptionalExpr();
      this.shiftT(282);             // '}'
    }

    private parse_FunctionDecl()
    {
      this.eventHandler.startNonterminal("FunctionDecl", this.e0);
      this.shift(145);              // 'function'
      this.lookahead1W(254);        // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
      this.whitespace();
      this.parse_EQName();
      this.lookahead1W(22);         // S^WS | '(' | '(:'
      this.shift(34);               // '('
      this.lookahead1W(94);         // S^WS | '$' | '(:' | ')'
      if (this.l1 == 31)            // '$'
      {
        this.whitespace();
        this.parse_ParamList();
      }
      this.shift(37);               // ')'
      this.lookahead1W(148);        // S^WS | '(:' | 'as' | 'external' | '{'
      if (this.l1 == 79)            // 'as'
      {
        this.whitespace();
        this.parse_ReturnType();
      }
      this.lookahead1W(118);        // S^WS | '(:' | 'external' | '{'
      switch (this.l1)
      {
      case 276:                     // '{'
        this.shift(276);            // '{'
        this.lookahead1W(276);      // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|' | '}'
        this.whitespace();
        this.parse_StatementsAndOptionalExpr();
        this.shift(282);            // '}'
        break;
      default:
        this.shift(133);            // 'external'
      }
      this.eventHandler.endNonterminal("FunctionDecl", this.e0);
    }

    private parse_ReturnType()
    {
      this.eventHandler.startNonterminal("ReturnType", this.e0);
      this.shift(79);               // 'as'
      this.lookahead1W(259);        // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
      this.whitespace();
      this.parse_SequenceType();
      this.eventHandler.endNonterminal("ReturnType", this.e0);
    }

    private shift(t: number)
    {
      if (this.l1 == t)
      {
        this.whitespace();
        this.eventHandler.terminal(Parser.TOKEN[this.l1], this.b1, this.e1 > this.size ? this.size : this.e1);
        this.b0 = this.b1; this.e0 = this.e1; this.l1 = this.l2; if (this.l1 != 0) {
        this.b1 = this.b2; this.e1 = this.e2; this.l2 = 0; }
      }
      else
      {
        this.error(this.b1, this.e1, 0, this.l1, t);
      }
    }

    private shiftT(t: number)
    {
      if (this.l1 == t)
      {
        this.b0 = this.b1; this.e0 = this.e1; this.l1 = this.l2; if (this.l1 != 0) {
        this.b1 = this.b2; this.e1 = this.e2; this.l2 = 0; }
      }
      else
      {
        this.error(this.b1, this.e1, 0, this.l1, t);
      }
    }

    private skip(code: number)
    {
      var b0W = this.b0; var e0W = this.e0; var l1W = this.l1;
      var b1W = this.b1; var e1W = this.e1;

      this.l1 = code; this.b1 = this.begin; this.e1 = this.end;
      this.l2 = 0;

      this.try_Whitespace();

      this.b0 = b0W; this.e0 = e0W; this.l1 = l1W; if (this.l1 != 0) {
      this.b1 = b1W; this.e1 = e1W; }
    }

    private whitespace()
    {
      if (this.e0 != this.b1)
      {
        this.eventHandler.whitespace(this.e0, this.b1);
        this.e0 = this.b1;
      }
    }

    private matchW(set: number): number
    {
      var code: number;
      for (;;)
      {
        code = this.match(set);
        if (code != 22)             // S^WS
        {
          if (code != 36)           // '(:'
          {
            break;
          }
          this.skip(code);
        }
      }
      return code;
    }

    private lookahead1W(set: number)
    {
      if (this.l1 == 0)
      {
        this.l1 = this.matchW(set);
        this.b1 = this.begin;
        this.e1 = this.end;
      }
    }

    private lookahead2W(set: number)
    {
      if (this.l2 == 0)
      {
        this.l2 = this.matchW(set);
        this.b2 = this.begin;
        this.e2 = this.end;
      }
      this.lk = (this.l2 << 9) | this.l1;
    }

    private lookahead1(set: number)
    {
      if (this.l1 == 0)
      {
        this.l1 = this.match(set);
        this.b1 = this.begin;
        this.e1 = this.end;
      }
    }

    private lookahead2(set: number)
    {
      if (this.l2 == 0)
      {
        this.l2 = this.match(set);
        this.b2 = this.begin;
        this.e2 = this.end;
      }
      this.lk = (this.l2 << 9) | this.l1;
    }

    private error(b: number, e: number, s: number, l: number, t: number)
    {
      if (e >= this.ex)
      {
        this.bx = b;
        this.ex = e;
        this.sx = s;
        this.lx = l;
        this.tx = t;
      }
      throw new ParseException(this.bx, this.ex, this.sx, this.lx, this.tx);
    }

    private lk: number; private b0: number; private e0: number;
    private l1: number; private b1: number; private e1: number;
    private l2: number; private b2: number; private e2: number;
    private bx: number; private ex: number; private sx: number; private lx: number; private tx: number;
    private eventHandler: ParsingEventHandler;
    private memo: Memoizer;

    private memoize(i: number, e: number, v: number)
    {
      this.memo[(e << 4) + i] = v;
    }

    private memoized(i: number, e: number): number
    {
      var v = this.memo[(e << 4) + i];
      return typeof v != "undefined" ? v : 0;
    }

    private input: string;
    private size: number;
    private begin: number;
    private end: number;

    private match(tokenSetId: number): number
    {
      var nonbmp = false;
      this.begin = this.end;
      var current = this.end;
      var result = Parser.INITIAL[tokenSetId];
      var state = 0;
      for (var code = result & 4095; code != 0; )
      {
        var charclass: number;
        var c0 = current < this.size ? this.input.charCodeAt(current) : 0;
        ++current;
        if (c0 < 0x80)
        {
          charclass = Parser.MAP0[c0];
        }
        else if (c0 < 0xd800)
        {
          var c1 = c0 >> 4;
          charclass = Parser.MAP1[(c0 & 15) + Parser.MAP1[(c1 & 31) + Parser.MAP1[c1 >> 5]]];
        }
        else
        {
          if (c0 < 0xdc00)
          {
            var c1: number = current < this.size ? this.input.charCodeAt(current) : 0;
            if (c1 >= 0xdc00 && c1 < 0xe000)
            {
              ++current;
              c0 = ((c0 & 0x3ff) << 10) + (c1 & 0x3ff) + 0x10000;
              nonbmp = true;
            }
          }
          var lo = 0, hi = 5;
          for (var m = 3; ; m = (hi + lo) >> 1)
          {
            if (Parser.MAP2[m] > c0) hi = m - 1;
            else if (Parser.MAP2[6 + m] < c0) lo = m + 1;
            else {charclass = Parser.MAP2[12 + m]; break;}
            if (lo > hi) {charclass = 0; break;}
          }
        }

        state = code;
        var i0 = (charclass << 12) + code - 1;
        code = Parser.TRANSITION[(i0 & 15) + Parser.TRANSITION[i0 >> 4]];

        if (code > 4095)
        {
          result = code;
          code &= 4095;
          this.end = current;
        }
      }

      result >>= 12;
      if (result == 0)
      {
        this.end = current - 1;
        var c1: number = this.end < this.size ? this.input.charCodeAt(this.end) : 0;
        if (c1 >= 0xdc00 && c1 < 0xe000) --this.end;
        this.error(this.begin, this.end, state, -1, -1);
      }

      if (nonbmp)
      {
        for (var i = result >> 9; i > 0; --i)
        {
          --this.end;
          var c1: number = this.end < this.size ? this.input.charCodeAt(this.end) : 0;
          if (c1 >= 0xdc00 && c1 < 0xe000) --this.end;
        }
      }
      else
      {
        this.end -= result >> 9;
      }

      return (result & 511) - 1;
    }

    private static getTokenSet(tokenSetId: number)
    {
      var set: string[] = [];
      var s = tokenSetId < 0 ? - tokenSetId : Parser.INITIAL[tokenSetId] & 4095;
      for (var i = 0; i < 284; i += 32)
      {
        var j = i;
        var i0 = (i >> 5) * 3612 + s - 1;
      var i1 = i0 >> 2;
      var i2 = i1 >> 2;
      var f = Parser.EXPECTED[(i0 & 3) + Parser.EXPECTED[(i1 & 3) + Parser.EXPECTED[(i2 & 15) + Parser.EXPECTED[i2 >> 4]]]];
        for ( ; f != 0; f >>>= 1, ++j)
        {
          if ((f & 1) != 0)
          {
            set.push(Parser.TOKEN[j]);
          }
        }
      }
      return set;
    }

    private static MAP0: number[] =
    [
      /*   0 */ 70, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3,
      /*  35 */ 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 18, 19, 20, 21, 22,
      /*  63 */ 23, 24, 25, 26, 27, 28, 29, 26, 30, 30, 30, 30, 30, 31, 32, 33, 30, 30, 34, 30, 30, 35, 30, 30, 30, 36,
      /*  89 */ 30, 30, 37, 38, 39, 38, 30, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57,
      /* 115 */ 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 38, 38
    ];

    private static MAP1: number[] =
    [
      /*   0 */ 108, 124, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 156, 181, 181, 181, 181,
      /*  21 */ 181, 214, 215, 213, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
      /*  42 */ 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
      /*  63 */ 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
      /*  84 */ 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
      /* 105 */ 214, 214, 214, 247, 261, 277, 293, 309, 355, 371, 387, 423, 423, 423, 415, 339, 331, 339, 331, 339, 339,
      /* 126 */ 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 440, 440, 440, 440, 440, 440, 440,
      /* 147 */ 324, 339, 339, 339, 339, 339, 339, 339, 339, 401, 423, 423, 424, 422, 423, 423, 339, 339, 339, 339, 339,
      /* 168 */ 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 423, 423, 423, 423, 423, 423, 423, 423,
      /* 189 */ 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423,
      /* 210 */ 423, 423, 423, 338, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339,
      /* 231 */ 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 423, 70, 0, 0, 0, 0, 0, 0, 0,
      /* 255 */ 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,
      /* 289 */ 13, 14, 15, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29,
      /* 315 */ 26, 30, 30, 30, 30, 30, 31, 32, 33, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 38, 30, 30,
      /* 341 */ 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 34, 30, 30, 35, 30, 30, 30, 36, 30, 30, 37,
      /* 367 */ 38, 39, 38, 30, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,
      /* 393 */ 61, 62, 63, 64, 65, 66, 67, 68, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 30, 30, 38, 38, 38, 38,
      /* 419 */ 38, 38, 38, 69, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 69, 69, 69, 69, 69, 69,
      /* 445 */ 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69
    ];

    private static MAP2: number[] =
    [
      /*  0 */ 57344, 63744, 64976, 65008, 65536, 983040, 63743, 64975, 65007, 65533, 983039, 1114111, 38, 30, 38, 30, 30,
      /* 17 */ 38
    ];

    private static INITIAL: number[] =
    [
      /*   0 */ 1, 12290, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28,
      /*  28 */ 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54,
      /*  54 */ 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,
      /*  80 */ 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105,
      /* 105 */ 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126,
      /* 126 */ 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147,
      /* 147 */ 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
      /* 168 */ 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189,
      /* 189 */ 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210,
      /* 210 */ 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
      /* 231 */ 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252,
      /* 252 */ 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273,
      /* 273 */ 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286
    ];

    private static TRANSITION: number[] =
    [
      /*     0 */ 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672,
      /*    15 */ 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672,
      /*    30 */ 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672,
      /*    45 */ 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672,
      /*    60 */ 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672,
      /*    75 */ 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672,
      /*    90 */ 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672,
      /*   105 */ 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672,
      /*   120 */ 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672,
      /*   135 */ 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672,
      /*   150 */ 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672,
      /*   165 */ 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672,
      /*   180 */ 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672,
      /*   195 */ 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672,
      /*   210 */ 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672,
      /*   225 */ 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672,
      /*   240 */ 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672,
      /*   255 */ 38672, 25307, 18176, 18180, 18180, 18180, 18210, 18180, 18180, 18180, 18180, 18222, 18180, 18180, 18180,
      /*   270 */ 18180, 18198, 18180, 18182, 18238, 38672, 38672, 38672, 43215, 38672, 38672, 50505, 38672, 38672, 38672,
      /*   285 */ 38672, 38672, 38672, 38672, 18953, 18958, 18794, 35998, 19418, 35990, 45351, 38672, 18269, 42564, 29641,
      /*   300 */ 38672, 40144, 38672, 23032, 18306, 18356, 18382, 18387, 18403, 18422, 18462, 20670, 19406, 50434, 18503,
      /*   315 */ 18525, 18547, 19412, 50440, 18509, 36003, 19232, 20563, 38672, 46930, 18591, 38672, 38672, 37574, 18609,
      /*   330 */ 18628, 33736, 18652, 18685, 18722, 18753, 18745, 18769, 18406, 25849, 18792, 20360, 18810, 18830, 18835,
      /*   345 */ 19138, 18794, 20364, 18814, 18794, 18839, 19540, 19955, 37554, 48943, 18855, 18871, 18894, 40258, 38672,
      /*   360 */ 38976, 18931, 18947, 18974, 19016, 19062, 19169, 19103, 19129, 20726, 19934, 19154, 19185, 19222, 19248,
      /*   375 */ 20726, 19934, 19154, 19185, 19222, 19273, 19000, 30964, 19299, 19315, 28712, 19342, 25187, 19377, 19393,
      /*   390 */ 19434, 19464, 19495, 19569, 19608, 24938, 19905, 19631, 19046, 19601, 24931, 19898, 19624, 19039, 19647,
      /*   405 */ 19687, 43796, 19722, 19792, 19745, 19771, 19808, 19113, 19859, 19875, 19921, 18446, 19976, 19994, 24983,
      /*   420 */ 18444, 19974, 19992, 20321, 18562, 47383, 20010, 46515, 35979, 20039, 20679, 20105, 20160, 20116, 20132,
      /*   435 */ 20159, 20115, 20176, 19479, 20207, 20223, 20259, 20298, 20337, 20380, 20402, 21368, 20386, 20408, 21374,
      /*   450 */ 19283, 20424, 20452, 20468, 20484, 20497, 50424, 20500, 20516, 20532, 20548, 20592, 20589, 50171, 20608,
      /*   465 */ 19547, 18794, 18487, 20629, 20143, 19945, 20660, 18437, 21954, 20695, 20711, 21969, 19448, 21939, 20755,
      /*   480 */ 19510, 19659, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672,
      /*   495 */ 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672,
      /*   510 */ 38672, 38672, 20939, 38672, 38672, 38672, 38672, 30470, 38672, 38672, 38672, 38672, 42922, 38623, 20771,
      /*   525 */ 20784, 20796, 20808, 43870, 38625, 20832, 38672, 38672, 38672, 43215, 38672, 38672, 50505, 28718, 38672,
      /*   540 */ 38672, 38672, 38672, 38672, 38672, 18953, 18958, 18794, 35998, 19553, 19028, 45351, 38672, 18269, 42564,
      /*   555 */ 29641, 38672, 40144, 38672, 23032, 18306, 18356, 18382, 18387, 18403, 18422, 18462, 20670, 19406, 50434,
      /*   570 */ 18503, 18525, 18547, 19412, 50440, 18509, 36003, 19232, 20563, 38672, 46930, 18591, 38672, 38672, 37574,
      /*   585 */ 18609, 18628, 33736, 18652, 18685, 18722, 18753, 18745, 18769, 18406, 25849, 18792, 20360, 18810, 18830,
      /*   600 */ 18835, 19138, 18794, 20364, 18814, 18794, 18839, 19540, 19955, 37554, 48943, 18855, 18871, 18894, 40258,
      /*   615 */ 38672, 38976, 18931, 18947, 18974, 19016, 19062, 19169, 19103, 19129, 20726, 19934, 19154, 19185, 19222,
      /*   630 */ 19248, 20726, 19934, 19154, 19185, 19222, 19273, 19000, 30964, 19299, 19315, 28712, 19342, 25187, 19377,
      /*   645 */ 19393, 19434, 19464, 19495, 19569, 19608, 24938, 19905, 19631, 19046, 19601, 24931, 19898, 19624, 19039,
      /*   660 */ 19647, 19687, 43796, 19722, 19792, 19745, 19771, 19808, 19113, 19859, 19875, 19921, 18446, 19976, 19994,
      /*   675 */ 24983, 18444, 19974, 19992, 20321, 18562, 47383, 20010, 46515, 35979, 20039, 20679, 20105, 20160, 20116,
      /*   690 */ 20132, 20159, 20115, 20176, 19479, 20207, 20223, 20259, 20298, 20337, 20380, 20402, 21368, 20386, 20408,
      /*   705 */ 21374, 19283, 20424, 20452, 20468, 20484, 20497, 50424, 20500, 20516, 20532, 20548, 20592, 20589, 50171,
      /*   720 */ 20608, 19547, 18794, 18487, 20629, 20143, 19945, 20660, 18437, 21954, 20695, 20711, 21969, 19448, 21939,
      /*   735 */ 20755, 19510, 19659, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672,
      /*   750 */ 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672,
      /*   765 */ 38672, 38672, 38672, 22954, 20869, 38672, 38672, 38672, 37958, 38672, 38672, 36976, 20909, 20888, 38672,
      /*   780 */ 38672, 38672, 38672, 39926, 20282, 20925, 20958, 38672, 38672, 38672, 43215, 38672, 38672, 25928, 38672,
      /*   795 */ 38672, 38672, 38672, 38672, 38672, 38672, 18953, 18958, 18794, 35998, 19418, 35990, 20997, 38672, 18269,
      /*   810 */ 42564, 29641, 38672, 40144, 38672, 23032, 18306, 18356, 18382, 18387, 18403, 18422, 18462, 20670, 19406,
      /*   825 */ 50434, 18503, 18525, 18547, 19412, 50440, 18509, 36003, 19232, 20563, 38672, 46930, 18591, 38672, 38672,
      /*   840 */ 37574, 18609, 18628, 33736, 18652, 18685, 18722, 18753, 18745, 18769, 18406, 25849, 18792, 20360, 18810,
      /*   855 */ 18830, 18835, 19138, 18794, 20364, 18814, 18794, 18839, 19540, 19955, 37554, 48943, 18855, 18871, 18894,
      /*   870 */ 40258, 38672, 38976, 18931, 18947, 18974, 19016, 19062, 19169, 19103, 19129, 20726, 19934, 19154, 19185,
      /*   885 */ 19222, 19248, 20726, 19934, 19154, 19185, 19222, 19273, 19000, 30964, 19299, 19315, 28712, 19342, 25187,
      /*   900 */ 19377, 19393, 19434, 19464, 19495, 19569, 19608, 24938, 19905, 19631, 19046, 19601, 24931, 19898, 19624,
      /*   915 */ 19039, 19647, 19687, 43796, 19722, 19792, 19745, 19771, 19808, 19113, 19859, 19875, 19921, 18446, 19976,
      /*   930 */ 19994, 24983, 18444, 19974, 19992, 20321, 18562, 47383, 20010, 46515, 35979, 20039, 20679, 20105, 20160,
      /*   945 */ 20116, 20132, 20159, 20115, 20176, 19479, 20207, 20223, 20259, 20298, 20337, 20380, 20402, 21368, 20386,
      /*   960 */ 20408, 21374, 19283, 20424, 20452, 20468, 20484, 20497, 50424, 20500, 20516, 20532, 20548, 20592, 20589,
      /*   975 */ 50171, 20608, 19547, 18794, 18487, 20629, 20143, 19945, 20660, 18437, 21954, 20695, 20711, 21969, 19448,
      /*   990 */ 21939, 20755, 19510, 19659, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672,
      /*  1005 */ 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672,
      /*  1020 */ 38672, 38672, 38672, 38672, 21013, 21118, 38672, 38672, 38672, 24651, 38672, 38672, 44696, 38672, 42922,
      /*  1035 */ 38824, 21095, 21058, 21048, 21080, 21111, 48022, 20832, 38672, 38672, 38672, 43215, 21139, 38672, 25530,
      /*  1050 */ 38672, 38672, 38672, 38672, 38672, 38672, 38672, 18953, 18958, 18794, 35998, 19418, 35990, 21157, 38672,
      /*  1065 */ 18269, 42564, 29641, 38672, 40144, 38672, 23032, 18306, 18356, 18382, 18387, 18403, 18422, 18462, 20670,
      /*  1080 */ 19406, 50434, 18503, 18525, 18547, 19412, 50440, 18509, 36003, 19232, 20563, 38672, 46930, 18591, 38672,
      /*  1095 */ 38672, 37574, 18609, 18628, 33736, 18652, 18685, 18722, 18753, 18745, 18769, 18406, 18776, 18792, 20360,
      /*  1110 */ 18810, 18830, 18835, 19257, 18794, 20364, 18814, 18794, 18839, 19540, 19955, 37554, 48943, 18855, 18871,
      /*  1125 */ 18894, 40258, 38672, 38976, 18931, 18947, 18974, 19016, 19062, 19169, 19103, 19129, 20726, 19934, 19154,
      /*  1140 */ 19185, 19222, 19248, 20726, 19934, 19154, 19185, 19222, 19273, 19000, 30964, 19299, 19315, 28712, 19342,
      /*  1155 */ 25187, 19377, 19393, 19434, 19464, 19495, 19569, 19608, 24938, 19905, 19631, 19046, 19601, 24931, 19898,
      /*  1170 */ 19624, 19039, 19647, 19687, 43796, 19722, 19792, 19745, 19771, 19808, 19113, 19859, 19875, 19921, 18446,
      /*  1185 */ 19976, 19994, 24983, 18444, 19974, 19992, 20321, 18562, 47383, 20010, 46515, 35979, 20039, 20679, 20105,
      /*  1200 */ 20160, 20116, 20132, 20159, 20115, 20176, 19479, 20207, 20223, 20259, 20298, 20337, 20380, 20402, 21368,
      /*  1215 */ 20386, 20408, 21374, 19283, 20424, 20452, 20468, 20484, 20497, 50424, 20500, 20516, 20532, 20548, 20592,
      /*  1230 */ 20589, 50171, 20608, 19547, 18794, 18487, 20629, 20143, 19945, 20660, 18437, 21954, 20695, 20711, 21969,
      /*  1245 */ 19448, 21939, 20755, 19510, 19659, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672,
      /*  1260 */ 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672,
      /*  1275 */ 38672, 38672, 38672, 38672, 38672, 20939, 38666, 38672, 38672, 38672, 21880, 38671, 38672, 36460, 38672,
      /*  1290 */ 21173, 38661, 21224, 38672, 21231, 38672, 42738, 42750, 20832, 38672, 38672, 38672, 43215, 38672, 38672,
      /*  1305 */ 50505, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 18953, 18958, 18794, 35998, 19418, 35990, 45351,
      /*  1320 */ 38672, 18269, 42564, 29641, 38672, 40144, 38672, 23032, 18306, 18356, 18382, 18387, 18403, 18422, 18462,
      /*  1335 */ 20670, 19406, 50434, 18503, 18525, 18547, 19412, 50440, 18509, 36003, 19232, 20563, 38672, 46930, 18591,
      /*  1350 */ 38672, 38672, 37574, 18609, 18628, 33736, 18652, 18685, 18722, 18753, 18745, 18769, 18406, 25849, 18792,
      /*  1365 */ 20360, 18810, 18830, 18835, 19138, 18794, 20364, 18814, 18794, 18839, 19540, 19955, 37554, 48943, 18855,
      /*  1380 */ 18871, 18894, 40258, 38672, 38976, 18931, 18947, 18974, 19016, 19062, 19169, 19103, 19129, 20726, 19934,
      /*  1395 */ 19154, 19185, 19222, 19248, 20726, 19934, 19154, 19185, 19222, 19273, 19000, 30964, 19299, 19315, 28712,
      /*  1410 */ 19342, 25187, 19377, 19393, 19434, 19464, 19495, 19569, 19608, 24938, 19905, 19631, 19046, 19601, 24931,
      /*  1425 */ 19898, 19624, 19039, 19647, 19687, 43796, 19722, 19792, 19745, 19771, 19808, 19113, 19859, 19875, 19921,
      /*  1440 */ 18446, 19976, 19994, 24983, 18444, 19974, 19992, 20321, 18562, 47383, 20010, 46515, 35979, 20039, 20679,
      /*  1455 */ 20105, 20160, 20116, 20132, 20159, 20115, 20176, 19479, 20207, 20223, 20259, 20298, 20337, 20380, 20402,
      /*  1470 */ 21368, 20386, 20408, 21374, 19283, 20424, 20452, 20468, 20484, 20497, 50424, 20500, 20516, 20532, 20548,
      /*  1485 */ 20592, 20589, 50171, 20608, 19547, 18794, 18487, 20629, 20143, 19945, 20660, 18437, 21954, 20695, 20711,
      /*  1500 */ 21969, 19448, 21939, 20755, 19510, 19659, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672,
      /*  1515 */ 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672,
      /*  1530 */ 38672, 38672, 38672, 38672, 38672, 38672, 20939, 38672, 38672, 38672, 38672, 30470, 21247, 38672, 38672,
      /*  1545 */ 38672, 28875, 38672, 38672, 21266, 38672, 38672, 21288, 21300, 20832, 38672, 38672, 38672, 43215, 38672,
      /*  1560 */ 38672, 50505, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 18953, 18958, 18794, 35998, 19418, 35990,
      /*  1575 */ 45351, 38672, 18269, 42564, 29641, 38672, 40144, 38672, 23032, 18306, 18356, 18382, 18387, 18403, 18422,
      /*  1590 */ 18462, 20670, 19406, 50434, 18503, 18525, 18547, 19412, 50440, 18509, 36003, 19232, 20563, 38672, 46930,
      /*  1605 */ 18591, 38672, 38672, 37574, 18609, 18628, 33736, 18652, 18685, 18722, 18753, 18745, 18769, 18406, 25849,
      /*  1620 */ 18792, 20360, 18810, 18830, 18835, 19138, 18794, 20364, 18814, 18794, 18839, 19540, 19955, 37554, 48943,
      /*  1635 */ 18855, 18871, 18894, 40258, 38672, 38976, 18931, 18947, 18974, 19016, 19062, 19169, 19103, 19129, 20726,
      /*  1650 */ 19934, 19154, 19185, 19222, 19248, 20726, 19934, 19154, 19185, 19222, 19273, 19000, 30964, 19299, 19315,
      /*  1665 */ 28712, 19342, 25187, 19377, 19393, 19434, 19464, 19495, 19569, 19608, 24938, 19905, 19631, 19046, 19601,
      /*  1680 */ 24931, 19898, 19624, 19039, 19647, 19687, 43796, 19722, 19792, 19745, 19771, 19808, 19113, 19859, 19875,
      /*  1695 */ 19921, 18446, 19976, 19994, 24983, 18444, 19974, 19992, 20321, 18562, 47383, 20010, 46515, 35979, 20039,
      /*  1710 */ 20679, 20105, 20160, 20116, 20132, 20159, 20115, 20176, 19479, 20207, 20223, 20259, 20298, 20337, 20380,
      /*  1725 */ 20402, 21368, 20386, 20408, 21374, 19283, 20424, 20452, 20468, 20484, 20497, 50424, 20500, 20516, 20532,
      /*  1740 */ 20548, 20592, 20589, 50171, 20608, 19547, 18794, 18487, 20629, 20143, 19945, 20660, 18437, 21954, 20695,
      /*  1755 */ 20711, 21969, 19448, 21939, 20755, 19510, 19659, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672,
      /*  1770 */ 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672,
      /*  1785 */ 38672, 38672, 38672, 38672, 38672, 38672, 38672, 20939, 38672, 38672, 38672, 38672, 30470, 38672, 38672,
      /*  1800 */ 38672, 38672, 31059, 38672, 38672, 38672, 38672, 38672, 38672, 24860, 21316, 38672, 38672, 38672, 43215,
      /*  1815 */ 38672, 38672, 50505, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 18953, 18958, 18794, 35998, 19418,
      /*  1830 */ 35990, 45351, 38672, 18269, 42564, 29641, 38672, 40144, 38672, 23032, 18306, 18356, 18382, 18387, 18403,
      /*  1845 */ 18422, 18462, 20670, 18988, 50434, 18503, 18525, 21353, 19412, 50440, 18509, 36003, 19232, 20563, 38672,
      /*  1860 */ 46930, 18591, 38672, 38672, 37574, 18609, 18628, 33736, 18652, 18685, 18722, 18753, 18745, 18769, 18406,
      /*  1875 */ 25849, 18792, 20360, 18810, 18830, 18835, 19138, 18794, 20364, 18814, 18794, 18839, 19540, 19955, 37554,
      /*  1890 */ 48943, 18855, 18871, 18894, 40258, 38672, 38976, 18931, 18947, 18974, 19016, 19062, 19169, 19103, 19129,
      /*  1905 */ 20726, 19934, 19154, 19185, 19222, 19248, 20726, 19934, 19154, 19185, 19222, 19273, 19000, 30964, 19299,
      /*  1920 */ 19315, 28712, 19342, 25187, 19377, 19393, 19434, 19464, 19495, 19569, 19608, 24938, 19905, 19631, 19046,
      /*  1935 */ 19601, 24931, 19898, 19624, 19039, 19647, 19687, 43796, 19722, 19792, 19745, 19771, 19808, 19113, 19859,
      /*  1950 */ 19875, 19921, 18446, 19976, 19994, 24983, 18444, 19974, 19992, 20321, 18562, 47383, 20010, 46515, 35979,
      /*  1965 */ 20039, 20679, 20105, 20160, 20116, 20132, 20159, 20115, 20176, 19479, 20207, 20223, 20259, 20298, 20337,
      /*  1980 */ 20380, 20402, 21368, 20386, 20408, 21374, 19283, 20424, 20452, 20468, 20484, 20497, 50424, 20500, 20516,
      /*  1995 */ 20532, 20548, 20592, 20589, 50171, 20608, 19547, 18794, 18487, 20629, 20143, 19945, 20660, 18437, 21954,
      /*  2010 */ 20695, 20711, 21969, 19448, 21939, 20755, 19510, 19659, 38672, 38672, 38672, 38672, 38672, 38672, 38672,
      /*  2025 */ 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672,
      /*  2040 */ 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 24749, 21390, 38672, 38672, 38672, 23220, 38672,
      /*  2055 */ 38672, 49687, 45814, 21411, 38672, 38672, 38672, 38672, 41859, 18366, 21448, 21478, 38672, 38672, 38672,
      /*  2070 */ 43215, 38672, 38672, 50505, 21515, 38672, 38672, 38672, 38672, 38672, 38672, 18953, 18958, 18794, 35998,
      /*  2085 */ 19418, 35990, 46185, 38672, 18269, 42564, 29641, 38672, 40144, 38672, 23032, 18306, 18356, 18382, 18387,
      /*  2100 */ 18403, 18422, 18462, 20670, 19406, 50434, 18503, 18525, 18547, 19412, 50440, 18509, 36003, 19232, 20563,
      /*  2115 */ 38672, 46930, 18591, 38672, 38672, 37574, 18609, 18628, 33736, 18652, 18685, 18722, 18753, 18745, 18769,
      /*  2130 */ 18406, 25849, 18792, 20360, 18810, 18830, 18835, 19138, 18794, 20364, 18814, 18794, 18839, 19540, 19955,
      /*  2145 */ 37554, 48943, 18855, 18871, 18894, 40258, 38672, 38976, 18931, 18947, 18974, 19016, 19062, 19169, 19103,
      /*  2160 */ 19129, 20726, 19934, 19154, 19185, 19222, 19248, 20726, 19934, 19154, 19185, 19222, 19273, 19000, 30964,
      /*  2175 */ 19299, 19315, 28712, 19342, 25187, 19377, 19393, 19434, 19464, 19495, 19569, 19608, 24938, 19905, 19631,
      /*  2190 */ 19046, 19601, 24931, 19898, 19624, 19039, 19647, 19687, 43796, 19722, 19792, 19745, 19771, 19808, 19113,
      /*  2205 */ 19859, 19875, 19921, 18446, 19976, 19994, 24983, 18444, 19974, 19992, 20321, 18562, 47383, 20010, 46515,
      /*  2220 */ 35979, 20039, 20679, 20105, 20160, 20116, 20132, 20159, 20115, 20176, 19479, 20207, 20223, 20259, 20298,
      /*  2235 */ 20337, 20380, 20402, 21368, 20386, 20408, 21374, 19283, 20424, 20452, 20468, 20484, 20497, 50424, 20500,
      /*  2250 */ 20516, 20532, 20548, 20592, 20589, 50171, 20608, 19547, 18794, 18487, 20629, 20143, 19945, 20660, 18437,
      /*  2265 */ 21954, 20695, 20711, 21969, 19448, 21939, 20755, 19510, 19659, 38672, 38672, 38672, 38672, 38672, 38672,
      /*  2280 */ 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672,
      /*  2295 */ 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 21462, 21573, 21537, 21537, 21537, 21580,
      /*  2310 */ 21532, 21537, 21542, 21615, 21558, 21644, 21596, 21609, 21631, 21657, 21669, 21681, 20832, 38672, 38672,
      /*  2325 */ 38672, 21337, 38672, 38672, 50505, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 18953, 18958, 18794,
      /*  2340 */ 35998, 19418, 35990, 45351, 38672, 18269, 42564, 21697, 38672, 40144, 38672, 23032, 18306, 18356, 18382,
      /*  2355 */ 18387, 18403, 18422, 18462, 20670, 19406, 50434, 18503, 18525, 18547, 19412, 50440, 18509, 36003, 19232,
      /*  2370 */ 20563, 38672, 46930, 18591, 38672, 38672, 37574, 18609, 18628, 33736, 18652, 18685, 18722, 18753, 18745,
      /*  2385 */ 18769, 18406, 25849, 18792, 20360, 18810, 18830, 18835, 19138, 18794, 20364, 18814, 18794, 18839, 19540,
      /*  2400 */ 19955, 37554, 48943, 18855, 18871, 18894, 40258, 38672, 38976, 18931, 18947, 18974, 19016, 19062, 19169,
      /*  2415 */ 19103, 19129, 20726, 19934, 19154, 19185, 19222, 19248, 20726, 19934, 19154, 19185, 19222, 19273, 19000,
      /*  2430 */ 30964, 19299, 19315, 28712, 19342, 25187, 19377, 19393, 19434, 19464, 19495, 19569, 19608, 24938, 19905,
      /*  2445 */ 19631, 19046, 19601, 24931, 19898, 19624, 19039, 19647, 19687, 43796, 19722, 19792, 19745, 19771, 19808,
      /*  2460 */ 19113, 19859, 19875, 19921, 18446, 19976, 19994, 24983, 18444, 19974, 19992, 20321, 18562, 47383, 20010,
      /*  2475 */ 46515, 35979, 20039, 20679, 20105, 20160, 20116, 20132, 20159, 20115, 20176, 19479, 20207, 20223, 20259,
      /*  2490 */ 20298, 20337, 20380, 20402, 21368, 20386, 20408, 21374, 19283, 20424, 20452, 20468, 20484, 20497, 50424,
      /*  2505 */ 20500, 20516, 20532, 20548, 20592, 20589, 50171, 20608, 19547, 18794, 18487, 20629, 20143, 19945, 20660,
      /*  2520 */ 18437, 21954, 20695, 20711, 21969, 19448, 21939, 20755, 19510, 19659, 38672, 38672, 38672, 38672, 38672,
      /*  2535 */ 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672,
      /*  2550 */ 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 20939, 30462, 38672, 38672, 38672,
      /*  2565 */ 22025, 23251, 38672, 22249, 23257, 42922, 30462, 38672, 21719, 21725, 21741, 21766, 21750, 21795, 38672,
      /*  2580 */ 38672, 38672, 46035, 38672, 38672, 50505, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 18953, 18958,
      /*  2595 */ 18794, 35998, 19418, 35990, 45351, 38672, 18269, 42564, 30475, 38672, 40144, 38672, 23032, 18306, 18356,
      /*  2610 */ 18382, 18387, 18403, 18422, 18462, 20670, 19406, 50434, 18503, 18525, 18547, 19412, 50440, 18509, 36003,
      /*  2625 */ 19232, 20563, 38672, 46930, 18591, 38672, 38672, 37574, 18609, 18628, 33736, 18652, 18685, 18722, 18753,
      /*  2640 */ 18745, 18769, 18406, 25849, 18792, 20360, 18810, 18830, 18835, 19138, 18794, 20364, 18814, 18794, 18839,
      /*  2655 */ 19540, 19955, 37554, 48943, 18855, 18871, 18894, 40258, 38672, 38976, 18931, 18947, 18974, 19016, 19062,
      /*  2670 */ 19169, 19103, 19129, 20726, 19934, 19154, 19185, 19222, 19248, 20726, 19934, 19154, 19185, 19222, 19273,
      /*  2685 */ 19000, 30964, 19299, 19315, 28712, 19342, 25187, 19377, 19393, 19434, 19464, 19495, 19569, 19608, 24938,
      /*  2700 */ 19905, 19631, 19046, 19601, 24931, 19898, 19624, 19039, 19647, 19687, 43796, 19722, 19792, 19745, 19771,
      /*  2715 */ 19808, 19113, 19859, 19875, 19921, 18446, 19976, 19994, 24983, 18444, 19974, 19992, 20321, 18562, 47383,
      /*  2730 */ 20010, 46515, 35979, 20039, 20679, 20105, 20160, 20116, 20132, 20159, 20115, 20176, 19479, 20207, 20223,
      /*  2745 */ 20259, 20298, 20337, 20380, 20402, 21368, 20386, 20408, 21374, 19283, 20424, 20452, 20468, 20484, 20497,
      /*  2760 */ 50424, 20500, 20516, 20532, 20548, 20592, 20589, 50171, 20608, 19547, 18794, 18487, 20629, 20143, 19945,
      /*  2775 */ 20660, 18437, 21954, 20695, 20711, 21969, 19448, 21939, 20755, 19510, 19659, 38672, 38672, 38672, 38672,
      /*  2790 */ 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672,
      /*  2805 */ 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 20939, 24785, 38672, 38672,
      /*  2820 */ 38672, 30470, 38672, 38672, 38672, 37115, 50393, 21856, 21832, 21850, 21834, 21872, 21896, 21908, 20832,
      /*  2835 */ 38672, 38672, 38672, 43215, 38672, 38672, 50505, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 18953,
      /*  2850 */ 18958, 18794, 35998, 19418, 35990, 45351, 38672, 18269, 42564, 29641, 38672, 40144, 38672, 23032, 18306,
      /*  2865 */ 18356, 18382, 18387, 18403, 18422, 18462, 20670, 19406, 50434, 18503, 18525, 21924, 19412, 50440, 18509,
      /*  2880 */ 36003, 19232, 20563, 38672, 46930, 18591, 38672, 38672, 37574, 18609, 18628, 33736, 18652, 18685, 18722,
      /*  2895 */ 18753, 18745, 18769, 18406, 25849, 18792, 20360, 18810, 18830, 18835, 19138, 18794, 20364, 18814, 18794,
      /*  2910 */ 18839, 19540, 19955, 37554, 48943, 18855, 18871, 18894, 40258, 38672, 38976, 18931, 18947, 18974, 19016,
      /*  2925 */ 19062, 19169, 19103, 19129, 20726, 19934, 19154, 19185, 19222, 19248, 20726, 19934, 19154, 19185, 19222,
      /*  2940 */ 19273, 19000, 30964, 19299, 19315, 28712, 19342, 25187, 19377, 19393, 19434, 19464, 19495, 19569, 19608,
      /*  2955 */ 24938, 19905, 19631, 19046, 19601, 24931, 19898, 19624, 19039, 19647, 19687, 43796, 19722, 19792, 19745,
      /*  2970 */ 19771, 19808, 19113, 19859, 19875, 19921, 18446, 19976, 19994, 24983, 18444, 19974, 19992, 20321, 18562,
      /*  2985 */ 47383, 20010, 46515, 35979, 20039, 20679, 20105, 20160, 20116, 20132, 20159, 20115, 20176, 19479, 20207,
      /*  3000 */ 20223, 20259, 20298, 20337, 20380, 20402, 21368, 20386, 20408, 21374, 19283, 20424, 20452, 20468, 20484,
      /*  3015 */ 20497, 50424, 20500, 20516, 20532, 20548, 20592, 20589, 50171, 20608, 19547, 18794, 18487, 20629, 20143,
      /*  3030 */ 19945, 20660, 18437, 21954, 20695, 20711, 21969, 19448, 21939, 20755, 19510, 19659, 38672, 38672, 38672,
      /*  3045 */ 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672,
      /*  3060 */ 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 20939, 38672, 38672,
      /*  3075 */ 38672, 38672, 30470, 38672, 38672, 38672, 37301, 25812, 27394, 21985, 22003, 21985, 22017, 27392, 21987,
      /*  3090 */ 20832, 38672, 38672, 38672, 43215, 38672, 38672, 50505, 38672, 38672, 38672, 38672, 38672, 38672, 38672,
      /*  3105 */ 18953, 18958, 18794, 35998, 19418, 35990, 45351, 38672, 18269, 42564, 29641, 38672, 42072, 38672, 23032,
      /*  3120 */ 18306, 18356, 18382, 18387, 18403, 18422, 18462, 20670, 19406, 50434, 18503, 18525, 18547, 19412, 50440,
      /*  3135 */ 18509, 36003, 19232, 20563, 38672, 46930, 18591, 38672, 38672, 37574, 18609, 18628, 33736, 18652, 18685,
      /*  3150 */ 18722, 18753, 18745, 18769, 18406, 25849, 18792, 20360, 18810, 18830, 18835, 19138, 18794, 20364, 18814,
      /*  3165 */ 18794, 18839, 19540, 19955, 37554, 48943, 18855, 18871, 18894, 40258, 38672, 38976, 18931, 18947, 18974,
      /*  3180 */ 19016, 19062, 19169, 19103, 19129, 20726, 19934, 19154, 19185, 19222, 19248, 20726, 19934, 19154, 19185,
      /*  3195 */ 19222, 19273, 19000, 30964, 19299, 19315, 28712, 19342, 25187, 19377, 19393, 19434, 19464, 19495, 19569,
      /*  3210 */ 19608, 24938, 19905, 19631, 19046, 19601, 24931, 19898, 19624, 19039, 19647, 19687, 43796, 19722, 19792,
      /*  3225 */ 19745, 19771, 19808, 19113, 19859, 19875, 19921, 18446, 19976, 19994, 24983, 18444, 19974, 19992, 20321,
      /*  3240 */ 18562, 47383, 20010, 46515, 35979, 20039, 20679, 20105, 20160, 20116, 20132, 20159, 20115, 20176, 19479,
      /*  3255 */ 20207, 20223, 20259, 20298, 20337, 20380, 20402, 21368, 20386, 20408, 21374, 19283, 20424, 20452, 20468,
      /*  3270 */ 20484, 20497, 50424, 20500, 20516, 20532, 20548, 20592, 20589, 50171, 20608, 19547, 18794, 18487, 20629,
      /*  3285 */ 20143, 19945, 20660, 18437, 21954, 20695, 20711, 21969, 19448, 21939, 20755, 19510, 19659, 38672, 38672,
      /*  3300 */ 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672,
      /*  3315 */ 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 20939, 20981,
      /*  3330 */ 38672, 38672, 38672, 30470, 24643, 38672, 48413, 22054, 26165, 22041, 22070, 22074, 22074, 22090, 20979,
      /*  3345 */ 48442, 20832, 38672, 38672, 38672, 43215, 38672, 38672, 50505, 38672, 38672, 38672, 38672, 38672, 38672,
      /*  3360 */ 38672, 18953, 18958, 18794, 35998, 19418, 35990, 45351, 38672, 18269, 42564, 29641, 38672, 40144, 38672,
      /*  3375 */ 23032, 18306, 18356, 18382, 18387, 18403, 18422, 18462, 20670, 19406, 50434, 18503, 18525, 18547, 19412,
      /*  3390 */ 50440, 18509, 36003, 19232, 20563, 38672, 46930, 18591, 38672, 38672, 37574, 18609, 18628, 33736, 18652,
      /*  3405 */ 18685, 18722, 18753, 18745, 18769, 18406, 25849, 18792, 20360, 18810, 18830, 18835, 19138, 18794, 20364,
      /*  3420 */ 18814, 18794, 18839, 19540, 19955, 37554, 48943, 18855, 18871, 18894, 40258, 38672, 38976, 18931, 18947,
      /*  3435 */ 18974, 19016, 19062, 19169, 19103, 19129, 20726, 19934, 19154, 19185, 19222, 19248, 20726, 19934, 19154,
      /*  3450 */ 19185, 19222, 19273, 19000, 30964, 19299, 19315, 28712, 19342, 25187, 19377, 19393, 19434, 19464, 19495,
      /*  3465 */ 19569, 19608, 24938, 19905, 19631, 19046, 19601, 24931, 19898, 19624, 19039, 19647, 19687, 43796, 19722,
      /*  3480 */ 19792, 19745, 19771, 19808, 19113, 19859, 19875, 19921, 18446, 19976, 19994, 24983, 18444, 19974, 19992,
      /*  3495 */ 20321, 18562, 47383, 20010, 46515, 35979, 20039, 20679, 20105, 20160, 20116, 20132, 20159, 20115, 20176,
      /*  3510 */ 19479, 20207, 20223, 20259, 20298, 20337, 20380, 20402, 21368, 20386, 20408, 21374, 19283, 20424, 20452,
      /*  3525 */ 20468, 20484, 20497, 50424, 20500, 20516, 20532, 20548, 20592, 20589, 50171, 20608, 19547, 18794, 18487,
      /*  3540 */ 20629, 20143, 19945, 20660, 18437, 21954, 20695, 20711, 21969, 19448, 21939, 20755, 19510, 19659, 38672,
      /*  3555 */ 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672,
      /*  3570 */ 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 22114,
      /*  3585 */ 38672, 38672, 38672, 38672, 30470, 38672, 38672, 38672, 38672, 42922, 47221, 22137, 22155, 22137, 22169,
      /*  3600 */ 47219, 22139, 22193, 38672, 38672, 38672, 43215, 38672, 38672, 50505, 38672, 38672, 38672, 38672, 38672,
      /*  3615 */ 38672, 38672, 28256, 42141, 22411, 26453, 44280, 27268, 22230, 38672, 22247, 38672, 29641, 22265, 42072,
      /*  3630 */ 33771, 38672, 38672, 38672, 38672, 26929, 22475, 35267, 22475, 22475, 36544, 42277, 22411, 22411, 33858,
      /*  3645 */ 26727, 37227, 26727, 26727, 35540, 39463, 38672, 38672, 38672, 38672, 38672, 38672, 18609, 24891, 38672,
      /*  3660 */ 38672, 38672, 28258, 22475, 22475, 22475, 22475, 35786, 22411, 22411, 22411, 22411, 22411, 37334, 26727,
      /*  3675 */ 26727, 26727, 26727, 26727, 32919, 33803, 21432, 38031, 38672, 38672, 38672, 38672, 38672, 22291, 38672,
      /*  3690 */ 26931, 22311, 22475, 22475, 22475, 22475, 33849, 22352, 22411, 35447, 22411, 22411, 33324, 22381, 26727,
      /*  3705 */ 45449, 26727, 26727, 32918, 33802, 38672, 38672, 38672, 38672, 30028, 38672, 38672, 22475, 36607, 22475,
      /*  3720 */ 22475, 28015, 33854, 22411, 22410, 22411, 22411, 27851, 26727, 45441, 26727, 26727, 22521, 33795, 38672,
      /*  3735 */ 38672, 22807, 38672, 38672, 28255, 22475, 22475, 38505, 29442, 22411, 22411, 34626, 26485, 26727, 26727,
      /*  3750 */ 26860, 26998, 22647, 38672, 38672, 22428, 26931, 48359, 22475, 42142, 32794, 22411, 28347, 37402, 26727,
      /*  3765 */ 22521, 32486, 38672, 18915, 38672, 22451, 22474, 36860, 37042, 22411, 22492, 22517, 22520, 26312, 34036,
      /*  3780 */ 26929, 42625, 42144, 35207, 26975, 22537, 26310, 35759, 22589, 36765, 22624, 22640, 22663, 22685, 22706,
      /*  3795 */ 39617, 42139, 28345, 26456, 39814, 47009, 22727, 28257, 28345, 26459, 33538, 36362, 36357, 34905, 28863,
      /*  3810 */ 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672,
      /*  3825 */ 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672,
      /*  3840 */ 20939, 38672, 38672, 38672, 38672, 30470, 38672, 38672, 38672, 23092, 42922, 38672, 38672, 38672, 38672,
      /*  3855 */ 38672, 31140, 31152, 22751, 38672, 38672, 38672, 43215, 38672, 38672, 26131, 38672, 38672, 38672, 38672,
      /*  3870 */ 38672, 38672, 38672, 28256, 42141, 22411, 26453, 27937, 27268, 22230, 38672, 38672, 38672, 29641, 38672,
      /*  3885 */ 40144, 38672, 38672, 38672, 38672, 38672, 26929, 22475, 22475, 22475, 22475, 36544, 22411, 22411, 22411,
      /*  3900 */ 33858, 26727, 26727, 26727, 26727, 30990, 39463, 38672, 38672, 38672, 38672, 38672, 38672, 18609, 38672,
      /*  3915 */ 38672, 38672, 38672, 28258, 22475, 22475, 22475, 22475, 35786, 22411, 22411, 22411, 22411, 22411, 37334,
      /*  3930 */ 26727, 26727, 26727, 26727, 26727, 32919, 33803, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672,
      /*  3945 */ 38672, 26931, 22475, 22475, 22475, 22475, 22475, 33849, 22411, 22411, 22411, 22411, 22411, 33324, 26727,
      /*  3960 */ 26727, 26727, 26727, 26727, 32918, 33802, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 22475, 22475,
      /*  3975 */ 22475, 22475, 28015, 33854, 22411, 22411, 22411, 22411, 27851, 26727, 26727, 26727, 26727, 22521, 33795,
      /*  3990 */ 38672, 38672, 38672, 38672, 38672, 28255, 22475, 22475, 22475, 29442, 22411, 22411, 22411, 26485, 26727,
      /*  4005 */ 26727, 26727, 26998, 46887, 38672, 38672, 38672, 26931, 22475, 22475, 42142, 22411, 22411, 28347, 26727,
      /*  4020 */ 26727, 22521, 26313, 38672, 38672, 38672, 27136, 22475, 42143, 22411, 22411, 26977, 26727, 22520, 26312,
      /*  4035 */ 34036, 26929, 22475, 42144, 22411, 26975, 26727, 26310, 35759, 22476, 22411, 26978, 48196, 20435, 28340,
      /*  4050 */ 26976, 39617, 42139, 28345, 26456, 28257, 28343, 26456, 28257, 28345, 26459, 33538, 36362, 36357, 34905,
      /*  4065 */ 28863, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672,
      /*  4080 */ 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672,
      /*  4095 */ 38672, 20939, 22803, 38672, 38672, 38672, 22886, 38672, 38672, 38672, 38672, 42922, 36439, 22823, 22844,
      /*  4110 */ 22866, 22878, 36438, 22828, 20832, 38672, 38672, 38672, 43215, 38672, 38672, 50505, 41329, 38672, 22902,
      /*  4125 */ 38672, 38672, 38672, 38672, 18953, 18958, 18794, 35998, 19418, 35990, 45351, 38672, 18269, 42564, 29641,
      /*  4140 */ 38672, 40144, 38672, 23032, 18306, 18356, 18382, 18387, 18403, 18422, 18462, 20670, 19406, 50434, 18503,
      /*  4155 */ 18525, 18547, 19412, 50440, 18509, 36003, 19232, 20563, 38672, 46930, 18591, 38672, 38672, 37574, 18609,
      /*  4170 */ 18628, 33736, 18652, 18685, 18722, 18753, 18745, 18769, 18406, 25849, 18792, 20360, 18810, 18830, 18835,
      /*  4185 */ 19138, 18794, 20364, 18814, 18794, 18839, 19540, 19955, 37554, 48943, 18855, 18871, 18894, 40258, 38672,
      /*  4200 */ 38976, 18931, 18947, 18974, 19016, 19062, 19169, 19103, 19129, 20726, 19934, 19154, 19185, 19222, 19248,
      /*  4215 */ 20726, 19934, 19154, 19185, 19222, 19273, 19000, 30964, 19299, 19315, 28712, 19342, 25187, 19377, 19393,
      /*  4230 */ 19434, 19464, 19495, 19569, 19608, 24938, 19905, 19631, 19046, 19601, 24931, 19898, 19624, 19039, 19647,
      /*  4245 */ 19687, 43796, 19722, 19792, 19745, 19771, 19808, 19113, 19859, 19875, 19921, 18446, 19976, 19994, 24983,
      /*  4260 */ 18444, 19974, 19992, 20321, 18562, 47383, 20010, 46515, 35979, 20039, 20679, 20105, 20160, 20116, 20132,
      /*  4275 */ 20159, 20115, 20176, 19479, 20207, 20223, 20259, 20298, 20337, 20380, 20402, 21368, 20386, 20408, 21374,
      /*  4290 */ 19283, 20424, 20452, 20468, 20484, 20497, 50424, 20500, 20516, 20532, 20548, 20592, 20589, 50171, 20608,
      /*  4305 */ 19547, 18794, 18487, 20629, 20143, 19945, 20660, 18437, 21954, 20695, 20711, 21969, 19448, 21939, 20755,
      /*  4320 */ 19510, 19659, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672,
      /*  4335 */ 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672,
      /*  4350 */ 38672, 38672, 20939, 22923, 38672, 38672, 38672, 30470, 38672, 38672, 38672, 23115, 42922, 38672, 38672,
      /*  4365 */ 38672, 38672, 38672, 26339, 22940, 22970, 38672, 38672, 38672, 43215, 38672, 38672, 23007, 38672, 38672,
      /*  4380 */ 38672, 38672, 38672, 38672, 38672, 28256, 42141, 22411, 26453, 47631, 27268, 22230, 38672, 38672, 38672,
      /*  4395 */ 29641, 38672, 48650, 23029, 38672, 38672, 38672, 38672, 26929, 22475, 22475, 22475, 22475, 36544, 22411,
      /*  4410 */ 22411, 22411, 33858, 26727, 26727, 26727, 26727, 30990, 42723, 23085, 38672, 38672, 38672, 38672, 38672,
      /*  4425 */ 23048, 38672, 38672, 38672, 38672, 28258, 22475, 22475, 22475, 22475, 35786, 22411, 22411, 22411, 22411,
      /*  4440 */ 22411, 37334, 26727, 26727, 26727, 26727, 26727, 32919, 23072, 23108, 38672, 38672, 38672, 38672, 38672,
      /*  4455 */ 48411, 38672, 38672, 26931, 22475, 22475, 22475, 22475, 22475, 46833, 22411, 22411, 22411, 22411, 22411,
      /*  4470 */ 47864, 26727, 26727, 26727, 26727, 26727, 32918, 41804, 38672, 38672, 38672, 38672, 38672, 38672, 38672,
      /*  4485 */ 22475, 22475, 22475, 22475, 43252, 33854, 22411, 22411, 22411, 22411, 48185, 26727, 26727, 26727, 26727,
      /*  4500 */ 22521, 33795, 38672, 38672, 38672, 38672, 38672, 28255, 22475, 22475, 22475, 23131, 22411, 22411, 22411,
      /*  4515 */ 36778, 26727, 26727, 26727, 26998, 46887, 38672, 38672, 38672, 26931, 22475, 22475, 42142, 22411, 22411,
      /*  4530 */ 28347, 26727, 26727, 22521, 26313, 38672, 38672, 38672, 27136, 22475, 42143, 22411, 22411, 26977, 26727,
      /*  4545 */ 22520, 26312, 34036, 26929, 22475, 42144, 22411, 26975, 26727, 26310, 35759, 22476, 22411, 26978, 48196,
      /*  4560 */ 20435, 28340, 26976, 39617, 42139, 28345, 26456, 28257, 28343, 26456, 28257, 28345, 26459, 33538, 36362,
      /*  4575 */ 36357, 34905, 28863, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672,
      /*  4590 */ 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672,
      /*  4605 */ 38672, 38672, 38672, 20939, 18878, 38672, 38672, 38672, 35592, 32963, 38672, 38672, 23153, 42922, 37950,
      /*  4620 */ 35335, 23190, 23196, 23212, 38672, 41919, 23236, 23274, 38672, 38672, 45078, 23291, 38672, 50505, 38672,
      /*  4635 */ 38672, 38672, 38672, 38672, 38672, 38672, 18953, 25157, 23483, 23350, 24209, 23309, 45351, 38672, 18269,
      /*  4650 */ 42564, 28228, 38672, 40144, 38672, 23032, 18306, 18356, 18382, 18387, 18403, 18422, 18462, 20670, 19821,
      /*  4665 */ 23376, 23336, 23369, 23392, 24203, 23434, 23465, 24172, 23726, 19833, 38672, 46930, 18591, 38672, 38672,
      /*  4680 */ 37574, 18609, 18628, 33736, 18652, 18685, 18722, 18753, 18745, 18769, 18406, 18729, 23481, 23642, 24581,
      /*  4695 */ 23499, 23504, 24048, 23353, 23520, 23933, 23353, 24164, 23917, 24518, 37554, 48943, 18855, 18871, 18894,
      /*  4710 */ 40258, 38672, 38976, 18931, 18947, 18974, 19016, 19062, 19169, 19103, 23536, 23854, 23815, 23561, 23577,
      /*  4725 */ 23632, 24450, 24255, 23689, 23658, 23674, 23716, 23742, 24268, 30964, 19299, 19315, 28712, 19342, 25187,
      /*  4740 */ 19377, 19393, 19434, 19464, 19495, 19569, 23773, 23804, 23842, 24040, 23870, 23886, 23449, 23700, 23902,
      /*  4755 */ 23320, 23949, 23992, 43796, 19722, 19792, 19745, 19771, 19808, 19113, 19859, 19875, 24027, 23545, 23592,
      /*  4770 */ 24064, 24137, 24459, 24094, 24110, 23407, 20069, 47383, 20010, 46515, 35979, 20039, 20679, 24126, 24567,
      /*  4785 */ 24482, 24153, 24188, 23616, 24225, 20191, 20207, 20223, 20259, 20298, 20337, 24284, 24078, 24374, 24300,
      /*  4800 */ 24330, 24314, 23418, 20424, 20452, 20468, 24361, 23826, 23606, 24390, 24419, 20532, 24435, 24475, 24498,
      /*  4815 */ 24628, 20608, 23750, 23928, 24403, 20644, 23757, 24508, 20660, 20054, 24345, 20695, 24537, 24597, 24613,
      /*  4830 */ 24552, 23788, 24240, 23964, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672,
      /*  4845 */ 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672,
      /*  4860 */ 38672, 38672, 38672, 38672, 20939, 39906, 38672, 38672, 38672, 30470, 24672, 38672, 38672, 24667, 26611,
      /*  4875 */ 24688, 24695, 24695, 24695, 24711, 26910, 24735, 20832, 38672, 38672, 38672, 43215, 38672, 38672, 50505,
      /*  4890 */ 38672, 38672, 38672, 38672, 38672, 38672, 38672, 18953, 18958, 18794, 35998, 19418, 35990, 45351, 38672,
      /*  4905 */ 18269, 42564, 29641, 38672, 40144, 38672, 23032, 18306, 18356, 18382, 18387, 18403, 18422, 18462, 20670,
      /*  4920 */ 19406, 50434, 18503, 18525, 18547, 19412, 50440, 18509, 36003, 19232, 20563, 38672, 46930, 18591, 38672,
      /*  4935 */ 38672, 37574, 24765, 18628, 33736, 18652, 18685, 18722, 18753, 18745, 18769, 18406, 25849, 18792, 20360,
      /*  4950 */ 18810, 18830, 18835, 19138, 18794, 20364, 18814, 18794, 18839, 19540, 20739, 24828, 48943, 18855, 18871,
      /*  4965 */ 18894, 40258, 24858, 38976, 18931, 18947, 18974, 19016, 19062, 19169, 19103, 19129, 20726, 19934, 19154,
      /*  4980 */ 19185, 19222, 19248, 20726, 19934, 19154, 19185, 19222, 19273, 19087, 30964, 19299, 19315, 28712, 19342,
      /*  4995 */ 25187, 19377, 19393, 19434, 19464, 19495, 24876, 24922, 24938, 19905, 19631, 19046, 24954, 24931, 19898,
      /*  5010 */ 19624, 19039, 19647, 19687, 43796, 19722, 19792, 19745, 19771, 19808, 19113, 19859, 19875, 24970, 18446,
      /*  5025 */ 19976, 19994, 19525, 18444, 19974, 19992, 20321, 18562, 47383, 20010, 46515, 35979, 20039, 20679, 20105,
      /*  5040 */ 20160, 20116, 20132, 20159, 20115, 20176, 19479, 20207, 20223, 20259, 20298, 20337, 20380, 20402, 21368,
      /*  5055 */ 20386, 20408, 21374, 19283, 20424, 20452, 20468, 20484, 20497, 50424, 20500, 20516, 20532, 20548, 20592,
      /*  5070 */ 20589, 50171, 20608, 19547, 18794, 18487, 20629, 20143, 19945, 20660, 18437, 21954, 20695, 20711, 21969,
      /*  5085 */ 19448, 21939, 20755, 19510, 19659, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672,
      /*  5100 */ 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672,
      /*  5115 */ 38672, 38672, 38672, 38672, 38672, 20939, 38672, 38672, 38672, 38672, 30470, 38672, 38672, 38672, 38672,
      /*  5130 */ 21250, 35576, 24999, 24999, 24999, 35584, 31668, 31680, 20832, 38672, 38672, 38672, 43215, 38672, 38672,
      /*  5145 */ 50505, 38672, 38672, 25271, 38672, 38672, 38672, 38672, 18953, 18958, 18794, 35998, 19418, 19887, 45351,
      /*  5160 */ 38672, 18269, 42564, 29641, 38672, 40144, 38672, 23032, 18306, 18356, 18382, 18387, 18403, 18422, 18462,
      /*  5175 */ 20670, 19406, 50434, 18503, 18525, 18547, 19412, 50440, 18509, 36003, 19232, 20563, 38672, 46930, 18591,
      /*  5190 */ 38672, 38672, 37574, 18609, 18628, 33736, 18652, 18685, 18722, 18753, 18745, 18769, 18406, 25849, 18792,
      /*  5205 */ 20360, 18810, 18830, 18835, 19138, 18794, 20364, 18814, 18794, 18839, 19540, 19955, 37554, 48943, 18855,
      /*  5220 */ 18871, 18894, 40258, 38672, 38976, 18931, 18947, 18974, 19016, 19062, 19169, 19103, 19129, 20726, 19934,
      /*  5235 */ 19154, 19185, 19222, 19248, 20726, 19934, 19154, 19185, 19222, 19273, 19000, 30964, 19299, 19315, 28712,
      /*  5250 */ 19342, 25187, 19377, 19393, 19434, 19464, 19495, 19569, 19608, 24938, 19905, 19631, 19046, 19601, 24931,
      /*  5265 */ 19898, 19624, 19039, 19647, 19687, 43796, 19722, 19792, 19745, 19771, 19808, 19113, 19859, 19875, 19921,
      /*  5280 */ 18446, 19976, 19994, 24983, 18444, 19974, 19992, 20321, 18562, 47383, 20010, 46515, 35979, 20039, 20679,
      /*  5295 */ 20105, 20160, 20116, 20132, 20159, 20115, 20176, 19479, 20207, 20223, 20259, 20298, 20337, 20380, 20402,
      /*  5310 */ 21368, 20386, 20408, 21374, 19283, 20424, 20452, 20468, 20484, 20497, 50424, 20500, 20516, 20532, 20548,
      /*  5325 */ 20592, 20589, 50171, 20608, 19547, 18794, 18487, 20629, 20143, 19945, 20660, 18437, 21954, 20695, 20711,
      /*  5340 */ 21969, 19448, 21939, 20755, 19510, 19659, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672,
      /*  5355 */ 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672,
      /*  5370 */ 38672, 38672, 38672, 38672, 38672, 38672, 50381, 27744, 38672, 38672, 38672, 30470, 38672, 38672, 38672,
      /*  5385 */ 38672, 42922, 40452, 25015, 25015, 25015, 25023, 27746, 40454, 20832, 25047, 38672, 38672, 43215, 38672,
      /*  5400 */ 38672, 50505, 38672, 38672, 25065, 38672, 38672, 38672, 38672, 18953, 18958, 18794, 35998, 19418, 20310,
      /*  5415 */ 45351, 38672, 18269, 42564, 29641, 38672, 40144, 38672, 23032, 18306, 18356, 18382, 18387, 18403, 18422,
      /*  5430 */ 18462, 20670, 19406, 50434, 18503, 18525, 18547, 19412, 50440, 18509, 36003, 19232, 20563, 38672, 46930,
      /*  5445 */ 18591, 38672, 38672, 37574, 18609, 18628, 33736, 18652, 18685, 18722, 18753, 18745, 18769, 18406, 25849,
      /*  5460 */ 18792, 20360, 18810, 18830, 18835, 19138, 18794, 20364, 18814, 18794, 18839, 19540, 19955, 37554, 48943,
      /*  5475 */ 18855, 18871, 18894, 40258, 38672, 38976, 18931, 18947, 18974, 19016, 19062, 19169, 19103, 19129, 20726,
      /*  5490 */ 19934, 19154, 19185, 19222, 19248, 20726, 19934, 19154, 19185, 19222, 19273, 19000, 30964, 19299, 19315,
      /*  5505 */ 28712, 19342, 25187, 19377, 19393, 19434, 19464, 19495, 19569, 19608, 24938, 19905, 19631, 19046, 19601,
      /*  5520 */ 24931, 19898, 19624, 19039, 19647, 19687, 43796, 19722, 19792, 19745, 19771, 19808, 19113, 19859, 19875,
      /*  5535 */ 19921, 18446, 19976, 19994, 24983, 18444, 19974, 19992, 20321, 18562, 47383, 20010, 46515, 35979, 20039,
      /*  5550 */ 20679, 20105, 20160, 20116, 20132, 20159, 20115, 20176, 19479, 20207, 20223, 20259, 20298, 20337, 20380,
      /*  5565 */ 20402, 21368, 20386, 20408, 21374, 19283, 20424, 20452, 20468, 20484, 20497, 50424, 20500, 20516, 20532,
      /*  5580 */ 20548, 20592, 20589, 50171, 20608, 19547, 18794, 18487, 20629, 20143, 19945, 20660, 18437, 21954, 20695,
      /*  5595 */ 20711, 21969, 19448, 21939, 20755, 19510, 19659, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672,
      /*  5610 */ 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672,
      /*  5625 */ 38672, 38672, 38672, 38672, 38672, 38672, 38672, 50286, 50295, 38672, 38672, 38672, 23056, 38672, 38672,
      /*  5640 */ 38672, 38672, 42922, 44048, 25088, 25088, 25088, 25096, 46630, 44050, 25120, 38672, 38672, 38672, 43215,
      /*  5655 */ 38672, 38672, 50505, 38672, 38672, 18699, 38672, 38672, 38672, 38672, 18953, 18958, 18794, 35998, 19418,
      /*  5670 */ 35990, 25136, 38672, 18269, 42564, 29641, 38672, 40144, 38672, 23032, 18306, 18356, 18382, 18387, 18403,
      /*  5685 */ 18422, 18462, 20670, 19406, 50434, 18503, 18525, 18547, 19412, 50440, 18509, 36003, 19232, 20563, 38672,
      /*  5700 */ 46930, 18591, 38672, 38672, 37574, 18609, 18628, 33736, 18652, 18685, 18722, 18753, 18745, 18769, 18406,
      /*  5715 */ 25849, 18792, 20360, 18810, 18830, 18835, 19138, 18794, 20364, 18814, 18794, 18839, 19540, 19955, 37554,
      /*  5730 */ 48943, 18855, 18871, 18894, 40258, 38672, 38976, 18931, 18947, 18974, 19016, 19062, 19169, 19103, 19129,
      /*  5745 */ 20726, 19934, 19154, 19185, 19222, 19248, 20726, 19934, 19154, 19185, 19222, 19273, 19000, 30964, 19299,
      /*  5760 */ 19315, 28712, 19342, 25187, 19377, 19393, 19434, 19464, 19495, 19569, 19608, 24938, 19905, 19631, 19046,
      /*  5775 */ 19601, 24931, 19898, 19624, 19039, 19647, 19687, 43796, 19722, 19792, 19745, 19771, 19808, 19113, 19859,
      /*  5790 */ 19875, 19921, 18446, 19976, 19994, 24983, 18444, 19974, 19992, 20321, 18562, 47383, 20010, 46515, 35979,
      /*  5805 */ 20039, 20679, 20105, 20160, 20116, 20132, 20159, 20115, 20176, 19479, 20207, 20223, 20259, 20298, 20337,
      /*  5820 */ 20380, 20402, 21368, 20386, 20408, 21374, 19283, 20424, 20452, 20468, 20484, 20497, 50424, 20500, 20516,
      /*  5835 */ 20532, 20548, 20592, 20589, 50171, 25152, 19547, 18794, 18487, 20629, 20143, 19945, 20660, 18437, 21954,
      /*  5850 */ 20695, 20711, 21969, 19448, 21939, 20755, 19510, 19659, 38672, 38672, 38672, 38672, 38672, 38672, 38672,
      /*  5865 */ 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672,
      /*  5880 */ 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 25173, 38672, 38672, 38672, 38672, 30470, 25218,
      /*  5895 */ 38672, 38672, 21395, 32346, 38672, 38672, 38672, 25210, 25237, 21393, 25221, 25256, 38672, 38672, 38672,
      /*  5910 */ 43215, 38672, 38672, 50505, 22214, 38672, 38672, 38672, 38672, 38672, 38672, 18953, 18958, 18794, 35998,
      /*  5925 */ 19206, 20349, 45351, 38672, 18269, 42564, 29641, 38672, 40144, 38672, 23032, 18306, 18356, 18382, 18387,
      /*  5940 */ 18403, 18422, 18462, 20670, 19406, 50434, 18503, 18525, 18547, 19412, 50440, 18509, 36003, 19232, 20563,
      /*  5955 */ 38672, 46930, 18591, 38672, 38672, 37574, 18609, 18628, 33736, 18652, 18685, 18722, 18753, 18745, 18769,
      /*  5970 */ 18406, 25849, 18792, 20360, 18810, 18830, 18835, 19138, 18794, 20364, 18814, 18794, 18839, 19540, 19955,
      /*  5985 */ 37554, 48943, 18855, 18871, 18894, 40258, 38672, 38976, 18931, 18947, 18974, 19016, 19062, 19169, 19103,
      /*  6000 */ 19129, 20726, 19934, 19154, 19185, 19222, 19248, 20726, 19934, 19154, 19185, 19222, 19273, 19000, 30964,
      /*  6015 */ 19299, 19315, 28712, 19342, 25187, 19377, 19393, 19434, 19464, 19495, 19569, 19608, 24938, 19905, 19631,
      /*  6030 */ 19046, 19601, 24931, 19898, 19624, 19039, 19647, 19687, 43796, 19722, 19792, 19745, 19771, 19808, 19113,
      /*  6045 */ 19859, 19875, 19921, 18446, 19976, 19994, 24983, 18444, 19974, 19992, 20321, 18562, 47383, 20010, 46515,
      /*  6060 */ 35979, 20039, 20679, 20105, 20160, 20116, 20132, 20159, 20115, 20176, 19479, 20207, 20223, 20259, 20298,
      /*  6075 */ 20337, 20380, 20402, 21368, 20386, 20408, 21374, 19283, 20424, 20452, 20468, 20484, 20497, 50424, 20500,
      /*  6090 */ 20516, 20532, 20548, 20592, 20589, 50171, 20608, 19547, 18794, 18487, 20629, 20143, 19945, 20660, 18437,
      /*  6105 */ 21954, 20695, 20711, 21969, 19448, 21939, 20755, 19510, 19659, 38672, 38672, 38672, 38672, 38672, 38672,
      /*  6120 */ 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672,
      /*  6135 */ 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 20939, 38672, 38672, 38672, 38672, 30470,
      /*  6150 */ 38672, 38672, 38672, 38672, 42922, 38672, 38672, 38672, 38672, 38672, 41563, 25293, 20832, 38672, 38672,
      /*  6165 */ 38672, 43215, 38672, 38672, 50505, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 18953, 18958, 18794,
      /*  6180 */ 35998, 19418, 35990, 45351, 38672, 18269, 42564, 29641, 38672, 40144, 38672, 23032, 18306, 18356, 18382,
      /*  6195 */ 18387, 18403, 18422, 18462, 20670, 19406, 50434, 18503, 18525, 18547, 19412, 50440, 18509, 36003, 19232,
      /*  6210 */ 20563, 38672, 46930, 18591, 38672, 38672, 37574, 18609, 18628, 33736, 18652, 18685, 18722, 18753, 18745,
      /*  6225 */ 18769, 18406, 25849, 18792, 20360, 18810, 18830, 18835, 19138, 18794, 20364, 18814, 18794, 18839, 19540,
      /*  6240 */ 19955, 37554, 48943, 18855, 18871, 18894, 40258, 38672, 38976, 18931, 18947, 18974, 19016, 19062, 19169,
      /*  6255 */ 19103, 19129, 20726, 19934, 19154, 19185, 19222, 19248, 20726, 19934, 19154, 19185, 19222, 19273, 19000,
      /*  6270 */ 30964, 19299, 19315, 28712, 19342, 25187, 19377, 19393, 19434, 19464, 19495, 19569, 19608, 24938, 19905,
      /*  6285 */ 19631, 19046, 19601, 24931, 19898, 19624, 19039, 19647, 19687, 43796, 19722, 19792, 19745, 19771, 19808,
      /*  6300 */ 19113, 19859, 19875, 19921, 18446, 19976, 19994, 24983, 18444, 19974, 19992, 20321, 18562, 47383, 20010,
      /*  6315 */ 46515, 35979, 20039, 20679, 20105, 20160, 20116, 20132, 20159, 20115, 20176, 19479, 20207, 20223, 20259,
      /*  6330 */ 20298, 20337, 20380, 20402, 21368, 20386, 20408, 21374, 19283, 20424, 20452, 20468, 20484, 20497, 50424,
      /*  6345 */ 20500, 20516, 20532, 20548, 20592, 20589, 50171, 20608, 19547, 18794, 18487, 20629, 20143, 19945, 20660,
      /*  6360 */ 18437, 21954, 20695, 20711, 21969, 19448, 21939, 20755, 19510, 19659, 38672, 38672, 38672, 38672, 38672,
      /*  6375 */ 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672,
      /*  6390 */ 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 25323, 38672, 38672, 38672, 38672,
      /*  6405 */ 22098, 38672, 38672, 38672, 38672, 42922, 38672, 38672, 38672, 38672, 44448, 27298, 33333, 25344, 38672,
      /*  6420 */ 38672, 38672, 43215, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 28256, 42141,
      /*  6435 */ 22411, 26453, 44280, 27268, 25375, 38672, 38672, 38672, 29641, 38672, 38672, 38672, 38672, 38672, 38672,
      /*  6450 */ 38672, 26929, 22475, 22475, 22475, 22475, 25393, 22411, 22411, 22411, 22690, 26727, 26727, 26727, 26727,
      /*  6465 */ 30990, 39463, 38672, 38672, 38672, 38672, 38672, 38672, 48405, 38672, 38672, 38672, 38672, 28258, 22475,
      /*  6480 */ 22475, 22475, 22475, 35786, 22411, 22411, 22411, 22411, 22411, 37334, 26727, 26727, 26727, 26727, 26727,
      /*  6495 */ 32919, 30349, 25414, 38672, 38672, 38672, 38672, 38672, 48411, 38672, 38672, 26931, 22475, 22475, 22475,
      /*  6510 */ 22475, 22475, 33849, 22411, 22411, 22411, 22411, 22411, 33324, 26727, 26727, 26727, 26727, 26727, 32918,
      /*  6525 */ 41804, 38672, 38672, 38672, 38672, 34976, 38672, 38672, 22475, 22475, 22475, 22475, 33754, 33854, 22411,
      /*  6540 */ 22411, 22411, 22411, 31454, 26727, 26727, 26727, 26727, 22521, 33795, 38672, 38672, 38672, 38672, 38672,
      /*  6555 */ 28255, 22475, 22475, 22475, 23131, 22411, 22411, 22411, 36778, 26727, 26727, 26727, 26998, 46887, 38672,
      /*  6570 */ 38672, 25437, 26931, 22475, 22475, 42142, 22411, 22411, 28347, 26727, 26727, 22521, 26313, 38672, 38672,
      /*  6585 */ 38672, 27136, 22475, 42143, 22411, 22411, 26977, 26727, 22520, 26312, 34036, 26929, 22475, 42144, 22411,
      /*  6600 */ 26975, 26727, 26310, 35759, 22476, 22411, 26978, 48196, 20435, 28340, 26976, 39617, 42139, 28345, 26456,
      /*  6615 */ 28257, 28343, 26456, 28257, 28345, 26459, 33538, 36362, 36357, 34905, 28863, 38672, 38672, 38672, 38672,
      /*  6630 */ 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672,
      /*  6645 */ 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 25323, 38672, 38672, 38672,
      /*  6660 */ 38672, 22098, 38672, 38672, 38672, 38672, 42922, 38672, 38672, 38672, 38672, 44448, 27298, 33333, 25344,
      /*  6675 */ 38672, 38672, 38672, 43215, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 28256,
      /*  6690 */ 42141, 22411, 26453, 44280, 27268, 25375, 38672, 38672, 38672, 29641, 38672, 38672, 38672, 38672, 38672,
      /*  6705 */ 38672, 38672, 26929, 22475, 22475, 22475, 22475, 25393, 22411, 22411, 22411, 22690, 26727, 26727, 26727,
      /*  6720 */ 26727, 30990, 39463, 38672, 38672, 38672, 38672, 38672, 38672, 48405, 38672, 38672, 38672, 38672, 28258,
      /*  6735 */ 22475, 22475, 22475, 22475, 35786, 22411, 22411, 22411, 22411, 22411, 37334, 26727, 26727, 26727, 26727,
      /*  6750 */ 26727, 32919, 30349, 25414, 38672, 38672, 38672, 38672, 38672, 48411, 38672, 38672, 26931, 22475, 22475,
      /*  6765 */ 22475, 22475, 22475, 33849, 22411, 22411, 22411, 22411, 22411, 33324, 26727, 26727, 26727, 26727, 26727,
      /*  6780 */ 32918, 41804, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 22475, 22475, 22475, 22475, 33754, 33854,
      /*  6795 */ 22411, 22411, 22411, 22411, 31454, 26727, 26727, 26727, 26727, 22521, 33795, 38672, 38672, 38672, 38672,
      /*  6810 */ 38672, 28255, 22475, 22475, 22475, 23131, 22411, 22411, 22411, 36778, 26727, 26727, 26727, 26998, 46887,
      /*  6825 */ 38672, 38672, 38672, 26931, 22475, 22475, 42142, 22411, 22411, 28347, 26727, 26727, 22521, 26313, 38672,
      /*  6840 */ 38672, 38672, 27136, 22475, 42143, 22411, 22411, 26977, 26727, 22520, 26312, 34036, 26929, 22475, 42144,
      /*  6855 */ 22411, 26975, 26727, 26310, 35759, 22476, 22411, 26978, 48196, 20435, 28340, 26976, 39617, 42139, 28345,
      /*  6870 */ 26456, 28257, 28343, 26456, 28257, 28345, 26459, 33538, 36362, 36357, 34905, 28863, 38672, 38672, 38672,
      /*  6885 */ 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672,
      /*  6900 */ 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 25323, 38672, 38672,
      /*  6915 */ 38672, 38672, 22098, 38672, 38672, 38672, 38672, 42922, 38672, 38672, 38672, 38672, 44448, 27298, 33333,
      /*  6930 */ 25344, 38672, 38672, 38672, 43215, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672,
      /*  6945 */ 28256, 42141, 22411, 26453, 44280, 27268, 25375, 38672, 38672, 38672, 29641, 38672, 38672, 38672, 38672,
      /*  6960 */ 38672, 38672, 38672, 26929, 22475, 22475, 22475, 22475, 25393, 22411, 22411, 22411, 22690, 26727, 26727,
      /*  6975 */ 26727, 26727, 30990, 39463, 38672, 38672, 38672, 38672, 38672, 38672, 48405, 30057, 38672, 38672, 38672,
      /*  6990 */ 28258, 22475, 22475, 22475, 22475, 35786, 22411, 22411, 22411, 22411, 22411, 37334, 26727, 26727, 26727,
      /*  7005 */ 26727, 26727, 32919, 30349, 25414, 38672, 38672, 38672, 38672, 38672, 48411, 38672, 38672, 26931, 22475,
      /*  7020 */ 22475, 22475, 22475, 22475, 33849, 22411, 22411, 22411, 22411, 22411, 33324, 26727, 26727, 26727, 26727,
      /*  7035 */ 26727, 32918, 41804, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 22475, 22475, 22475, 22475, 33754,
      /*  7050 */ 33854, 22411, 22411, 22411, 22411, 31454, 26727, 26727, 26727, 26727, 22521, 33795, 38672, 38672, 38672,
      /*  7065 */ 38672, 38672, 28255, 22475, 22475, 22475, 23131, 22411, 22411, 22411, 36778, 26727, 26727, 26727, 26998,
      /*  7080 */ 46887, 38672, 38672, 38672, 26931, 22475, 22475, 42142, 22411, 22411, 28347, 26727, 26727, 22521, 26313,
      /*  7095 */ 38672, 38672, 38672, 27136, 22475, 42143, 22411, 22411, 26977, 26727, 22520, 26312, 34036, 26929, 22475,
      /*  7110 */ 42144, 22411, 26975, 26727, 26310, 35759, 22476, 22411, 26978, 48196, 20435, 28340, 26976, 39617, 42139,
      /*  7125 */ 28345, 26456, 28257, 28343, 26456, 28257, 28345, 26459, 33538, 36362, 36357, 34905, 28863, 38672, 38672,
      /*  7140 */ 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672,
      /*  7155 */ 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 25323, 38672,
      /*  7170 */ 38672, 38672, 38672, 22098, 38672, 38672, 38672, 38672, 42922, 38672, 38672, 38672, 38672, 44448, 27298,
      /*  7185 */ 33333, 25344, 38672, 38672, 38672, 43215, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672,
      /*  7200 */ 38672, 28256, 42141, 22411, 26453, 44280, 27268, 25375, 38672, 38672, 38672, 29641, 38672, 38672, 38672,
      /*  7215 */ 38672, 38672, 38672, 38672, 26929, 22475, 22475, 22475, 22475, 25393, 22411, 22411, 22411, 22690, 26727,
      /*  7230 */ 26727, 26727, 26727, 30990, 39463, 38672, 38672, 38672, 38672, 38672, 38672, 48405, 38672, 38672, 38672,
      /*  7245 */ 38672, 28258, 22475, 22475, 22475, 22475, 35786, 22411, 22411, 22411, 22411, 22411, 37334, 26727, 26727,
      /*  7260 */ 26727, 26727, 26727, 32919, 30349, 25414, 38672, 38672, 38672, 38672, 38672, 25455, 38672, 38672, 26931,
      /*  7275 */ 22475, 22475, 22475, 22475, 22475, 33849, 22411, 22411, 22411, 22411, 22411, 33324, 26727, 26727, 26727,
      /*  7290 */ 26727, 26727, 32918, 41804, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 22475, 22475, 22475, 22475,
      /*  7305 */ 33754, 33854, 22411, 22411, 22411, 22411, 31454, 26727, 26727, 26727, 26727, 22521, 33795, 38672, 38672,
      /*  7320 */ 38672, 38672, 38672, 28255, 22475, 22475, 22475, 23131, 22411, 22411, 22411, 36778, 26727, 26727, 26727,
      /*  7335 */ 26998, 46887, 38672, 38672, 38672, 26931, 22475, 22475, 42142, 22411, 22411, 28347, 26727, 26727, 22521,
      /*  7350 */ 26313, 38672, 38672, 38672, 27136, 22475, 42143, 22411, 22411, 26977, 26727, 22520, 26312, 34036, 26929,
      /*  7365 */ 22475, 42144, 22411, 26975, 26727, 26310, 35759, 22476, 22411, 26978, 48196, 20435, 28340, 26976, 39617,
      /*  7380 */ 42139, 28345, 26456, 28257, 28343, 26456, 28257, 28345, 26459, 33538, 36362, 36357, 34905, 28863, 38672,
      /*  7395 */ 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672,
      /*  7410 */ 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 25323,
      /*  7425 */ 38672, 38672, 38672, 38672, 22098, 38672, 38672, 38672, 38672, 42922, 38672, 38672, 38672, 38672, 44448,
      /*  7440 */ 27298, 33333, 25344, 38672, 38672, 38672, 43215, 38672, 38672, 40102, 38672, 38672, 38672, 38672, 38672,
      /*  7455 */ 38672, 38672, 28256, 42141, 22411, 26453, 44280, 27268, 25375, 38672, 38672, 38672, 29641, 38672, 49130,
      /*  7470 */ 38672, 38672, 38672, 38672, 38672, 26929, 22475, 22475, 22475, 22475, 25393, 22411, 22411, 22411, 22690,
      /*  7485 */ 26727, 26727, 26727, 26727, 30990, 39463, 38672, 38672, 38672, 38672, 38672, 38672, 48405, 38672, 38672,
      /*  7500 */ 38672, 38672, 28258, 22475, 22475, 22475, 22475, 35786, 22411, 22411, 22411, 22411, 22411, 37334, 26727,
      /*  7515 */ 26727, 26727, 26727, 26727, 32919, 30349, 25414, 38672, 38672, 38672, 38672, 38672, 48411, 38672, 38672,
      /*  7530 */ 26931, 22475, 22475, 22475, 22475, 22475, 33849, 22411, 22411, 22411, 22411, 22411, 33324, 26727, 26727,
      /*  7545 */ 26727, 26727, 26727, 32918, 41804, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 22475, 22475, 22475,
      /*  7560 */ 22475, 33754, 33854, 22411, 22411, 22411, 22411, 31454, 26727, 26727, 26727, 26727, 22521, 33795, 38672,
      /*  7575 */ 38672, 38672, 38672, 38672, 28255, 22475, 22475, 22475, 23131, 22411, 22411, 22411, 36778, 26727, 26727,
      /*  7590 */ 26727, 26998, 46887, 38672, 38672, 38672, 26931, 22475, 22475, 42142, 22411, 22411, 28347, 26727, 26727,
      /*  7605 */ 22521, 26313, 38672, 38672, 38672, 27136, 22475, 42143, 22411, 22411, 26977, 26727, 22520, 26312, 34036,
      /*  7620 */ 26929, 22475, 42144, 22411, 26975, 26727, 26310, 35759, 22476, 22411, 26978, 48196, 20435, 28340, 26976,
      /*  7635 */ 39617, 42139, 28345, 26456, 28257, 28343, 26456, 28257, 28345, 26459, 33538, 36362, 36357, 34905, 28863,
      /*  7650 */ 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672,
      /*  7665 */ 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672,
      /*  7680 */ 25323, 38672, 38672, 38672, 38672, 22098, 38672, 38672, 38672, 38672, 42922, 38672, 38672, 38672, 38672,
      /*  7695 */ 44448, 27298, 33333, 25344, 38672, 38672, 38672, 43215, 38672, 38672, 38672, 38672, 38672, 38672, 38672,
      /*  7710 */ 38672, 38672, 38672, 28256, 42141, 22411, 26453, 44280, 27268, 25375, 38672, 38672, 38672, 29641, 38672,
      /*  7725 */ 38672, 38672, 38672, 38672, 38672, 38672, 26929, 22475, 22475, 22475, 22475, 25393, 22411, 22411, 22411,
      /*  7740 */ 22690, 26727, 26727, 26727, 26727, 30990, 39463, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672,
      /*  7755 */ 38672, 38672, 38672, 28258, 22475, 22475, 22475, 22475, 35786, 22411, 22411, 22411, 22411, 22411, 37334,
      /*  7770 */ 26727, 26727, 26727, 26727, 26727, 32919, 33803, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672,
      /*  7785 */ 38672, 26931, 22475, 22475, 22475, 22475, 22475, 33849, 22411, 22411, 22411, 22411, 22411, 33324, 26727,
      /*  7800 */ 26727, 26727, 26727, 26727, 32918, 33802, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 22475, 22475,
      /*  7815 */ 22475, 22475, 28015, 33854, 22411, 22411, 22411, 22411, 27851, 26727, 26727, 26727, 26727, 22521, 33795,
      /*  7830 */ 38672, 38672, 38672, 38672, 38672, 28255, 22475, 22475, 22475, 29442, 22411, 22411, 22411, 26485, 26727,
      /*  7845 */ 26727, 26727, 26998, 46887, 38672, 38672, 38672, 26931, 22475, 22475, 42142, 22411, 22411, 28347, 26727,
      /*  7860 */ 26727, 22521, 26313, 38672, 38672, 38672, 27136, 22475, 42143, 22411, 22411, 26977, 26727, 22520, 26312,
      /*  7875 */ 34036, 26929, 22475, 42144, 22411, 26975, 26727, 26310, 35759, 22476, 22411, 26978, 48196, 20435, 28340,
      /*  7890 */ 26976, 39617, 42139, 28345, 26456, 28257, 28343, 26456, 28257, 28345, 26459, 33538, 36362, 36357, 34905,
      /*  7905 */ 28863, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672,
      /*  7920 */ 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672,
      /*  7935 */ 38672, 25323, 38672, 38672, 38672, 38672, 22098, 38672, 38672, 38672, 38672, 42922, 38672, 38672, 38672,
      /*  7950 */ 38672, 44448, 27298, 33333, 25344, 38672, 38672, 38672, 43215, 38672, 38672, 38672, 38672, 38672, 38672,
      /*  7965 */ 38672, 38672, 38672, 38672, 28256, 42141, 22411, 26453, 44280, 27268, 25482, 38672, 38672, 38672, 29641,
      /*  7980 */ 38672, 38672, 38672, 38672, 38672, 38672, 38672, 26929, 22475, 22475, 22475, 22475, 25393, 22411, 22411,
      /*  7995 */ 22411, 22690, 26727, 26727, 26727, 26727, 30990, 39463, 38672, 38672, 38672, 38672, 38672, 38672, 38672,
      /*  8010 */ 38672, 38672, 38672, 38672, 28258, 22475, 22475, 22475, 22475, 35786, 22411, 22411, 22411, 22411, 22411,
      /*  8025 */ 37334, 26727, 26727, 26727, 26727, 26727, 32919, 33803, 38672, 38672, 38672, 38672, 38672, 38672, 38672,
      /*  8040 */ 38672, 38672, 26931, 22475, 22475, 22475, 22475, 22475, 33849, 22411, 22411, 22411, 22411, 22411, 33324,
      /*  8055 */ 26727, 26727, 26727, 26727, 26727, 32918, 33802, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 22475,
      /*  8070 */ 22475, 22475, 22475, 28015, 33854, 22411, 22411, 22411, 22411, 27851, 26727, 26727, 26727, 26727, 22521,
      /*  8085 */ 33795, 38672, 38672, 38672, 38672, 38672, 28255, 22475, 22475, 22475, 29442, 22411, 22411, 22411, 26485,
      /*  8100 */ 26727, 26727, 26727, 26998, 46887, 38672, 38672, 38672, 26931, 22475, 22475, 42142, 22411, 22411, 28347,
      /*  8115 */ 26727, 26727, 22521, 26313, 38672, 38672, 38672, 27136, 22475, 42143, 22411, 22411, 26977, 26727, 22520,
      /*  8130 */ 26312, 34036, 26929, 22475, 42144, 22411, 26975, 26727, 26310, 35759, 22476, 22411, 26978, 48196, 20435,
      /*  8145 */ 28340, 26976, 39617, 42139, 28345, 26456, 28257, 28343, 26456, 28257, 28345, 26459, 33538, 36362, 36357,
      /*  8160 */ 34905, 28863, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672,
      /*  8175 */ 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672,
      /*  8190 */ 38672, 38672, 25323, 38672, 38672, 38672, 38672, 22098, 38672, 38672, 38672, 38672, 42922, 38672, 38672,
      /*  8205 */ 38672, 38672, 44448, 27298, 33333, 25500, 38672, 38672, 38672, 43215, 38672, 38672, 38672, 38672, 38672,
      /*  8220 */ 38672, 38672, 38672, 38672, 38672, 28256, 42141, 22411, 26453, 44280, 27268, 25375, 38672, 38672, 38672,
      /*  8235 */ 29641, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 26929, 22475, 22475, 22475, 22475, 25393, 22411,
      /*  8250 */ 22411, 22411, 22690, 26727, 26727, 26727, 26727, 30990, 39463, 38672, 38672, 38672, 38672, 38672, 38672,
      /*  8265 */ 38672, 38672, 38672, 38672, 38672, 28258, 22475, 22475, 22475, 22475, 35786, 22411, 22411, 22411, 22411,
      /*  8280 */ 22411, 37334, 26727, 26727, 26727, 26727, 26727, 32919, 33803, 38672, 38672, 38672, 38672, 38672, 38672,
      /*  8295 */ 38672, 38672, 38672, 26931, 22475, 22475, 22475, 22475, 22475, 33849, 22411, 22411, 22411, 22411, 22411,
      /*  8310 */ 33324, 26727, 26727, 26727, 26727, 26727, 32918, 33802, 38672, 38672, 38672, 38672, 38672, 38672, 38672,
      /*  8325 */ 22475, 22475, 22475, 22475, 28015, 33854, 22411, 22411, 22411, 22411, 27851, 26727, 26727, 26727, 26727,
      /*  8340 */ 22521, 33795, 38672, 38672, 38672, 38672, 38672, 28255, 22475, 22475, 22475, 29442, 22411, 22411, 22411,
      /*  8355 */ 26485, 26727, 26727, 26727, 26998, 46887, 38672, 38672, 38672, 26931, 22475, 22475, 42142, 22411, 22411,
      /*  8370 */ 28347, 26727, 26727, 22521, 26313, 38672, 38672, 38672, 27136, 22475, 42143, 22411, 22411, 26977, 26727,
      /*  8385 */ 22520, 26312, 34036, 26929, 22475, 42144, 22411, 26975, 26727, 26310, 35759, 22476, 22411, 26978, 48196,
      /*  8400 */ 20435, 28340, 26976, 39617, 42139, 28345, 26456, 28257, 28343, 26456, 28257, 28345, 26459, 33538, 36362,
      /*  8415 */ 36357, 34905, 28863, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672,
      /*  8430 */ 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672,
      /*  8445 */ 38672, 38672, 38672, 25323, 38672, 38672, 38672, 38672, 22098, 38672, 38672, 38672, 38672, 42922, 38220,
      /*  8460 */ 38672, 38672, 38672, 44448, 27298, 33333, 25344, 38672, 38672, 38672, 43215, 38672, 38672, 38672, 38672,
      /*  8475 */ 38672, 38672, 38672, 38672, 38672, 38672, 28256, 42141, 22411, 26453, 44280, 27268, 25375, 38672, 38672,
      /*  8490 */ 38672, 29641, 38672, 38672, 38672, 25563, 38672, 38672, 38672, 26929, 22475, 22475, 22475, 22475, 25393,
      /*  8505 */ 22411, 22411, 22411, 22690, 26727, 26727, 26727, 26727, 30990, 39463, 38672, 38672, 38672, 38672, 38672,
      /*  8520 */ 38672, 38672, 38672, 38672, 38672, 38672, 28258, 22475, 22475, 22475, 22475, 35786, 22411, 22411, 22411,
      /*  8535 */ 22411, 22411, 37334, 26727, 26727, 26727, 26727, 26727, 32919, 33803, 38672, 38672, 38672, 38672, 38672,
      /*  8550 */ 38672, 38672, 38672, 38672, 26931, 22475, 22475, 22475, 22475, 22475, 33849, 22411, 22411, 22411, 22411,
      /*  8565 */ 22411, 33324, 26727, 26727, 26727, 26727, 26727, 32918, 33802, 38672, 38672, 38672, 38672, 38672, 38672,
      /*  8580 */ 38672, 22475, 22475, 22475, 22475, 28015, 33854, 22411, 22411, 22411, 22411, 27851, 26727, 26727, 26727,
      /*  8595 */ 26727, 22521, 33795, 38672, 38672, 38672, 38672, 38672, 28255, 22475, 22475, 22475, 29442, 22411, 22411,
      /*  8610 */ 22411, 26485, 26727, 26727, 26727, 26998, 46887, 38672, 38672, 38672, 26931, 22475, 22475, 42142, 22411,
      /*  8625 */ 22411, 28347, 26727, 26727, 22521, 26313, 38672, 38672, 38672, 27136, 22475, 42143, 22411, 22411, 26977,
      /*  8640 */ 26727, 22520, 26312, 34036, 26929, 22475, 42144, 22411, 26975, 26727, 26310, 35759, 22476, 22411, 26978,
      /*  8655 */ 48196, 20435, 28340, 26976, 39617, 42139, 28345, 26456, 28257, 28343, 26456, 28257, 28345, 26459, 33538,
      /*  8670 */ 36362, 36357, 34905, 28863, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672,
      /*  8685 */ 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672,
      /*  8700 */ 38672, 38672, 38672, 38672, 25323, 38672, 38672, 38672, 38672, 22098, 38672, 38672, 38672, 38672, 42922,
      /*  8715 */ 38672, 38672, 38672, 38672, 28464, 25582, 25594, 25344, 38672, 38672, 38672, 43215, 38672, 38672, 38672,
      /*  8730 */ 38672, 38672, 38672, 38672, 38672, 38672, 38672, 28256, 42141, 22411, 26453, 44280, 27268, 25375, 38672,
      /*  8745 */ 38672, 38672, 29641, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 26929, 22475, 22475, 22475, 22475,
      /*  8760 */ 25393, 22411, 22411, 22411, 22690, 26727, 26727, 26727, 26727, 30990, 39463, 38672, 38672, 38672, 38672,
      /*  8775 */ 38672, 38672, 38672, 38672, 38672, 38672, 38672, 28258, 22475, 22475, 22475, 22475, 35786, 22411, 22411,
      /*  8790 */ 22411, 22411, 22411, 37334, 26727, 26727, 26727, 26727, 26727, 32919, 33803, 38672, 38672, 38672, 38672,
      /*  8805 */ 38672, 38672, 38672, 38672, 38672, 26931, 22475, 22475, 22475, 22475, 22475, 33849, 22411, 22411, 22411,
      /*  8820 */ 22411, 22411, 33324, 26727, 26727, 26727, 26727, 26727, 32918, 33802, 38672, 38672, 38672, 38672, 38672,
      /*  8835 */ 38672, 38672, 22475, 22475, 22475, 22475, 28015, 33854, 22411, 22411, 22411, 22411, 27851, 26727, 26727,
      /*  8850 */ 26727, 26727, 22521, 33795, 38672, 38672, 38672, 38672, 38672, 28255, 22475, 22475, 22475, 29442, 22411,
      /*  8865 */ 22411, 22411, 26485, 26727, 26727, 26727, 26998, 46887, 38672, 38672, 38672, 26931, 22475, 22475, 42142,
      /*  8880 */ 22411, 22411, 28347, 26727, 26727, 22521, 26313, 38672, 38672, 38672, 27136, 22475, 42143, 22411, 22411,
      /*  8895 */ 26977, 26727, 22520, 26312, 34036, 26929, 22475, 42144, 22411, 26975, 26727, 26310, 35759, 22476, 22411,
      /*  8910 */ 26978, 48196, 20435, 28340, 26976, 39617, 42139, 28345, 26456, 28257, 28343, 26456, 28257, 28345, 26459,
      /*  8925 */ 33538, 36362, 36357, 34905, 28863, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672,
      /*  8940 */ 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672,
      /*  8955 */ 38672, 38672, 38672, 38672, 38672, 25323, 38672, 38672, 38672, 38672, 22098, 38672, 38672, 38672, 38672,
      /*  8970 */ 42922, 38672, 38672, 38672, 38672, 44448, 27298, 33333, 25344, 38672, 38672, 38672, 43215, 38672, 38672,
      /*  8985 */ 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 28256, 42141, 22411, 26453, 44280, 27268, 25375,
      /*  9000 */ 38672, 38672, 38672, 29641, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 26929, 22475, 22475, 22475,
      /*  9015 */ 22475, 25393, 22411, 22411, 22411, 22690, 26727, 26727, 26727, 26727, 30990, 39463, 38672, 38672, 38672,
      /*  9030 */ 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 28258, 22475, 22475, 22475, 22475, 35786, 22411,
      /*  9045 */ 22411, 22411, 22411, 22411, 37334, 26727, 26727, 26727, 26727, 26727, 32919, 33803, 38672, 38672, 38672,
      /*  9060 */ 38672, 38672, 38672, 38672, 38672, 38672, 26931, 22475, 22475, 22475, 22475, 22475, 33849, 22411, 22411,
      /*  9075 */ 22411, 22411, 22411, 33324, 26727, 26727, 26727, 26727, 26727, 32918, 33802, 38672, 38672, 38672, 38672,
      /*  9090 */ 38672, 38672, 38672, 22475, 22475, 22475, 22475, 28015, 33854, 22411, 22411, 22411, 22411, 27851, 26727,
      /*  9105 */ 26727, 26727, 26727, 22521, 33795, 38672, 38672, 38672, 21426, 38672, 28255, 22475, 22475, 22475, 29442,
      /*  9120 */ 22411, 22411, 22411, 26485, 26727, 26727, 26727, 26998, 46887, 38672, 38672, 38672, 26931, 22475, 22475,
      /*  9135 */ 42142, 22411, 22411, 28347, 26727, 26727, 22521, 26313, 38672, 38672, 38672, 27136, 22475, 42143, 22411,
      /*  9150 */ 22411, 26977, 26727, 22520, 26312, 34036, 26929, 22475, 42144, 22411, 26975, 26727, 26310, 35759, 22476,
      /*  9165 */ 22411, 26978, 48196, 20435, 28340, 26976, 39617, 42139, 28345, 26456, 28257, 28343, 26456, 28257, 28345,
      /*  9180 */ 26459, 33538, 36362, 36357, 34905, 28863, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672,
      /*  9195 */ 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672,
      /*  9210 */ 38672, 38672, 38672, 38672, 38672, 38672, 25610, 38672, 38672, 38672, 38672, 22098, 38672, 38672, 38672,
      /*  9225 */ 38672, 42922, 38672, 38672, 38672, 38672, 44448, 27298, 33333, 25344, 38672, 38672, 38672, 43215, 38672,
      /*  9240 */ 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 28256, 42141, 22411, 26453, 44280, 27268,
      /*  9255 */ 25375, 38672, 38672, 38672, 29641, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 26929, 22475, 22475,
      /*  9270 */ 22475, 22475, 25393, 22411, 22411, 22411, 22690, 26727, 26727, 26727, 26727, 30990, 39463, 38672, 38672,
      /*  9285 */ 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 28258, 22475, 22475, 22475, 22475, 35786,
      /*  9300 */ 22411, 22411, 22411, 22411, 22411, 37334, 26727, 26727, 26727, 26727, 26727, 32919, 33803, 38672, 38672,
      /*  9315 */ 38672, 38672, 38672, 38672, 38672, 38672, 38672, 26931, 22475, 22475, 22475, 22475, 22475, 33849, 22411,
      /*  9330 */ 22411, 22411, 22411, 22411, 33324, 26727, 26727, 26727, 26727, 26727, 32918, 33802, 38672, 38672, 38672,
      /*  9345 */ 38672, 38672, 38672, 38672, 22475, 22475, 22475, 22475, 28015, 33854, 22411, 22411, 22411, 22411, 27851,
      /*  9360 */ 26727, 26727, 26727, 26727, 22521, 33795, 38672, 38672, 38672, 38672, 38672, 28255, 22475, 22475, 22475,
      /*  9375 */ 29442, 22411, 22411, 22411, 26485, 26727, 26727, 26727, 26998, 46887, 38672, 38672, 38672, 26931, 22475,
      /*  9390 */ 22475, 42142, 22411, 22411, 28347, 26727, 26727, 22521, 26313, 38672, 38672, 38672, 27136, 22475, 42143,
      /*  9405 */ 22411, 22411, 26977, 26727, 22520, 26312, 34036, 26929, 22475, 42144, 22411, 26975, 26727, 26310, 35759,
      /*  9420 */ 22476, 22411, 26978, 48196, 20435, 28340, 26976, 39617, 42139, 28345, 26456, 28257, 28343, 26456, 28257,
      /*  9435 */ 28345, 26459, 33538, 36362, 36357, 34905, 28863, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672,
      /*  9450 */ 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672,
      /*  9465 */ 38672, 38672, 38672, 38672, 38672, 38672, 38672, 20939, 38672, 38672, 38672, 38672, 30470, 38672, 38672,
      /*  9480 */ 38672, 38672, 42922, 44752, 25631, 25649, 25671, 25683, 44753, 25633, 20832, 38672, 38672, 38672, 43215,
      /*  9495 */ 38672, 38672, 50505, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 18953, 18958, 18794, 35998, 19418,
      /*  9510 */ 35990, 45351, 38672, 18269, 42564, 29641, 38672, 40144, 35735, 23032, 18306, 18356, 18382, 18387, 18403,
      /*  9525 */ 18422, 18462, 20670, 19406, 50434, 18503, 18525, 18547, 19412, 50440, 18509, 36003, 19232, 20563, 38672,
      /*  9540 */ 46930, 18591, 38672, 38672, 37574, 18609, 18628, 33736, 18652, 18685, 18722, 18753, 18745, 18769, 18406,
      /*  9555 */ 25849, 18792, 20360, 18810, 18830, 18835, 19138, 18794, 20364, 18814, 18794, 18839, 19540, 19955, 37554,
      /*  9570 */ 48943, 18855, 18871, 18894, 40258, 38672, 38976, 18931, 18947, 18974, 19016, 19062, 19169, 19103, 19129,
      /*  9585 */ 20726, 19934, 19154, 19185, 19222, 19248, 20726, 19934, 19154, 19185, 19222, 19273, 19000, 30964, 19299,
      /*  9600 */ 19315, 28712, 19342, 25187, 19377, 19393, 19434, 19464, 19495, 19569, 19608, 24938, 19905, 19631, 19046,
      /*  9615 */ 19601, 24931, 19898, 19624, 19039, 19647, 19687, 43796, 19722, 19792, 19745, 19771, 19808, 19113, 19859,
      /*  9630 */ 19875, 19921, 18446, 19976, 19994, 24983, 18444, 19974, 19992, 20321, 18562, 47383, 20010, 46515, 35979,
      /*  9645 */ 20039, 20679, 20105, 20160, 20116, 20132, 20159, 20115, 20176, 19479, 20207, 25717, 20259, 20298, 20337,
      /*  9660 */ 20380, 20402, 21368, 20386, 20408, 21374, 19283, 20424, 20452, 20468, 20484, 20497, 50424, 20500, 20516,
      /*  9675 */ 20532, 20548, 20592, 20589, 50171, 20608, 19547, 18794, 18487, 20629, 20143, 19945, 20660, 18437, 21954,
      /*  9690 */ 20695, 20711, 21969, 19448, 21939, 20755, 19510, 19659, 38672, 38672, 38672, 38672, 38672, 38672, 38672,
      /*  9705 */ 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672,
      /*  9720 */ 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 20939, 38672, 38672, 38672, 38672, 30470, 38672,
      /*  9735 */ 38672, 38672, 38672, 42922, 38672, 38672, 38672, 38672, 38672, 38672, 24860, 20832, 38672, 38672, 38672,
      /*  9750 */ 43215, 38672, 38672, 50505, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 18953, 18958, 18794, 35998,
      /*  9765 */ 19418, 35990, 45351, 38672, 18269, 42564, 29641, 38672, 40144, 38672, 23032, 18306, 18356, 18382, 18387,
      /*  9780 */ 18403, 18422, 18462, 20670, 19406, 50434, 18503, 18525, 18547, 19412, 50440, 18509, 36003, 19232, 20563,
      /*  9795 */ 38672, 46930, 18591, 38672, 38672, 37574, 18609, 18628, 33736, 18652, 18685, 18722, 18753, 18745, 18769,
      /*  9810 */ 18406, 25849, 18792, 20360, 18810, 18830, 18835, 19138, 18794, 20364, 18814, 18794, 18839, 19540, 19955,
      /*  9825 */ 37554, 48943, 18855, 18871, 18894, 40258, 38672, 38976, 18931, 18947, 18974, 19016, 19062, 19169, 19103,
      /*  9840 */ 19129, 20726, 19934, 19154, 19185, 19222, 19248, 20726, 19934, 19154, 19185, 19222, 19273, 19000, 30964,
      /*  9855 */ 19299, 19315, 28712, 19342, 25187, 19377, 19393, 19434, 19464, 19495, 19569, 19608, 24938, 19905, 19631,
      /*  9870 */ 19046, 19601, 24931, 19898, 19624, 19039, 19647, 19687, 43796, 19722, 19792, 19745, 19771, 19808, 19113,
      /*  9885 */ 19859, 19875, 19921, 18446, 19976, 19994, 24983, 18444, 19974, 19992, 20321, 18562, 47383, 20010, 46515,
      /*  9900 */ 35979, 20039, 20679, 20105, 20160, 20116, 20132, 20159, 20115, 20176, 19479, 20207, 20223, 20259, 20298,
      /*  9915 */ 20337, 20380, 20402, 21368, 20386, 20408, 21374, 19283, 20424, 20452, 20468, 20484, 20497, 50424, 20500,
      /*  9930 */ 20516, 20532, 20548, 20592, 20589, 50171, 20608, 19547, 18794, 18487, 20629, 20143, 19945, 20660, 18437,
      /*  9945 */ 21954, 20695, 20711, 21969, 19448, 21939, 20755, 19510, 19659, 38672, 38672, 38672, 38672, 38672, 38672,
      /*  9960 */ 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672,
      /*  9975 */ 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 20939, 38672, 38672, 38672, 38672, 30470,
      /*  9990 */ 38672, 38672, 38672, 38672, 42922, 31997, 38672, 25754, 25760, 25776, 23293, 41839, 20832, 38672, 38672,
      /* 10005 */ 38672, 43215, 38672, 38672, 50505, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 18953, 18958, 18794,
      /* 10020 */ 35998, 19418, 35990, 45351, 38672, 18269, 42564, 29641, 38672, 40144, 38672, 23032, 18306, 18356, 18382,
      /* 10035 */ 18387, 18403, 18422, 18462, 20670, 19406, 50434, 18503, 18525, 18547, 19412, 50440, 18509, 36003, 19232,
      /* 10050 */ 20563, 38672, 46930, 18591, 38672, 38672, 37574, 18609, 18628, 33736, 18652, 18685, 18722, 18753, 18745,
      /* 10065 */ 18769, 18406, 25849, 18792, 20360, 18810, 18830, 18835, 19138, 18794, 20364, 18814, 18794, 18839, 19540,
      /* 10080 */ 19955, 37554, 48943, 18855, 18871, 18894, 40258, 38672, 38976, 18931, 18947, 18974, 19016, 19062, 19169,
      /* 10095 */ 19103, 19129, 20726, 19934, 19154, 19185, 19222, 19248, 20726, 19934, 19154, 19185, 19222, 19273, 19000,
      /* 10110 */ 30964, 19299, 19315, 28712, 19342, 25187, 19377, 19393, 19434, 19464, 19495, 19569, 19608, 24938, 19905,
      /* 10125 */ 19631, 19046, 19601, 24931, 19898, 19624, 19039, 19647, 19687, 43796, 19722, 19792, 19745, 19771, 19808,
      /* 10140 */ 19113, 19859, 19875, 19921, 18446, 19976, 19994, 24983, 18444, 19974, 19992, 20321, 18562, 47383, 20010,
      /* 10155 */ 46515, 35979, 20039, 20679, 20105, 20160, 20116, 20132, 20159, 20115, 20176, 19479, 20207, 20223, 20259,
      /* 10170 */ 20298, 20337, 20380, 20402, 21368, 20386, 20408, 21374, 19283, 25800, 20452, 20468, 20484, 20497, 50424,
      /* 10185 */ 20500, 20516, 25828, 20548, 20592, 20589, 50171, 25844, 19547, 18794, 18487, 20629, 20143, 19945, 20660,
      /* 10200 */ 18437, 21954, 20695, 20711, 21969, 19448, 21939, 20755, 19510, 19659, 38672, 38672, 38672, 38672, 38672,
      /* 10215 */ 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672,
      /* 10230 */ 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 25323, 25049, 38672, 38672, 38672,
      /* 10245 */ 22098, 25865, 25896, 25377, 25881, 25913, 30410, 30418, 25964, 25978, 25990, 26006, 26018, 25344, 45647,
      /* 10260 */ 38672, 26034, 48091, 26052, 33210, 26086, 26116, 26153, 26223, 35321, 26181, 25701, 26211, 26248, 26264,
      /* 10275 */ 43583, 44602, 26280, 26296, 26329, 38672, 38672, 38672, 30176, 26355, 38925, 41958, 22850, 24803, 38672,
      /* 10290 */ 44654, 30480, 22475, 22475, 22475, 36601, 25393, 22411, 22411, 43601, 22690, 26727, 26727, 26727, 39641,
      /* 10305 */ 30990, 39463, 38672, 43148, 28319, 38672, 29724, 26374, 19326, 38672, 38672, 32428, 40296, 38574, 45608,
      /* 10320 */ 22475, 22475, 26394, 26439, 26475, 26509, 22411, 37859, 28780, 26529, 38451, 26727, 26727, 43300, 45056,
      /* 10335 */ 22573, 30349, 25414, 26545, 38672, 26563, 38672, 40287, 48411, 38672, 26599, 35364, 28653, 26627, 31403,
      /* 10350 */ 45616, 49789, 33849, 44356, 22411, 30609, 28411, 41138, 33324, 35718, 26727, 47625, 44193, 29223, 41749,
      /* 10365 */ 42781, 38094, 28940, 38672, 21816, 21032, 26644, 38672, 47420, 26664, 22475, 41307, 22336, 31195, 39296,
      /* 10380 */ 22411, 22411, 26685, 31454, 47988, 26726, 26727, 30787, 32911, 36940, 26744, 38697, 46064, 38672, 26779,
      /* 10395 */ 26799, 26821, 22787, 22475, 23131, 26837, 37515, 22411, 36778, 26853, 26876, 26727, 33519, 46887, 26926,
      /* 10410 */ 38672, 38672, 26931, 37355, 35081, 26947, 38899, 38878, 26969, 48550, 26727, 26994, 26313, 38672, 38672,
      /* 10425 */ 38672, 27136, 22475, 42143, 22411, 22411, 26977, 26727, 22520, 26312, 34036, 26929, 22475, 42144, 22411,
      /* 10440 */ 26975, 26727, 26310, 35759, 22476, 22411, 26978, 38555, 27014, 22600, 47761, 48246, 27057, 27076, 27094,
      /* 10455 */ 27113, 28343, 26456, 27133, 28345, 26459, 33538, 36362, 36357, 34905, 28863, 38672, 38672, 38672, 38672,
      /* 10470 */ 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672,
      /* 10485 */ 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 25323, 38672, 27153, 38672,
      /* 10500 */ 38672, 22098, 38672, 38672, 38672, 38672, 39378, 27172, 38672, 27196, 27202, 27218, 27234, 27246, 25344,
      /* 10515 */ 38672, 38672, 38672, 43215, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 28256,
      /* 10530 */ 27262, 42259, 26453, 27284, 27268, 25375, 38672, 38672, 38672, 29641, 38672, 38672, 38672, 38672, 38672,
      /* 10545 */ 38672, 38672, 26929, 22475, 22475, 22475, 22475, 25393, 22411, 22411, 22411, 22690, 26727, 26727, 26727,
      /* 10560 */ 26727, 30990, 39463, 38672, 38672, 38672, 38672, 38672, 46100, 48405, 27326, 25277, 38672, 38672, 28258,
      /* 10575 */ 22475, 22475, 22475, 37137, 27346, 22411, 22411, 22411, 22411, 39760, 37334, 26727, 26727, 26727, 26727,
      /* 10590 */ 27410, 32919, 30349, 25414, 38672, 38672, 38672, 38672, 38672, 48411, 38672, 38672, 26931, 22475, 22475,
      /* 10605 */ 22475, 22475, 22475, 33849, 22411, 22411, 22411, 22411, 22411, 33324, 26727, 26727, 26727, 26727, 26727,
      /* 10620 */ 32918, 41804, 38672, 38672, 27435, 38672, 38672, 33108, 38672, 49441, 22475, 22475, 22475, 38002, 42895,
      /* 10635 */ 22411, 22411, 22411, 22411, 27454, 27481, 26727, 26727, 26727, 43058, 33795, 38672, 38672, 38672, 38672,
      /* 10650 */ 38672, 28255, 22475, 22475, 22475, 23131, 22411, 22411, 22411, 36778, 26727, 26727, 26727, 26998, 46887,
      /* 10665 */ 38672, 38672, 38672, 26931, 22475, 22475, 42142, 22411, 22411, 28347, 26727, 26727, 22521, 26313, 38672,
      /* 10680 */ 38672, 38672, 27136, 22475, 42143, 22411, 22411, 26977, 26727, 22520, 26312, 34036, 26929, 22475, 42144,
      /* 10695 */ 22411, 26975, 26727, 26310, 35759, 22476, 22411, 26978, 48196, 20435, 28340, 26976, 39617, 46997, 37168,
      /* 10710 */ 35831, 28257, 28343, 26456, 28257, 28345, 26459, 33538, 36362, 36357, 34905, 28863, 38672, 38672, 38672,
      /* 10725 */ 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672,
      /* 10740 */ 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 25323, 38672, 27504,
      /* 10755 */ 38672, 38672, 22098, 38672, 27541, 38672, 27559, 23976, 27578, 27586, 27602, 27617, 27629, 27645, 27657,
      /* 10770 */ 25344, 38672, 38672, 27676, 44992, 38672, 22924, 38672, 38672, 38672, 38672, 38672, 38672, 27673, 50511,
      /* 10785 */ 27692, 47251, 26513, 26453, 41246, 27710, 25375, 29768, 38672, 38672, 32334, 38672, 27740, 38672, 27762,
      /* 10800 */ 27784, 38672, 25948, 27789, 27805, 27821, 22475, 22475, 27840, 27878, 22411, 22411, 22690, 27915, 27931,
      /* 10815 */ 26727, 26727, 30990, 39463, 44557, 38672, 38672, 44934, 38672, 38225, 48405, 33126, 27953, 38672, 38672,
      /* 10830 */ 27694, 47073, 35424, 37245, 22475, 35786, 48497, 47338, 42686, 30280, 22411, 37334, 37394, 27977, 27995,
      /* 10845 */ 43743, 26727, 32919, 30349, 25414, 38672, 38672, 24003, 38672, 30096, 48411, 38672, 38672, 26931, 22475,
      /* 10860 */ 22475, 22475, 28013, 28031, 33849, 22411, 22411, 22411, 28053, 28070, 33324, 26727, 26727, 26727, 28092,
      /* 10875 */ 28109, 32918, 41804, 28131, 38672, 38672, 49206, 38672, 28149, 38672, 22475, 22475, 22475, 22780, 33754,
      /* 10890 */ 33854, 22411, 22411, 42031, 22411, 31454, 26727, 26727, 26727, 28171, 22521, 33795, 38672, 38672, 31346,
      /* 10905 */ 38672, 46687, 21493, 22475, 28191, 22475, 23131, 22411, 30274, 22411, 36778, 26727, 35228, 26727, 31599,
      /* 10920 */ 28213, 38672, 38672, 38672, 28250, 28274, 47411, 42142, 28296, 31494, 28347, 36728, 31954, 22521, 26313,
      /* 10935 */ 38672, 38672, 28317, 27136, 22475, 28335, 22411, 36897, 26977, 26727, 22564, 26312, 34036, 26929, 22475,
      /* 10950 */ 42144, 22411, 26975, 26727, 26310, 35759, 22476, 22411, 26978, 48196, 20435, 28340, 26976, 28363, 28379,
      /* 10965 */ 28427, 28480, 28257, 28343, 26456, 28257, 28345, 26459, 33538, 36362, 36357, 28504, 28863, 38672, 38672,
      /* 10980 */ 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672,
      /* 10995 */ 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 25323, 38672,
      /* 11010 */ 24521, 38672, 38672, 22098, 38672, 28530, 45484, 38672, 46575, 28549, 28557, 28573, 28587, 28595, 28611,
      /* 11025 */ 28623, 25344, 38672, 38672, 38672, 43215, 38672, 38672, 38672, 38672, 38672, 19750, 26547, 38672, 26546,
      /* 11040 */ 19755, 28639, 42141, 48492, 27360, 44280, 27268, 25375, 29257, 27180, 28679, 29641, 21703, 38672, 25730,
      /* 11055 */ 38672, 38083, 42329, 28697, 28734, 27137, 27824, 36531, 43498, 28750, 22608, 46434, 28774, 46408, 28796,
      /* 11070 */ 28814, 28833, 26727, 28849, 39463, 38672, 38672, 38672, 25738, 38672, 29761, 48405, 38672, 38672, 38672,
      /* 11085 */ 19698, 28258, 22475, 22475, 22475, 27023, 35786, 22411, 22411, 22411, 22411, 28891, 37334, 26727, 26727,
      /* 11100 */ 26727, 26727, 28912, 43066, 28929, 28956, 38672, 38672, 33876, 38672, 28992, 48411, 38672, 38672, 29009,
      /* 11115 */ 29030, 27032, 22475, 22475, 22669, 33849, 29109, 45393, 22411, 22411, 32729, 33324, 29133, 37067, 26727,
      /* 11130 */ 26727, 34717, 32918, 41804, 38672, 38672, 38672, 38672, 38672, 29157, 38672, 29181, 22475, 22475, 29202,
      /* 11145 */ 33754, 43112, 22411, 22411, 32083, 22411, 34472, 29222, 26727, 26727, 29239, 22521, 33795, 38672, 29256,
      /* 11160 */ 29273, 38672, 29294, 28255, 32383, 27117, 29315, 23131, 44876, 34578, 42252, 36778, 44915, 26727, 29337,
      /* 11175 */ 26998, 46887, 21810, 38672, 38672, 26931, 22475, 22475, 42142, 22411, 22411, 28347, 26727, 26727, 22521,
      /* 11190 */ 26313, 38672, 29370, 38672, 27136, 22475, 29387, 22411, 41041, 26977, 26727, 43751, 26312, 34036, 26929,
      /* 11205 */ 22475, 42144, 22411, 29411, 29240, 26310, 35759, 22476, 22411, 26978, 48196, 29430, 26953, 38544, 39617,
      /* 11220 */ 34809, 33567, 37775, 28257, 28343, 26456, 28257, 28345, 26459, 33538, 36362, 36357, 34905, 28863, 38672,
      /* 11235 */ 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672,
      /* 11250 */ 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 25323,
      /* 11265 */ 38672, 38673, 29464, 38672, 22098, 22435, 29483, 38672, 29506, 26195, 29530, 29540, 29556, 29570, 29582,
      /* 11280 */ 29598, 29610, 25344, 38672, 29626, 25072, 29668, 50094, 29711, 40102, 40331, 29748, 21064, 29784, 29812,
      /* 11295 */ 29843, 29873, 29903, 29919, 29957, 26423, 29973, 30010, 25375, 30044, 30091, 38782, 30112, 30134, 26137,
      /* 11310 */ 30161, 38672, 38672, 26583, 38672, 26929, 39099, 30212, 36878, 44806, 30228, 43650, 28758, 46842, 30244,
      /* 11325 */ 46765, 30296, 30317, 30336, 30384, 39463, 20089, 31354, 30434, 38799, 41183, 30450, 30496, 38672, 30542,
      /* 11340 */ 30564, 29278, 30580, 39823, 30631, 28663, 42103, 30647, 30685, 30712, 30766, 30811, 30837, 34161, 30878,
      /* 11355 */ 30901, 34681, 30930, 30980, 31006, 31022, 25414, 31049, 38672, 18321, 49090, 31075, 31094, 31128, 34195,
      /* 11370 */ 32584, 46802, 31168, 22475, 33645, 42347, 31190, 47486, 31211, 22411, 47598, 49959, 31232, 32841, 31257,
      /* 11385 */ 26727, 39569, 42011, 31278, 31335, 49499, 35851, 39273, 31370, 43966, 34186, 21188, 33468, 37601, 29186,
      /* 11400 */ 31389, 31426, 42239, 40895, 22411, 31442, 31481, 31454, 31519, 31539, 30795, 31561, 31595, 33795, 38672,
      /* 11415 */ 48757, 39401, 38672, 30196, 28255, 39519, 43549, 31615, 23131, 34822, 47675, 31635, 36778, 22546, 47769,
      /* 11430 */ 31572, 26998, 46887, 39201, 31656, 18290, 31696, 31734, 31750, 31772, 31808, 31845, 31869, 31903, 37385,
      /* 11445 */ 31919, 31970, 26378, 18593, 32021, 48908, 39526, 44237, 32042, 32063, 32099, 48723, 41712, 26312, 41270,
      /* 11460 */ 26929, 22475, 32144, 22411, 32167, 44894, 26310, 32185, 46276, 40692, 44326, 31465, 20435, 32208, 32228,
      /* 11475 */ 32248, 32274, 32295, 32319, 32362, 32399, 32415, 28257, 28345, 26459, 32457, 32473, 36357, 34905, 28863,
      /* 11490 */ 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672,
      /* 11505 */ 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672,
      /* 11520 */ 25323, 38672, 38672, 32509, 38672, 22098, 32530, 32548, 43771, 30190, 32600, 32630, 38672, 32616, 32654,
      /* 11535 */ 32662, 32678, 32690, 25344, 38672, 38672, 48277, 43215, 38672, 38672, 38672, 38672, 29732, 38672, 38672,
      /* 11550 */ 32706, 29731, 26036, 33631, 42208, 32724, 38438, 44280, 27268, 25375, 21272, 38672, 38672, 31985, 38672,
      /* 11565 */ 38672, 38672, 26576, 32745, 36837, 38672, 26929, 32766, 22475, 22475, 22475, 32810, 32857, 22411, 22411,
      /* 11580 */ 22690, 27419, 26727, 26727, 26727, 30990, 39463, 38672, 38672, 38672, 38672, 38672, 38672, 48405, 38672,
      /* 11595 */ 38672, 40108, 38672, 28258, 22475, 22475, 22475, 42113, 35786, 22411, 22411, 22411, 22411, 32877, 37334,
      /* 11610 */ 26727, 26727, 26727, 26728, 26727, 32919, 30349, 25414, 38672, 38672, 38672, 38672, 38672, 48411, 32026,
      /* 11625 */ 38672, 26931, 22475, 22475, 46869, 22475, 22475, 33849, 22411, 22411, 39678, 22411, 22411, 33324, 26727,
      /* 11640 */ 26727, 41099, 26727, 26727, 32918, 41804, 38672, 38672, 38672, 38672, 38672, 30118, 38672, 22475, 22475,
      /* 11655 */ 22475, 42121, 33754, 33854, 22411, 22411, 48685, 22411, 31454, 26727, 26727, 26727, 46758, 22521, 33795,
      /* 11670 */ 38672, 38672, 38672, 38672, 38672, 28255, 22475, 22475, 22475, 23131, 22411, 22411, 22411, 36778, 26727,
      /* 11685 */ 26727, 26727, 26998, 46887, 38672, 38672, 38672, 26931, 22475, 22475, 42142, 22411, 22411, 28347, 26727,
      /* 11700 */ 26727, 22521, 36404, 38672, 38672, 38672, 44299, 22475, 42143, 31823, 22411, 32169, 26727, 22520, 26312,
      /* 11715 */ 34036, 26929, 22475, 42144, 22411, 26975, 26727, 26310, 35759, 22476, 22411, 26978, 48196, 20435, 28340,
      /* 11730 */ 26976, 39617, 42139, 28345, 26456, 28257, 28343, 26456, 28257, 28345, 27097, 32897, 36362, 47020, 32935,
      /* 11745 */ 28863, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672,
      /* 11760 */ 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672,
      /* 11775 */ 38672, 25323, 38672, 38672, 38672, 38672, 22098, 38672, 25031, 38672, 38672, 43445, 32979, 32987, 33003,
      /* 11790 */ 33009, 33025, 33041, 33053, 25344, 38672, 38672, 38672, 43215, 38672, 38672, 29467, 38672, 38672, 38672,
      /* 11805 */ 38672, 38672, 38672, 38672, 28256, 42141, 22411, 26453, 44280, 27268, 33069, 38672, 38672, 38672, 29641,
      /* 11820 */ 38672, 38672, 38672, 33103, 38672, 38672, 38672, 26929, 22475, 22475, 22475, 22475, 25393, 22411, 22411,
      /* 11835 */ 22411, 22690, 26727, 26727, 26727, 26727, 30990, 39463, 38672, 38672, 38672, 38672, 38672, 38672, 38672,
      /* 11850 */ 38672, 33124, 38672, 18284, 28258, 22475, 22475, 22475, 22475, 40837, 22411, 22411, 22411, 22411, 22411,
      /* 11865 */ 34394, 26727, 26727, 26727, 26727, 26727, 32919, 33803, 38672, 38672, 38672, 33142, 38672, 33163, 42808,
      /* 11880 */ 38672, 42803, 38566, 22475, 22475, 37994, 22475, 22475, 33849, 22411, 22411, 47479, 22411, 22411, 33324,
      /* 11895 */ 26727, 26727, 31312, 26727, 26727, 41720, 33181, 38672, 38672, 34958, 38672, 38672, 38672, 38672, 22475,
      /* 11910 */ 22475, 22475, 22475, 28015, 33854, 22411, 22411, 22411, 22411, 27851, 26727, 26727, 26727, 26727, 22521,
      /* 11925 */ 33795, 38672, 38672, 34949, 49071, 38672, 28255, 22475, 22475, 29048, 29442, 22411, 22411, 43834, 26485,
      /* 11940 */ 26727, 26727, 49882, 26998, 33184, 33200, 40222, 33234, 22991, 22475, 33277, 33313, 50063, 43479, 33349,
      /* 11955 */ 26727, 33377, 32128, 26313, 33405, 26648, 22985, 33423, 33443, 35387, 48797, 34523, 33492, 40922, 33514,
      /* 11970 */ 26312, 34036, 46959, 32375, 33535, 33554, 33575, 35236, 26310, 35759, 22476, 22411, 26978, 48196, 20435,
      /* 11985 */ 28340, 26976, 39617, 42139, 28345, 26456, 28257, 28343, 26456, 28257, 28345, 26459, 33538, 28488, 33591,
      /* 12000 */ 34905, 28863, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672,
      /* 12015 */ 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672,
      /* 12030 */ 38672, 38672, 25323, 38672, 38672, 38672, 38672, 22098, 38672, 38672, 38672, 38672, 42922, 38672, 38672,
      /* 12045 */ 38672, 38672, 44448, 27298, 33333, 25344, 32005, 38672, 38672, 33617, 38672, 38672, 38672, 30064, 38672,
      /* 12060 */ 30073, 38672, 30064, 33661, 30069, 38721, 42958, 22411, 33692, 33700, 33716, 25375, 38672, 38672, 25941,
      /* 12075 */ 29641, 33732, 20082, 38672, 38672, 38672, 38672, 38672, 26929, 22475, 22475, 22475, 33752, 25393, 22411,
      /* 12090 */ 22411, 23137, 22690, 26727, 26727, 26727, 49362, 30990, 39463, 38672, 38672, 38672, 38672, 38672, 38672,
      /* 12105 */ 38672, 38672, 25615, 38672, 33770, 28258, 22475, 22475, 22475, 22475, 40491, 22411, 22411, 22411, 22411,
      /* 12120 */ 22411, 40736, 26727, 26727, 26727, 26727, 26727, 33787, 33803, 33407, 38672, 38672, 38672, 38672, 38672,
      /* 12135 */ 38672, 38672, 38672, 33819, 48351, 22475, 22475, 22475, 22475, 33849, 46363, 22411, 22411, 22411, 22411,
      /* 12150 */ 33324, 48523, 26727, 26727, 26727, 26727, 32918, 33802, 38672, 38672, 48282, 38672, 38672, 38672, 38672,
      /* 12165 */ 22475, 22475, 22475, 22475, 33840, 33854, 22411, 22411, 22411, 28403, 27851, 26727, 26727, 26727, 43360,
      /* 12180 */ 22521, 33795, 38672, 38672, 42813, 38672, 38672, 28255, 22475, 22475, 22475, 29442, 22411, 22411, 22411,
      /* 12195 */ 26485, 26727, 26727, 26727, 26998, 46887, 38672, 38672, 38672, 26931, 22475, 22475, 42142, 22411, 22411,
      /* 12210 */ 28347, 26727, 26727, 22521, 26313, 38672, 33874, 21141, 27136, 22475, 42143, 22411, 22411, 26977, 26727,
      /* 12225 */ 22520, 33892, 34036, 21208, 22475, 46215, 22411, 33914, 26727, 33935, 35759, 22476, 22411, 26978, 48196,
      /* 12240 */ 20435, 28340, 26976, 39617, 42139, 28345, 26456, 28257, 28343, 26456, 28257, 28345, 26459, 33538, 36362,
      /* 12255 */ 36357, 34905, 28863, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672,
      /* 12270 */ 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672,
      /* 12285 */ 38672, 38672, 38672, 25323, 38672, 38672, 42795, 38672, 22098, 25439, 25194, 32493, 40646, 40656, 38304,
      /* 12300 */ 38312, 33959, 33974, 33986, 34002, 34014, 25344, 38672, 38672, 38672, 49261, 33079, 38672, 38672, 23275,
      /* 12315 */ 34030, 34052, 38672, 34078, 34127, 34177, 34211, 38408, 34239, 34258, 29354, 34285, 25375, 38672, 38672,
      /* 12330 */ 36069, 29641, 38672, 34301, 38672, 38672, 38672, 34327, 24011, 26929, 47957, 34366, 22475, 34410, 34439,
      /* 12345 */ 34460, 34488, 32881, 44853, 22711, 39788, 26727, 49664, 34508, 39463, 38672, 28969, 45656, 28681, 19706,
      /* 12360 */ 18253, 38672, 26070, 26232, 47650, 46594, 28258, 42618, 22475, 45107, 34547, 44588, 22411, 34575, 22411,
      /* 12375 */ 34594, 34618, 34642, 27997, 26727, 35481, 34668, 34697, 32919, 33803, 38672, 38672, 38672, 44387, 34733,
      /* 12390 */ 34759, 38672, 38672, 38672, 26931, 34796, 22475, 22475, 22475, 34845, 34862, 31216, 22411, 22411, 37262,
      /* 12405 */ 22411, 34878, 31262, 26727, 26727, 28913, 26727, 34894, 33802, 38672, 34931, 35005, 30145, 35033, 35049,
      /* 12420 */ 30548, 35079, 26669, 35097, 35117, 35142, 44418, 22411, 35167, 35192, 43624, 31718, 26727, 43013, 39321,
      /* 12435 */ 47169, 35252, 30750, 31033, 38672, 35289, 35307, 35357, 32192, 22475, 35380, 35403, 34559, 22411, 35440,
      /* 12450 */ 35463, 30821, 35479, 35497, 35530, 35556, 35608, 38672, 38672, 24906, 47811, 35630, 37839, 28037, 35670,
      /* 12465 */ 48379, 27078, 35705, 48704, 22521, 26313, 33898, 38672, 35734, 27136, 22475, 42143, 22411, 22411, 26977,
      /* 12480 */ 26727, 22520, 28514, 35751, 26929, 35782, 35802, 36916, 32303, 49941, 26310, 49171, 22476, 22411, 26978,
      /* 12495 */ 48196, 35867, 35883, 35899, 35915, 42139, 28345, 26456, 28257, 28343, 26456, 35951, 36348, 35941, 33538,
      /* 12510 */ 36362, 36357, 34905, 35967, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672,
      /* 12525 */ 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672,
      /* 12540 */ 38672, 38672, 38672, 38672, 25323, 38672, 38672, 33252, 38672, 22098, 38672, 38672, 38672, 38672, 42922,
      /* 12555 */ 38672, 20573, 33260, 46302, 45557, 36019, 36031, 25344, 38672, 38672, 38672, 43215, 38672, 38672, 38672,
      /* 12570 */ 38672, 38672, 38672, 38672, 38672, 38672, 38672, 28256, 42141, 22411, 26453, 44280, 27268, 25375, 38672,
      /* 12585 */ 38672, 38672, 29641, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 26929, 22475, 22475, 34780, 22475,
      /* 12600 */ 25393, 22411, 22411, 36047, 22690, 26727, 26727, 36130, 26727, 30990, 39463, 38672, 38672, 38672, 38672,
      /* 12615 */ 38672, 38672, 38672, 38672, 38672, 38672, 38672, 28258, 22475, 22475, 22475, 22475, 35786, 22411, 22411,
      /* 12630 */ 22411, 22411, 22411, 37334, 26727, 26727, 26727, 26727, 26727, 32919, 33803, 38672, 38672, 38672, 38672,
      /* 12645 */ 38672, 38672, 38672, 38672, 38672, 26931, 22475, 22475, 22475, 22475, 22475, 33849, 22411, 22411, 22411,
      /* 12660 */ 22411, 22411, 33324, 26727, 26727, 26727, 26727, 26727, 32918, 33802, 38672, 38672, 38672, 38672, 38672,
      /* 12675 */ 38672, 38672, 22475, 22475, 22475, 22475, 28015, 33854, 22411, 22411, 22411, 22411, 27851, 26727, 26727,
      /* 12690 */ 26727, 26727, 22521, 33795, 38672, 38672, 38672, 38672, 38672, 28255, 22475, 22475, 22475, 29442, 22411,
      /* 12705 */ 22411, 22411, 26485, 26727, 26727, 26727, 26998, 46887, 38672, 38672, 38672, 26931, 22475, 22475, 42142,
      /* 12720 */ 22411, 22411, 28347, 26727, 26727, 22521, 26313, 38672, 38672, 38672, 27136, 22475, 42143, 22411, 22411,
      /* 12735 */ 26977, 26727, 22520, 26312, 34036, 26929, 22475, 42144, 22411, 26975, 26727, 26310, 35759, 22476, 22411,
      /* 12750 */ 26978, 48196, 20435, 28340, 26976, 39617, 42139, 28345, 26456, 28257, 28343, 26456, 28257, 28345, 26459,
      /* 12765 */ 33538, 36362, 36357, 34905, 28863, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672,
      /* 12780 */ 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672,
      /* 12795 */ 38672, 38672, 38672, 38672, 38672, 25323, 38672, 38672, 20243, 38672, 22098, 38672, 38672, 38672, 38672,
      /* 12810 */ 42922, 38672, 38672, 38672, 38672, 44448, 27298, 33333, 25344, 38672, 38672, 38672, 43215, 38672, 38672,
      /* 12825 */ 36066, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 28256, 42141, 22411, 26453, 44280, 27268, 25375,
      /* 12840 */ 38672, 38672, 38672, 29641, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 26929, 22475, 22475, 22475,
      /* 12855 */ 22475, 25393, 22411, 22411, 22411, 22690, 26727, 26727, 26727, 26727, 30990, 39463, 38672, 38672, 38672,
      /* 12870 */ 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 28258, 22475, 22475, 22475, 22475, 35786, 22411,
      /* 12885 */ 22411, 22411, 22411, 22411, 37334, 26727, 26727, 26727, 26727, 26727, 32919, 33803, 45849, 38672, 38672,
      /* 12900 */ 38672, 38672, 38672, 38672, 38672, 38672, 26931, 36085, 22475, 22475, 22475, 22475, 33849, 36106, 22411,
      /* 12915 */ 22411, 22411, 22411, 33324, 36126, 26727, 26727, 26727, 26727, 32918, 33802, 38672, 38672, 38672, 38672,
      /* 12930 */ 38672, 38672, 38672, 22475, 22475, 22475, 22475, 28015, 33854, 22411, 22411, 22411, 22411, 27851, 26727,
      /* 12945 */ 26727, 26727, 26727, 22521, 33795, 38672, 38672, 38672, 38672, 38672, 28255, 22475, 22475, 22475, 29442,
      /* 12960 */ 22411, 22411, 22411, 26485, 26727, 26727, 26727, 26998, 46887, 38672, 38672, 38672, 26931, 22475, 22475,
      /* 12975 */ 42142, 22411, 22411, 28347, 26727, 26727, 22521, 26313, 38672, 38672, 38672, 27136, 22475, 42143, 22411,
      /* 12990 */ 22411, 26977, 26727, 22520, 26312, 34036, 26929, 22475, 42144, 22411, 26975, 26727, 26310, 35759, 22476,
      /* 13005 */ 22411, 26978, 48196, 20435, 28340, 26976, 39617, 42139, 28345, 26456, 28257, 28343, 26456, 28257, 28345,
      /* 13020 */ 26459, 33538, 36362, 36357, 34905, 28863, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672,
      /* 13035 */ 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672,
      /* 13050 */ 38672, 38672, 38672, 38672, 38672, 38672, 25323, 38672, 38672, 19729, 38672, 22098, 38672, 39473, 38672,
      /* 13065 */ 44217, 36146, 36184, 36196, 36212, 36218, 36234, 36250, 36262, 25344, 38672, 36278, 38672, 43215, 38672,
      /* 13080 */ 25421, 18575, 38672, 27438, 38672, 38672, 46139, 36299, 48111, 34141, 26409, 36335, 39145, 44169, 36378,
      /* 13095 */ 36420, 36455, 38672, 29371, 36476, 38672, 27543, 38672, 36498, 35844, 31373, 34743, 36516, 40527, 36565,
      /* 13110 */ 29321, 36586, 36623, 36646, 22411, 36676, 29093, 36714, 29346, 28817, 43388, 36750, 36802, 37724, 36836,
      /* 13125 */ 38672, 38672, 38672, 26061, 38672, 38672, 38672, 38672, 38672, 28258, 36853, 42951, 22475, 36876, 38513,
      /* 13140 */ 34492, 36894, 36913, 40984, 22411, 43282, 35514, 28798, 26727, 43717, 26727, 36932, 33803, 38672, 38672,
      /* 13155 */ 36956, 38672, 38672, 18909, 32575, 38672, 38672, 26931, 22475, 22475, 41976, 35273, 36992, 33849, 22411,
      /* 13170 */ 22411, 45307, 44424, 37025, 33324, 26727, 26727, 40875, 39885, 37058, 32918, 33802, 34967, 38672, 38672,
      /* 13185 */ 32750, 38672, 38672, 38672, 22475, 38401, 22475, 22475, 28015, 33854, 34444, 22411, 22411, 22411, 27851,
      /* 13200 */ 26727, 37091, 26727, 26727, 22521, 33795, 37110, 34940, 38672, 46173, 45770, 29014, 37131, 22475, 22475,
      /* 13215 */ 37153, 29988, 22411, 22411, 37195, 37219, 26727, 26727, 36392, 46887, 38346, 38672, 39265, 26931, 22475,
      /* 13230 */ 37243, 42142, 22411, 37261, 28347, 26727, 37278, 22521, 26313, 38672, 37296, 38672, 27136, 22475, 37317,
      /* 13245 */ 22411, 48861, 26977, 26727, 48595, 26312, 34036, 26929, 22475, 42144, 22411, 26975, 26727, 26310, 35759,
      /* 13260 */ 22476, 22411, 26978, 48196, 20435, 28340, 26976, 39617, 42139, 28345, 26456, 35925, 29395, 39608, 37350,
      /* 13275 */ 37371, 26459, 33538, 37783, 48331, 34905, 28863, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672,
      /* 13290 */ 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672,
      /* 13305 */ 38672, 38672, 38672, 38672, 38672, 38672, 38672, 25323, 38672, 38672, 41939, 38672, 22098, 38672, 25566,
      /* 13320 */ 38672, 38672, 29887, 39046, 39054, 37418, 37432, 37440, 37456, 37468, 25500, 38672, 37493, 38672, 43215,
      /* 13335 */ 38672, 28533, 38672, 38672, 27562, 38672, 38672, 37494, 37484, 23258, 20853, 42141, 37510, 47612, 44280,
      /* 13350 */ 27268, 25375, 38672, 29490, 38672, 29641, 38672, 37531, 37550, 38672, 38672, 38672, 37570, 27517, 39732,
      /* 13365 */ 22475, 40520, 37590, 25393, 37627, 22412, 37898, 37646, 31523, 26727, 48530, 31241, 31792, 37683, 37699,
      /* 13380 */ 24812, 38672, 37723, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 28258, 37740, 22475, 37799, 22475,
      /* 13395 */ 35786, 45030, 31853, 36110, 22411, 22411, 37334, 31545, 34712, 40790, 26727, 26727, 32919, 33803, 38672,
      /* 13410 */ 21024, 48965, 38672, 38672, 33943, 28155, 37816, 38672, 26931, 46335, 37834, 22475, 27041, 22475, 34377,
      /* 13425 */ 49011, 37855, 22411, 33297, 22411, 27890, 39339, 37875, 26727, 27899, 26727, 32918, 33802, 38672, 38672,
      /* 13440 */ 38672, 38672, 38672, 38672, 38672, 22475, 22475, 22475, 22475, 28015, 33854, 22411, 22411, 22411, 22411,
      /* 13455 */ 27851, 26727, 26727, 26727, 26727, 22521, 33795, 38672, 38672, 38672, 38672, 38672, 28255, 22475, 22475,
      /* 13470 */ 22475, 29442, 22411, 22411, 22411, 26485, 26727, 26727, 26727, 26998, 48203, 38672, 38672, 38672, 26931,
      /* 13485 */ 29057, 22475, 42142, 32786, 22411, 28347, 22555, 26727, 22521, 26313, 38672, 38672, 38672, 27136, 22475,
      /* 13500 */ 42143, 22411, 37895, 26977, 49110, 22520, 26312, 34036, 26929, 22475, 42144, 22411, 26975, 26727, 26310,
      /* 13515 */ 37914, 31619, 41895, 26978, 37938, 37974, 41757, 45432, 39617, 42139, 28345, 26456, 28257, 28343, 26456,
      /* 13530 */ 28257, 36549, 37075, 33538, 36362, 36357, 34905, 28863, 38672, 38672, 38672, 38672, 38672, 38672, 38672,
      /* 13545 */ 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672,
      /* 13560 */ 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 25323, 38672, 38672, 25240, 38672, 24719, 38672,
      /* 13575 */ 46651, 38018, 25104, 38054, 38118, 38157, 38142, 38161, 38126, 38177, 38189, 25344, 38672, 45759, 49561,
      /* 13590 */ 49547, 38205, 49199, 38672, 38241, 38259, 34062, 38289, 38328, 38371, 38273, 38387, 38424, 38467, 39556,
      /* 13605 */ 38529, 27268, 25375, 40213, 38672, 38672, 38590, 21779, 38672, 38614, 38641, 21123, 43234, 38689, 38713,
      /* 13620 */ 41522, 39725, 26628, 22475, 25393, 38737, 22411, 29117, 22690, 32232, 31319, 26727, 38753, 34652, 38772,
      /* 13635 */ 35341, 38672, 38798, 38815, 38672, 38672, 40618, 38672, 38672, 38672, 38840, 33601, 40485, 22475, 38858,
      /* 13650 */ 22475, 35786, 47683, 38876, 40856, 22411, 22411, 37334, 32114, 26727, 42187, 26727, 26727, 32919, 33803,
      /* 13665 */ 38672, 38672, 38672, 38672, 24776, 38672, 36500, 33087, 26755, 48300, 22475, 22475, 22475, 46796, 41600,
      /* 13680 */ 49410, 22411, 22411, 22411, 38894, 29994, 47730, 26727, 26727, 26727, 46465, 44085, 32918, 33802, 38915,
      /* 13695 */ 38949, 38972, 38992, 38672, 39015, 39031, 44824, 39070, 29039, 39086, 28015, 33854, 39115, 39131, 22365,
      /* 13710 */ 39171, 27851, 40395, 48234, 48581, 49654, 22521, 39190, 33147, 39225, 26763, 39254, 38337, 41515, 31410,
      /* 13725 */ 48668, 36570, 39289, 44624, 49920, 36050, 39312, 46490, 26727, 39337, 39355, 46887, 39394, 38672, 20942,
      /* 13740 */ 22766, 22475, 39417, 21499, 22411, 39448, 25398, 26727, 39489, 22521, 47568, 38672, 38672, 46680, 45512,
      /* 13755 */ 39505, 42143, 39542, 32076, 39585, 39633, 39657, 35567, 35614, 26929, 29075, 42144, 39674, 26975, 39694,
      /* 13770 */ 26310, 35759, 35126, 47451, 29414, 27465, 39712, 39748, 39776, 39804, 46246, 41657, 47873, 28257, 28343,
      /* 13785 */ 26456, 28257, 28345, 26459, 39839, 39865, 36357, 34905, 30398, 38672, 38672, 38672, 38672, 38672, 38672,
      /* 13800 */ 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672,
      /* 13815 */ 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 25323, 38672, 38672, 38672, 39901, 22098,
      /* 13830 */ 38672, 30368, 39922, 38672, 45211, 39942, 39950, 39966, 39980, 39988, 40004, 40016, 25344, 35063, 40032,
      /* 13845 */ 40048, 40074, 25784, 40124, 38672, 40160, 20023, 50351, 40199, 40238, 40274, 40312, 49237, 40347, 40363,
      /* 13860 */ 36660, 40411, 40427, 25375, 38672, 40443, 18661, 36161, 37534, 38672, 18669, 43864, 38672, 38672, 44690,
      /* 13875 */ 26929, 22475, 37009, 40470, 40507, 25393, 22411, 40543, 31503, 45950, 26727, 47993, 40578, 40601, 30990,
      /* 13890 */ 39463, 38672, 44715, 38672, 38672, 40617, 29165, 40634, 41441, 21201, 19353, 22907, 40672, 45368, 47429,
      /* 13905 */ 22475, 22475, 40708, 37034, 28896, 40724, 22411, 47891, 41633, 40762, 35506, 40782, 26727, 47175, 32919,
      /* 13920 */ 22394, 40806, 38672, 38654, 32566, 38672, 38672, 38672, 38672, 48740, 26931, 22475, 38860, 22475, 40833,
      /* 13935 */ 22475, 33849, 22411, 41060, 22411, 40853, 22411, 33324, 26727, 38756, 26727, 40872, 26727, 32918, 33802,
      /* 13950 */ 38672, 38672, 20973, 45998, 38672, 38672, 38672, 22475, 22475, 22475, 22475, 22458, 40891, 22411, 22411,
      /* 13965 */ 22411, 22411, 40911, 26727, 26727, 26727, 26727, 22501, 33795, 23174, 18332, 38672, 38672, 38672, 40938,
      /* 13980 */ 22475, 40962, 22475, 40684, 22411, 40981, 22411, 31782, 26727, 49841, 26727, 26998, 28442, 38672, 38672,
      /* 13995 */ 38672, 26931, 41000, 41019, 42142, 41039, 41057, 28347, 41076, 41095, 22521, 44039, 38672, 38672, 38672,
      /* 14010 */ 27136, 22475, 42143, 22411, 22411, 26977, 26727, 22520, 34915, 34036, 27330, 41115, 29084, 41137, 35817,
      /* 14025 */ 26727, 27724, 35759, 41154, 41218, 41701, 41262, 41286, 47258, 44155, 39617, 42139, 28345, 26456, 28257,
      /* 14040 */ 28343, 26456, 28257, 28345, 28115, 33538, 27862, 36357, 34905, 46290, 38672, 38672, 38672, 38672, 38672,
      /* 14055 */ 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672,
      /* 14070 */ 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 25323, 38672, 38672, 38672, 26904,
      /* 14085 */ 22098, 38672, 38672, 41323, 22275, 41345, 40139, 38672, 26358, 41381, 41394, 41410, 41422, 25344, 38672,
      /* 14100 */ 38672, 45842, 43215, 38672, 38672, 38672, 41438, 50256, 38672, 22231, 41440, 45848, 38672, 34773, 41457,
      /* 14115 */ 34829, 39879, 41487, 27268, 25375, 38102, 38672, 38672, 29641, 38672, 41538, 41554, 33261, 38672, 38672,
      /* 14130 */ 36430, 26929, 41579, 35101, 34846, 45533, 41616, 41649, 40556, 45401, 41673, 41736, 41773, 26727, 41789,
      /* 14145 */ 40746, 42656, 41831, 38672, 41855, 41875, 32532, 32708, 46542, 38672, 38672, 38672, 38672, 28258, 22475,
      /* 14160 */ 22475, 41594, 22475, 35786, 22411, 22411, 22411, 41893, 22411, 37334, 26727, 26727, 37094, 26727, 26727,
      /* 14175 */ 32919, 27373, 41911, 29299, 38672, 38672, 38672, 41935, 25466, 38672, 41955, 26931, 22475, 41121, 41974,
      /* 14190 */ 22475, 22475, 34152, 22411, 46370, 41992, 22411, 22411, 30778, 26727, 31887, 42009, 26727, 26727, 32918,
      /* 14205 */ 33802, 38243, 38672, 38672, 38672, 38672, 38672, 38672, 22475, 22475, 48461, 22475, 28015, 42027, 22411,
      /* 14220 */ 22411, 42047, 22411, 37764, 26727, 26727, 48819, 26727, 22521, 33795, 38672, 38672, 38672, 38672, 38672,
      /* 14235 */ 28255, 22475, 22475, 22475, 29442, 22411, 22411, 22411, 26485, 26727, 26727, 26727, 26998, 46887, 38672,
      /* 14250 */ 22208, 38672, 18340, 22475, 22475, 42142, 22411, 22411, 28347, 26727, 26727, 28175, 42067, 38672, 38672,
      /* 14265 */ 38672, 27136, 22475, 42143, 22411, 22411, 26977, 26727, 22520, 26312, 34036, 26929, 22475, 42144, 22411,
      /* 14280 */ 26975, 26727, 30944, 42088, 42137, 42160, 42180, 48196, 42203, 28340, 26976, 39617, 42139, 28345, 26456,
      /* 14295 */ 28257, 28343, 26456, 28257, 28345, 26459, 33538, 36362, 36357, 34905, 28863, 38672, 38672, 38672, 38672,
      /* 14310 */ 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672,
      /* 14325 */ 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 25323, 38672, 38672, 38672,
      /* 14340 */ 38672, 22098, 38672, 38672, 38672, 38672, 42922, 38672, 38672, 38672, 38672, 44448, 27298, 33333, 25344,
      /* 14355 */ 38672, 38672, 38672, 43215, 38672, 38672, 31078, 38672, 38672, 32435, 32438, 32441, 42224, 25897, 46967,
      /* 14370 */ 28280, 42275, 42293, 31579, 27268, 42319, 38672, 38672, 38672, 29641, 38672, 38672, 38672, 38672, 38672,
      /* 14385 */ 38672, 38672, 26929, 22475, 22475, 22475, 22475, 25393, 22411, 22411, 22411, 22690, 26727, 26727, 26727,
      /* 14400 */ 26727, 30990, 39463, 38672, 38672, 38672, 46624, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 28258,
      /* 14415 */ 22475, 22475, 22475, 22475, 41023, 22411, 22411, 22411, 22411, 22411, 42864, 26727, 26727, 26727, 26727,
      /* 14430 */ 26727, 32919, 33803, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 26931, 22475, 22475,
      /* 14445 */ 22475, 22475, 22475, 33849, 22411, 22411, 22411, 22411, 22411, 33324, 26727, 26727, 26727, 26727, 26727,
      /* 14460 */ 32918, 33802, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 22475, 22475, 22475, 22475, 28015, 33854,
      /* 14475 */ 22411, 22411, 22411, 22411, 27851, 26727, 26727, 26727, 26727, 22521, 33795, 38672, 38672, 38672, 38672,
      /* 14490 */ 38672, 28255, 22475, 22475, 22475, 29442, 22411, 22411, 22411, 26485, 26727, 26727, 26727, 26998, 46887,
      /* 14505 */ 38672, 38672, 38672, 26931, 22475, 22475, 42142, 22411, 22411, 28347, 26727, 26727, 22521, 26313, 38672,
      /* 14520 */ 38672, 38672, 27136, 42345, 42143, 29941, 22411, 26977, 42363, 22520, 26312, 34036, 26929, 22475, 42144,
      /* 14535 */ 22411, 26975, 26727, 26310, 35759, 22476, 22411, 26978, 48196, 20435, 28340, 26976, 39617, 42139, 28345,
      /* 14550 */ 26456, 28257, 28343, 26456, 28257, 28345, 26459, 33538, 36362, 36357, 34905, 28863, 38672, 38672, 38672,
      /* 14565 */ 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672,
      /* 14580 */ 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 25323, 38672, 38672,
      /* 14595 */ 38672, 44743, 22177, 38672, 38672, 27385, 38672, 45876, 42383, 22121, 42412, 42425, 42433, 42449, 42461,
      /* 14610 */ 25344, 38672, 32955, 42527, 43215, 18706, 42477, 42499, 33244, 42519, 38672, 42543, 40174, 42559, 42580,
      /* 14625 */ 42605, 42641, 42672, 40377, 42708, 42766, 25375, 38672, 38672, 38672, 42829, 42880, 42911, 43973, 27961,
      /* 14640 */ 38672, 38672, 23013, 42938, 22475, 42974, 41003, 39432, 42995, 32861, 22411, 36698, 35176, 43029, 43292,
      /* 14655 */ 26727, 43049, 43082, 43138, 38672, 38672, 38672, 25328, 43172, 43191, 38672, 43210, 28234, 38672, 43231,
      /* 14670 */ 48341, 22475, 43250, 22475, 22325, 43268, 47118, 39174, 22411, 22411, 43316, 43332, 43358, 40585, 26727,
      /* 14685 */ 37280, 43376, 43410, 33803, 38672, 38672, 41815, 45184, 39238, 30360, 38672, 43434, 50186, 43461, 43495,
      /* 14700 */ 48777, 43514, 43538, 22475, 43573, 43599, 31640, 43617, 43640, 22411, 43666, 43692, 49367, 43710, 43733,
      /* 14715 */ 26727, 47922, 33802, 43767, 38672, 38672, 43787, 43812, 38672, 43850, 50024, 43886, 43557, 22475, 28015,
      /* 14730 */ 33854, 43908, 34242, 22411, 22411, 27851, 46470, 43935, 44079, 26727, 39658, 43953, 38672, 43989, 21331,
      /* 14745 */ 38672, 38672, 33824, 22475, 22475, 49385, 34223, 22411, 22411, 22411, 44011, 26727, 26727, 26727, 44027,
      /* 14760 */ 46887, 19958, 38672, 38672, 50007, 22475, 22475, 28197, 22411, 22411, 44066, 26727, 26727, 44101, 26313,
      /* 14775 */ 20872, 38672, 38672, 27136, 22475, 42143, 22411, 22411, 26977, 26727, 22520, 26312, 34036, 26929, 22475,
      /* 14790 */ 42144, 22411, 26975, 26727, 26890, 47793, 44124, 44140, 44185, 44209, 20435, 28340, 26976, 33389, 44233,
      /* 14805 */ 44253, 44277, 44296, 28343, 26456, 28257, 28345, 26459, 44315, 44342, 38482, 34905, 28863, 38672, 38672,
      /* 14820 */ 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672,
      /* 14835 */ 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 25323, 38672,
      /* 14850 */ 38672, 38672, 18636, 22098, 44386, 29857, 38069, 44372, 44403, 44440, 44464, 44480, 44494, 44510, 44526,
      /* 14865 */ 44538, 25344, 44554, 46908, 38672, 40088, 38672, 38672, 41365, 38672, 43156, 26783, 26781, 47212, 47203,
      /* 14880 */ 34311, 44573, 42979, 44618, 41232, 44280, 27268, 44640, 44676, 38672, 44712, 29827, 28456, 38672, 38672,
      /* 14895 */ 38672, 44731, 44769, 38672, 40058, 44785, 40965, 44822, 22475, 44840, 44869, 48063, 22411, 22690, 39155,
      /* 14910 */ 44892, 44910, 26727, 30990, 39463, 38672, 44931, 38672, 44950, 44971, 38672, 38672, 38672, 38672, 38672,
      /* 14925 */ 44987, 28258, 45008, 41301, 22475, 22475, 37611, 28054, 22411, 45028, 22411, 22411, 45046, 30301, 30320,
      /* 14940 */ 26727, 26727, 28093, 30742, 33803, 38672, 38672, 45072, 32638, 30075, 38672, 46548, 37818, 38672, 42396,
      /* 14955 */ 22475, 22475, 47037, 45094, 33476, 49452, 22411, 22411, 49585, 32047, 36630, 35654, 26727, 26727, 39696,
      /* 14970 */ 33919, 26493, 44108, 45157, 32514, 38672, 49604, 38672, 38672, 38672, 45200, 22475, 22475, 43892, 45227,
      /* 14985 */ 28015, 33854, 22411, 41993, 40562, 22411, 27851, 26727, 26727, 32834, 45248, 22521, 33795, 38672, 22295,
      /* 15000 */ 45267, 19361, 38672, 28255, 36090, 22475, 45286, 43473, 42051, 22411, 45304, 43005, 43694, 26727, 49877,
      /* 15015 */ 26998, 46887, 38672, 50299, 46144, 45323, 22475, 22475, 42142, 22411, 22411, 28347, 26727, 26727, 49054,
      /* 15030 */ 26313, 45345, 36168, 40817, 45367, 22475, 45384, 22411, 30669, 26977, 26727, 45417, 45465, 36482, 45500,
      /* 15045 */ 45528, 32279, 22411, 44261, 26727, 45549, 35759, 34423, 35689, 37179, 48196, 20435, 28340, 26976, 27310,
      /* 15060 */ 33427, 47309, 26456, 32258, 46222, 29141, 45599, 45573, 45589, 33538, 36362, 36357, 34905, 28863, 38672,
      /* 15075 */ 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672,
      /* 15090 */ 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 25323,
      /* 15105 */ 38672, 38672, 38672, 42503, 22098, 38672, 38672, 19843, 38672, 45632, 29682, 29695, 45672, 45688, 45703,
      /* 15120 */ 45719, 45731, 25344, 25697, 36820, 25484, 43215, 48936, 33218, 45747, 38933, 25691, 45794, 45830, 45905,
      /* 15135 */ 45865, 45892, 45921, 30595, 45937, 41471, 45980, 45966, 25375, 45996, 46014, 46030, 34093, 38672, 38672,
      /* 15150 */ 46051, 24794, 46090, 46124, 46160, 46201, 46238, 46262, 46318, 46334, 46351, 46386, 26710, 46424, 30615,
      /* 15165 */ 39597, 40389, 46450, 46486, 30259, 41502, 46506, 46564, 38672, 46591, 46610, 46646, 38672, 45270, 33165,
      /* 15180 */ 46667, 46703, 46719, 46781, 46818, 46866, 45012, 35786, 47344, 42692, 28076, 22411, 34531, 37334, 42303,
      /* 15195 */ 43342, 43676, 26727, 37661, 41688, 46885, 38672, 46904, 39209, 44660, 46924, 28976, 46946, 38672, 30957,
      /* 15210 */ 20847, 49903, 46983, 47036, 22475, 47053, 33288, 31829, 47089, 22411, 22411, 47105, 35219, 43394, 47140,
      /* 15225 */ 26727, 26727, 47156, 32918, 33802, 47191, 38672, 41877, 37707, 38672, 50210, 38598, 47237, 45288, 47274,
      /* 15240 */ 47290, 28015, 43827, 47306, 47325, 28394, 29934, 30696, 36786, 37667, 47360, 43033, 22521, 43418, 47376,
      /* 15255 */ 50112, 38672, 38355, 49147, 28255, 47399, 22475, 22475, 47445, 47467, 34602, 22411, 47502, 47526, 50046,
      /* 15270 */ 26727, 47556, 46887, 36283, 49516, 38672, 48840, 29206, 44799, 47584, 47703, 30662, 30727, 45251, 31880,
      /* 15285 */ 34269, 39367, 47647, 38672, 49567, 38494, 40946, 47666, 47699, 47719, 39849, 48630, 47746, 32945, 47785,
      /* 15300 */ 47809, 47827, 47850, 47889, 47907, 48880, 26310, 35759, 22476, 22411, 26978, 48196, 20435, 28340, 26976,
      /* 15315 */ 39617, 42139, 49752, 49772, 47949, 47973, 48009, 48038, 49034, 30862, 33538, 36362, 36357, 47933, 28863,
      /* 15330 */ 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672,
      /* 15345 */ 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672,
      /* 15360 */ 25323, 38672, 38672, 38672, 38672, 48079, 38672, 38672, 48107, 38672, 19671, 30510, 30518, 48127, 30518,
      /* 15375 */ 30526, 48143, 48155, 25344, 38672, 38672, 38672, 44955, 38672, 29647, 38672, 38672, 38672, 38672, 29652,
      /* 15390 */ 46888, 38672, 38672, 45329, 35643, 48171, 30851, 45141, 48219, 48262, 38672, 38672, 38672, 29641, 38672,
      /* 15405 */ 38672, 50200, 50208, 38672, 38672, 38672, 48298, 33458, 22475, 22475, 22475, 48316, 48375, 22411, 22411,
      /* 15420 */ 28301, 37203, 26727, 26727, 26727, 30914, 41169, 48395, 38672, 34989, 34103, 38672, 38672, 38672, 48429,
      /* 15435 */ 38672, 34985, 36969, 28258, 49732, 31174, 47066, 48458, 46734, 22411, 37326, 35682, 48477, 41625, 48513,
      /* 15450 */ 26727, 48546, 48566, 33498, 48611, 32919, 33803, 38672, 32557, 38672, 48646, 38672, 38672, 38672, 19786,
      /* 15465 */ 38672, 26931, 22475, 48666, 22475, 22475, 22475, 32777, 22411, 48684, 22411, 22411, 22411, 31945, 26727,
      /* 15480 */ 48701, 26727, 26727, 26727, 32918, 33361, 38672, 45778, 38672, 38672, 38672, 38672, 41194, 35417, 22475,
      /* 15495 */ 22475, 22475, 28015, 42844, 22411, 22411, 22411, 22411, 27851, 48720, 26727, 26727, 26727, 22521, 33795,
      /* 15510 */ 48739, 38672, 38672, 48756, 38672, 35766, 48773, 22475, 22475, 45119, 48793, 22411, 42164, 43122, 48813,
      /* 15525 */ 26727, 43937, 26998, 46887, 48835, 38672, 38672, 26931, 22475, 22475, 42142, 22411, 22411, 28347, 26727,
      /* 15540 */ 26727, 22521, 26313, 38672, 38672, 38672, 27136, 22475, 42143, 22411, 22411, 26977, 26727, 22520, 26312,
      /* 15555 */ 34036, 26929, 43522, 42144, 48856, 26975, 48877, 26310, 35759, 22476, 22411, 26978, 48196, 20435, 28340,
      /* 15570 */ 26976, 39617, 42139, 28345, 26456, 20436, 32151, 30885, 28257, 28345, 26459, 33538, 22735, 48896, 34905,
      /* 15585 */ 28863, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672,
      /* 15600 */ 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672,
      /* 15615 */ 38672, 25323, 38672, 38672, 38672, 38672, 48924, 48962, 36314, 45181, 38672, 50538, 38672, 45169, 48959,
      /* 15630 */ 38038, 34111, 48981, 48993, 25344, 38672, 38672, 38672, 43215, 38672, 38672, 38672, 38672, 38672, 38672,
      /* 15645 */ 38672, 38672, 38672, 38672, 27525, 42141, 49009, 31292, 44280, 27268, 25375, 38672, 36812, 40252, 29641,
      /* 15660 */ 38672, 38672, 38672, 38672, 43194, 38672, 38672, 26929, 45232, 22475, 37800, 22475, 25393, 49027, 22411,
      /* 15675 */ 46850, 22690, 27979, 26727, 26727, 49050, 30990, 39463, 38672, 38672, 38672, 38672, 38672, 38672, 49070,
      /* 15690 */ 38672, 38672, 49087, 38672, 28258, 22475, 49810, 22475, 22475, 35786, 22411, 22411, 34386, 22411, 22411,
      /* 15705 */ 37334, 26727, 26727, 49106, 26727, 26727, 32919, 33803, 38672, 38672, 38672, 38672, 38672, 38672, 38672,
      /* 15720 */ 38672, 38672, 26931, 22475, 22475, 22475, 22475, 22475, 33849, 22411, 22411, 22411, 22411, 22411, 33324,
      /* 15735 */ 26727, 26727, 26727, 26727, 26727, 32918, 33802, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 22475,
      /* 15750 */ 22475, 22475, 22475, 28015, 33854, 22411, 22411, 22411, 22411, 27851, 26727, 26727, 26727, 26727, 22521,
      /* 15765 */ 33795, 38672, 38672, 49126, 38672, 38672, 28255, 22475, 22475, 22475, 29442, 22411, 22411, 22411, 26485,
      /* 15780 */ 26727, 26727, 26727, 26998, 46887, 38672, 49146, 38672, 26931, 22475, 22475, 42142, 22411, 22411, 28347,
      /* 15795 */ 26727, 26727, 22521, 26313, 38672, 38672, 38672, 27136, 22475, 42143, 22411, 22411, 26977, 26727, 22520,
      /* 15810 */ 26312, 49163, 26929, 22475, 42144, 22411, 26975, 26727, 26310, 35759, 22476, 22411, 26978, 48196, 20435,
      /* 15825 */ 28340, 26976, 39617, 42139, 28345, 26456, 28257, 28343, 26456, 28257, 28345, 26459, 33538, 36362, 36357,
      /* 15840 */ 34905, 28863, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672,
      /* 15855 */ 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672,
      /* 15870 */ 38672, 38672, 25323, 38672, 38672, 38672, 38672, 49187, 38672, 21516, 38672, 20816, 49222, 49253, 38672,
      /* 15885 */ 49277, 49291, 49304, 49320, 49332, 25344, 38672, 38672, 38672, 43215, 38672, 38672, 38672, 38672, 38672,
      /* 15900 */ 38672, 38672, 38672, 38672, 38672, 28256, 31934, 32212, 26453, 47540, 49348, 25375, 38672, 38672, 38672,
      /* 15915 */ 29641, 38672, 38672, 38672, 43175, 38672, 38672, 38672, 26929, 22475, 22475, 22475, 22475, 25393, 22411,
      /* 15930 */ 22411, 22411, 22690, 26727, 26727, 26727, 26727, 30990, 39463, 38672, 38672, 38672, 38672, 38672, 38672,
      /* 15945 */ 38672, 38672, 38672, 38672, 38672, 28258, 22475, 22475, 22475, 22475, 35786, 22411, 22411, 22411, 22411,
      /* 15960 */ 22411, 37334, 26727, 26727, 26727, 26727, 26727, 32919, 33803, 38672, 38672, 38672, 38672, 38672, 35291,
      /* 15975 */ 38672, 38672, 38672, 36319, 22475, 22475, 22475, 22475, 22475, 31707, 22411, 22411, 22411, 22411, 22411,
      /* 15990 */ 45130, 26727, 26727, 26727, 26727, 26727, 32918, 33802, 38672, 38842, 38672, 38672, 38672, 38672, 38672,
      /* 16005 */ 22475, 22475, 49383, 22475, 49401, 33854, 22411, 42856, 22411, 47124, 27851, 26727, 41079, 26727, 26727,
      /* 16020 */ 49426, 33795, 38672, 38672, 38672, 38672, 38672, 28255, 22475, 22475, 22475, 29442, 22411, 22411, 22411,
      /* 16035 */ 26485, 26727, 26727, 26727, 26998, 46887, 38672, 38672, 38672, 26931, 22475, 22475, 42142, 22411, 22411,
      /* 16050 */ 28347, 26727, 26727, 22521, 26313, 38672, 38672, 38672, 27136, 22475, 42143, 22411, 22411, 26977, 26727,
      /* 16065 */ 22520, 26312, 34036, 26929, 22475, 42144, 22411, 26975, 26727, 26310, 35759, 22476, 22411, 26978, 48196,
      /* 16080 */ 20435, 28340, 26976, 39617, 42139, 28345, 26456, 28257, 28343, 26456, 28257, 28345, 26459, 33538, 36362,
      /* 16095 */ 36357, 34905, 28863, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672,
      /* 16110 */ 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672,
      /* 16125 */ 38672, 38672, 38672, 25610, 38672, 38672, 38672, 38672, 22098, 38672, 38672, 38672, 38672, 42922, 38672,
      /* 16140 */ 38672, 38672, 38672, 41202, 49468, 49480, 25344, 38672, 38672, 38672, 43215, 49496, 38672, 49515, 38672,
      /* 16155 */ 38672, 46071, 46074, 38672, 49532, 28993, 37922, 42141, 49583, 32824, 44280, 27268, 25375, 38672, 38672,
      /* 16170 */ 46108, 29641, 46524, 46533, 49601, 38672, 38672, 38672, 38672, 26929, 22475, 22475, 49620, 37001, 25393,
      /* 16185 */ 22411, 29448, 22411, 49639, 26727, 26727, 48625, 36734, 30990, 43097, 49680, 38672, 38672, 38672, 38672,
      /* 16200 */ 38672, 38672, 38672, 38672, 38672, 38672, 28258, 22475, 22475, 22475, 22475, 35786, 22411, 22411, 22411,
      /* 16215 */ 22411, 22411, 37334, 26727, 26727, 26727, 26727, 26727, 32919, 33803, 38672, 38672, 38672, 38672, 38672,
      /* 16230 */ 38672, 49703, 38672, 38672, 26931, 22475, 22475, 49727, 22475, 22475, 48053, 22411, 22411, 49748, 22411,
      /* 16245 */ 22411, 46748, 26727, 26727, 49768, 26727, 26727, 32918, 33802, 20903, 38672, 38672, 38672, 38672, 38672,
      /* 16260 */ 38672, 22475, 49788, 22475, 22475, 28015, 33854, 26700, 22411, 22411, 22411, 27851, 42367, 26727, 26727,
      /* 16275 */ 26727, 22521, 33795, 38672, 38672, 38672, 38672, 38672, 28255, 22475, 22475, 22475, 29442, 22411, 22411,
      /* 16290 */ 22411, 26485, 26727, 26727, 26727, 26998, 46887, 38672, 38672, 38672, 26931, 22475, 22475, 42142, 22411,
      /* 16305 */ 22411, 28347, 26727, 26727, 22521, 26313, 38672, 38672, 38672, 27136, 22475, 42143, 22411, 22411, 26977,
      /* 16320 */ 26727, 22520, 26312, 34036, 26929, 22475, 42144, 22411, 26975, 26727, 26310, 35759, 22476, 22411, 26978,
      /* 16335 */ 48196, 20435, 28340, 26976, 39617, 42139, 28345, 26456, 28257, 28343, 26456, 28257, 28345, 26459, 33538,
      /* 16350 */ 36362, 36357, 34905, 28863, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672,
      /* 16365 */ 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672,
      /* 16380 */ 38672, 38672, 38672, 38672, 25323, 38672, 38672, 38672, 38672, 22098, 38672, 38672, 38672, 38672, 42922,
      /* 16395 */ 38672, 38672, 38672, 38672, 44448, 27298, 33333, 25344, 45477, 38672, 38672, 43215, 38672, 38672, 49711,
      /* 16410 */ 38672, 38672, 38672, 49707, 38672, 38672, 27156, 49805, 37753, 37630, 26453, 49986, 49826, 25375, 38672,
      /* 16425 */ 20236, 38672, 29641, 38672, 38672, 38672, 38672, 38672, 38672, 28133, 26929, 22475, 22475, 22475, 47834,
      /* 16440 */ 25393, 22411, 22411, 22411, 49862, 26727, 26727, 26727, 37879, 30990, 39463, 38672, 45808, 38672, 38672,
      /* 16455 */ 38672, 38672, 38672, 38672, 29514, 38672, 38672, 28258, 49898, 22475, 31756, 22475, 35786, 22411, 49919,
      /* 16470 */ 22411, 36688, 22411, 37334, 40766, 26727, 26727, 49936, 26727, 32919, 33803, 38672, 25655, 38672, 38672,
      /* 16485 */ 38672, 38672, 38672, 38672, 38672, 26931, 22475, 37984, 22475, 22475, 22475, 35151, 22411, 46398, 22411,
      /* 16500 */ 22411, 22411, 43919, 26727, 31302, 26727, 26727, 26727, 32918, 33802, 38672, 38672, 38672, 38672, 38672,
      /* 16515 */ 38999, 38672, 22475, 22475, 26805, 22475, 49623, 33854, 22411, 22411, 49957, 22411, 49975, 26727, 26727,
      /* 16530 */ 47510, 26727, 49846, 33795, 38672, 38672, 18612, 38672, 38672, 28255, 22475, 22475, 22475, 29442, 22411,
      /* 16545 */ 22411, 22411, 26485, 26727, 26727, 26727, 26998, 30025, 38672, 38672, 50002, 26931, 50023, 22475, 27060,
      /* 16560 */ 22411, 22411, 28347, 50040, 26727, 22521, 26313, 38672, 40323, 38672, 27136, 29066, 42143, 22411, 50062,
      /* 16575 */ 26977, 27488, 22520, 26312, 34036, 26929, 22475, 42144, 22411, 26975, 26727, 26310, 35759, 22476, 22411,
      /* 16590 */ 26978, 48196, 20435, 28340, 26976, 39617, 42139, 28345, 26456, 28257, 28343, 26456, 28257, 28345, 26459,
      /* 16605 */ 33538, 36362, 36357, 34905, 28863, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672,
      /* 16620 */ 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672,
      /* 16635 */ 38672, 38672, 38672, 38672, 38672, 25323, 38672, 38672, 38672, 38672, 22098, 38672, 38672, 38672, 38672,
      /* 16650 */ 42922, 41360, 38672, 38672, 38672, 44448, 27298, 33333, 25344, 38672, 38672, 38672, 43215, 38672, 38672,
      /* 16665 */ 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 28256, 42141, 22411, 26453, 44280, 27268, 25375,
      /* 16680 */ 38672, 38672, 38672, 29641, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 26929, 22475, 22475, 22475,
      /* 16695 */ 22475, 25393, 22411, 22411, 22411, 22690, 26727, 26727, 26727, 26727, 30990, 39463, 38672, 38672, 38672,
      /* 16710 */ 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 28258, 22475, 22475, 22475, 22475, 35786, 22411,
      /* 16725 */ 22411, 22411, 22411, 22411, 37334, 26727, 26727, 26727, 26727, 26727, 32919, 33803, 38672, 38672, 38672,
      /* 16740 */ 38672, 38672, 38672, 38672, 38672, 38672, 26931, 22475, 22475, 22475, 22475, 22475, 33849, 22411, 22411,
      /* 16755 */ 22411, 22411, 22411, 33324, 26727, 26727, 26727, 26727, 26727, 32918, 33802, 38672, 38672, 38672, 38672,
      /* 16770 */ 38672, 38672, 38672, 22475, 22475, 22475, 22475, 28015, 33854, 22411, 22411, 22411, 22411, 27851, 26727,
      /* 16785 */ 26727, 26727, 26727, 22521, 33795, 38672, 38672, 38672, 38672, 38672, 28255, 22475, 22475, 22475, 29442,
      /* 16800 */ 22411, 22411, 22411, 26485, 26727, 26727, 26727, 26998, 46887, 38672, 38672, 38672, 26931, 22475, 22475,
      /* 16815 */ 42142, 22411, 22411, 28347, 26727, 26727, 22521, 26313, 38672, 38672, 38672, 27136, 22475, 42143, 22411,
      /* 16830 */ 22411, 26977, 26727, 22520, 26312, 34036, 26929, 22475, 42144, 22411, 26975, 26727, 26310, 35759, 22476,
      /* 16845 */ 22411, 26978, 48196, 20435, 28340, 26976, 39617, 42139, 28345, 26456, 28257, 28343, 26456, 28257, 28345,
      /* 16860 */ 26459, 33538, 36362, 36357, 34905, 28863, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672,
      /* 16875 */ 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672,
      /* 16890 */ 38672, 38672, 38672, 38672, 38672, 38672, 20939, 38672, 38672, 38672, 38672, 34339, 19585, 19583, 40183,
      /* 16905 */ 33676, 50079, 27766, 27768, 50110, 33673, 34350, 50128, 50140, 20832, 38672, 38672, 38672, 43215, 38672,
      /* 16920 */ 38672, 25515, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 18953, 20613, 18794, 19200, 19418, 35990,
      /* 16935 */ 45351, 38672, 18269, 42564, 29641, 38672, 40144, 38672, 23032, 18306, 18356, 18382, 18387, 18403, 18422,
      /* 16950 */ 18462, 20670, 18475, 50434, 18503, 18525, 50156, 19412, 50440, 18509, 36003, 19232, 20563, 38672, 46930,
      /* 16965 */ 18591, 38672, 38672, 37574, 18609, 18628, 33736, 18652, 18685, 18722, 18753, 18745, 18769, 18406, 25849,
      /* 16980 */ 18792, 20360, 18810, 18830, 18835, 19138, 18794, 20364, 18814, 18794, 18839, 19540, 19955, 37554, 48943,
      /* 16995 */ 18855, 18871, 18894, 40258, 38672, 38976, 18931, 18947, 18974, 19016, 19062, 19169, 19103, 19129, 20726,
      /* 17010 */ 19934, 19154, 19185, 19222, 19248, 20726, 19934, 19154, 19185, 19222, 19273, 19000, 30964, 19299, 19315,
      /* 17025 */ 28712, 19342, 25187, 19377, 19393, 19434, 19464, 19495, 19569, 19608, 24938, 19905, 19631, 19046, 19601,
      /* 17040 */ 24931, 19898, 19624, 19039, 19647, 19687, 43796, 19722, 19792, 19745, 19771, 19808, 19113, 19859, 19875,
      /* 17055 */ 19921, 18446, 19976, 19994, 24983, 18444, 19974, 19992, 20321, 18562, 47383, 20010, 46515, 35979, 20039,
      /* 17070 */ 20679, 20105, 20160, 20116, 20132, 20159, 20115, 20176, 19479, 20207, 20223, 20259, 20298, 20337, 20380,
      /* 17085 */ 20402, 21368, 20386, 20408, 21374, 19283, 20424, 20452, 20468, 20484, 20497, 50424, 20500, 20516, 20532,
      /* 17100 */ 20548, 20592, 20589, 50171, 20608, 19547, 18794, 18487, 20629, 20143, 19945, 20660, 18437, 21954, 20695,
      /* 17115 */ 20711, 21969, 19448, 21939, 20755, 19510, 19659, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672,
      /* 17130 */ 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672,
      /* 17145 */ 38672, 38672, 38672, 38672, 38672, 38672, 38672, 20939, 38672, 38672, 38672, 38672, 30470, 38672, 38672,
      /* 17160 */ 20273, 38672, 42922, 31104, 31112, 50226, 50240, 50248, 42483, 50272, 20832, 38672, 38672, 38672, 43215,
      /* 17175 */ 38672, 38672, 50505, 38672, 38672, 38672, 25547, 38672, 38672, 25544, 18953, 18958, 18794, 35998, 18531,
      /* 17190 */ 35990, 45351, 38672, 18269, 42564, 29641, 38672, 40144, 38672, 23032, 18306, 18356, 18382, 18387, 18403,
      /* 17205 */ 18422, 18462, 20670, 19406, 50434, 18503, 18525, 18547, 19412, 50440, 18509, 36003, 19232, 20563, 38672,
      /* 17220 */ 46930, 18591, 38672, 38672, 37574, 18609, 18628, 33736, 18652, 18685, 18722, 18753, 18745, 18769, 18406,
      /* 17235 */ 25849, 18792, 20360, 18810, 18830, 18835, 19138, 18794, 20364, 18814, 18794, 18839, 19540, 19955, 37554,
      /* 17250 */ 48943, 18855, 18871, 18894, 40258, 38672, 38976, 18931, 18947, 18974, 19016, 19062, 19169, 19103, 19129,
      /* 17265 */ 20726, 19934, 19154, 19185, 19222, 19248, 20726, 19934, 19154, 19185, 19222, 19273, 19000, 30964, 19299,
      /* 17280 */ 19315, 28712, 19342, 25187, 19377, 19393, 19434, 19464, 19495, 19569, 19608, 24938, 19905, 19631, 19046,
      /* 17295 */ 19601, 24931, 19898, 19624, 19039, 19647, 19687, 43796, 19722, 19792, 19745, 19771, 19808, 19113, 19859,
      /* 17310 */ 19875, 19921, 18446, 19976, 19994, 24983, 18444, 19974, 19992, 20321, 18562, 47383, 20010, 46515, 35979,
      /* 17325 */ 20039, 20679, 20105, 20160, 20116, 20132, 20159, 20115, 20176, 19479, 20207, 20223, 20259, 20298, 20337,
      /* 17340 */ 20380, 20402, 21368, 20386, 20408, 21374, 19283, 20424, 20452, 20468, 20484, 20497, 50424, 20500, 20516,
      /* 17355 */ 20532, 20548, 20592, 20589, 50171, 20608, 19547, 18794, 18487, 20629, 20143, 19945, 20660, 18437, 21954,
      /* 17370 */ 20695, 20711, 21969, 19448, 21939, 20755, 19510, 19659, 38672, 38672, 38672, 38672, 38672, 38672, 38672,
      /* 17385 */ 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672,
      /* 17400 */ 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 20939, 38672, 38672, 38672, 38672, 42589, 38672,
      /* 17415 */ 38672, 38672, 38672, 24842, 35017, 50315, 50319, 50335, 50343, 43995, 50367, 20832, 38672, 38672, 38672,
      /* 17430 */ 43215, 38672, 38672, 25359, 38672, 38672, 23171, 38672, 38672, 38672, 23167, 18953, 18958, 18794, 35998,
      /* 17445 */ 19418, 35990, 45351, 38672, 18269, 42564, 29641, 38672, 40144, 38672, 23032, 18306, 18356, 18382, 18387,
      /* 17460 */ 18403, 18422, 18462, 20670, 19075, 50434, 18503, 18525, 50409, 19412, 50440, 18509, 36003, 19232, 20563,
      /* 17475 */ 38672, 46930, 18591, 38672, 38672, 37574, 18609, 18628, 33736, 18652, 18685, 18722, 18753, 18745, 18769,
      /* 17490 */ 18406, 25849, 18792, 20360, 18810, 18830, 18835, 19138, 18794, 20364, 18814, 18794, 18839, 19540, 19955,
      /* 17505 */ 37554, 48943, 18855, 18871, 18894, 40258, 38672, 38976, 18931, 18947, 18974, 19016, 19062, 19169, 19103,
      /* 17520 */ 19129, 20726, 19934, 19154, 19185, 19222, 19248, 20726, 19934, 19154, 19185, 19222, 19273, 19000, 30964,
      /* 17535 */ 19299, 19315, 28712, 19342, 25187, 19377, 19393, 19434, 19464, 19495, 19569, 19608, 24938, 19905, 19631,
      /* 17550 */ 19046, 19601, 24931, 19898, 19624, 19039, 19647, 19687, 43796, 19722, 19792, 19745, 19771, 19808, 19113,
      /* 17565 */ 19859, 19875, 19921, 18446, 19976, 19994, 24983, 18444, 19974, 19992, 20321, 18562, 47383, 20010, 46515,
      /* 17580 */ 35979, 20039, 20679, 20105, 20160, 20116, 20132, 20159, 20115, 20176, 19479, 20207, 20223, 20259, 20298,
      /* 17595 */ 20337, 20380, 20402, 21368, 20386, 20408, 21374, 19283, 20424, 20452, 20468, 20484, 20497, 50424, 20500,
      /* 17610 */ 20516, 20532, 20548, 20592, 20589, 50171, 20608, 19547, 18794, 18487, 20629, 20143, 19945, 20660, 18437,
      /* 17625 */ 21954, 20695, 20711, 21969, 19448, 21939, 20755, 19510, 19659, 38672, 38672, 38672, 38672, 38672, 38672,
      /* 17640 */ 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672,
      /* 17655 */ 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 20939, 38672, 38672, 38672, 38672, 30470,
      /* 17670 */ 38672, 38672, 38672, 38672, 42922, 38672, 38672, 38672, 38672, 38672, 38672, 24860, 25344, 38672, 38672,
      /* 17685 */ 38672, 43215, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 28256, 42141, 22411,
      /* 17700 */ 26453, 44280, 27268, 22230, 38672, 38672, 38672, 29641, 38672, 38672, 38672, 38672, 38672, 38672, 38672,
      /* 17715 */ 26929, 22475, 22475, 22475, 22475, 36544, 22411, 22411, 22411, 33858, 26727, 26727, 26727, 26727, 30990,
      /* 17730 */ 39463, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 28258, 22475, 22475,
      /* 17745 */ 22475, 22475, 35786, 22411, 22411, 22411, 22411, 22411, 37334, 26727, 26727, 26727, 26727, 26727, 32919,
      /* 17760 */ 33803, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 26931, 22475, 22475, 22475, 22475,
      /* 17775 */ 22475, 33849, 22411, 22411, 22411, 22411, 22411, 33324, 26727, 26727, 26727, 26727, 26727, 32918, 33802,
      /* 17790 */ 38672, 38672, 38672, 38672, 38672, 38672, 38672, 22475, 22475, 22475, 22475, 28015, 33854, 22411, 22411,
      /* 17805 */ 22411, 22411, 27851, 26727, 26727, 26727, 26727, 22521, 33795, 38672, 38672, 38672, 38672, 38672, 28255,
      /* 17820 */ 22475, 22475, 22475, 29442, 22411, 22411, 22411, 26485, 26727, 26727, 26727, 26998, 46887, 38672, 38672,
      /* 17835 */ 38672, 26931, 22475, 22475, 42142, 22411, 22411, 28347, 26727, 26727, 22521, 26313, 38672, 38672, 38672,
      /* 17850 */ 27136, 22475, 42143, 22411, 22411, 26977, 26727, 22520, 26312, 34036, 26929, 22475, 42144, 22411, 26975,
      /* 17865 */ 26727, 26310, 35759, 22476, 22411, 26978, 48196, 20435, 28340, 26976, 39617, 42139, 28345, 26456, 28257,
      /* 17880 */ 28343, 26456, 28257, 28345, 26459, 33538, 36362, 36357, 34905, 28863, 38672, 38672, 38672, 38672, 38672,
      /* 17895 */ 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672,
      /* 17910 */ 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672,
      /* 17925 */ 38672, 38672, 38672, 38956, 38672, 38672, 29796, 50456, 50460, 50460, 50482, 38955, 50476, 50498, 38672,
      /* 17940 */ 38672, 38672, 38672, 38672, 38672, 50505, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 18953, 18958,
      /* 17955 */ 18794, 35998, 19418, 35990, 45351, 38672, 18269, 42564, 38672, 38672, 40144, 38672, 23032, 18306, 18356,
      /* 17970 */ 18382, 18387, 18403, 18422, 18462, 20670, 18475, 50434, 18503, 18525, 50156, 19412, 50440, 18509, 36003,
      /* 17985 */ 19232, 20563, 38672, 46930, 18591, 38672, 38672, 37574, 18609, 18628, 33736, 18652, 18685, 18722, 18753,
      /* 18000 */ 18745, 18769, 18406, 25849, 18792, 20360, 18810, 18830, 18835, 19138, 18794, 20364, 18814, 18794, 18839,
      /* 18015 */ 19540, 19955, 37554, 48943, 18855, 18871, 18894, 40258, 38672, 38976, 18931, 18947, 18974, 19016, 19062,
      /* 18030 */ 19169, 19103, 19129, 20726, 19934, 19154, 19185, 19222, 19248, 20726, 19934, 19154, 19185, 19222, 19273,
      /* 18045 */ 19000, 30964, 19299, 19315, 28712, 19342, 25187, 19377, 19393, 19434, 19464, 19495, 19569, 19608, 24938,
      /* 18060 */ 19905, 19631, 19046, 19601, 24931, 19898, 19624, 19039, 19647, 19687, 43796, 19722, 19792, 19745, 19771,
      /* 18075 */ 19808, 19113, 19859, 19875, 19921, 18446, 19976, 19994, 24983, 18444, 19974, 19992, 20321, 18562, 47383,
      /* 18090 */ 20010, 46515, 35979, 20039, 20679, 20105, 20160, 20116, 20132, 20159, 20115, 20176, 19479, 20207, 20223,
      /* 18105 */ 20259, 20298, 20337, 20380, 20402, 21368, 20386, 20408, 21374, 19283, 50527, 20452, 20468, 20484, 20497,
      /* 18120 */ 50424, 20500, 20516, 26100, 20548, 20592, 20589, 50171, 18953, 19547, 18794, 18487, 20629, 20143, 19945,
      /* 18135 */ 20660, 18437, 21954, 20695, 20711, 21969, 19448, 21939, 20755, 19510, 19659, 38672, 38672, 38672, 38672,
      /* 18150 */ 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672,
      /* 18165 */ 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 38672, 94505, 94505, 90408, 90408,
      /* 18180 */ 94505, 94505, 94505, 94505, 94505, 94505, 94505, 94505, 94505, 94505, 94505, 94505, 94505, 94505, 94505,
      /* 18195 */ 94505, 1, 12290, 94505, 94505, 94505, 94505, 94505, 94505, 94505, 94505, 94505, 0, 94505, 90408, 94505,
      /* 18211 */ 94505, 94505, 94505, 94505, 94505, 94505, 94505, 94505, 364, 94505, 90408, 94505, 94505, 94505, 94505,
      /* 18226 */ 94505, 94505, 94505, 69632, 73728, 94505, 94505, 94505, 94505, 94505, 65536, 94505, 3, 0, 0, 2183168, 0,
      /* 18243 */ 0, 0, 90408, 94505, 298, 299, 0, 2134016, 302, 303, 0, 0, 0, 0, 0, 1636, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 18268 */ 1645, 0, 0, 2732032, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2904064, 2908160, 0, 0, 0, 0, 0, 1699, 0, 0, 0, 0, 0,
      /* 18295 */ 0, 0, 0, 0, 0, 0, 2963, 0, 0, 0, 0, 0, 2424832, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2625536, 0, 0, 0, 0,
      /* 18325 */ 0, 2045, 0, 0, 0, 0, 2049, 0, 0, 0, 0, 0, 0, 0, 2711, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2976, 0, 534, 534, 534,
      /* 18354 */ 534, 534, 2699264, 2715648, 0, 0, 2772992, 2805760, 2830336, 0, 2863104, 2920448, 0, 0, 0, 0, 0, 0, 0,
      /* 18373 */ 303, 303, 303, 303, 0, 303, 303, 303, 303, 0, 2805760, 2920448, 0, 0, 0, 0, 0, 2920448, 0, 0, 0, 0, 0,
      /* 18396 */ 0, 0, 2732032, 0, 2179072, 2179072, 2179072, 2179072, 2424832, 2433024, 2179072, 2179072, 2179072,
      /* 18409 */ 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072,
      /* 18420 */ 2179072, 3125248, 2625536, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2699264, 2179072,
      /* 18431 */ 2715648, 2179072, 2723840, 2179072, 2732032, 2772992, 2179072, 2125824, 2125824, 2125824, 2125824,
      /* 18442 */ 2125824, 2592768, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824,
      /* 18453 */ 2125824, 2551808, 2125824, 2125824, 2125824, 2125824, 2125824, 2637824, 2125824, 2179072, 2179072,
      /* 18464 */ 2805760, 2179072, 2830336, 2179072, 2179072, 2863104, 2179072, 2179072, 2179072, 2179072, 2920448,
      /* 18475 */ 2179072, 2179072, 2179072, 0, 0, 2125824, 2125824, 2125824, 2125824, 2125824, 2424832, 2433024, 2125824,
      /* 18488 */ 2125824, 2125824, 2125824, 0, 2502656, 0, 0, 3010560, 0, 0, 0, 0, 2990080, 2179072, 2179072, 2699264,
      /* 18504 */ 2125824, 2715648, 2125824, 2723840, 2125824, 2732032, 2772992, 2125824, 2125824, 2125824, 2805760,
      /* 18515 */ 2125824, 2830336, 2125824, 2125824, 2863104, 2125824, 2125824, 2125824, 2125824, 2920448, 2863104,
      /* 18526 */ 2125824, 2125824, 2125824, 2125824, 2920448, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824,
      /* 18537 */ 2125824, 2125824, 2125824, 2125824, 0, 1142784, 0, 2179072, 2125824, 2125824, 2125824, 3117056, 2125824,
      /* 18550 */ 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 0, 0, 975, 2125824, 0,
      /* 18564 */ 0, 0, 0, 0, 0, 2510848, 2514944, 0, 0, 2547712, 2596864, 0, 0, 0, 0, 0, 0, 735, 0, 0, 0, 0, 735, 0, 741,
      /* 18589 */ 0, 0, 0, 2789376, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3137, 0, 0, 2142208, 0, 0, 0, 0, 0, 0, 0,
      /* 18619 */ 0, 0, 0, 0, 0, 0, 0, 2733, 0, 2662400, 0, 2813952, 0, 0, 0, 0, 2375680, 0, 0, 0, 0, 0, 0, 0, 0, 0, 350,
      /* 18646 */ 351, 352, 0, 0, 0, 0, 2584576, 0, 0, 0, 0, 2838528, 0, 0, 2838528, 0, 0, 0, 0, 0, 0, 0, 0, 1122, 0, 0,
      /* 18672 */ 0, 0, 0, 0, 0, 0, 0, 0, 1186, 0, 0, 0, 0, 0, 0, 0, 2891776, 0, 0, 0, 0, 0, 2392064, 2412544, 0, 0,
      /* 18698 */ 2838528, 0, 0, 0, 0, 0, 0, 262144, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 706, 0, 0, 0, 0, 0, 0, 0, 0, 2179072,
      /* 18726 */ 2179072, 2179072, 2408448, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072,
      /* 18737 */ 2179072, 2179072, 2179072, 2179072, 2125824, 0, 2126724, 2126724, 2617344, 2179072, 2179072, 2179072,
      /* 18749 */ 2179072, 2179072, 2179072, 2662400, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072,
      /* 18760 */ 2179072, 2179072, 2179072, 2584576, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072,
      /* 18771 */ 2179072, 2801664, 2813952, 2179072, 2838528, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072,
      /* 18782 */ 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2125824, 1798, 2125824, 2125824, 2125824, 2408448,
      /* 18794 */ 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824,
      /* 18805 */ 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2662400, 2125824, 2125824,
      /* 18816 */ 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2801664, 2813952,
      /* 18827 */ 2125824, 2838528, 2125824, 2813952, 2125824, 2838528, 2125824, 2125824, 2125824, 2125824, 2125824,
      /* 18838 */ 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 3125248, 2125824, 2125824,
      /* 18849 */ 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 0, 2822144, 0, 0, 2883584, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 18868 */ 0, 0, 3080192, 3100672, 3104768, 0, 0, 0, 0, 3186688, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 305, 306, 0, 0, 0,
      /* 18893 */ 0, 0, 0, 2797568, 0, 0, 0, 0, 0, 0, 0, 2850816, 2867200, 0, 0, 2883584, 0, 0, 0, 0, 0, 2072, 0, 0, 0, 0,
      /* 18919 */ 0, 0, 0, 0, 0, 0, 0, 3134, 0, 0, 0, 0, 2465792, 0, 0, 2719744, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3014656,
      /* 18946 */ 3207168, 0, 2691072, 0, 0, 3215360, 0, 0, 0, 0, 0, 0, 2179072, 2179072, 2179072, 2179072, 2179072,
      /* 18963 */ 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2125824, 2125824, 2125824, 2125824, 2125824,
      /* 18974 */ 2179072, 2179072, 2179072, 2179072, 2179072, 2461696, 2465792, 2179072, 2179072, 2179072, 2179072,
      /* 18985 */ 2179072, 2179072, 2523136, 2179072, 2179072, 2179072, 0, 1342, 2125824, 2125824, 2125824, 2125824,
      /* 18997 */ 2125824, 2424832, 2433024, 2125824, 2125824, 2125824, 2125824, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2473984,
      /* 19015 */ 2478080, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2600960, 2179072, 2179072, 2179072,
      /* 19026 */ 2179072, 2641920, 2179072, 2179072, 2179072, 2179072, 2179072, 2125824, 2125824, 2125824, 2125824,
      /* 19037 */ 2125824, 1047, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 3035136, 2125824,
      /* 19049 */ 2125824, 3072000, 2125824, 2125824, 2125824, 3121152, 2125824, 2125824, 3141632, 2125824, 2125824,
      /* 19060 */ 2125824, 3170304, 2179072, 2179072, 2719744, 2179072, 2179072, 2179072, 2179072, 2179072, 2768896,
      /* 19071 */ 2777088, 2781184, 2797568, 2822144, 2179072, 2179072, 2179072, 0, 900, 2125824, 2125824, 2125824,
      /* 19083 */ 2125824, 2125824, 2424832, 2433024, 2125824, 2125824, 2125824, 2125824, 298, 0, 299, 0, 302, 0, 303, 0,
      /* 19099 */ 0, 0, 2473984, 2478080, 2179072, 3063808, 2179072, 2179072, 2179072, 2179072, 3100672, 2179072, 2179072,
      /* 19112 */ 3133440, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2551808, 2179072,
      /* 19123 */ 2179072, 2179072, 2179072, 2179072, 2637824, 2179072, 2179072, 2179072, 2179072, 3207168, 2179072, 0, 0,
      /* 19136 */ 0, 0, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 0, 0, 2125824, 2125824,
      /* 19150 */ 2125824, 2408448, 2125824, 2125824, 2125824, 2719744, 2125824, 2125824, 2125824, 2125824, 2125824,
      /* 19161 */ 2768896, 2777088, 2781184, 2797568, 2822144, 2125824, 2125824, 2125824, 2883584, 2179072, 2912256,
      /* 19172 */ 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072,
      /* 19183 */ 2179072, 3039232, 2125824, 2912256, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824,
      /* 19194 */ 2125824, 2125824, 2125824, 2125824, 2125824, 3039232, 2125824, 2125824, 0, 2125824, 2126799, 2125824,
      /* 19206 */ 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 245760, 0, 0,
      /* 19219 */ 2179072, 2125824, 2125824, 3063808, 2125824, 2125824, 2125824, 2125824, 2125824, 3100672, 2125824,
      /* 19230 */ 2125824, 3133440, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 0, 2179072, 2125824, 2125824,
      /* 19242 */ 2457600, 2179072, 2179072, 2179072, 2179072, 2457600, 2125824, 2125824, 2125824, 3207168, 2125824, 0, 0,
      /* 19255 */ 0, 0, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 0, 1894, 2125824, 2125824,
      /* 19269 */ 2125824, 2408448, 2125824, 2125824, 2125824, 2125824, 2125824, 3207168, 2125824, 2179072, 2125824,
      /* 19280 */ 2125824, 2179072, 2179072, 2179072, 2179072, 2125824, 2125824, 2125824, 2125824, 0, 2486272, 0, 0, 0, 0,
      /* 19295 */ 0, 2678784, 2854912, 3006464, 0, 2924544, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3162112, 3170304, 0, 0, 3219456,
      /* 19315 */ 3035136, 0, 0, 0, 0, 0, 3072000, 2650112, 0, 0, 2809856, 0, 0, 0, 0, 0, 0, 0, 1650, 0, 0, 0, 0, 0, 0,
      /* 19340 */ 1654, 0, 2686976, 2736128, 0, 0, 2531328, 2707456, 0, 3190784, 0, 0, 2576384, 0, 0, 0, 0, 0, 0, 0, 1688,
      /* 19361 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 2742, 0, 0, 0, 0, 0, 0, 0, 3121152, 3141632, 0, 0, 0, 2924544, 0, 2682880, 0,
      /* 19387 */ 0, 0, 0, 0, 0, 3112960, 2387968, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072,
      /* 19402 */ 2453504, 2179072, 2473984, 2482176, 2179072, 2179072, 2179072, 0, 901, 2125824, 2125824, 2125824,
      /* 19414 */ 2125824, 2125824, 2424832, 2433024, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824,
      /* 19425 */ 2125824, 2125824, 2125824, 0, 0, 0, 2179072, 2125824, 2125824, 2179072, 2179072, 2179072, 2531328,
      /* 19438 */ 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2605056, 2179072, 2629632, 2179072,
      /* 19449 */ 2179072, 2179072, 2179072, 2179072, 2125824, 2527232, 2125824, 2125824, 2125824, 2125824, 2125824,
      /* 19460 */ 3092480, 2125824, 2527232, 2125824, 2650112, 2179072, 2179072, 2179072, 2707456, 2179072, 2736128,
      /* 19471 */ 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2887680, 2179072, 2125824, 2125824,
      /* 19482 */ 2125824, 2125824, 2441216, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2932736, 2179072, 2924544, 2179072, 2179072,
      /* 19499 */ 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 3035136, 2179072, 2179072, 3072000,
      /* 19510 */ 2179072, 2125824, 2658304, 2973696, 2125824, 2125824, 2658304, 2973696, 2125824, 2711552, 2560000,
      /* 19521 */ 2179072, 2560000, 2125824, 2560000, 2125824, 2125824, 2125824, 2125824, 2125824, 3223552, 975, 0,
      /* 19533 */ 2125824, 2125824, 2416640, 2125824, 2125824, 2125824, 2445312, 2125824, 2125824, 2125824, 2125824,
      /* 19544 */ 2179072, 2125824, 2125824, 2179072, 2179072, 2179072, 2179072, 2125824, 2125824, 2125824, 2125824,
      /* 19555 */ 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 1047, 0, 0, 2179072, 2125824,
      /* 19568 */ 2125824, 2179072, 3121152, 2179072, 2179072, 3141632, 2179072, 2179072, 2179072, 3170304, 2179072,
      /* 19579 */ 2179072, 3190784, 3194880, 2179072, 0, 0, 0, 0, 0, 0, 1134592, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1134592,
      /* 19601 */ 2125824, 2125824, 3190784, 3194880, 2125824, 0, 0, 0, 0, 0, 0, 2387968, 2125824, 2125824, 2125824,
      /* 19616 */ 2420736, 2125824, 2125824, 2125824, 2125824, 2125824, 2453504, 2125824, 2707456, 2125824, 2736128,
      /* 19627 */ 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2887680, 2125824, 2125824,
      /* 19638 */ 2924544, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824,
      /* 19649 */ 3141632, 2125824, 2125824, 2125824, 3170304, 2125824, 2125824, 3190784, 3194880, 2125824, 2179072,
      /* 19660 */ 2125824, 2125824, 2179072, 2125824, 2125824, 2179072, 2125824, 2125824, 2985984, 2985984, 2985984, 0, 0,
      /* 19673 */ 0, 0, 0, 0, 0, 69632, 73728, 0, 419, 419, 0, 0, 65536, 419, 2179072, 3112960, 3219456, 2125824, 2125824,
      /* 19692 */ 3112960, 3219456, 2125824, 2125824, 3112960, 3219456, 0, 0, 0, 0, 0, 0, 0, 1701, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 19714 */ 0, 1624, 0, 0, 0, 0, 0, 0, 0, 3022848, 0, 0, 3145728, 0, 3203072, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 335,
      /* 19740 */ 336, 0, 0, 0, 0, 0, 0, 0, 0, 3067904, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 787, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 19771 */ 0, 0, 0, 2445312, 0, 2842624, 0, 0, 0, 2637824, 0, 0, 0, 0, 2621440, 0, 0, 0, 0, 0, 2100, 0, 0, 0, 0, 0,
      /* 19797 */ 0, 0, 0, 0, 0, 0, 2727936, 0, 0, 0, 3084288, 3182592, 2899968, 0, 2961408, 0, 0, 2179072, 2179072,
      /* 19816 */ 2416640, 2179072, 2179072, 2179072, 2445312, 2179072, 2179072, 2179072, 0, 901, 2126724, 2126724,
      /* 19828 */ 2126724, 2126724, 2126724, 2425732, 2433924, 2126724, 2126724, 2126724, 2126724, 2458574, 2126798,
      /* 19839 */ 2126798, 2126798, 2126798, 2183168, 0, 0, 0, 0, 0, 0, 0, 396, 0, 0, 0, 0, 0, 396, 0, 0, 2179072,
      /* 19860 */ 2179072, 2179072, 2727936, 2752512, 2179072, 2179072, 2179072, 2842624, 2846720, 2179072, 2895872,
      /* 19871 */ 2916352, 2179072, 2179072, 2945024, 2179072, 2179072, 2994176, 2179072, 3002368, 2179072, 2179072,
      /* 19882 */ 3022848, 2179072, 3067904, 3084288, 3096576, 2179072, 2179072, 2179072, 2179072, 2179072, 2125824,
      /* 19893 */ 2125824, 2125824, 2125824, 2125824, 237568, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824,
      /* 19904 */ 2125824, 2605056, 2125824, 2629632, 2125824, 2125824, 2650112, 2125824, 2125824, 2125824, 2707456,
      /* 19915 */ 2125824, 2736128, 2125824, 2125824, 2125824, 2125824, 2179072, 2179072, 2179072, 3223552, 0, 0, 2125824,
      /* 19928 */ 2125824, 2416640, 2125824, 2125824, 2125824, 2445312, 2125824, 2125824, 2125824, 2125824, 2125824,
      /* 19939 */ 2600960, 2125824, 2125824, 2125824, 2125824, 2641920, 2125824, 2125824, 2125824, 2125824, 2125824,
      /* 19950 */ 2125824, 2125824, 2125824, 2125824, 3010560, 2125824, 2125824, 2125824, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 19969 */ 0, 0, 0, 2940, 0, 2637824, 2125824, 2125824, 2125824, 2125824, 2727936, 2752512, 2125824, 2125824,
      /* 19983 */ 2125824, 2125824, 2842624, 2846720, 2125824, 2895872, 2916352, 2125824, 2125824, 2125824, 2125824,
      /* 19994 */ 2945024, 2125824, 2125824, 2994176, 2125824, 3002368, 2125824, 2125824, 3022848, 2125824, 3067904,
      /* 20005 */ 3084288, 2125824, 3096576, 2125824, 2125824, 0, 0, 0, 2928640, 0, 0, 0, 3059712, 0, 2543616, 2666496, 0,
      /* 20022 */ 2633728, 0, 0, 0, 0, 0, 0, 766, 767, 0, 0, 0, 754, 0, 0, 774, 0, 2179072, 2179072, 2179072, 2494464,
      /* 20043 */ 2179072, 2179072, 2514944, 2179072, 2179072, 2179072, 2543616, 2547712, 2179072, 2179072, 2596864,
      /* 20054 */ 2179072, 2126724, 2126724, 2126724, 2126724, 2126724, 2593668, 2126724, 2126724, 2126724, 2126724,
      /* 20065 */ 2126724, 2126724, 2126724, 2126724, 2126798, 0, 0, 0, 0, 0, 0, 2510848, 2514944, 0, 0, 2547712, 2596864,
      /* 20082 */ 0, 0, 0, 0, 0, 0, 1164, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1564, 0, 1566, 0, 0, 0, 2179072, 2179072, 3059712,
      /* 20108 */ 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 3178496, 2125824, 2125824, 2125824, 2125824,
      /* 20119 */ 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2928640, 2125824, 2125824, 2125824, 2998272,
      /* 20130 */ 2125824, 2125824, 2125824, 2125824, 3059712, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824,
      /* 20141 */ 2125824, 3178496, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824,
      /* 20152 */ 3010560, 2125824, 2125824, 2125824, 2125824, 2125824, 2502656, 2125824, 2125824, 2125824, 2494464,
      /* 20163 */ 2125824, 2125824, 2514944, 2125824, 2125824, 2125824, 2543616, 2547712, 2125824, 2125824, 2596864,
      /* 20174 */ 2125824, 2125824, 2125824, 2125824, 2125824, 3059712, 2125824, 2125824, 2125824, 2125824, 2125824,
      /* 20185 */ 2125824, 2125824, 3178496, 2179072, 2125824, 2125824, 2179072, 2126724, 2126724, 2126798, 2126798,
      /* 20196 */ 2441216, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2932736, 2965504, 0, 0, 3076096, 0, 0, 2695168, 3174400, 2646016,
      /* 20216 */ 2613248, 2703360, 0, 0, 0, 0, 2977792, 0, 0, 3047424, 3129344, 0, 2981888, 2396160, 0, 3153920, 0, 0, 0,
      /* 20235 */ 2740224, 0, 0, 0, 0, 0, 0, 1106, 0, 0, 0, 0, 0, 0, 0, 0, 0, 334, 0, 0, 0, 0, 0, 0, 0, 0, 2793472, 0, 0,
      /* 20264 */ 0, 0, 0, 2469888, 2506752, 2756608, 0, 0, 2580480, 0, 0, 0, 0, 0, 0, 1146880, 0, 1146880, 0, 0, 0, 0, 0,
      /* 20287 */ 0, 0, 302, 302, 302, 302, 0, 302, 302, 302, 302, 0, 2396160, 2400256, 2179072, 2179072, 2441216,
      /* 20304 */ 2179072, 2469888, 2179072, 2179072, 2179072, 2519040, 2179072, 2179072, 2179072, 2179072, 2179072,
      /* 20315 */ 2125824, 2125824, 2125824, 2125824, 2125824, 241664, 2125824, 2125824, 2125824, 2125824, 2125824,
      /* 20326 */ 2125824, 2125824, 3223552, 2179072, 2125824, 2125824, 2179072, 2179072, 2125824, 2125824, 2125824,
      /* 20337 */ 2588672, 2179072, 2613248, 2646016, 2179072, 2179072, 2695168, 2756608, 2179072, 2179072, 2179072,
      /* 20348 */ 2932736, 2179072, 2179072, 2179072, 2179072, 2179072, 2125824, 2125824, 2125824, 2125824, 2125824,
      /* 20359 */ 245760, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2584576, 2125824, 2125824, 2125824,
      /* 20370 */ 2125824, 2125824, 2617344, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2662400, 2179072,
      /* 20381 */ 2179072, 2179072, 3129344, 2179072, 2179072, 3153920, 3166208, 3174400, 2396160, 2400256, 2125824,
      /* 20392 */ 2125824, 2441216, 2125824, 2469888, 2125824, 2125824, 2125824, 2519040, 2125824, 2125824, 2125824,
      /* 20403 */ 2125824, 2125824, 2519040, 2125824, 2125824, 2125824, 2125824, 2588672, 2125824, 2613248, 2646016,
      /* 20414 */ 2125824, 2125824, 2695168, 2756608, 2125824, 2125824, 2125824, 2125824, 2932736, 2125824, 0, 3108864,
      /* 20426 */ 3198976, 0, 0, 3043328, 0, 3149824, 2936832, 0, 2760704, 3132, 0, 0, 0, 0, 534, 534, 534, 534, 534, 534,
      /* 20446 */ 534, 534, 534, 534, 534, 3503, 2953216, 0, 0, 2826240, 3158016, 2428928, 0, 3018752, 2764800, 2572288,
      /* 20462 */ 0, 0, 3051520, 2179072, 2428928, 2437120, 2179072, 2486272, 2179072, 2179072, 2179072, 2179072, 2179072,
      /* 20475 */ 2179072, 2179072, 2179072, 2654208, 2678784, 2760704, 2764800, 2854912, 2969600, 2179072, 3006464,
      /* 20486 */ 2179072, 3018752, 2179072, 2179072, 2179072, 3149824, 2125824, 2428928, 2437120, 2125824, 2486272,
      /* 20497 */ 2125824, 2125824, 2125824, 2125824, 2125824, 2654208, 2678784, 2760704, 2764800, 2785280, 2854912,
      /* 20508 */ 2969600, 2125824, 3006464, 2125824, 3018752, 2125824, 2125824, 2125824, 2125824, 3149824, 2179072,
      /* 20519 */ 3051520, 2125824, 3051520, 2125824, 3051520, 0, 2490368, 2498560, 0, 0, 0, 0, 2875392, 0, 0, 0, 3132, 0,
      /* 20537 */ 0, 2834432, 0, 3227648, 2568192, 2564096, 0, 2940928, 2179072, 2179072, 2498560, 2179072, 2179072,
      /* 20550 */ 2179072, 2555904, 2564096, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072,
      /* 20561 */ 2179072, 3137536, 2125824, 2125824, 2125824, 2125824, 2457600, 2125824, 2125824, 2125824, 2125824,
      /* 20572 */ 2183168, 0, 0, 0, 0, 0, 0, 0, 333, 0, 0, 0, 0, 0, 333, 0, 0, 2125824, 3137536, 2125824, 2125824,
      /* 20593 */ 2498560, 2125824, 2125824, 2125824, 2555904, 2564096, 2125824, 2125824, 2125824, 2125824, 2125824,
      /* 20604 */ 2125824, 2125824, 2125824, 2125824, 3132, 0, 0, 0, 0, 2179072, 2179072, 2179072, 2179072, 2179072,
      /* 20618 */ 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2125824, 2126725, 2125824, 2125824, 2125824,
      /* 20629 */ 2502656, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 3010560,
      /* 20640 */ 2179072, 2179072, 2125824, 2125824, 2502656, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072,
      /* 20651 */ 2179072, 2179072, 2179072, 3010560, 2179072, 2179072, 2126724, 2126724, 2503556, 0, 0, 0, 0, 2179072,
      /* 20665 */ 2179072, 2179072, 2179072, 2179072, 2592768, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072,
      /* 20676 */ 2179072, 2179072, 3117056, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072,
      /* 20687 */ 2179072, 2928640, 2179072, 2179072, 2179072, 2998272, 2179072, 2179072, 3031040, 0, 0, 0, 2179072,
      /* 20700 */ 2449408, 2179072, 2535424, 2179072, 2609152, 2179072, 2859008, 2179072, 2179072, 2179072, 3031040,
      /* 20711 */ 2125824, 2449408, 2125824, 2535424, 2125824, 2609152, 2125824, 2859008, 2125824, 2125824, 2125824,
      /* 20722 */ 3031040, 2125824, 2125824, 2449408, 2125824, 2125824, 2125824, 2125824, 2461696, 2465792, 2125824,
      /* 20733 */ 2125824, 2125824, 2125824, 2125824, 2125824, 2523136, 2125824, 2125824, 2125824, 298, 0, 0, 0, 298, 0,
      /* 20748 */ 299, 0, 0, 0, 299, 0, 302, 2125824, 2125824, 2125824, 3026944, 2404352, 2125824, 2125824, 2125824,
      /* 20763 */ 2125824, 3026944, 2539520, 0, 2949120, 2179072, 2658304, 2973696, 111044, 111044, 111044, 111044,
      /* 20775 */ 111044, 111044, 111044, 111044, 111044, 111044, 111044, 111044, 111044, 111044, 111044, 111044, 452,
      /* 20788 */ 452, 111044, 452, 452, 452, 452, 452, 452, 452, 452, 452, 452, 111044, 111044, 111044, 111044, 111044,
      /* 20805 */ 111044, 111044, 111044, 111044, 111044, 452, 111044, 111044, 111044, 111044, 111044, 0, 0, 0, 0, 0, 0,
      /* 20822 */ 0, 0, 0, 360, 0, 0, 0, 0, 0, 360, 3, 0, 0, 2183168, 0, 0, 0, 0, 0, 298, 299, 0, 2134016, 302, 303, 0, 0,
      /* 20849 */ 0, 0, 0, 2124, 0, 0, 0, 0, 0, 534, 534, 534, 534, 534, 847, 534, 534, 861, 534, 534, 0, 302, 118784, 0,
      /* 20873 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3127, 0, 0, 0, 302, 0, 0, 0, 302, 119197, 73728, 0, 0, 0, 0, 0,
      /* 20902 */ 65536, 0, 0, 0, 0, 0, 2403, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 302, 302, 0, 0, 0, 0, 302, 302, 302, 302, 302,
      /* 20930 */ 302, 0, 0, 0, 0, 0, 302, 0, 302, 1, 12290, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2966, 0, 3, 0,
      /* 20960 */ 0, 2183168, 0, 0, 0, 0, 0, 33396, 299, 0, 2134016, 49784, 303, 0, 0, 0, 0, 0, 2428, 0, 0, 0, 0, 0, 0, 0,
      /* 20986 */ 0, 0, 0, 0, 172032, 0, 0, 0, 0, 0, 0, 0, 0, 0, 298, 0, 0, 0, 302, 0, 0, 0, 2424832, 2433024, 0, 0,
      /* 21012 */ 2457600, 2105631, 12290, 3, 0, 0, 293, 0, 0, 0, 0, 293, 0, 0, 0, 0, 0, 0, 0, 2024, 0, 0, 0, 0, 0, 0, 0,
      /* 21039 */ 0, 0, 2455, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 122880, 122880, 122880, 122880, 122880, 122880, 122880,
      /* 21059 */ 122880, 122880, 0, 0, 122880, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 785, 0, 790, 0, 793, 0, 0, 0, 122880, 0,
      /* 21085 */ 122880, 122880, 122880, 0, 0, 0, 0, 0, 122880, 0, 122880, 122880, 122880, 122880, 122880, 122880,
      /* 21101 */ 122880, 122880, 122880, 122880, 122880, 122880, 122880, 122880, 122880, 122880, 0, 0, 122880, 0, 0, 0,
      /* 21117 */ 0, 0, 0, 0, 0, 122880, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1216, 0, 0, 0, 0, 147456, 0, 0, 0, 0, 0, 0,
      /* 21147 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 3148, 0, 0, 0, 0, 1067, 1071, 0, 0, 1075, 1079, 0, 2424832, 2433024, 0, 0,
      /* 21172 */ 2457600, 0, 0, 0, 131072, 0, 0, 0, 69632, 73728, 0, 0, 0, 0, 0, 65536, 0, 0, 0, 0, 0, 2479, 2437, 0, 0,
      /* 21197 */ 0, 0, 0, 2484, 0, 0, 0, 0, 0, 0, 1675, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3260, 0, 0, 534, 534, 534, 131072,
      /* 21225 */ 0, 0, 131072, 131072, 0, 0, 0, 0, 0, 0, 0, 131072, 0, 0, 131072, 0, 0, 131072, 0, 0, 0, 0, 0, 135168,
      /* 21249 */ 135168, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 225708, 0, 0, 0, 135168, 0, 0, 135168, 0, 0, 0, 0, 0,
      /* 21277 */ 0, 0, 0, 0, 0, 0, 1096, 0, 0, 0, 0, 0, 0, 0, 135168, 0, 135168, 135168, 135168, 135168, 135168, 135168,
      /* 21299 */ 0, 135168, 135168, 135168, 135168, 135168, 135168, 0, 0, 0, 0, 0, 135168, 0, 135168, 1, 12290, 3, 0, 0,
      /* 21319 */ 2183168, 0, 0, 0, 0, 0, 629, 630, 0, 2134016, 633, 634, 0, 0, 0, 0, 0, 2725, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 21346 */ 0, 0, 2200245, 2200245, 2200245, 0, 0, 2125824, 3117056, 2125824, 2125824, 2125824, 2125824, 2125824,
      /* 21360 */ 2125824, 2125824, 2125824, 2125824, 2125824, 0, 0, 1434, 2125824, 2125824, 2125824, 2125824, 2932736,
      /* 21373 */ 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 3129344, 2125824, 2125824,
      /* 21384 */ 3153920, 3166208, 3174400, 2506752, 2506752, 2506752, 0, 303, 139264, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 21404 */ 0, 0, 0, 266240, 0, 0, 0, 0, 0, 303, 0, 0, 0, 303, 69632, 139681, 0, 0, 0, 0, 0, 65536, 0, 0, 0, 0, 0,
      /* 21431 */ 2738, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2013, 0, 0, 0, 0, 303, 303, 303, 303, 303, 303, 0, 0, 0, 0, 0,
      /* 21459 */ 303, 0, 303, 1, 12290, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 300, 3, 0, 0, 2183168, 0, 0, 0, 0, 0, 298,
      /* 21488 */ 33399, 0, 2134016, 302, 49787, 0, 0, 0, 0, 0, 2763, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534,
      /* 21509 */ 556, 556, 3020, 556, 556, 556, 61440, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 360, 300, 300, 300,
      /* 21535 */ 143660, 370, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 143660,
      /* 21554 */ 300, 300, 143660, 300, 300, 300, 143730, 300, 300, 300, 143730, 69632, 73728, 300, 300, 143660, 300,
      /* 21571 */ 300, 65536, 300, 300, 0, 0, 300, 300, 143660, 300, 300, 300, 300, 300, 300, 300, 300, 300, 365, 300, 0,
      /* 21592 */ 143660, 300, 300, 300, 143660, 143660, 143660, 143660, 143660, 143660, 143660, 143660, 143660, 143660,
      /* 21606 */ 143660, 143660, 143660, 143660, 143660, 143660, 300, 300, 143660, 300, 300, 300, 300, 300, 300, 300,
      /* 21622 */ 300, 300, 300, 300, 143730, 300, 300, 300, 300, 300, 300, 300, 300, 143660, 143660, 143660, 143660,
      /* 21639 */ 143660, 143660, 143660, 143660, 143660, 300, 300, 300, 300, 300, 300, 300, 300, 143660, 300, 143660,
      /* 21655 */ 143660, 143660, 143660, 300, 143660, 143660, 143660, 143660, 143660, 143660, 300, 0, 300, 0, 300, 300,
      /* 21671 */ 300, 143660, 300, 143660, 143660, 143660, 143660, 143660, 143730, 143660, 143730, 143730, 143730,
      /* 21684 */ 143730, 143730, 143730, 143660, 143660, 143660, 143660, 143660, 143660, 143660, 143660, 1, 12290, 0, 0,
      /* 21699 */ 0, 0, 2200245, 2200245, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1153, 1154, 0, 0, 0, 0, 0, 0, 155648, 155648,
      /* 21724 */ 0, 155648, 155648, 155648, 155648, 155648, 155648, 155648, 155648, 155648, 155648, 155648, 155648,
      /* 21737 */ 155648, 155648, 155648, 155648, 155648, 155648, 155648, 155648, 155648, 155648, 155648, 155648, 0, 0, 0,
      /* 21752 */ 0, 155648, 0, 0, 0, 0, 0, 155648, 155648, 0, 155648, 155648, 0, 12290, 0, 0, 0, 0, 155648, 0, 155648, 0,
      /* 21774 */ 0, 0, 0, 0, 155648, 0, 0, 0, 0, 0, 0, 1148, 0, 0, 0, 0, 0, 0, 0, 0, 1157, 3, 0, 0, 2183168, 126976, 0,
      /* 21801 */ 0, 0, 0, 298, 299, 0, 2134016, 302, 303, 0, 0, 0, 0, 0, 2934, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2446, 0,
      /* 21829 */ 0, 0, 0, 159744, 159744, 159744, 159744, 159744, 159744, 159744, 159744, 159744, 159744, 159744, 159744,
      /* 21844 */ 159744, 159744, 159744, 159744, 163840, 159744, 159744, 159744, 159744, 0, 0, 159744, 0, 0, 0, 0, 0, 0,
      /* 21862 */ 0, 0, 159744, 159744, 159744, 159744, 159744, 159744, 159744, 159744, 159744, 159744, 163840, 159744,
      /* 21876 */ 159744, 159744, 159744, 159744, 0, 0, 0, 0, 0, 0, 0, 0, 0, 364, 0, 0, 0, 0, 131072, 131072, 25155, 0, 0,
      /* 21899 */ 0, 159744, 0, 0, 0, 25155, 25155, 25155, 159744, 25155, 25155, 25155, 25155, 25155, 25155, 25155,
      /* 21915 */ 159744, 159744, 159744, 159744, 25155, 159744, 25155, 1, 12290, 2125824, 3117056, 2125824, 2125824,
      /* 21928 */ 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 0, 24576, 975, 2125824, 2125824,
      /* 21941 */ 2125824, 2125824, 3092480, 0, 0, 0, 2404352, 2179072, 2179072, 2179072, 2179072, 3026944, 2404352,
      /* 21954 */ 2125824, 2125824, 2125824, 2125824, 2592768, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824,
      /* 21965 */ 2125824, 2125824, 2449408, 0, 2535424, 2125824, 2609152, 2125824, 2859008, 2125824, 2125824, 2125824,
      /* 21977 */ 3031040, 2125824, 2527232, 0, 0, 0, 2179072, 2527232, 167936, 167936, 167936, 167936, 167936, 167936,
      /* 21991 */ 167936, 167936, 167936, 167936, 167936, 167936, 167936, 167936, 167936, 167936, 1, 12290, 167936,
      /* 22004 */ 167936, 167936, 0, 0, 167936, 0, 0, 0, 0, 0, 0, 0, 0, 167936, 167936, 167936, 167936, 167936, 167936,
      /* 22023 */ 167936, 167936, 0, 0, 0, 0, 0, 0, 0, 0, 0, 364, 0, 0, 0, 0, 155648, 0, 172032, 172032, 0, 172032, 0, 0,
      /* 22047 */ 172032, 172032, 0, 172032, 0, 0, 0, 0, 172032, 172032, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 172032, 0, 0, 0,
      /* 22071 */ 172032, 172032, 0, 172032, 172032, 172032, 172032, 172032, 172032, 172032, 172032, 172032, 172032,
      /* 22084 */ 172032, 172032, 172032, 172032, 172032, 172032, 172032, 172032, 172032, 172032, 172032, 172032, 172032,
      /* 22097 */ 172032, 0, 0, 0, 0, 0, 0, 0, 0, 0, 364, 0, 292, 0, 0, 0, 0, 1, 288, 3, 0, 0, 0, 294, 0, 0, 0, 0, 0, 0,
      /* 22127 */ 0, 0, 0, 0, 348, 0, 0, 0, 0, 0, 176128, 176128, 176128, 176128, 176128, 176128, 176128, 176128, 176128,
      /* 22146 */ 176128, 176128, 176128, 176128, 176128, 176128, 176128, 1, 0, 176128, 176128, 176128, 0, 0, 176128, 0,
      /* 22162 */ 0, 0, 0, 0, 0, 0, 0, 176128, 176128, 176128, 176128, 176128, 176128, 176128, 176128, 0, 0, 0, 0, 0, 0,
      /* 22183 */ 0, 0, 0, 364, 0, 292, 0, 0, 0, 347, 3, 78114, 78114, 292, 0, 627, 0, 0, 0, 298, 299, 0, 2134016, 302,
      /* 22207 */ 303, 0, 0, 0, 0, 0, 2946, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 245760, 0, 0, 0, 0, 78114, 0, 0, 0, 0, 0, 0,
      /* 22237 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 672, 0, 1102, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 155648, 0, 0, 0,
      /* 22268 */ 0, 1146, 0, 0, 0, 0, 1151, 0, 0, 0, 0, 0, 0, 0, 346, 0, 404, 0, 0, 0, 0, 0, 404, 0, 0, 0, 2098, 0, 0, 0,
      /* 22298 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2717, 0, 0, 534, 2135, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534,
      /* 22323 */ 534, 2147, 534, 534, 534, 534, 534, 534, 1775, 534, 534, 534, 1780, 534, 534, 534, 534, 534, 534, 534,
      /* 22343 */ 2545, 534, 534, 534, 534, 534, 534, 0, 2549, 2220, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556,
      /* 22363 */ 556, 2232, 556, 556, 556, 556, 556, 556, 2590, 556, 556, 556, 556, 556, 556, 2598, 556, 556, 2307, 580,
      /* 22383 */ 580, 580, 580, 580, 580, 580, 580, 580, 580, 580, 2319, 580, 580, 580, 0, 0, 0, 2006, 0, 1069, 0, 0, 0,
      /* 22406 */ 2008, 0, 1073, 0, 2573, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556,
      /* 22427 */ 1396, 0, 0, 2955, 0, 0, 0, 2959, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 371, 0, 0, 372, 0, 0, 0, 534, 3150, 534,
      /* 22455 */ 534, 534, 3153, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 2547, 534, 534, 534, 0, 0, 3161, 534,
      /* 22476 */ 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 556, 556, 556, 556, 580,
      /* 22496 */ 3206, 580, 580, 580, 3209, 580, 580, 580, 580, 580, 580, 580, 580, 2679, 580, 580, 580, 534, 580, 556,
      /* 22516 */ 534, 580, 580, 3217, 580, 580, 580, 580, 580, 580, 580, 580, 580, 580, 580, 580, 580, 534, 580, 556,
      /* 22536 */ 534, 580, 580, 3309, 580, 580, 580, 580, 3310, 3311, 580, 580, 580, 580, 580, 580, 580, 580, 2875, 580,
      /* 22556 */ 580, 580, 580, 580, 580, 580, 580, 3071, 580, 580, 580, 580, 580, 580, 580, 580, 3233, 580, 580, 580,
      /* 22576 */ 580, 534, 580, 556, 1993, 534, 534, 534, 1997, 556, 556, 556, 2001, 534, 534, 534, 3339, 534, 534, 534,
      /* 22596 */ 534, 534, 534, 3345, 534, 534, 534, 534, 556, 3407, 556, 3409, 556, 556, 556, 556, 556, 556, 556, 556,
      /* 22616 */ 1373, 556, 556, 556, 556, 556, 556, 556, 3364, 556, 580, 580, 580, 580, 580, 580, 3370, 580, 580, 580,
      /* 22636 */ 580, 580, 580, 3376, 580, 580, 580, 3380, 580, 534, 556, 580, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2925, 0, 0, 0,
      /* 22661 */ 0, 0, 3132, 0, 0, 0, 0, 3391, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 2198, 534, 2200,
      /* 22683 */ 534, 534, 534, 534, 534, 534, 3406, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 26009,
      /* 22703 */ 1341, 975, 580, 556, 556, 556, 556, 3422, 580, 580, 580, 580, 580, 580, 580, 580, 580, 580, 580, 1449,
      /* 22723 */ 580, 580, 580, 580, 580, 580, 580, 3522, 580, 580, 580, 580, 580, 580, 580, 580, 580, 0, 0, 0, 534, 534,
      /* 22745 */ 534, 534, 3585, 534, 556, 556, 3, 78114, 78114, 292, 0, 0, 0, 0, 0, 298, 299, 0, 2134016, 302, 303, 0,
      /* 22767 */ 0, 0, 0, 0, 2973, 0, 0, 2975, 0, 0, 534, 534, 2980, 534, 534, 534, 534, 534, 534, 2532, 534, 534, 534,
      /* 22790 */ 534, 534, 534, 534, 534, 534, 534, 2793, 534, 534, 534, 534, 534, 0, 0, 0, 304, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 22815 */ 0, 0, 0, 0, 0, 2732, 0, 0, 192965, 192965, 192965, 192965, 192965, 192965, 192965, 192965, 192965,
      /* 22832 */ 192965, 192965, 192965, 192965, 192965, 192965, 192965, 0, 192965, 0, 1, 12290, 192965, 192965, 192965,
      /* 22847 */ 0, 0, 192965, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1201, 0, 0, 0, 0, 0, 0, 0, 0, 192965, 192965, 192965,
      /* 22873 */ 192965, 192965, 192965, 192965, 192965, 192965, 192965, 0, 192965, 192965, 192965, 192965, 192965, 0, 0,
      /* 22888 */ 0, 0, 0, 0, 0, 0, 0, 364, 0, 304, 0, 0, 0, 0, 0, 0, 0, 0, 196608, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 22919 */ 1582, 0, 0, 0, 301, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 727, 406, 406, 406, 406, 406, 406, 0,
      /* 22947 */ 0, 0, 0, 0, 406, 0, 406, 1, 12290, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 118784, 298, 3, 78114, 78114,
      /* 22973 */ 292, 0, 0, 0, 0, 0, 298, 299, 0, 301, 302, 303, 0, 0, 0, 0, 0, 3142, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 23002 */ 2978, 534, 534, 534, 534, 0, 0, 0, 0, 733, 406, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1240, 0, 0, 0, 1244, 0,
      /* 23030 */ 0, 1175, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2871296, 0, 0, 1171, 1171, 0, 0, 0, 1175, 1650, 0, 0,
      /* 23058 */ 0, 0, 0, 0, 0, 0, 0, 364, 0, 253952, 0, 0, 0, 0, 580, 580, 580, 1540, 2005, 0, 0, 0, 0, 1546, 2007, 0,
      /* 23084 */ 0, 0, 0, 1552, 0, 0, 0, 1558, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 405, 0, 0, 0, 0, 0, 2009, 0, 0, 0, 0, 1558,
      /* 23114 */ 2011, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 406, 0, 0, 0, 0, 0, 534, 534, 534, 534, 2549, 0, 556, 556, 556, 556,
      /* 23141 */ 556, 556, 556, 556, 556, 556, 1410, 556, 556, 556, 556, 556, 0, 306, 0, 306, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 23166 */ 306, 0, 0, 0, 0, 0, 0, 1155072, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2705, 0, 0, 0, 0, 0, 204800,
      /* 23194 */ 204800, 0, 204800, 204800, 204800, 204800, 204800, 204800, 204800, 204800, 204800, 204800, 204800,
      /* 23207 */ 204800, 204800, 204800, 205106, 204800, 204800, 205105, 205106, 204800, 205105, 205105, 204800, 204800,
      /* 23220 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 364, 299, 0, 0, 0, 0, 0, 3, 0, 0, 2183794, 0, 0, 0, 0, 0, 298, 299, 151552,
      /* 23248 */ 2134016, 302, 303, 0, 0, 0, 0, 0, 155648, 155648, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 655,
      /* 23274 */ 212992, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 757, 0, 151552, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 23305 */ 0, 0, 0, 286720, 2179072, 2179072, 2179072, 2179072, 2179072, 2126724, 2126724, 2126724, 2126724,
      /* 23318 */ 2126724, 0, 2126798, 2126798, 2126798, 2126798, 2126798, 2126798, 2126798, 2126798, 3036110, 2126798,
      /* 23330 */ 2126798, 3072974, 2126798, 2126798, 2126798, 3122126, 2700164, 2126724, 2716548, 2126724, 2724740,
      /* 23341 */ 2126724, 2732932, 2773892, 2126724, 2126724, 2126724, 2806660, 2126724, 2831236, 2126724, 2126724, 973,
      /* 23353 */ 2126798, 2126798, 2126798, 2126798, 2126798, 2126798, 2126798, 2126798, 2126798, 2126798, 2126798,
      /* 23364 */ 2126798, 2126798, 2126798, 2126798, 2126798, 2864004, 2126724, 2126724, 2126724, 2126724, 2921348,
      /* 23375 */ 2126724, 2126724, 2126724, 2126724, 2126724, 2126724, 2126724, 2126724, 2126724, 2126724, 2626436,
      /* 23386 */ 2126724, 2126724, 2126724, 2126724, 2126724, 2126724, 2126724, 3117956, 2126724, 2126724, 2126724,
      /* 23397 */ 2126724, 2126724, 2126724, 2126724, 2126724, 2126724, 2126724, 0, 0, 975, 2126798, 2126798, 2126798,
      /* 23410 */ 2126798, 2126798, 2126798, 2126798, 3224526, 2179072, 2126798, 2126724, 2179072, 2179072, 2126724,
      /* 23421 */ 2126724, 2126798, 2126798, 0, 2486272, 0, 0, 0, 0, 0, 2678784, 2854912, 3006464, 2126798, 2126798,
      /* 23436 */ 2126798, 2626510, 2126798, 2126798, 2126798, 2126798, 2126798, 2126798, 2700238, 2126798, 2716622,
      /* 23447 */ 2126798, 2724814, 2126798, 2126798, 2126798, 2126798, 2126798, 2454478, 2126798, 2474958, 2483150,
      /* 23458 */ 2126798, 2126798, 2126798, 2126798, 2126798, 2126798, 2532302, 2733006, 2773966, 2126798, 2126798,
      /* 23469 */ 2126798, 2806734, 2126798, 2831310, 2126798, 2126798, 2864078, 2126798, 2126798, 2126798, 2126798,
      /* 23480 */ 2921422, 2126724, 2409348, 2126724, 2126724, 2126724, 2126724, 2126724, 2126724, 2126724, 2126724,
      /* 23491 */ 2126724, 2126724, 2126724, 2126724, 2126724, 2126724, 2126724, 2126724, 2814852, 2126724, 2839428,
      /* 23502 */ 2126724, 2126724, 2126724, 2126724, 2126724, 2126724, 2126724, 2126724, 2126724, 2126724, 2126724,
      /* 23513 */ 2126724, 2126724, 3126148, 2126724, 2126724, 2126724, 2126724, 2126798, 2126798, 2585550, 2126798,
      /* 23524 */ 2126798, 2126798, 2126798, 2126798, 2618318, 2126798, 2126798, 2126798, 2126798, 2126798, 2126798,
      /* 23535 */ 2663374, 2179072, 2179072, 2179072, 3207168, 2179072, 0, 0, 0, 0, 2126724, 2126724, 2126724, 2126724,
      /* 23549 */ 2126724, 2126724, 2126724, 2126724, 2552708, 2126724, 2126724, 2126724, 2126724, 2126724, 2638724,
      /* 23560 */ 2126724, 2126724, 2720644, 2126724, 2126724, 2126724, 2126724, 2126724, 2769796, 2777988, 2782084,
      /* 23571 */ 2798468, 2823044, 2126724, 2126724, 2126724, 2884484, 2126724, 2913156, 2126724, 2126724, 2126724,
      /* 23582 */ 2126724, 2126724, 2126724, 2126724, 2126724, 2126724, 2126724, 2126724, 2126724, 3040132, 2126724,
      /* 23593 */ 2126724, 2126724, 2728836, 2753412, 2126724, 2126724, 2126724, 2126724, 2843524, 2847620, 2126724,
      /* 23604 */ 2896772, 2917252, 2126724, 2126724, 2126724, 2126724, 3150724, 2126798, 2429902, 2438094, 2126798,
      /* 23615 */ 2487246, 2126798, 2126798, 2126798, 2126798, 2126798, 2126798, 2126798, 2126798, 2126798, 2126798,
      /* 23626 */ 2929614, 2126798, 2126798, 2126798, 2999246, 2126798, 3064708, 2126724, 2126724, 2126724, 2126724,
      /* 23637 */ 2126724, 3101572, 2126724, 2126724, 3134340, 2126724, 2126724, 2126724, 2126724, 2126724, 2126724,
      /* 23648 */ 2585476, 2126724, 2126724, 2126724, 2126724, 2126724, 2618244, 2126724, 2126724, 2126724, 2126798,
      /* 23659 */ 2720718, 2126798, 2126798, 2126798, 2126798, 2126798, 2769870, 2778062, 2782158, 2798542, 2823118,
      /* 23670 */ 2126798, 2126798, 2126798, 2884558, 2126798, 2913230, 2126798, 2126798, 2126798, 2126798, 2126798,
      /* 23681 */ 2126798, 2126798, 2126798, 2126798, 2126798, 2126798, 2126798, 3040206, 2126798, 2126798, 2126798,
      /* 23692 */ 2126798, 2126798, 2601934, 2126798, 2126798, 2126798, 2126798, 2642894, 2126798, 2126798, 2126798,
      /* 23703 */ 2126798, 2126798, 2126798, 2126798, 2606030, 2126798, 2630606, 2126798, 2126798, 2651086, 2126798,
      /* 23714 */ 2126798, 2126798, 3064782, 2126798, 2126798, 2126798, 2126798, 2126798, 3101646, 2126798, 2126798,
      /* 23725 */ 3134414, 2126798, 2126798, 2126798, 2126798, 2126798, 2126798, 0, 2179072, 2126798, 2126724, 2457600,
      /* 23737 */ 2179072, 2179072, 2179072, 2179072, 2458500, 2126798, 2126798, 2126798, 3208142, 2126798, 2179072,
      /* 23748 */ 2126798, 2126724, 2179072, 2179072, 2179072, 2179072, 2126724, 2126724, 2126724, 2126724, 2126724,
      /* 23759 */ 2126724, 2126724, 2126724, 2126724, 2126724, 2126724, 2126724, 3011460, 2126724, 2126724, 2126724,
      /* 23770 */ 2126798, 2126798, 2503630, 0, 0, 0, 0, 2388868, 2126724, 2126724, 2126724, 2421636, 2126724, 2126724,
      /* 23784 */ 2126724, 2126724, 2126724, 2454404, 2126724, 2126724, 2126724, 3027844, 2405326, 2126798, 2126798,
      /* 23795 */ 2126798, 2126798, 3027918, 2539520, 0, 2949120, 2179072, 2658304, 2973696, 2474884, 2483076, 2126724,
      /* 23807 */ 2126724, 2126724, 2126724, 2126724, 2126724, 2532228, 2126724, 2126724, 2126724, 2126724, 2126724,
      /* 23818 */ 2126724, 2126724, 2601860, 2126724, 2126724, 2126724, 2126724, 2642820, 2126724, 2126724, 2126724,
      /* 23829 */ 2126724, 2126724, 2655108, 2679684, 2761604, 2765700, 2786180, 2855812, 2970500, 2126724, 3007364,
      /* 23840 */ 2126724, 3019652, 2605956, 2126724, 2630532, 2126724, 2126724, 2651012, 2126724, 2126724, 2126724,
      /* 23851 */ 2708356, 2126724, 2737028, 2126724, 2126724, 2126724, 2126724, 2462596, 2466692, 2126724, 2126724,
      /* 23862 */ 2126724, 2126724, 2126724, 2126724, 2524036, 2126724, 2126724, 2126724, 2126724, 3036036, 2126724,
      /* 23873 */ 2126724, 3072900, 2126724, 2126724, 2126724, 3122052, 2126724, 2126724, 3142532, 2126724, 2126724,
      /* 23884 */ 2126724, 3171204, 2126724, 2126724, 3191684, 3195780, 2126724, 0, 0, 0, 0, 0, 0, 2388942, 2126798,
      /* 23899 */ 2126798, 2126798, 2421710, 2708430, 2126798, 2737102, 2126798, 2126798, 2126798, 2126798, 2126798,
      /* 23910 */ 2126798, 2126798, 2126798, 2888654, 2126798, 2126798, 2925518, 2126798, 2126798, 2126798, 2126798,
      /* 23921 */ 2179072, 2126798, 2126724, 2179072, 2179072, 2179072, 2179072, 2126724, 2126724, 2126724, 2126724,
      /* 23932 */ 2126798, 2126798, 2126798, 2126798, 2126798, 2126798, 2126798, 2126798, 2126798, 2126798, 2126798,
      /* 23943 */ 2126798, 2802638, 2814926, 2126798, 2839502, 2126798, 2126798, 2126798, 3142606, 2126798, 2126798,
      /* 23954 */ 2126798, 3171278, 2126798, 2126798, 3191758, 3195854, 2126798, 2179072, 2126798, 2126724, 2179072,
      /* 23965 */ 2126724, 2126798, 2179072, 2126724, 2126798, 2179072, 2126724, 2126798, 2985984, 2986884, 2986958, 0, 0,
      /* 23978 */ 0, 0, 0, 0, 0, 69632, 73728, 315, 316, 316, 421, 422, 65536, 429, 2179072, 3112960, 3219456, 2126724,
      /* 23996 */ 2126724, 3113860, 3220356, 2126798, 2126798, 3113934, 3220430, 0, 0, 0, 0, 0, 0, 0, 2046, 0, 0, 0, 0, 0,
      /* 24016 */ 0, 0, 0, 0, 1238, 0, 0, 0, 0, 0, 0, 2179072, 2179072, 2179072, 3223552, 0, 0, 2126724, 2126724, 2417540,
      /* 24036 */ 2126724, 2126724, 2126724, 2446212, 2126724, 2126724, 2126724, 2126724, 2888580, 2126724, 2126724,
      /* 24047 */ 2925444, 2126724, 2126724, 2126724, 2126724, 2126724, 2126724, 2126724, 2126724, 0, 0, 2126798, 2126798,
      /* 24060 */ 2126798, 2409422, 2126798, 2126798, 2945924, 2126724, 2126724, 2995076, 2126724, 3003268, 2126724,
      /* 24071 */ 2126724, 3023748, 2126724, 3068804, 3085188, 2126724, 3097476, 2126724, 2126724, 2126724, 2519940,
      /* 24082 */ 2126724, 2126724, 2126724, 2126724, 2589572, 2126724, 2614148, 2646916, 2126724, 2126724, 2696068,
      /* 24093 */ 2757508, 2638798, 2126798, 2126798, 2126798, 2126798, 2728910, 2753486, 2126798, 2126798, 2126798,
      /* 24104 */ 2126798, 2843598, 2847694, 2126798, 2896846, 2917326, 2126798, 2126798, 2945998, 2126798, 2126798,
      /* 24115 */ 2995150, 2126798, 3003342, 2126798, 2126798, 3023822, 2126798, 3068878, 3085262, 2126798, 3097550,
      /* 24126 */ 2179072, 2179072, 3059712, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 3178496, 2126724,
      /* 24137 */ 2126724, 2126724, 2126724, 2126724, 2126724, 3224452, 0, 0, 2126798, 2126798, 2417614, 2126798, 2126798,
      /* 24150 */ 2126798, 2446286, 2126798, 2126724, 2126724, 3060612, 2126724, 2126724, 2126724, 2126724, 2126724,
      /* 24161 */ 2126724, 2126724, 3179396, 2126798, 2126798, 2126798, 2126798, 2126798, 2126798, 2126798, 3126222,
      /* 24172 */ 2126798, 2126798, 2126798, 2126798, 2126798, 2126798, 2126798, 2126798, 2126798, 2126798, 2126798,
      /* 24183 */ 3118030, 2126798, 2126798, 2126798, 2126798, 2126798, 2126798, 2126798, 2495438, 2126798, 2126798,
      /* 24194 */ 2515918, 2126798, 2126798, 2126798, 2544590, 2548686, 2126798, 2126798, 2597838, 2126798, 2126798,
      /* 24205 */ 2126798, 2126798, 2425806, 2433998, 2126798, 2126798, 2126798, 2126798, 2126798, 2126798, 2126798,
      /* 24216 */ 2126798, 2126798, 2126798, 0, 0, 0, 2179072, 2126798, 2126724, 2126798, 2126798, 2126798, 3060686,
      /* 24229 */ 2126798, 2126798, 2126798, 2126798, 2126798, 2126798, 2126798, 3179470, 2179072, 2126798, 2126724,
      /* 24240 */ 2179072, 2126724, 2659204, 2974596, 2126724, 2126798, 2659278, 2974670, 2126798, 2711552, 2560000,
      /* 24251 */ 2179072, 2560900, 2126724, 2560974, 2126798, 2126798, 2126798, 2126798, 2462670, 2466766, 2126798,
      /* 24262 */ 2126798, 2126798, 2126798, 2126798, 2126798, 2524110, 2126798, 2126798, 2126798, 2126798, 0, 0, 0, 0, 0,
      /* 24277 */ 0, 0, 0, 0, 0, 2473984, 2478080, 2179072, 2179072, 2179072, 3129344, 2179072, 2179072, 3153920, 3166208,
      /* 24292 */ 3174400, 2397060, 2401156, 2126724, 2126724, 2442116, 2126724, 2470788, 3154820, 3167108, 3175300,
      /* 24303 */ 2397134, 2401230, 2126798, 2126798, 2442190, 2126798, 2470862, 2126798, 2126798, 2126798, 2520014,
      /* 24314 */ 2126798, 2126798, 2126798, 2126798, 2126798, 2126798, 2126798, 3130318, 2126798, 2126798, 3154894,
      /* 24325 */ 3167182, 3175374, 2506752, 2507726, 2507652, 2126798, 2126798, 2589646, 2126798, 2614222, 2646990,
      /* 24336 */ 2126798, 2126798, 2696142, 2757582, 2126798, 2126798, 2126798, 2126798, 2933710, 2126798, 2126798,
      /* 24347 */ 2126798, 2126798, 2593742, 2126798, 2126798, 2126798, 2126798, 2126798, 2126798, 2126798, 2126798,
      /* 24358 */ 2449408, 0, 2535424, 2179072, 3006464, 2179072, 3018752, 2179072, 2179072, 2179072, 3149824, 2126724,
      /* 24370 */ 2429828, 2438020, 2126724, 2487172, 2126724, 2126724, 2126724, 2126724, 2933636, 2126724, 2126724,
      /* 24381 */ 2126724, 2126724, 2126724, 2126724, 2126724, 2126724, 3130244, 2126724, 2126724, 2126798, 2126798,
      /* 24392 */ 2655182, 2679758, 2761678, 2765774, 2786254, 2855886, 2970574, 2126798, 3007438, 2126798, 3019726,
      /* 24403 */ 2126798, 2126798, 2126798, 2126798, 0, 2502656, 0, 0, 3010560, 0, 0, 0, 0, 2990080, 2179072, 2179072,
      /* 24419 */ 2126798, 3150798, 2179072, 3051520, 2126724, 3052420, 2126798, 3052494, 0, 2490368, 2498560, 0, 0, 0, 0,
      /* 24434 */ 2875392, 2179072, 2179072, 2179072, 2555904, 2564096, 2179072, 2179072, 2179072, 2179072, 2179072,
      /* 24445 */ 2179072, 2179072, 2179072, 2179072, 3137536, 2126724, 2126724, 2126724, 3208068, 2126724, 0, 0, 0, 0,
      /* 24459 */ 2126798, 2126798, 2126798, 2126798, 2126798, 2126798, 2126798, 2126798, 2126798, 2126798, 2552782,
      /* 24470 */ 2126798, 2126798, 2126798, 2126798, 2126798, 2126724, 2499460, 2126724, 2126724, 2126724, 2556804,
      /* 24481 */ 2564996, 2126724, 2126724, 2126724, 2126724, 2126724, 2126724, 2126724, 2126724, 2126724, 2929540,
      /* 24492 */ 2126724, 2126724, 2126724, 2999172, 2126724, 2126724, 2126724, 3138436, 2126798, 2126798, 2499534,
      /* 24503 */ 2126798, 2126798, 2126798, 2556878, 2565070, 2126798, 2126798, 2126798, 2126798, 2126798, 2126798,
      /* 24514 */ 2126798, 2126798, 2126798, 3011534, 2126798, 2126798, 2126798, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 24534 */ 322, 323, 0, 2126724, 2450308, 2126724, 2536324, 2126724, 2610052, 2126724, 2859908, 2126724, 2126724,
      /* 24547 */ 2126724, 3031940, 2126724, 2126798, 2450382, 2126798, 2126798, 2126798, 2126798, 3093454, 0, 0, 0,
      /* 24560 */ 2404352, 2179072, 2179072, 2179072, 2179072, 3026944, 2405252, 2126724, 2126724, 2495364, 2126724,
      /* 24571 */ 2126724, 2515844, 2126724, 2126724, 2126724, 2544516, 2548612, 2126724, 2126724, 2597764, 2126724,
      /* 24582 */ 2126724, 2126724, 2663300, 2126724, 2126724, 2126724, 2126724, 2126724, 2126724, 2126724, 2126724,
      /* 24593 */ 2126724, 2126724, 2126724, 2802564, 2536398, 2126798, 2610126, 2126798, 2859982, 2126798, 2126798,
      /* 24604 */ 2126798, 3032014, 2126798, 2527232, 0, 0, 0, 2179072, 2527232, 2179072, 2179072, 2179072, 2179072,
      /* 24617 */ 2179072, 2126724, 2528132, 2126724, 2126724, 2126724, 2126724, 2126724, 3093380, 2126798, 2528206,
      /* 24628 */ 2126798, 2126798, 2126798, 2126798, 3138510, 2940928, 2941828, 2941902, 0, 0, 0, 0, 0, 2748416, 2879488,
      /* 24643 */ 0, 0, 0, 0, 0, 172032, 0, 172032, 0, 0, 0, 0, 0, 0, 0, 0, 0, 364, 0, 0, 122880, 122880, 0, 0, 0, 221184,
      /* 24669 */ 221184, 0, 0, 0, 0, 0, 0, 0, 0, 0, 221184, 221184, 0, 0, 221184, 221184, 221184, 0, 0, 0, 0, 0, 0,
      /* 24692 */ 221184, 0, 0, 221184, 221184, 221184, 221184, 221184, 221184, 221184, 221184, 221184, 221184, 221184,
      /* 24706 */ 221184, 221184, 221184, 221184, 221184, 221184, 221184, 221184, 221184, 221184, 221184, 221184, 221184,
      /* 24719 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 364, 338, 292, 0, 0, 0, 0, 0, 0, 221184, 0, 221184, 221184, 221184, 221184,
      /* 24743 */ 221184, 221184, 221184, 221184, 221184, 221184, 1, 12290, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 139264,
      /* 24764 */ 299, 0, 0, 2142208, 0, 0, 0, 98304, 0, 0, 0, 53248, 0, 0, 0, 0, 0, 0, 0, 2061, 2062, 0, 0, 0, 0, 0, 0,
      /* 24791 */ 0, 0, 159744, 0, 0, 0, 0, 0, 0, 0, 0, 1198, 0, 0, 0, 0, 0, 0, 0, 0, 1212, 0, 0, 0, 0, 0, 0, 0, 0, 1578,
      /* 24821 */ 0, 0, 0, 577536, 0, 0, 1583, 0, 0, 0, 302, 0, 303, 0, 0, 0, 303, 0, 0, 0, 2461696, 0, 0, 0, 0, 0, 0,
      /* 24848 */ 1159168, 416, 416, 0, 0, 0, 0, 0, 416, 0, 0, 98304, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 12290,
      /* 24876 */ 2179072, 3121152, 2179072, 2179072, 3141632, 2179072, 2179072, 2179072, 3170304, 2179072, 2179072,
      /* 24887 */ 3190784, 3194880, 2179072, 901, 0, 0, 0, 0, 0, 229376, 0, 0, 0, 0, 0, 0, 0, 0, 1666, 0, 0, 0, 0, 0,
      /* 24911 */ 2958, 0, 0, 0, 0, 2962, 0, 0, 0, 0, 2967, 0, 0, 901, 0, 2387968, 2125824, 2125824, 2125824, 2420736,
      /* 24931 */ 2125824, 2125824, 2125824, 2125824, 2125824, 2453504, 2125824, 2473984, 2482176, 2125824, 2125824,
      /* 24942 */ 2125824, 2125824, 2125824, 2125824, 2531328, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824,
      /* 24953 */ 2125824, 2125824, 2125824, 3190784, 3194880, 2125824, 975, 0, 0, 0, 975, 0, 2387968, 2125824, 2125824,
      /* 24968 */ 2125824, 2420736, 2179072, 2179072, 2179072, 3223552, 901, 0, 2125824, 2125824, 2416640, 2125824,
      /* 24980 */ 2125824, 2125824, 2445312, 2125824, 2125824, 2125824, 2125824, 2125824, 3223552, 0, 0, 2125824, 2125824,
      /* 24993 */ 2416640, 2125824, 2125824, 2125824, 2445312, 2125824, 225734, 225734, 225734, 225734, 225734, 225734,
      /* 25005 */ 225734, 225734, 225734, 225734, 225734, 225734, 225734, 225734, 225734, 225734, 249856, 249856, 249856,
      /* 25018 */ 249856, 249856, 249856, 249856, 249856, 249856, 249856, 249856, 249856, 249856, 249856, 249856, 249856,
      /* 25031 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 379, 0, 0, 0, 0, 0, 0, 0, 217088, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 25063 */ 307, 308, 0, 0, 0, 114688, 0, 241664, 258048, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 676, 677, 678, 0, 0, 0,
      /* 25088 */ 254407, 254407, 254407, 254407, 254407, 254407, 254407, 254407, 254407, 254407, 254407, 254407, 254407,
      /* 25101 */ 254407, 254407, 254407, 0, 0, 0, 0, 0, 0, 0, 0, 0, 386, 0, 0, 0, 0, 0, 386, 0, 0, 0, 2183168, 0, 0,
      /* 25126 */ 270336, 0, 0, 298, 299, 0, 2134016, 302, 303, 200704, 0, 0, 180224, 0, 0, 0, 0, 0, 0, 0, 0, 2424832,
      /* 25148 */ 2433024, 0, 0, 2457600, 20480, 0, 0, 0, 0, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072,
      /* 25163 */ 2179072, 2179072, 2179072, 2179072, 2179072, 2126724, 2126724, 2126724, 2126724, 2126724, 1, 12290,
      /* 25175 */ 2113825, 0, 0, 0, 0, 0, 0, 295, 0, 0, 0, 295, 0, 0, 0, 0, 0, 0, 2387968, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 25204 */ 330, 381, 383, 0, 0, 0, 0, 0, 266240, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 266240, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 25233 */ 0, 0, 1, 12290, 0, 0, 266240, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 338, 339, 340, 2113825, 0, 0,
      /* 25259 */ 2183168, 0, 0, 0, 0, 0, 298, 299, 0, 2134016, 302, 303, 0, 0, 0, 0, 0, 237568, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 25285 */ 0, 0, 0, 1657, 0, 0, 0, 0, 274432, 274432, 274432, 274432, 274432, 274432, 0, 0, 0, 0, 0, 274432, 0,
      /* 25306 */ 274432, 1, 12290, 3, 0, 0, 0, 0, 0, 0, 0, 90408, 90408, 90408, 90408, 0, 94505, 1, 12290, 3, 78114, 292,
      /* 25328 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1611, 0, 0, 0, 3, 78114, 78114, 292, 0, 0, 0, 0, 0, 298, 299, 0, 0,
      /* 25357 */ 302, 303, 0, 0, 0, 0, 0, 2134016, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1163264, 78114, 1066, 0, 0, 0, 0, 0, 0, 0,
      /* 25384 */ 0, 0, 0, 0, 0, 0, 0, 308, 307, 534, 534, 534, 1341, 901, 556, 556, 556, 556, 556, 556, 556, 556, 556,
      /* 25407 */ 556, 556, 580, 580, 3062, 580, 580, 2009, 0, 0, 0, 0, 0, 2011, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 722, 0, 0,
      /* 25434 */ 0, 0, 0, 0, 2954, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 330, 0, 0, 1650, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 25465 */ 2089, 0, 0, 0, 0, 0, 0, 0, 2086, 0, 0, 0, 0, 0, 2092, 0, 0, 290, 1066, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 25495 */ 0, 0, 0, 680, 681, 3, 78114, 78449, 292, 0, 0, 0, 0, 0, 298, 299, 0, 0, 302, 303, 0, 0, 0, 0, 0,
      /* 25520 */ 2134016, 0, 0, 0, 0, 0, 0, 0, 0, 1138688, 0, 0, 0, 0, 0, 2134016, 0, 0, 0, 0, 0, 0, 0, 739, 0, 0, 0, 0,
      /* 25548 */ 0, 0, 1150976, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 25579 */ 385, 337, 0, 581, 557, 557, 557, 557, 557, 557, 557, 581, 581, 581, 534, 581, 581, 581, 581, 581, 581,
      /* 25600 */ 581, 557, 557, 534, 557, 581, 557, 581, 1, 12290, 1, 12290, 3, 78115, 292, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 25625 */ 0, 0, 1680, 0, 0, 0, 282624, 282624, 282624, 282624, 282624, 282624, 282624, 282624, 282624, 282624,
      /* 25641 */ 282624, 282624, 282624, 282624, 282624, 282624, 1, 12290, 282624, 282624, 282624, 0, 0, 282624, 0, 0, 0,
      /* 25658 */ 0, 0, 0, 0, 0, 0, 0, 0, 2027, 0, 0, 0, 0, 0, 0, 0, 0, 282624, 282624, 282624, 282624, 282624, 282624,
      /* 25681 */ 282624, 282624, 282624, 282624, 0, 282624, 282624, 282624, 282624, 282624, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 25700 */ 637, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 641, 0, 0, 0, 0, 0, 3047424, 3129344, 0, 2981888, 2396160, 0,
      /* 25725 */ 3153920, 3132, 0, 0, 2740224, 0, 0, 0, 0, 0, 0, 1181, 1183, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1608, 1609, 1610,
      /* 25750 */ 0, 0, 0, 0, 0, 0, 0, 286720, 286720, 0, 286720, 286720, 286720, 286720, 286720, 286720, 286720, 286720,
      /* 25768 */ 286720, 286720, 286720, 286720, 286720, 286720, 286720, 286720, 286720, 286720, 286720, 286720, 286720,
      /* 25781 */ 286720, 286720, 286720, 0, 0, 0, 0, 0, 0, 0, 0, 0, 705, 0, 0, 0, 709, 0, 0, 0, 3108864, 3198976, 0, 0,
      /* 25805 */ 3043328, 0, 3149824, 2936832, 0, 2760704, 3252, 0, 0, 0, 0, 0, 0, 0, 69632, 73728, 167936, 0, 0, 0, 0,
      /* 25826 */ 65536, 0, 0, 0, 0, 3329, 0, 0, 2834432, 0, 3227648, 2568192, 2564096, 0, 2940928, 2179072, 2179072,
      /* 25843 */ 2498560, 3329, 0, 0, 0, 0, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072,
      /* 25857 */ 2179072, 2179072, 2179072, 2179072, 2125824, 0, 2125824, 2125824, 0, 0, 0, 308, 0, 0, 0, 0, 0, 307, 0,
      /* 25876 */ 307, 308, 0, 307, 307, 0, 0, 0, 307, 307, 308, 308, 0, 0, 0, 0, 0, 0, 307, 407, 308, 0, 0, 0, 0, 0, 0,
      /* 25903 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 783, 0, 0, 0, 308, 412, 0, 0, 69632, 73728, 0, 0, 0, 0, 0, 65536, 0, 0, 0, 0,
      /* 25932 */ 0, 2134016, 0, 0, 0, 0, 0, 0, 57344, 0, 0, 0, 0, 0, 0, 1120, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1239, 0, 0,
      /* 25961 */ 0, 0, 0, 456, 456, 456, 482, 482, 456, 482, 482, 482, 482, 482, 482, 482, 507, 482, 482, 482, 482, 482,
      /* 25983 */ 482, 482, 482, 482, 482, 482, 482, 482, 482, 527, 482, 482, 482, 482, 482, 535, 558, 535, 558, 535, 535,
      /* 26004 */ 558, 535, 582, 558, 558, 558, 558, 558, 558, 558, 582, 582, 582, 535, 582, 582, 582, 582, 582, 582, 582,
      /* 26025 */ 558, 558, 535, 558, 582, 558, 582, 1, 12290, 0, 667, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 769, 0,
      /* 26052 */ 697, 0, 0, 0, 0, 0, 0, 0, 704, 0, 0, 0, 0, 0, 0, 0, 0, 1639, 0, 0, 0, 0, 0, 0, 0, 0, 1660, 1661, 0,
      /* 26081 */ 1663, 0, 0, 0, 0, 0, 729, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 740, 0, 0, 0, 0, 0, 0, 2834432, 0, 3227648,
      /* 26109 */ 2568192, 2564096, 0, 2940928, 2179072, 2179072, 2498560, 0, 0, 0, 638, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 26130 */ 755, 0, 0, 0, 0, 0, 2134749, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1169, 734, 0, 0, 0, 0, 0, 0, 761, 0, 0,
      /* 26159 */ 765, 0, 0, 0, 0, 772, 0, 0, 0, 0, 0, 0, 0, 69632, 73728, 172032, 0, 0, 0, 0, 65536, 0, 0, 0, 641, 0, 0,
      /* 26186 */ 0, 0, 0, 0, 804, 0, 0, 0, 780, 0, 0, 0, 0, 0, 327, 0, 69632, 73728, 0, 0, 0, 0, 0, 65536, 0, 0, 0, 821,
      /* 26214 */ 776, 0, 0, 0, 0, 0, 825, 826, 776, 776, 0, 0, 0, 0, 0, 0, 0, 780, 0, 0, 0, 0, 0, 0, 0, 0, 1677, 0, 1679,
      /* 26243 */ 0, 0, 0, 0, 0, 0, 776, 729, 776, 0, 534, 534, 836, 840, 534, 534, 534, 534, 534, 534, 866, 534, 871,
      /* 26266 */ 534, 878, 534, 881, 534, 534, 895, 534, 534, 556, 556, 556, 909, 913, 1018, 580, 1025, 580, 1028, 580,
      /* 26286 */ 580, 1042, 580, 580, 0, 0, 0, 840, 987, 913, 836, 1052, 881, 534, 534, 909, 1057, 954, 556, 556, 0, 983,
      /* 26308 */ 1062, 1028, 580, 580, 534, 534, 556, 556, 580, 580, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 78114, 1066, 0, 0,
      /* 26333 */ 1068, 1072, 0, 0, 1076, 1080, 0, 0, 0, 0, 0, 0, 0, 406, 406, 406, 406, 0, 406, 406, 406, 406, 0, 0,
      /* 26357 */ 1144, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 508, 515, 515, 0, 0, 0, 1634, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 26388 */ 0, 0, 0, 3126, 0, 0, 1769, 534, 534, 1772, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 1784, 534,
      /* 26410 */ 534, 534, 534, 534, 884, 534, 534, 534, 534, 534, 556, 556, 903, 556, 556, 0, 580, 580, 580, 984, 580,
      /* 26431 */ 990, 580, 580, 1003, 580, 580, 1014, 580, 534, 534, 534, 534, 1789, 534, 534, 534, 534, 534, 534, 534,
      /* 26451 */ 1341, 1799, 556, 556, 0, 580, 580, 580, 580, 580, 580, 580, 580, 580, 580, 580, 580, 580, 0, 0, 0, 0,
      /* 26473 */ 534, 534, 556, 556, 556, 1806, 556, 556, 556, 556, 556, 1812, 556, 556, 556, 556, 556, 556, 0, 0, 580,
      /* 26494 */ 580, 580, 580, 580, 580, 580, 580, 580, 2370, 580, 580, 580, 580, 580, 580, 556, 556, 556, 1825, 556,
      /* 26514 */ 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 955, 556, 556, 556, 1885, 556, 556, 556, 556,
      /* 26534 */ 556, 556, 556, 26009, 1895, 580, 580, 580, 580, 580, 1902, 2017, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 26559 */ 0, 0, 787, 0, 0, 0, 2042, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2051, 0, 0, 0, 0, 0, 0, 1196, 0, 0, 0, 0, 0, 0, 0,
      /* 26590 */ 0, 0, 0, 1223, 0, 0, 0, 0, 0, 2109, 2110, 0, 0, 2112, 0, 0, 0, 2110, 0, 0, 2117, 0, 0, 0, 0, 0, 0, 0,
      /* 26618 */ 69632, 73728, 221184, 0, 0, 0, 0, 65536, 0, 2150, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534,
      /* 26639 */ 534, 534, 534, 534, 1313, 0, 0, 0, 2464, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3135, 0, 0, 534, 534,
      /* 26666 */ 534, 534, 2502, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 2510, 534, 534, 534, 2601,
      /* 26686 */ 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 2611, 556, 556, 556, 556, 556, 2563,
      /* 26706 */ 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 1388, 556, 556, 556, 556, 1393, 556, 556, 556, 556,
      /* 26726 */ 2632, 580, 580, 580, 580, 580, 580, 580, 580, 580, 580, 580, 580, 580, 580, 580, 580, 1967, 0, 0, 0,
      /* 26747 */ 2698, 0, 0, 0, 0, 0, 0, 2703, 0, 0, 0, 0, 0, 0, 0, 2115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2729, 0, 0, 0, 0, 0,
      /* 26778 */ 0, 2749, 2750, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 789, 0, 0, 0, 0, 0, 0, 0, 2762, 0, 534, 534,
      /* 26807 */ 534, 534, 534, 534, 534, 534, 534, 534, 534, 2521, 534, 534, 534, 534, 534, 2773, 534, 534, 2777, 534,
      /* 26827 */ 534, 534, 534, 534, 534, 534, 534, 534, 534, 2786, 556, 2820, 556, 556, 2824, 556, 556, 556, 556, 556,
      /* 26847 */ 556, 556, 556, 556, 556, 2833, 580, 580, 580, 2869, 580, 580, 2873, 580, 580, 580, 580, 580, 580, 580,
      /* 26867 */ 580, 580, 580, 2899, 580, 580, 580, 580, 580, 580, 2882, 580, 580, 580, 580, 580, 580, 580, 580, 580,
      /* 26887 */ 580, 580, 2890, 580, 580, 534, 534, 556, 556, 580, 580, 0, 0, 0, 0, 0, 3324, 0, 0, 0, 0, 0, 346, 0, 0,
      /* 26912 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 221184, 0, 221184, 0, 0, 0, 0, 2931, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 26942 */ 534, 534, 534, 534, 534, 534, 3010, 534, 534, 534, 534, 534, 534, 534, 534, 556, 556, 556, 556, 556,
      /* 26962 */ 556, 3412, 556, 556, 556, 556, 556, 556, 3051, 556, 556, 556, 556, 556, 556, 556, 556, 556, 580, 580,
      /* 26982 */ 580, 580, 580, 580, 580, 580, 580, 580, 580, 580, 580, 580, 3091, 580, 3093, 580, 580, 580, 580, 580,
      /* 27002 */ 580, 580, 580, 580, 534, 580, 556, 534, 534, 556, 556, 580, 3132, 3387, 0, 3389, 0, 534, 3392, 534,
      /* 27022 */ 3394, 534, 534, 534, 534, 534, 534, 534, 534, 1777, 534, 534, 534, 534, 534, 534, 534, 534, 2157, 534,
      /* 27042 */ 534, 534, 534, 534, 534, 534, 534, 2182, 534, 534, 534, 534, 2187, 534, 534, 534, 534, 3448, 534, 534,
      /* 27062 */ 534, 534, 534, 534, 534, 534, 534, 534, 556, 556, 556, 556, 556, 3023, 556, 3461, 556, 556, 556, 556,
      /* 27082 */ 556, 556, 556, 556, 556, 556, 556, 580, 580, 580, 580, 3064, 580, 3475, 580, 580, 580, 580, 580, 580,
      /* 27102 */ 580, 580, 580, 580, 580, 0, 0, 0, 0, 3561, 534, 0, 3490, 0, 3492, 534, 534, 534, 534, 534, 534, 534,
      /* 27124 */ 534, 534, 534, 534, 534, 534, 2794, 534, 534, 0, 0, 3533, 0, 534, 534, 534, 534, 534, 534, 534, 534,
      /* 27145 */ 534, 534, 534, 534, 534, 534, 534, 1281, 309, 310, 311, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 640, 0,
      /* 27171 */ 0, 0, 0, 420, 0, 0, 0, 0, 443, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1109, 0, 1111, 1112, 0, 0, 0, 0, 0, 0, 443,
      /* 27200 */ 443, 420, 443, 443, 443, 443, 443, 443, 443, 443, 443, 443, 443, 443, 443, 526, 443, 526, 526, 526, 443,
      /* 27221 */ 526, 526, 526, 526, 443, 536, 559, 536, 559, 536, 536, 559, 536, 583, 559, 559, 559, 559, 559, 559, 559,
      /* 27242 */ 583, 583, 583, 536, 583, 583, 583, 583, 583, 583, 583, 559, 559, 609, 614, 583, 614, 620, 1, 12290, 534,
      /* 27263 */ 534, 874, 534, 534, 534, 534, 534, 534, 534, 534, 556, 556, 556, 556, 556, 0, 580, 580, 580, 580, 580,
      /* 27284 */ 580, 1021, 580, 580, 580, 580, 580, 580, 580, 580, 0, 0, 0, 534, 580, 556, 556, 556, 556, 556, 556, 556,
      /* 27306 */ 580, 580, 580, 534, 580, 580, 580, 580, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3445, 534, 0, 0, 0, 1657, 0, 0, 0,
      /* 27333 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3262, 534, 534, 1785, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534,
      /* 27357 */ 534, 1341, 0, 556, 556, 0, 580, 580, 580, 580, 580, 580, 580, 580, 580, 1006, 580, 580, 580, 0, 0, 1544,
      /* 27379 */ 0, 0, 0, 0, 0, 1550, 0, 0, 0, 0, 0, 0, 347, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 167936, 167936, 167936,
      /* 27405 */ 167936, 167936, 167936, 167936, 167936, 580, 580, 1970, 580, 580, 580, 580, 580, 1977, 580, 580, 580,
      /* 27422 */ 580, 580, 580, 580, 1444, 580, 580, 580, 580, 580, 1456, 580, 580, 0, 0, 2425, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 27446 */ 0, 0, 0, 0, 0, 654, 0, 0, 2612, 556, 556, 556, 556, 0, 2615, 0, 0, 0, 0, 580, 580, 580, 580, 580, 534,
      /* 27471 */ 556, 580, 0, 3382, 0, 0, 3385, 0, 0, 0, 580, 2621, 580, 580, 580, 580, 2625, 580, 580, 580, 580, 580,
      /* 27493 */ 580, 580, 580, 580, 580, 3221, 580, 580, 580, 580, 580, 0, 0, 0, 312, 313, 314, 315, 316, 317, 318, 319,
      /* 27515 */ 320, 321, 0, 0, 0, 0, 0, 0, 1249, 0, 0, 0, 0, 0, 0, 534, 534, 534, 534, 534, 850, 534, 534, 534, 534,
      /* 27540 */ 534, 0, 312, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1172, 0, 0, 0, 315, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 27572 */ 0, 0, 0, 655, 0, 0, 422, 430, 421, 430, 0, 312, 430, 444, 457, 457, 457, 457, 457, 457, 457, 457, 457,
      /* 27595 */ 457, 457, 457, 457, 457, 457, 457, 457, 457, 478, 483, 483, 494, 483, 483, 483, 483, 483, 483, 483, 483,
      /* 27616 */ 509, 509, 522, 522, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 509, 523, 523, 523, 523, 523,
      /* 27637 */ 537, 560, 537, 560, 537, 537, 560, 537, 584, 560, 560, 560, 560, 560, 560, 560, 584, 584, 584, 606, 584,
      /* 27658 */ 584, 584, 584, 584, 584, 607, 608, 608, 606, 608, 607, 608, 607, 1, 12290, 0, 0, 811, 0, 0, 0, 0, 0, 0,
      /* 27682 */ 0, 0, 0, 0, 0, 0, 0, 679, 0, 0, 0, 695, 0, 0, 0, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534,
      /* 27708 */ 534, 1720, 534, 534, 882, 534, 534, 556, 556, 955, 556, 556, 0, 580, 580, 1029, 580, 580, 534, 534, 556,
      /* 27729 */ 556, 580, 580, 0, 0, 0, 3322, 0, 0, 3325, 0, 0, 0, 0, 1161, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 27757 */ 249856, 0, 0, 0, 0, 0, 0, 0, 1193, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1134592, 0, 0, 0, 0, 0, 1206,
      /* 27786 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1218, 0, 0, 534, 534, 1254, 534, 1257, 534, 534, 534, 534, 534,
      /* 27812 */ 534, 534, 534, 1271, 534, 1276, 534, 534, 1280, 534, 534, 1283, 534, 534, 534, 534, 534, 534, 534, 534,
      /* 27832 */ 534, 534, 534, 534, 534, 1294, 534, 534, 534, 534, 534, 1341, 901, 556, 556, 1345, 556, 556, 1349, 556,
      /* 27852 */ 556, 556, 556, 556, 0, 0, 0, 0, 0, 0, 580, 580, 580, 580, 580, 0, 3580, 0, 534, 534, 534, 534, 534, 534,
      /* 27876 */ 556, 556, 556, 556, 556, 1363, 556, 1368, 556, 556, 1372, 556, 556, 1375, 556, 556, 556, 556, 556, 0,
      /* 27896 */ 2296, 0, 0, 580, 580, 580, 580, 580, 580, 580, 2355, 580, 580, 580, 580, 2360, 580, 580, 580, 580, 1437,
      /* 27917 */ 580, 580, 1441, 580, 580, 580, 580, 580, 580, 580, 580, 1455, 580, 1460, 580, 580, 1464, 580, 580, 1467,
      /* 27937 */ 580, 580, 580, 580, 580, 580, 580, 580, 580, 580, 0, 0, 188416, 534, 580, 556, 1669, 0, 0, 0, 0, 0, 0,
      /* 27960 */ 1676, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1199, 1200, 0, 0, 0, 0, 0, 580, 1923, 580, 580, 580, 580, 580, 580,
      /* 27985 */ 580, 580, 580, 580, 580, 580, 580, 580, 1459, 580, 580, 1936, 580, 580, 580, 580, 580, 580, 580, 580,
      /* 28005 */ 580, 580, 580, 580, 580, 580, 1919, 580, 534, 2176, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534,
      /* 28025 */ 534, 534, 534, 534, 0, 0, 534, 534, 534, 534, 2192, 2193, 534, 534, 534, 534, 534, 534, 534, 534, 534,
      /* 28046 */ 534, 556, 556, 556, 556, 3022, 556, 2262, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556,
      /* 28066 */ 556, 556, 556, 1819, 556, 556, 556, 2278, 2279, 2280, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556,
      /* 28086 */ 1846, 556, 556, 556, 1851, 556, 2349, 580, 580, 580, 580, 580, 580, 580, 580, 580, 580, 580, 580, 580,
      /* 28106 */ 580, 580, 1985, 580, 580, 580, 2365, 2366, 2367, 580, 580, 580, 580, 580, 580, 580, 580, 580, 580, 0,
      /* 28126 */ 3558, 0, 3560, 534, 534, 0, 2399, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1243, 0, 0, 0, 0, 0, 2465,
      /* 28154 */ 2466, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2090, 0, 0, 0, 0, 580, 580, 580, 2663, 580, 580, 580, 580, 580,
      /* 28180 */ 580, 580, 580, 580, 580, 580, 580, 534, 580, 556, 3105, 534, 534, 534, 534, 534, 2790, 534, 534, 534,
      /* 28200 */ 534, 534, 534, 534, 534, 534, 534, 556, 3019, 556, 556, 556, 556, 2917, 0, 0, 0, 0, 0, 2923, 0, 0, 0, 0,
      /* 28224 */ 0, 0, 0, 2927, 0, 0, 0, 0, 0, 2200246, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1617, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 28254 */ 2972, 0, 0, 0, 0, 0, 0, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534,
      /* 28277 */ 534, 534, 2987, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 899, 556, 556, 556, 556, 556, 556,
      /* 28297 */ 556, 556, 556, 3027, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 1432, 26009, 1341, 975, 580,
      /* 28317 */ 0, 3139, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1597, 0, 534, 534, 534, 534, 3175, 534, 534, 534,
      /* 28343 */ 534, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 580, 580, 580, 580, 580, 580,
      /* 28364 */ 580, 580, 580, 3438, 0, 3439, 0, 0, 0, 0, 0, 0, 0, 534, 3446, 534, 3447, 534, 534, 534, 3451, 534, 534,
      /* 28387 */ 534, 534, 534, 534, 534, 556, 3459, 556, 556, 556, 556, 556, 2589, 556, 556, 2593, 556, 556, 556, 556,
      /* 28407 */ 556, 556, 556, 2606, 556, 556, 556, 556, 556, 556, 556, 556, 2269, 556, 556, 556, 556, 556, 556, 556,
      /* 28427 */ 3460, 556, 556, 556, 3464, 556, 556, 556, 556, 556, 556, 556, 556, 580, 3473, 580, 0, 0, 2920, 0, 0, 0,
      /* 28449 */ 0, 0, 0, 0, 0, 0, 2926, 0, 0, 0, 0, 0, 1147, 0, 1149, 0, 0, 0, 0, 0, 0, 0, 0, 534, 557, 534, 557, 534,
      /* 28477 */ 534, 557, 534, 3474, 580, 580, 580, 3478, 580, 580, 580, 580, 580, 580, 580, 580, 0, 0, 0, 534, 534,
      /* 28498 */ 3583, 3584, 534, 534, 556, 556, 3596, 556, 556, 556, 3598, 580, 580, 580, 3600, 0, 534, 534, 556, 556,
      /* 28518 */ 580, 580, 0, 0, 0, 0, 3244, 0, 0, 0, 0, 0, 323, 323, 373, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 725, 0,
      /* 28548 */ 0, 0, 0, 373, 0, 432, 438, 0, 445, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458,
      /* 28571 */ 458, 458, 458, 458, 458, 484, 484, 495, 484, 484, 484, 484, 484, 484, 484, 484, 510, 510, 510, 510, 510,
      /* 28592 */ 510, 510, 510, 510, 510, 510, 510, 510, 510, 510, 510, 538, 561, 538, 561, 538, 538, 561, 538, 585, 561,
      /* 28613 */ 561, 561, 561, 561, 561, 561, 585, 585, 585, 538, 585, 585, 585, 585, 585, 585, 585, 561, 561, 538, 561,
      /* 28634 */ 585, 561, 585, 1, 12290, 787, 0, 0, 0, 0, 534, 534, 534, 534, 534, 534, 534, 534, 859, 534, 534, 534,
      /* 28656 */ 534, 534, 534, 2139, 534, 534, 2142, 534, 534, 534, 534, 534, 534, 534, 1760, 1761, 1762, 534, 534,
      /* 28675 */ 1765, 1766, 534, 534, 1114, 1115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1613, 0, 1100, 0, 1231, 0,
      /* 28701 */ 0, 0, 0, 0, 1115, 0, 0, 0, 0, 0, 1214, 0, 0, 0, 0, 0, 3088384, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 752, 0,
      /* 28731 */ 0, 0, 0, 0, 0, 1246, 1114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 534, 534, 1255, 534, 534, 534, 1341, 901, 556,
      /* 28756 */ 556, 1346, 556, 556, 556, 556, 556, 556, 556, 556, 1389, 556, 556, 556, 556, 556, 556, 556, 556, 1397,
      /* 28776 */ 556, 556, 556, 1401, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 1880, 556, 556, 556, 556, 556,
      /* 28796 */ 580, 1438, 580, 580, 580, 580, 580, 580, 580, 580, 580, 580, 580, 580, 580, 580, 1934, 580, 580, 580,
      /* 28816 */ 1465, 580, 580, 580, 580, 580, 580, 580, 580, 580, 580, 580, 580, 580, 1491, 580, 580, 1478, 580, 580,
      /* 28836 */ 580, 580, 580, 580, 580, 1487, 580, 580, 1489, 580, 580, 580, 1493, 1517, 580, 580, 580, 580, 580, 0,
      /* 28856 */ 534, 580, 556, 534, 534, 534, 534, 534, 556, 580, 534, 556, 580, 534, 556, 580, 534, 556, 580, 0, 0, 0,
      /* 28878 */ 0, 0, 0, 0, 69632, 73728, 0, 135168, 135168, 0, 0, 65536, 135168, 556, 556, 556, 556, 1872, 556, 556,
      /* 28898 */ 556, 556, 556, 556, 556, 556, 556, 556, 556, 1832, 556, 556, 556, 556, 1968, 580, 580, 580, 580, 580,
      /* 28918 */ 580, 580, 580, 580, 580, 580, 580, 580, 580, 580, 2362, 580, 580, 2004, 0, 2005, 0, 0, 0, 0, 0, 2007, 0,
      /* 28941 */ 0, 0, 0, 0, 0, 0, 2418, 0, 0, 0, 0, 0, 2422, 0, 0, 2009, 0, 0, 0, 0, 0, 2011, 0, 0, 0, 0, 0, 2014, 0, 0,
      /* 28971 */ 0, 0, 0, 0, 1576, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2077, 0, 0, 0, 0, 0, 2067, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 29003 */ 0, 0, 0, 0, 0, 827, 2121, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 534, 534, 534, 534, 534, 534, 534, 534, 2770,
      /* 29029 */ 534, 534, 534, 534, 2137, 534, 534, 534, 534, 2141, 534, 534, 534, 534, 534, 534, 534, 534, 2518, 534,
      /* 29049 */ 534, 534, 534, 534, 534, 534, 534, 2803, 534, 534, 534, 534, 534, 534, 534, 534, 2989, 534, 534, 534,
      /* 29069 */ 534, 534, 534, 534, 534, 3165, 534, 534, 534, 534, 534, 534, 534, 534, 3270, 534, 534, 534, 534, 534,
      /* 29089 */ 534, 534, 534, 3280, 556, 556, 556, 556, 556, 556, 556, 1426, 556, 556, 556, 556, 26009, 1341, 975, 580,
      /* 29109 */ 556, 556, 2222, 556, 556, 556, 556, 2226, 556, 556, 556, 556, 556, 556, 556, 556, 1405, 556, 556, 556,
      /* 29129 */ 556, 556, 556, 556, 580, 580, 2309, 580, 580, 580, 580, 2313, 580, 580, 580, 580, 580, 580, 580, 580,
      /* 29149 */ 580, 3527, 580, 580, 580, 0, 3531, 0, 0, 2462, 0, 0, 0, 0, 0, 2467, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1640, 0,
      /* 29176 */ 0, 0, 0, 0, 0, 534, 534, 534, 2489, 2490, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534,
      /* 29198 */ 2522, 534, 534, 534, 534, 534, 534, 2529, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534,
      /* 29218 */ 534, 2993, 534, 534, 2620, 580, 580, 580, 580, 580, 580, 580, 580, 580, 580, 580, 580, 580, 580, 580,
      /* 29238 */ 2376, 2660, 580, 580, 580, 580, 580, 580, 580, 580, 580, 580, 580, 580, 580, 580, 580, 3316, 2707, 0, 0,
      /* 29259 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1100, 0, 0, 0, 0, 2724, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1686,
      /* 29291 */ 0, 0, 0, 0, 0, 0, 0, 2752, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2028, 0, 0, 0, 534, 534, 534, 534, 534,
      /* 29320 */ 2800, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 1307, 534, 534, 534, 534, 534, 2891, 580, 580,
      /* 29340 */ 580, 580, 580, 580, 580, 2897, 580, 580, 580, 580, 580, 580, 580, 1471, 580, 580, 580, 580, 580, 580,
      /* 29360 */ 580, 580, 1045, 580, 0, 0, 0, 534, 580, 556, 3128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1128,
      /* 29387 */ 534, 534, 534, 534, 534, 3176, 534, 534, 534, 556, 556, 556, 556, 556, 556, 556, 3511, 556, 3513, 556,
      /* 29407 */ 556, 556, 556, 580, 556, 556, 3297, 556, 556, 580, 580, 580, 580, 580, 580, 580, 580, 580, 580, 580,
      /* 29427 */ 3374, 580, 580, 3132, 0, 0, 0, 0, 534, 534, 534, 534, 534, 534, 3397, 534, 534, 534, 534, 0, 0, 556,
      /* 29449 */ 556, 556, 556, 556, 556, 556, 556, 556, 556, 1392, 556, 556, 556, 556, 556, 325, 326, 327, 0, 0, 0, 0,
      /* 29471 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 741, 0, 0, 0, 0, 0, 324, 372, 327, 371, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1110,
      /* 29501 */ 0, 0, 0, 0, 0, 324, 0, 0, 371, 371, 401, 0, 327, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1678, 0, 0, 0, 0, 0, 0, 0,
      /* 29531 */ 0, 0, 326, 0, 0, 0, 446, 459, 459, 459, 459, 459, 459, 459, 459, 472, 459, 459, 459, 459, 459, 459, 459,
      /* 29554 */ 459, 459, 459, 459, 459, 485, 485, 459, 485, 485, 500, 502, 485, 485, 500, 485, 511, 511, 511, 511, 511,
      /* 29575 */ 511, 511, 511, 511, 511, 511, 511, 511, 511, 528, 511, 511, 511, 511, 511, 539, 562, 539, 562, 539, 539,
      /* 29596 */ 562, 539, 586, 562, 562, 562, 562, 562, 562, 562, 586, 586, 586, 539, 586, 586, 586, 586, 586, 586, 586,
      /* 29617 */ 562, 562, 539, 562, 586, 562, 586, 1, 12290, 0, 651, 652, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 663, 664, 0, 0,
      /* 29643 */ 0, 0, 364, 364, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 723, 0, 0, 0, 0, 0, 0, 0, 0, 0, 682, 0, 0, 0, 0, 0, 0,
      /* 29675 */ 0, 0, 0, 0, 364, 364, 364, 0, 0, 0, 0, 0, 355, 0, 0, 466, 466, 466, 466, 466, 466, 466, 466, 471, 466,
      /* 29700 */ 466, 466, 466, 466, 466, 466, 466, 466, 466, 466, 471, 0, 713, 0, 0, 0, 0, 0, 0, 720, 0, 0, 0, 724, 0,
      /* 29725 */ 0, 0, 0, 0, 0, 1621, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 769, 0, 0, 0, 0, 0, 0, 0, 0, 0, 762, 763, 0, 0, 0, 0,
      /* 29757 */ 0, 771, 0, 773, 0, 0, 0, 0, 0, 0, 1637, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1095, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 29788 */ 790, 793, 0, 0, 0, 793, 793, 790, 0, 0, 0, 0, 0, 0, 0, 106496, 0, 106496, 0, 0, 0, 0, 106496, 106496, 0,
      /* 29813 */ 0, 0, 773, 0, 785, 0, 802, 0, 0, 0, 0, 793, 0, 700, 0, 0, 0, 0, 364, 364, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 29842 */ 1141, 0, 810, 0, 0, 0, 0, 0, 810, 810, 813, 0, 0, 0, 773, 0, 0, 0, 0, 0, 375, 0, 0, 0, 0, 367, 0, 384,
      /* 29870 */ 0, 350, 0, 0, 0, 0, 822, 0, 0, 0, 0, 0, 0, 0, 0, 0, 771, 0, 0, 0, 0, 0, 385, 0, 69632, 73728, 0, 0, 0,
      /* 29899 */ 0, 0, 65536, 0, 0, 822, 802, 822, 0, 534, 534, 837, 534, 843, 534, 534, 856, 534, 534, 867, 534, 872,
      /* 29921 */ 534, 534, 880, 883, 888, 534, 896, 534, 534, 556, 556, 556, 910, 556, 556, 556, 556, 556, 2604, 2605,
      /* 29941 */ 556, 556, 556, 556, 556, 556, 556, 556, 556, 3189, 556, 556, 556, 556, 556, 556, 916, 556, 556, 929,
      /* 29961 */ 556, 556, 940, 556, 945, 556, 556, 953, 956, 961, 556, 969, 1019, 580, 580, 1027, 1030, 1035, 580, 1043,
      /* 29981 */ 580, 580, 0, 0, 0, 534, 580, 556, 556, 556, 556, 556, 2825, 556, 556, 556, 556, 556, 556, 556, 556, 556,
      /* 30003 */ 556, 2284, 556, 556, 556, 556, 556, 837, 534, 1053, 888, 534, 910, 556, 1058, 961, 556, 0, 984, 580,
      /* 30023 */ 1063, 1035, 580, 0, 2919, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2458, 0, 0, 0, 0, 1087, 0, 0, 0, 0, 0,
      /* 30052 */ 0, 0, 0, 0, 1097, 0, 0, 0, 0, 0, 0, 1659, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 751, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 30084 */ 0, 0, 0, 0, 0, 2032, 0, 0, 0, 0, 0, 1104, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2078, 0, 0, 0, 1129, 0, 0,
      /* 30115 */ 0, 364, 364, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2471, 0, 0, 0, 0, 0, 1143, 0, 0, 0, 0, 0, 0, 0, 0, 1152,
      /* 30145 */ 0, 0, 0, 0, 0, 0, 0, 2442, 0, 0, 0, 0, 0, 0, 0, 2450, 1121, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1189,
      /* 30176 */ 0, 0, 0, 0, 364, 364, 0, 0, 0, 0, 0, 0, 0, 1139, 0, 0, 0, 0, 0, 328, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 30207 */ 2757, 2758, 0, 0, 0, 534, 1282, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 1297,
      /* 30228 */ 1337, 534, 534, 1341, 901, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 1354, 556, 556, 1419, 556,
      /* 30248 */ 556, 556, 556, 556, 556, 1429, 556, 556, 26009, 1341, 975, 580, 580, 580, 580, 1523, 580, 0, 534, 580,
      /* 30268 */ 556, 534, 534, 534, 534, 534, 556, 556, 556, 556, 556, 2837, 556, 556, 556, 556, 556, 556, 556, 556,
      /* 30288 */ 556, 556, 1862, 1863, 556, 556, 556, 556, 1461, 580, 580, 580, 1466, 580, 580, 580, 580, 580, 580, 580,
      /* 30308 */ 580, 580, 580, 580, 1915, 580, 580, 580, 580, 580, 580, 1481, 580, 580, 580, 580, 580, 580, 580, 580,
      /* 30328 */ 580, 580, 580, 580, 580, 1933, 580, 580, 580, 1495, 580, 580, 580, 580, 580, 580, 580, 580, 580, 580,
      /* 30348 */ 1511, 580, 580, 580, 0, 2005, 0, 0, 0, 0, 0, 2007, 0, 0, 0, 0, 0, 0, 0, 2074, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 30376 */ 342, 0, 0, 0, 0, 0, 0, 0, 580, 580, 580, 1521, 580, 580, 0, 534, 580, 556, 534, 534, 534, 534, 534, 556,
      /* 30400 */ 580, 534, 556, 580, 3610, 3611, 3612, 534, 556, 580, 0, 0, 0, 0, 0, 0, 307, 442, 456, 456, 456, 456,
      /* 30422 */ 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 0, 0, 1585, 0, 0, 1588, 1589, 1590, 0, 1592,
      /* 30444 */ 1593, 0, 0, 0, 0, 1598, 1631, 1632, 0, 0, 0, 0, 0, 0, 0, 0, 1641, 1642, 0, 0, 0, 0, 0, 0, 0, 155648, 0,
      /* 30471 */ 0, 0, 0, 0, 0, 0, 0, 0, 364, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1212, 534, 534, 534, 0, 0, 0, 0, 1648,
      /* 30501 */ 0, 0, 1650, 0, 0, 0, 0, 1652, 1653, 0, 0, 0, 0, 0, 441, 0, 0, 467, 467, 467, 467, 467, 467, 467, 467,
      /* 30526 */ 467, 467, 467, 467, 467, 467, 467, 467, 552, 575, 552, 575, 552, 552, 575, 552, 0, 0, 1671, 1672, 1673,
      /* 30547 */ 1674, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2483, 0, 0, 0, 0, 0, 1683, 0, 0, 1686, 0, 0, 0, 0, 0, 1690, 0, 0,
      /* 30577 */ 0, 1694, 1695, 1706, 1566, 1566, 1708, 534, 1710, 534, 1711, 1712, 534, 1714, 534, 534, 534, 1718, 534,
      /* 30596 */ 534, 534, 534, 534, 886, 534, 534, 534, 534, 534, 556, 556, 908, 556, 556, 556, 556, 556, 2254, 556,
      /* 30616 */ 556, 556, 556, 556, 556, 556, 556, 556, 556, 1431, 556, 26009, 1341, 975, 1435, 534, 534, 1739, 534,
      /* 30635 */ 1741, 534, 534, 534, 534, 534, 534, 534, 534, 1749, 1750, 1752, 534, 1786, 534, 534, 534, 534, 534, 534,
      /* 30655 */ 534, 534, 534, 1797, 1341, 0, 1802, 556, 556, 556, 556, 556, 3041, 556, 556, 556, 556, 556, 556, 556,
      /* 30675 */ 556, 556, 556, 3200, 556, 556, 556, 556, 556, 556, 1804, 556, 1805, 556, 1807, 556, 1809, 556, 556, 556,
      /* 30695 */ 1813, 556, 556, 556, 556, 556, 0, 0, 0, 0, 0, 0, 580, 580, 2618, 580, 580, 556, 556, 556, 556, 1826,
      /* 30717 */ 556, 556, 556, 556, 1830, 556, 556, 556, 556, 1834, 556, 556, 556, 556, 556, 3055, 556, 556, 556, 556,
      /* 30737 */ 556, 580, 580, 580, 3063, 580, 580, 580, 580, 1724, 1915, 1819, 534, 534, 534, 534, 556, 556, 556, 556,
      /* 30757 */ 580, 580, 580, 580, 0, 0, 2692, 0, 0, 1836, 556, 556, 556, 556, 556, 556, 556, 556, 1844, 1845, 1847,
      /* 30778 */ 556, 556, 556, 556, 556, 0, 2297, 0, 0, 580, 580, 580, 580, 580, 580, 580, 2667, 580, 580, 580, 580,
      /* 30799 */ 580, 580, 580, 580, 580, 2653, 580, 580, 580, 580, 2657, 580, 556, 556, 556, 1855, 1856, 1857, 556, 556,
      /* 30819 */ 1860, 1861, 556, 556, 556, 556, 556, 556, 0, 0, 580, 580, 580, 2862, 580, 580, 580, 580, 556, 1869, 556,
      /* 30840 */ 556, 556, 1873, 556, 556, 556, 556, 556, 556, 556, 1882, 556, 556, 0, 580, 580, 580, 580, 580, 580, 580,
      /* 30861 */ 1002, 580, 580, 580, 580, 580, 580, 3555, 3556, 580, 580, 0, 0, 3559, 0, 534, 534, 1903, 580, 1905, 580,
      /* 30882 */ 580, 580, 1909, 580, 580, 580, 580, 580, 580, 580, 580, 580, 580, 3528, 580, 580, 0, 0, 0, 1922, 580,
      /* 30903 */ 580, 580, 580, 1926, 580, 580, 580, 580, 1930, 580, 1932, 580, 580, 580, 580, 580, 1524, 0, 1270, 1454,
      /* 30923 */ 1362, 534, 534, 534, 534, 534, 556, 1952, 1953, 580, 580, 1956, 1957, 580, 580, 580, 580, 580, 580, 580,
      /* 30943 */ 1965, 580, 580, 534, 534, 556, 556, 580, 580, 3321, 0, 0, 0, 3323, 0, 0, 0, 0, 0, 0, 2114, 0, 0, 0, 0,
      /* 30968 */ 0, 0, 0, 0, 0, 0, 2605056, 0, 0, 0, 0, 2887680, 580, 1969, 580, 580, 580, 580, 580, 580, 580, 1978, 580,
      /* 30991 */ 580, 580, 580, 580, 580, 0, 534, 580, 556, 534, 534, 534, 534, 534, 556, 580, 580, 580, 1989, 534, 580,
      /* 31012 */ 556, 1766, 534, 1995, 534, 1861, 556, 1999, 556, 1957, 580, 2003, 580, 0, 2005, 0, 0, 0, 0, 0, 2007, 0,
      /* 31034 */ 0, 0, 0, 0, 0, 0, 2702, 0, 0, 0, 0, 0, 0, 0, 2706, 0, 2018, 0, 0, 2021, 2022, 0, 0, 0, 2026, 0, 0, 0, 0,
      /* 31063 */ 0, 0, 0, 414, 414, 0, 0, 0, 0, 0, 414, 0, 0, 0, 2069, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 742, 0, 0,
      /* 31094 */ 0, 1650, 0, 0, 0, 0, 0, 0, 0, 2088, 0, 0, 0, 0, 0, 0, 0, 451, 1147348, 1147348, 1147348, 1147348,
      /* 31116 */ 1147348, 1147348, 1147348, 1147348, 1147348, 1147348, 1147348, 1147348, 1147348, 1147348, 1147348,
      /* 31127 */ 1147348, 2095, 0, 2097, 0, 0, 0, 0, 0, 0, 0, 0, 2106, 0, 0, 0, 0, 0, 0, 0, 184725, 184925, 184925,
      /* 31150 */ 184925, 0, 184925, 184925, 184925, 184925, 184925, 184925, 0, 0, 0, 0, 0, 184925, 0, 184925, 1, 12290,
      /* 31168 */ 534, 534, 534, 2153, 534, 2155, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 1746, 534, 534, 534,
      /* 31188 */ 534, 534, 534, 2204, 2205, 534, 534, 0, 0, 0, 0, 556, 556, 556, 556, 556, 556, 556, 556, 556, 2558, 556,
      /* 31210 */ 556, 556, 556, 2238, 556, 2240, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 2231, 556, 556,
      /* 31230 */ 556, 556, 556, 2291, 2292, 556, 556, 0, 0, 0, 0, 580, 580, 580, 580, 580, 580, 580, 1506, 580, 580, 580,
      /* 31252 */ 580, 580, 1513, 580, 580, 580, 580, 2325, 580, 2327, 580, 580, 580, 580, 580, 580, 580, 580, 580, 580,
      /* 31272 */ 580, 2318, 580, 580, 580, 580, 580, 2378, 2379, 580, 580, 2145, 2317, 2230, 534, 2385, 534, 534, 556,
      /* 31291 */ 2389, 556, 556, 0, 580, 580, 580, 580, 580, 580, 997, 580, 580, 580, 580, 580, 580, 2328, 580, 2330,
      /* 31311 */ 580, 580, 580, 580, 580, 580, 580, 2342, 580, 580, 580, 580, 580, 580, 580, 580, 580, 1474, 580, 580,
      /* 31331 */ 580, 580, 580, 580, 580, 2393, 580, 580, 2005, 0, 2007, 0, 2009, 0, 2011, 0, 0, 0, 0, 0, 0, 0, 2727, 0,
      /* 31355 */ 0, 0, 0, 0, 0, 0, 0, 0, 1579, 0, 0, 0, 0, 0, 0, 0, 2437, 2438, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 31386 */ 1089, 0, 0, 534, 2526, 534, 534, 534, 2531, 534, 534, 534, 534, 534, 534, 534, 2538, 534, 534, 534, 534,
      /* 31407 */ 534, 534, 2169, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 2782, 534, 534, 2785, 534, 534, 534,
      /* 31427 */ 534, 534, 534, 534, 2543, 534, 534, 534, 534, 534, 534, 534, 534, 0, 2549, 556, 556, 2587, 556, 556,
      /* 31447 */ 556, 556, 2591, 556, 556, 556, 2596, 556, 556, 556, 556, 556, 0, 2615, 0, 0, 0, 0, 580, 580, 580, 580,
      /* 31469 */ 580, 534, 556, 580, 0, 0, 0, 0, 0, 0, 0, 3386, 556, 556, 556, 2603, 556, 556, 556, 556, 556, 556, 556,
      /* 31492 */ 556, 2609, 556, 556, 556, 556, 556, 556, 3042, 556, 3044, 556, 556, 556, 556, 556, 556, 556, 1404, 556,
      /* 31512 */ 556, 1411, 556, 556, 556, 556, 556, 580, 580, 580, 2623, 580, 580, 580, 580, 580, 580, 580, 580, 580,
      /* 31532 */ 580, 580, 580, 1451, 580, 580, 580, 580, 580, 580, 2635, 580, 2637, 580, 580, 580, 580, 580, 580, 580,
      /* 31552 */ 580, 580, 580, 1914, 580, 580, 580, 580, 580, 580, 580, 2662, 580, 580, 580, 580, 580, 580, 580, 2669,
      /* 31572 */ 580, 580, 580, 580, 580, 580, 2895, 580, 580, 580, 580, 580, 580, 580, 580, 580, 1046, 0, 0, 0, 534,
      /* 31593 */ 580, 556, 580, 580, 580, 2675, 580, 580, 580, 580, 580, 580, 580, 580, 534, 580, 556, 534, 2913, 556,
      /* 31613 */ 2915, 580, 534, 534, 534, 2798, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 3348,
      /* 31633 */ 534, 556, 556, 556, 556, 556, 2846, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 2245, 556,
      /* 31653 */ 556, 556, 556, 0, 2943, 2944, 0, 2945, 0, 2947, 0, 0, 0, 0, 2949, 0, 0, 0, 0, 0, 0, 0, 225883, 225883,
      /* 31677 */ 225883, 225883, 225734, 225883, 225883, 225883, 225883, 225883, 225883, 225734, 225734, 225734, 225734,
      /* 31690 */ 225734, 225899, 225734, 225899, 1, 12290, 2968, 2969, 0, 2971, 0, 0, 2974, 0, 0, 0, 2977, 534, 534, 534,
      /* 31710 */ 534, 534, 0, 0, 0, 0, 556, 2214, 556, 556, 556, 556, 556, 0, 0, 0, 0, 0, 0, 580, 2617, 580, 580, 580,
      /* 31734 */ 534, 2984, 534, 534, 534, 534, 534, 2988, 534, 534, 534, 534, 534, 534, 534, 2994, 534, 534, 534, 534,
      /* 31754 */ 534, 3000, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 1763, 534, 534, 534, 534, 534, 3009, 3011,
      /* 31774 */ 534, 534, 534, 3014, 534, 3016, 3017, 534, 556, 556, 556, 556, 556, 556, 0, 0, 580, 2861, 580, 580, 580,
      /* 31795 */ 580, 580, 580, 0, 1267, 1451, 1359, 534, 534, 534, 1530, 534, 556, 3024, 556, 556, 556, 556, 556, 3028,
      /* 31815 */ 556, 556, 556, 556, 556, 556, 556, 3034, 556, 556, 556, 556, 556, 3185, 556, 556, 556, 556, 556, 556,
      /* 31835 */ 556, 556, 556, 556, 2229, 556, 556, 2233, 556, 556, 556, 556, 556, 556, 3040, 556, 556, 3043, 556, 556,
      /* 31855 */ 556, 556, 556, 556, 556, 556, 1829, 556, 556, 556, 556, 556, 556, 556, 3050, 3052, 556, 556, 556, 556,
      /* 31875 */ 3056, 556, 3058, 3059, 556, 580, 580, 580, 580, 580, 580, 3083, 580, 580, 580, 580, 580, 580, 580, 580,
      /* 31895 */ 580, 2331, 580, 580, 580, 580, 2335, 580, 580, 3066, 580, 580, 580, 580, 580, 3070, 580, 580, 580, 580,
      /* 31915 */ 580, 580, 580, 3076, 580, 3092, 3094, 580, 580, 580, 580, 3098, 580, 3100, 3101, 580, 534, 580, 556,
      /* 31934 */ 534, 534, 534, 534, 534, 887, 534, 534, 534, 534, 534, 556, 556, 556, 556, 556, 0, 0, 0, 2299, 580, 580,
      /* 31956 */ 580, 580, 580, 580, 580, 3084, 580, 3086, 580, 580, 580, 580, 580, 580, 3106, 556, 3108, 580, 3110, 0,
      /* 31976 */ 0, 0, 0, 0, 0, 3116, 0, 0, 3119, 0, 0, 0, 0, 364, 364, 0, 0, 0, 0, 0, 1096, 0, 0, 0, 0, 0, 0, 0, 286720,
      /* 32005 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 643, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3140, 3141, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 32037 */ 0, 2107, 0, 0, 0, 556, 556, 556, 556, 3184, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 2272,
      /* 32059 */ 556, 556, 556, 556, 556, 556, 556, 3195, 556, 556, 556, 556, 556, 556, 556, 556, 3203, 556, 556, 556,
      /* 32079 */ 556, 556, 556, 3197, 556, 556, 556, 556, 556, 556, 556, 556, 556, 2594, 556, 556, 556, 556, 556, 556,
      /* 32099 */ 556, 556, 556, 580, 580, 580, 3208, 580, 580, 580, 580, 580, 580, 580, 3213, 580, 580, 580, 580, 1907,
      /* 32119 */ 580, 580, 580, 580, 580, 580, 580, 580, 1918, 580, 580, 580, 580, 580, 3096, 580, 580, 3099, 580, 580,
      /* 32139 */ 580, 534, 580, 556, 534, 534, 534, 534, 534, 534, 3278, 534, 534, 556, 556, 556, 556, 556, 556, 556,
      /* 32159 */ 556, 556, 556, 556, 3515, 556, 556, 580, 556, 3296, 556, 556, 556, 580, 580, 580, 580, 580, 580, 580,
      /* 32179 */ 580, 580, 580, 580, 580, 3214, 3326, 3327, 0, 3132, 0, 3331, 0, 0, 0, 0, 0, 0, 0, 534, 534, 534, 2766,
      /* 32202 */ 534, 534, 534, 534, 534, 2771, 534, 534, 534, 3405, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556,
      /* 32222 */ 556, 556, 960, 556, 556, 556, 556, 556, 3420, 556, 580, 580, 580, 580, 580, 580, 580, 580, 580, 580,
      /* 32242 */ 580, 580, 1452, 580, 580, 580, 580, 580, 3436, 580, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 534, 534, 534, 534,
      /* 32266 */ 534, 534, 534, 534, 534, 534, 3502, 534, 534, 534, 534, 534, 3450, 534, 534, 534, 534, 534, 534, 534,
      /* 32286 */ 534, 556, 556, 556, 3281, 556, 556, 556, 3284, 556, 556, 556, 3463, 556, 556, 556, 556, 556, 556, 556,
      /* 32306 */ 556, 556, 580, 580, 580, 580, 580, 580, 3302, 580, 580, 580, 580, 580, 580, 580, 3477, 580, 580, 580,
      /* 32326 */ 580, 580, 580, 580, 580, 580, 3486, 3487, 0, 0, 0, 0, 364, 364, 0, 0, 0, 0, 1137, 1095, 0, 0, 0, 0, 0,
      /* 32351 */ 0, 0, 69632, 73728, 266240, 0, 0, 0, 0, 65536, 0, 0, 0, 0, 0, 3493, 3494, 3495, 534, 534, 534, 3498,
      /* 32373 */ 534, 3500, 534, 534, 534, 534, 534, 534, 534, 3269, 534, 534, 534, 534, 534, 534, 534, 534, 534, 2781,
      /* 32393 */ 534, 534, 534, 534, 534, 534, 534, 3505, 3506, 3507, 556, 556, 556, 3510, 556, 3512, 556, 556, 556, 556,
      /* 32413 */ 3517, 3518, 3519, 3520, 580, 580, 580, 3523, 580, 3525, 580, 580, 580, 580, 3530, 0, 0, 0, 0, 0, 0,
      /* 32434 */ 1687, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 783, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3562, 534, 534, 534, 3566,
      /* 32462 */ 556, 556, 3568, 556, 556, 556, 3572, 556, 580, 580, 3574, 580, 580, 580, 3578, 580, 0, 0, 0, 534, 534,
      /* 32483 */ 534, 534, 534, 534, 556, 556, 580, 580, 0, 3111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 398, 0, 0, 0, 0, 0, 0, 0,
      /* 32511 */ 0, 328, 329, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2409, 0, 0, 0, 0, 368, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 32543 */ 0, 0, 0, 1629, 0, 0, 0, 0, 368, 0, 0, 0, 376, 378, 0, 0, 0, 0, 0, 0, 0, 0, 2025, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 32574 */ 2047, 0, 0, 0, 0, 0, 0, 0, 0, 2087, 0, 0, 0, 0, 0, 0, 0, 0, 2127, 0, 0, 534, 534, 534, 534, 534, 0, 0,
      /* 32602 */ 411, 0, 0, 0, 411, 69632, 73728, 0, 368, 368, 0, 423, 65536, 368, 0, 0, 368, 423, 492, 496, 492, 492,
      /* 32624 */ 501, 492, 492, 492, 501, 492, 423, 423, 329, 423, 0, 0, 423, 423, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2048, 0, 0,
      /* 32650 */ 0, 0, 0, 0, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 540, 563,
      /* 32672 */ 540, 563, 540, 540, 563, 540, 587, 563, 563, 563, 563, 563, 563, 563, 587, 587, 587, 540, 587, 587, 587,
      /* 32693 */ 587, 587, 587, 587, 563, 563, 540, 563, 587, 563, 587, 1, 12290, 0, 769, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 32718 */ 0, 0, 0, 0, 1644, 0, 556, 556, 556, 556, 933, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556,
      /* 32740 */ 2285, 556, 2287, 556, 556, 0, 0, 1207, 0, 1096, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2447, 0, 0, 0, 534,
      /* 32767 */ 534, 534, 534, 1260, 534, 534, 534, 534, 534, 1272, 534, 534, 534, 534, 534, 0, 0, 0, 2212, 556, 556,
      /* 32788 */ 556, 556, 556, 556, 556, 3029, 556, 556, 556, 556, 556, 556, 556, 556, 3030, 556, 556, 556, 556, 556,
      /* 32808 */ 556, 556, 534, 534, 534, 1341, 901, 556, 556, 556, 556, 556, 556, 556, 556, 1352, 556, 556, 0, 580, 580,
      /* 32829 */ 580, 580, 580, 580, 998, 580, 580, 580, 580, 580, 580, 2650, 580, 580, 580, 580, 580, 580, 580, 580,
      /* 32849 */ 580, 2315, 580, 2317, 580, 580, 580, 580, 556, 556, 556, 1364, 556, 556, 556, 556, 556, 556, 556, 556,
      /* 32869 */ 556, 556, 556, 556, 1378, 1380, 556, 556, 556, 556, 556, 1871, 556, 556, 556, 556, 556, 556, 556, 556,
      /* 32889 */ 556, 556, 556, 556, 1413, 556, 556, 1417, 534, 534, 534, 534, 534, 3567, 556, 556, 556, 556, 556, 556,
      /* 32909 */ 556, 3573, 580, 580, 580, 580, 580, 2677, 580, 580, 580, 580, 580, 580, 534, 580, 556, 534, 534, 534,
      /* 32929 */ 534, 556, 556, 556, 556, 580, 534, 3597, 556, 556, 556, 3599, 580, 580, 580, 0, 534, 534, 556, 556, 580,
      /* 32950 */ 580, 0, 0, 0, 3243, 0, 0, 0, 0, 0, 0, 0, 657, 0, 0, 0, 0, 0, 0, 0, 0, 306, 306, 306, 0, 0, 0, 0, 0, 424,
      /* 32980 */ 424, 0, 424, 433, 0, 424, 424, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460,
      /* 33001 */ 460, 460, 460, 460, 460, 486, 486, 460, 486, 486, 486, 486, 486, 486, 486, 486, 486, 486, 486, 486, 486,
      /* 33022 */ 486, 486, 486, 486, 486, 486, 486, 486, 486, 486, 486, 541, 564, 541, 564, 541, 541, 564, 541, 588, 564,
      /* 33043 */ 564, 564, 564, 564, 564, 564, 588, 588, 588, 541, 588, 588, 588, 588, 588, 588, 588, 564, 564, 541, 564,
      /* 33064 */ 588, 564, 588, 1, 12290, 78114, 1066, 0, 0, 1069, 1073, 0, 0, 1077, 1081, 0, 0, 0, 0, 0, 0, 0, 703, 0,
      /* 33088 */ 0, 0, 0, 0, 0, 0, 0, 0, 2104, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1194, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 33120 */ 2472, 0, 0, 0, 0, 1670, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1667, 0, 0, 0, 0, 0, 2044, 0, 0, 0, 0,
      /* 33151 */ 0, 0, 0, 0, 0, 0, 0, 0, 2704, 0, 0, 0, 0, 2068, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1681, 1682,
      /* 33181 */ 2392, 580, 580, 580, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2928, 0, 0, 0, 2932, 0, 0, 0, 0, 0, 2938,
      /* 33210 */ 0, 0, 0, 0, 0, 0, 0, 719, 0, 0, 0, 0, 0, 0, 0, 0, 0, 721, 0, 0, 0, 0, 0, 0, 2953, 0, 0, 2956, 0, 0, 0,
      /* 33241 */ 0, 0, 2961, 0, 0, 0, 0, 0, 0, 0, 748, 0, 0, 0, 0, 0, 0, 0, 0, 333, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 33273 */ 0, 0, 0, 1204, 2995, 534, 534, 534, 534, 534, 534, 534, 534, 534, 3004, 534, 534, 534, 534, 534, 0, 0,
      /* 33295 */ 2211, 0, 556, 556, 556, 556, 556, 556, 556, 2268, 556, 556, 556, 556, 2273, 556, 556, 556, 534, 534,
      /* 33315 */ 534, 3012, 534, 534, 3015, 534, 534, 534, 3018, 556, 556, 556, 556, 556, 0, 0, 0, 0, 580, 580, 580, 580,
      /* 33337 */ 580, 580, 580, 556, 556, 534, 556, 580, 556, 580, 1, 12290, 556, 556, 556, 556, 3054, 556, 556, 3057,
      /* 33357 */ 556, 556, 556, 3060, 580, 580, 580, 580, 0, 0, 0, 0, 0, 0, 0, 0, 2396, 0, 0, 0, 3077, 580, 580, 580,
      /* 33381 */ 580, 580, 580, 580, 580, 580, 580, 3087, 580, 580, 580, 580, 0, 0, 0, 0, 0, 0, 3442, 0, 3444, 0, 534,
      /* 33404 */ 534, 0, 3120, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2015, 0, 0, 534, 534, 3151, 534, 534, 534, 534,
      /* 33431 */ 534, 534, 534, 534, 534, 534, 534, 534, 534, 3458, 556, 556, 534, 534, 534, 534, 3163, 534, 534, 534,
      /* 33451 */ 534, 534, 534, 534, 3168, 534, 3170, 534, 534, 534, 534, 534, 1261, 534, 534, 534, 1270, 534, 534, 534,
      /* 33471 */ 534, 534, 534, 534, 2493, 534, 534, 534, 534, 534, 534, 534, 534, 534, 2196, 534, 534, 534, 534, 534,
      /* 33491 */ 534, 556, 556, 556, 580, 580, 3207, 580, 580, 580, 580, 580, 580, 580, 580, 580, 580, 1962, 580, 580,
      /* 33511 */ 580, 580, 580, 580, 3227, 580, 580, 580, 580, 580, 580, 580, 580, 580, 580, 580, 534, 580, 556, 2912,
      /* 33531 */ 534, 2914, 556, 2916, 3275, 534, 534, 534, 534, 534, 534, 534, 556, 556, 556, 556, 556, 556, 556, 556,
      /* 33551 */ 580, 580, 580, 556, 556, 3287, 556, 556, 556, 556, 556, 556, 556, 556, 556, 3293, 556, 556, 556, 556,
      /* 33571 */ 556, 556, 3466, 556, 556, 556, 556, 556, 556, 580, 580, 580, 580, 580, 580, 580, 580, 580, 580, 3306,
      /* 33591 */ 3587, 3588, 556, 556, 580, 580, 3591, 3592, 580, 580, 0, 0, 0, 534, 534, 534, 534, 534, 534, 534, 534,
      /* 33612 */ 534, 1716, 534, 534, 534, 0, 683, 684, 0, 0, 0, 0, 689, 0, 0, 0, 364, 364, 364, 0, 0, 0, 0, 0, 534, 830,
      /* 33638 */ 534, 534, 534, 534, 534, 534, 860, 534, 534, 534, 534, 534, 534, 2180, 2181, 534, 534, 534, 534, 534,
      /* 33658 */ 534, 2188, 534, 0, 751, 0, 0, 0, 0, 0, 751, 751, 0, 0, 816, 0, 0, 0, 0, 0, 0, 0, 1134592, 0, 0, 0, 0, 0,
      /* 33686 */ 0, 1134592, 0, 0, 0, 0, 970, 556, 0, 580, 580, 580, 580, 988, 580, 580, 580, 580, 580, 580, 580, 580,
      /* 33708 */ 1044, 580, 0, 0, 0, 841, 988, 914, 534, 534, 534, 534, 897, 556, 556, 556, 556, 970, 0, 580, 580, 580,
      /* 33730 */ 580, 1044, 0, 0, 0, 1145, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2408448, 0, 0, 534, 1318, 534, 534,
      /* 33756 */ 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 0, 2549, 1696, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 33781 */ 0, 0, 0, 0, 0, 1190, 580, 580, 1988, 580, 534, 580, 556, 534, 534, 534, 534, 556, 556, 556, 556, 580,
      /* 33803 */ 580, 580, 580, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2122, 0, 0, 0, 0, 0, 0, 0, 0, 534, 534, 534,
      /* 33833 */ 534, 534, 2768, 534, 2769, 534, 534, 2540, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534,
      /* 33853 */ 534, 0, 0, 0, 0, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 0, 0, 975, 580, 0, 3129, 0,
      /* 33877 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2053, 0, 3235, 534, 3237, 556, 3239, 580, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 33906 */ 0, 0, 0, 3124, 3125, 0, 0, 0, 556, 556, 556, 3298, 556, 580, 580, 580, 580, 580, 580, 580, 580, 580,
      /* 33928 */ 580, 580, 2359, 580, 580, 580, 580, 3317, 580, 534, 534, 556, 556, 580, 580, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 33952 */ 2076, 0, 0, 0, 0, 0, 0, 461, 461, 479, 487, 487, 479, 487, 487, 487, 487, 487, 487, 487, 487, 512, 520,
      /* 33975 */ 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 529, 520, 520, 520, 520, 520, 542, 565,
      /* 33996 */ 542, 565, 542, 542, 565, 542, 589, 565, 565, 565, 565, 565, 565, 565, 589, 589, 589, 542, 589, 589, 589,
      /* 34017 */ 589, 589, 589, 589, 565, 565, 542, 565, 589, 565, 589, 1, 12290, 0, 0, 760, 0, 0, 764, 0, 0, 0, 0, 0, 0,
      /* 34042 */ 0, 0, 0, 0, 0, 3132, 0, 0, 0, 0, 0, 778, 0, 0, 0, 0, 0, 0, 0, 782, 0, 0, 0, 0, 0, 0, 0, 779, 0, 0, 0, 0,
      /* 34074 */ 788, 0, 0, 0, 0, 0, 0, 800, 0, 0, 0, 0, 0, 0, 805, 0, 0, 0, 782, 0, 0, 0, 0, 364, 364, 0, 0, 0, 1136, 0,
      /* 34104 */ 0, 0, 0, 0, 0, 0, 1606, 0, 0, 0, 0, 0, 0, 0, 0, 553, 576, 553, 576, 553, 553, 576, 553, 0, 805, 0, 0, 0,
      /* 34132 */ 0, 0, 805, 805, 0, 0, 0, 0, 782, 0, 0, 0, 0, 0, 534, 831, 534, 534, 534, 846, 534, 534, 534, 534, 534,
      /* 34157 */ 0, 2210, 0, 0, 556, 556, 556, 556, 556, 556, 556, 1893, 26009, 0, 1898, 580, 1900, 580, 1901, 580, 0, 0,
      /* 34179 */ 0, 0, 823, 778, 0, 0, 823, 0, 0, 0, 0, 0, 0, 0, 0, 2468, 0, 0, 0, 0, 0, 0, 0, 0, 2022, 0, 2116, 0, 0, 0,
      /* 34209 */ 0, 0, 0, 0, 0, 0, 823, 534, 534, 534, 534, 844, 534, 852, 534, 534, 534, 534, 0, 0, 556, 556, 556, 556,
      /* 34233 */ 556, 2815, 556, 2816, 556, 556, 917, 556, 925, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556,
      /* 34253 */ 556, 556, 556, 2583, 556, 971, 556, 0, 580, 580, 580, 580, 580, 991, 580, 999, 580, 580, 580, 580, 580,
      /* 34274 */ 580, 3097, 580, 580, 580, 580, 580, 534, 580, 556, 534, 534, 534, 534, 1054, 898, 556, 556, 556, 1059,
      /* 34294 */ 971, 0, 580, 580, 580, 1064, 1045, 0, 1159, 0, 0, 0, 0, 0, 0, 0, 1167, 0, 0, 0, 0, 0, 0, 0, 789, 0, 0,
      /* 34321 */ 0, 0, 0, 0, 770, 0, 0, 0, 1219, 0, 0, 0, 0, 0, 0, 0, 0, 1224, 0, 0, 0, 0, 0, 0, 0, 1134592, 0, 364, 0,
      /* 34350 */ 0, 0, 1134592, 0, 0, 0, 1134592, 1134592, 0, 0, 1134592, 0, 0, 1134592, 0, 1134592, 534, 534, 1284, 534,
      /* 34370 */ 534, 534, 534, 534, 534, 534, 1292, 534, 534, 534, 534, 534, 0, 2209, 0, 0, 556, 556, 556, 556, 556,
      /* 34391 */ 556, 556, 1842, 556, 556, 556, 556, 556, 556, 556, 556, 26009, 1896, 580, 580, 580, 580, 580, 580, 534,
      /* 34411 */ 534, 534, 1321, 534, 534, 1325, 534, 534, 534, 534, 534, 1331, 534, 534, 534, 534, 534, 534, 534, 3342,
      /* 34431 */ 534, 3344, 534, 534, 534, 534, 534, 556, 1338, 534, 534, 1341, 901, 556, 556, 556, 556, 556, 556, 556,
      /* 34451 */ 556, 556, 556, 556, 2568, 556, 556, 556, 556, 556, 1357, 556, 556, 556, 556, 556, 556, 556, 556, 556,
      /* 34471 */ 1376, 556, 556, 556, 556, 556, 0, 2615, 0, 0, 0, 0, 580, 580, 580, 2619, 580, 556, 556, 556, 1384, 556,
      /* 34493 */ 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 1816, 1817, 556, 556, 580, 580, 580, 1522, 580,
      /* 34513 */ 580, 0, 534, 580, 556, 534, 534, 534, 534, 534, 556, 556, 556, 556, 556, 3196, 556, 3198, 556, 556, 556,
      /* 34534 */ 556, 556, 556, 556, 556, 1878, 1879, 556, 556, 556, 556, 556, 556, 534, 534, 534, 534, 1773, 534, 534,
      /* 34554 */ 534, 534, 534, 534, 1781, 534, 534, 534, 534, 0, 0, 556, 556, 556, 2813, 556, 556, 556, 556, 556, 2818,
      /* 34575 */ 556, 556, 1823, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 2842, 556, 556,
      /* 34595 */ 556, 1853, 556, 556, 556, 556, 1859, 556, 556, 556, 556, 556, 556, 556, 556, 2840, 556, 556, 556, 556,
      /* 34615 */ 556, 556, 556, 1868, 556, 556, 556, 556, 556, 556, 1876, 556, 556, 556, 556, 556, 556, 556, 556, 2850,
      /* 34635 */ 556, 556, 556, 556, 556, 556, 556, 556, 1886, 1888, 556, 556, 556, 556, 556, 26009, 0, 580, 580, 580,
      /* 34655 */ 580, 580, 580, 0, 1525, 1526, 1527, 534, 534, 1529, 534, 534, 556, 580, 580, 580, 1955, 580, 580, 580,
      /* 34675 */ 580, 580, 580, 580, 580, 1964, 580, 580, 580, 580, 580, 1940, 1941, 1943, 580, 580, 580, 580, 580, 580,
      /* 34695 */ 580, 1951, 580, 580, 580, 1972, 580, 580, 580, 580, 580, 580, 580, 580, 580, 1982, 1984, 580, 580, 580,
      /* 34715 */ 580, 1925, 580, 580, 580, 580, 580, 580, 580, 580, 580, 580, 580, 2372, 580, 2374, 580, 580, 0, 0, 0,
      /* 34736 */ 2057, 0, 0, 0, 0, 0, 2063, 0, 0, 0, 0, 0, 0, 0, 1089, 0, 0, 0, 0, 1241, 1242, 0, 0, 0, 0, 0, 0, 2071, 0,
      /* 34765 */ 0, 0, 0, 0, 0, 0, 0, 2079, 0, 0, 0, 0, 0, 534, 833, 534, 534, 534, 534, 534, 534, 534, 534, 534, 1306,
      /* 34790 */ 534, 534, 534, 534, 534, 534, 2134, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 2146, 534,
      /* 34810 */ 534, 534, 534, 534, 534, 534, 3453, 534, 534, 534, 534, 534, 556, 556, 556, 556, 556, 556, 2826, 556,
      /* 34830 */ 556, 556, 556, 556, 556, 556, 556, 556, 949, 556, 556, 556, 556, 967, 556, 2189, 534, 534, 534, 534,
      /* 34850 */ 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 1314, 2203, 534, 534, 534, 534, 0, 0, 0, 0, 556,
      /* 34872 */ 556, 556, 556, 556, 556, 2219, 2290, 556, 556, 556, 556, 0, 0, 0, 0, 580, 580, 580, 580, 580, 580, 2306,
      /* 34894 */ 2377, 580, 580, 580, 580, 2146, 2318, 2231, 534, 534, 534, 534, 556, 556, 556, 556, 580, 580, 580, 580,
      /* 34914 */ 0, 534, 534, 556, 556, 580, 580, 0, 0, 0, 0, 0, 0, 3246, 0, 0, 0, 0, 0, 2413, 2414, 0, 0, 2417, 0, 2419,
      /* 34940 */ 0, 0, 0, 0, 0, 0, 0, 0, 2712, 0, 0, 0, 0, 0, 0, 0, 0, 2728, 0, 0, 0, 0, 0, 0, 0, 0, 2429, 0, 0, 0, 0, 0,
      /* 34972 */ 0, 0, 0, 2406, 0, 0, 0, 0, 0, 0, 0, 0, 2454, 0, 0, 0, 0, 0, 0, 0, 0, 1587, 0, 0, 0, 0, 0, 0, 0, 1595,
      /* 35002 */ 1596, 0, 0, 0, 2424, 0, 0, 2427, 0, 0, 0, 0, 0, 0, 2431, 0, 0, 0, 0, 0, 0, 0, 1159168, 0, 1159168, 0, 0,
      /* 35029 */ 0, 0, 1159168, 1159168, 0, 0, 0, 2452, 0, 0, 0, 0, 0, 0, 0, 2456, 2457, 0, 0, 2460, 0, 0, 2463, 0, 0, 0,
      /* 35055 */ 0, 0, 0, 0, 0, 0, 0, 2473, 0, 0, 0, 0, 0, 639, 0, 0, 0, 0, 644, 645, 646, 647, 648, 649, 534, 2487, 534,
      /* 35082 */ 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 3008, 534, 534, 534, 2515, 534,
      /* 35102 */ 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 1293, 534, 534, 534, 534, 2527, 534, 534, 534,
      /* 35122 */ 534, 534, 534, 2534, 534, 534, 534, 534, 534, 534, 534, 534, 3343, 534, 534, 534, 534, 534, 534, 556,
      /* 35142 */ 534, 534, 2541, 534, 534, 534, 2544, 534, 534, 534, 534, 534, 534, 534, 0, 0, 0, 0, 556, 556, 556, 556,
      /* 35164 */ 2217, 556, 556, 556, 2574, 556, 556, 556, 556, 556, 556, 2579, 556, 556, 556, 556, 556, 556, 556, 1427,
      /* 35184 */ 1428, 556, 556, 556, 26009, 1341, 975, 580, 2585, 556, 556, 556, 556, 556, 556, 2592, 556, 556, 556,
      /* 35203 */ 556, 556, 556, 2599, 556, 556, 556, 556, 556, 3290, 556, 556, 556, 556, 3291, 3292, 556, 556, 556, 556,
      /* 35223 */ 556, 0, 0, 2298, 0, 580, 580, 580, 580, 580, 580, 580, 2886, 580, 580, 580, 580, 580, 580, 580, 580,
      /* 35244 */ 580, 3312, 580, 580, 580, 580, 580, 580, 2673, 580, 580, 580, 2676, 580, 580, 580, 580, 580, 580, 580,
      /* 35264 */ 2681, 2682, 2683, 534, 534, 534, 534, 534, 1289, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534,
      /* 35284 */ 2185, 534, 534, 534, 534, 2720, 2721, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2080, 0, 0, 0, 2736, 0,
      /* 35311 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 2746, 0, 0, 0, 0, 0, 667, 0, 0, 0, 0, 0, 729, 0, 780, 0, 0, 0, 0, 0, 305, 0,
      /* 35342 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1565, 0, 0, 0, 0, 0, 0, 2751, 0, 0, 0, 2753, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 35374 */ 2109, 534, 534, 534, 534, 534, 2787, 2788, 534, 534, 534, 534, 2791, 534, 534, 534, 534, 534, 534, 534,
      /* 35394 */ 534, 534, 556, 556, 3178, 556, 556, 556, 556, 2796, 534, 534, 534, 2799, 534, 2801, 534, 534, 534, 534,
      /* 35414 */ 534, 534, 2805, 534, 534, 534, 534, 534, 534, 2492, 534, 534, 534, 534, 534, 534, 534, 534, 534, 1745,
      /* 35434 */ 534, 534, 534, 534, 534, 534, 2834, 2835, 556, 556, 556, 556, 2838, 556, 556, 556, 556, 556, 556, 556,
      /* 35454 */ 556, 556, 2257, 556, 556, 556, 556, 556, 556, 556, 2844, 556, 556, 556, 2847, 556, 2849, 556, 556, 556,
      /* 35474 */ 556, 556, 556, 556, 2854, 580, 2867, 580, 580, 580, 580, 580, 580, 580, 580, 580, 580, 580, 580, 580,
      /* 35494 */ 580, 1949, 580, 580, 580, 2883, 2884, 580, 580, 580, 580, 2887, 580, 580, 580, 580, 580, 580, 580, 1928,
      /* 35514 */ 580, 580, 580, 580, 580, 580, 580, 580, 1912, 1913, 580, 580, 580, 580, 1920, 580, 580, 580, 580, 2893,
      /* 35534 */ 580, 580, 580, 2896, 580, 2898, 580, 580, 580, 580, 580, 580, 1190, 534, 580, 556, 534, 534, 534, 534,
      /* 35554 */ 534, 556, 580, 2903, 580, 580, 580, 580, 580, 580, 534, 580, 556, 534, 534, 556, 556, 580, 580, 0, 0,
      /* 35575 */ 3242, 0, 0, 0, 0, 0, 0, 0, 0, 225734, 225734, 225734, 225734, 225734, 225734, 225734, 225734, 0, 0, 0,
      /* 35595 */ 0, 0, 0, 0, 0, 0, 366, 0, 0, 0, 0, 0, 0, 580, 2918, 0, 0, 2921, 2922, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 35625 */ 3132, 0, 0, 3255, 0, 534, 534, 534, 534, 2986, 534, 534, 534, 534, 534, 534, 534, 2992, 534, 534, 534,
      /* 35646 */ 534, 534, 534, 891, 534, 534, 534, 534, 556, 556, 556, 556, 556, 0, 0, 0, 0, 580, 580, 2302, 580, 580,
      /* 35668 */ 580, 580, 556, 556, 556, 3026, 556, 556, 556, 556, 556, 556, 556, 3032, 556, 556, 556, 556, 556, 556,
      /* 35688 */ 1841, 556, 556, 556, 556, 556, 556, 556, 556, 556, 3357, 556, 3359, 556, 556, 556, 556, 580, 580, 580,
      /* 35708 */ 580, 3068, 580, 580, 580, 580, 580, 580, 580, 3074, 580, 580, 580, 580, 580, 2311, 580, 580, 2314, 580,
      /* 35728 */ 580, 580, 580, 580, 580, 2322, 3138, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1191, 3247, 0, 0, 0,
      /* 35755 */ 0, 0, 0, 0, 0, 0, 0, 3132, 0, 0, 0, 0, 0, 0, 0, 0, 0, 534, 534, 534, 534, 2767, 534, 534, 534, 534, 534,
      /* 35782 */ 534, 534, 534, 3265, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 1341, 0, 556, 556, 534,
      /* 35803 */ 534, 3276, 534, 534, 534, 534, 534, 556, 556, 556, 556, 556, 556, 3283, 556, 556, 556, 556, 556, 3299,
      /* 35823 */ 580, 580, 580, 580, 580, 580, 580, 3304, 580, 580, 580, 580, 580, 3479, 580, 3481, 580, 580, 3483, 580,
      /* 35843 */ 580, 0, 0, 0, 0, 0, 0, 1210, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2421, 0, 0, 0, 0, 0, 3132, 0, 0, 0, 0, 534,
      /* 35873 */ 534, 534, 534, 534, 534, 534, 534, 3399, 534, 3401, 3402, 534, 3404, 534, 556, 556, 556, 556, 556, 556,
      /* 35893 */ 556, 556, 3414, 556, 3416, 3417, 556, 3419, 556, 3421, 580, 580, 580, 580, 580, 580, 580, 580, 3430,
      /* 35912 */ 580, 3432, 3433, 580, 3435, 580, 3437, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 534, 534, 534, 534, 534, 534, 534,
      /* 35936 */ 3499, 534, 3501, 534, 534, 580, 580, 580, 3553, 580, 3554, 580, 580, 580, 580, 0, 0, 0, 0, 534, 534,
      /* 35957 */ 534, 534, 534, 534, 3538, 534, 3539, 534, 534, 534, 3604, 3605, 3606, 534, 556, 580, 534, 556, 580, 534,
      /* 35977 */ 556, 580, 0, 0, 0, 0, 0, 0, 0, 3211264, 0, 0, 0, 2179072, 2179072, 2179072, 2179072, 2179072, 2125824,
      /* 35996 */ 2125824, 2125824, 2125824, 2125824, 0, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824,
      /* 36008 */ 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 3117056, 2125824, 2125824, 2125824, 2125824, 590,
      /* 36020 */ 566, 566, 566, 566, 566, 566, 566, 590, 590, 590, 543, 590, 590, 590, 590, 590, 590, 590, 566, 566, 543,
      /* 36041 */ 566, 590, 566, 590, 1, 12290, 556, 556, 1398, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556,
      /* 36061 */ 556, 556, 556, 2853, 556, 0, 0, 730, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1126, 1127, 0, 534, 534,
      /* 36087 */ 534, 534, 2138, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 2784, 534, 534, 534, 556,
      /* 36107 */ 556, 556, 2223, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 1849, 556, 556, 556, 580,
      /* 36127 */ 580, 580, 2310, 580, 580, 580, 580, 580, 580, 580, 580, 580, 580, 580, 580, 1490, 580, 580, 580, 402, 0,
      /* 36148 */ 0, 0, 0, 380, 0, 69632, 73728, 0, 0, 0, 0, 425, 65536, 0, 0, 0, 0, 364, 364, 1133, 0, 0, 0, 0, 0, 0, 0,
      /* 36175 */ 0, 0, 0, 3133, 0, 0, 0, 3136, 0, 425, 425, 0, 425, 0, 439, 425, 425, 462, 462, 462, 469, 462, 462, 462,
      /* 36199 */ 462, 462, 462, 462, 462, 469, 462, 462, 462, 462, 462, 462, 462, 462, 476, 462, 488, 488, 462, 488, 488,
      /* 36220 */ 488, 488, 488, 488, 488, 488, 488, 488, 488, 488, 488, 488, 488, 488, 488, 488, 488, 488, 488, 488, 488,
      /* 36241 */ 531, 544, 567, 544, 567, 544, 544, 567, 544, 591, 567, 567, 567, 567, 567, 567, 567, 591, 591, 591, 544,
      /* 36262 */ 591, 591, 591, 591, 591, 591, 591, 567, 567, 544, 567, 591, 567, 591, 1, 12290, 0, 0, 0, 653, 654, 0, 0,
      /* 36285 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2939, 0, 0, 2941, 0, 0, 0, 654, 0, 654, 0, 0, 0, 0, 814, 0, 0, 0, 654, 0,
      /* 36315 */ 0, 0, 0, 374, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 534, 2130, 534, 534, 534, 556, 919, 556, 556, 556, 556,
      /* 36341 */ 556, 556, 556, 556, 556, 556, 957, 556, 556, 556, 556, 556, 556, 3545, 556, 3546, 556, 556, 556, 556,
      /* 36361 */ 580, 580, 580, 580, 580, 580, 0, 0, 0, 534, 534, 534, 534, 534, 534, 556, 556, 534, 534, 884, 534, 534,
      /* 36383 */ 556, 556, 957, 556, 556, 0, 580, 580, 1031, 580, 580, 580, 580, 580, 2907, 580, 580, 534, 580, 556, 534,
      /* 36404 */ 534, 556, 556, 580, 580, 0, 0, 0, 0, 0, 0, 0, 3117, 0, 0, 0, 290, 1066, 0, 0, 1069, 1073, 0, 0, 1077,
      /* 36429 */ 1081, 0, 0, 0, 0, 0, 0, 0, 1094, 0, 0, 0, 0, 0, 0, 0, 0, 0, 192965, 192965, 192965, 192965, 192965,
      /* 36452 */ 192965, 192965, 192965, 0, 0, 0, 1088, 1089, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 131072, 131072, 0, 0,
      /* 36476 */ 0, 1130, 0, 0, 364, 364, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3132, 0, 3254, 0, 0, 1089, 1088, 0, 0, 0, 0,
      /* 36504 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2093, 0, 1088, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 534, 1253, 534, 534,
      /* 36533 */ 534, 534, 534, 1303, 534, 534, 1305, 534, 534, 534, 1309, 534, 534, 534, 0, 901, 556, 556, 556, 556,
      /* 36553 */ 556, 556, 556, 556, 556, 556, 556, 556, 3549, 580, 580, 580, 534, 534, 534, 534, 1287, 534, 534, 534,
      /* 36573 */ 534, 534, 534, 534, 534, 534, 534, 534, 534, 2804, 534, 534, 2807, 534, 534, 1320, 534, 534, 534, 534,
      /* 36593 */ 534, 534, 534, 534, 534, 534, 534, 1334, 534, 534, 534, 534, 534, 1323, 534, 534, 534, 534, 534, 534,
      /* 36613 */ 534, 534, 534, 534, 534, 2509, 534, 534, 534, 534, 534, 534, 534, 1341, 901, 556, 1344, 556, 556, 556,
      /* 36633 */ 556, 556, 556, 556, 556, 556, 2283, 556, 556, 556, 556, 556, 556, 556, 556, 1358, 1365, 556, 556, 556,
      /* 36653 */ 556, 556, 556, 556, 556, 556, 1379, 556, 556, 0, 580, 580, 580, 985, 989, 992, 580, 1000, 580, 580, 580,
      /* 36674 */ 1015, 1017, 556, 556, 556, 1399, 556, 556, 556, 556, 556, 556, 556, 1412, 556, 556, 556, 556, 556, 556,
      /* 36694 */ 1858, 556, 556, 556, 556, 556, 556, 556, 556, 556, 1402, 556, 556, 556, 556, 556, 556, 556, 1416, 556,
      /* 36714 */ 1436, 580, 580, 580, 580, 580, 580, 580, 580, 580, 580, 580, 1450, 1457, 580, 580, 580, 580, 580, 3069,
      /* 36734 */ 580, 580, 580, 580, 580, 580, 580, 580, 580, 580, 1510, 580, 580, 580, 580, 580, 580, 1518, 580, 580,
      /* 36754 */ 580, 580, 0, 1266, 1450, 1358, 534, 534, 1320, 534, 534, 556, 556, 556, 556, 556, 3354, 556, 556, 556,
      /* 36774 */ 556, 556, 556, 3360, 556, 556, 556, 556, 556, 556, 2615, 0, 580, 580, 580, 580, 580, 580, 580, 580, 580,
      /* 36795 */ 2626, 580, 580, 580, 580, 580, 580, 556, 1412, 556, 556, 580, 580, 1504, 580, 580, 1066, 0, 0, 0, 0, 0,
      /* 36817 */ 0, 0, 1107, 0, 0, 0, 0, 0, 0, 0, 0, 658, 0, 0, 661, 0, 0, 0, 0, 1570, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 36848 */ 0, 0, 0, 0, 1228, 1721, 1722, 534, 534, 534, 534, 1729, 534, 534, 534, 534, 534, 534, 534, 534, 534,
      /* 36869 */ 556, 3177, 556, 556, 556, 3180, 556, 534, 1770, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534,
      /* 36889 */ 534, 534, 534, 1311, 534, 556, 556, 1824, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556,
      /* 36909 */ 556, 556, 3204, 556, 556, 556, 1838, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556,
      /* 36929 */ 556, 3294, 556, 580, 1987, 580, 580, 534, 580, 556, 534, 534, 534, 534, 556, 556, 556, 556, 580, 580,
      /* 36949 */ 580, 580, 0, 0, 0, 0, 2694, 2029, 0, 2030, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2039, 0, 0, 0, 0, 0, 0, 1700, 0,
      /* 36977 */ 0, 0, 0, 0, 0, 0, 0, 0, 298, 0, 0, 0, 0, 0, 0, 534, 534, 2190, 534, 534, 534, 534, 534, 2195, 534, 534,
      /* 37003 */ 534, 534, 534, 534, 534, 1326, 534, 534, 534, 534, 534, 534, 534, 534, 1291, 534, 534, 534, 534, 534,
      /* 37023 */ 534, 534, 556, 2276, 556, 556, 556, 556, 556, 556, 2282, 556, 556, 556, 556, 556, 556, 556, 1810, 556,
      /* 37043 */ 556, 556, 556, 556, 556, 556, 556, 3188, 556, 556, 556, 556, 556, 556, 556, 580, 2363, 580, 580, 580,
      /* 37063 */ 580, 580, 580, 2369, 580, 580, 580, 580, 580, 580, 580, 2329, 580, 580, 580, 580, 580, 580, 580, 580,
      /* 37083 */ 580, 3557, 0, 0, 0, 0, 534, 534, 580, 580, 2634, 580, 580, 580, 580, 580, 580, 580, 580, 580, 580, 580,
      /* 37105 */ 580, 580, 1948, 580, 580, 0, 0, 0, 0, 2699, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 163840, 0, 0, 0, 534,
      /* 37132 */ 534, 534, 534, 534, 2778, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 1779, 534, 534, 534, 534,
      /* 37152 */ 534, 534, 2809, 534, 534, 0, 0, 556, 556, 556, 556, 556, 556, 556, 556, 2817, 556, 556, 556, 556, 556,
      /* 37173 */ 3465, 556, 3467, 556, 556, 3469, 556, 556, 580, 580, 580, 580, 580, 580, 580, 580, 580, 580, 3373, 580,
      /* 37193 */ 3375, 580, 556, 556, 556, 2858, 556, 556, 0, 0, 580, 580, 580, 580, 580, 580, 580, 580, 1445, 580, 580,
      /* 37214 */ 580, 1454, 580, 580, 580, 2866, 580, 580, 580, 580, 580, 580, 2874, 580, 580, 580, 580, 580, 580, 580,
      /* 37234 */ 580, 1473, 580, 580, 580, 580, 580, 580, 580, 534, 2996, 534, 534, 534, 534, 534, 534, 534, 534, 534,
      /* 37254 */ 534, 534, 534, 534, 534, 1767, 1768, 3036, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556,
      /* 37274 */ 556, 556, 556, 2275, 580, 3078, 580, 580, 580, 580, 580, 580, 580, 580, 580, 580, 580, 580, 580, 580,
      /* 37294 */ 1966, 580, 0, 0, 0, 0, 3130, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 167936, 0, 0, 0, 534, 534, 3174, 534,
      /* 37321 */ 534, 534, 534, 534, 534, 556, 556, 556, 556, 556, 556, 556, 1828, 556, 556, 556, 556, 556, 556, 556,
      /* 37341 */ 556, 26009, 0, 580, 580, 580, 580, 580, 580, 0, 0, 0, 0, 3535, 534, 534, 534, 534, 534, 534, 534, 534,
      /* 37363 */ 534, 534, 534, 534, 2991, 534, 534, 534, 3542, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556,
      /* 37383 */ 556, 3550, 580, 580, 580, 580, 580, 3082, 580, 580, 3085, 580, 580, 580, 580, 580, 580, 580, 1911, 580,
      /* 37403 */ 580, 580, 580, 580, 580, 580, 580, 580, 3072, 580, 580, 580, 580, 580, 580, 463, 463, 463, 447, 447,
      /* 37423 */ 463, 447, 447, 447, 447, 447, 447, 447, 447, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513,
      /* 37444 */ 513, 513, 513, 513, 545, 568, 545, 568, 545, 545, 568, 545, 592, 568, 568, 568, 568, 568, 568, 568, 592,
      /* 37465 */ 592, 592, 545, 592, 592, 592, 592, 592, 592, 592, 568, 568, 545, 568, 592, 568, 592, 1, 12290, 0, 0, 0,
      /* 37487 */ 655, 0, 655, 0, 0, 0, 0, 0, 0, 0, 0, 655, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 556, 920, 556, 556, 934, 556,
      /* 37516 */ 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 2841, 556, 556, 556, 556, 0, 0, 1160, 0, 0, 0, 0, 0,
      /* 37539 */ 0, 0, 0, 0, 0, 0, 0, 0, 1155, 0, 0, 0, 0, 0, 1177, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2461696, 0, 0,
      /* 37570 */ 0, 0, 0, 1232, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2801664, 0, 0, 534, 534, 534, 534, 1322, 534, 534,
      /* 37597 */ 534, 534, 534, 1329, 534, 534, 534, 534, 534, 534, 534, 2505, 534, 2507, 534, 534, 534, 534, 534, 534,
      /* 37617 */ 534, 1793, 534, 534, 534, 534, 1341, 0, 556, 556, 556, 556, 1359, 556, 556, 556, 556, 556, 556, 556,
      /* 37637 */ 556, 556, 556, 556, 556, 556, 965, 556, 556, 556, 556, 556, 1421, 556, 556, 556, 556, 556, 556, 556,
      /* 37657 */ 556, 26009, 1341, 975, 580, 580, 580, 580, 1974, 1975, 580, 580, 580, 580, 580, 580, 580, 580, 580, 580,
      /* 37677 */ 2641, 580, 580, 580, 2644, 580, 556, 556, 1534, 556, 580, 580, 580, 1538, 580, 1066, 0, 1542, 0, 0, 0,
      /* 37698 */ 1548, 0, 0, 0, 1554, 0, 0, 0, 1560, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2444, 0, 0, 0, 2448, 0, 0, 1599, 0, 0, 0,
      /* 37727 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1569, 534, 534, 1723, 534, 534, 534, 534, 534, 534, 534, 534, 534,
      /* 37752 */ 1734, 534, 534, 534, 534, 534, 534, 892, 534, 534, 534, 534, 556, 556, 556, 556, 556, 0, 0, 2298, 0, 0,
      /* 37774 */ 0, 580, 580, 580, 580, 580, 580, 3480, 580, 580, 580, 580, 580, 580, 0, 0, 0, 534, 3582, 534, 534, 534,
      /* 37796 */ 534, 556, 3586, 1754, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 1316,
      /* 37816 */ 0, 2096, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2108, 0, 534, 534, 534, 534, 2154, 534, 534, 534,
      /* 37842 */ 534, 534, 534, 534, 534, 534, 534, 534, 534, 3006, 534, 534, 534, 556, 556, 556, 2239, 556, 556, 556,
      /* 37862 */ 556, 556, 556, 556, 556, 556, 556, 556, 556, 1864, 556, 556, 1867, 580, 580, 580, 2326, 580, 580, 580,
      /* 37882 */ 580, 580, 580, 580, 580, 580, 580, 580, 580, 1512, 580, 580, 580, 556, 556, 3194, 556, 556, 556, 556,
      /* 37902 */ 556, 556, 556, 556, 556, 556, 556, 556, 556, 1414, 556, 556, 0, 0, 3328, 3132, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 37926 */ 0, 534, 534, 534, 534, 534, 851, 534, 534, 534, 534, 534, 580, 580, 3379, 580, 580, 534, 556, 580, 0, 0,
      /* 37948 */ 0, 3384, 0, 0, 0, 0, 0, 0, 306, 204800, 0, 0, 0, 0, 0, 0, 0, 0, 0, 364, 298, 0, 0, 0, 0, 0, 3132, 0, 0,
      /* 37977 */ 0, 0, 534, 534, 534, 534, 3395, 534, 534, 534, 534, 534, 534, 534, 2156, 534, 2158, 534, 534, 534, 534,
      /* 37998 */ 534, 534, 534, 2170, 534, 534, 534, 534, 534, 534, 534, 534, 534, 2546, 534, 534, 534, 534, 0, 2549,
      /* 38018 */ 387, 389, 339, 0, 0, 0, 0, 0, 0, 338, 0, 0, 339, 0, 0, 0, 0, 0, 0, 2023, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 38048 */ 359, 0, 0, 0, 0, 0, 0, 0, 0, 386, 0, 0, 0, 69632, 73728, 0, 0, 0, 0, 0, 65536, 0, 0, 0, 0, 393, 394, 0,
      /* 38076 */ 395, 0, 0, 0, 0, 0, 395, 0, 0, 0, 0, 0, 1209, 0, 0, 0, 0, 1214, 0, 0, 0, 0, 0, 0, 0, 2405, 0, 0, 0, 0,
      /* 38106 */ 0, 0, 0, 0, 0, 1094, 0, 0, 0, 0, 1099, 0, 0, 0, 338, 0, 0, 440, 0, 0, 464, 464, 464, 464, 464, 464, 464,
      /* 38133 */ 464, 546, 569, 546, 569, 546, 546, 569, 546, 475, 464, 464, 464, 493, 470, 493, 493, 493, 493, 493, 493,
      /* 38154 */ 493, 493, 464, 464, 470, 464, 464, 464, 464, 464, 464, 464, 464, 464, 464, 464, 474, 474, 464, 475, 464,
      /* 38175 */ 464, 464, 593, 569, 569, 569, 569, 569, 569, 569, 593, 593, 593, 546, 593, 593, 593, 593, 593, 593, 593,
      /* 38196 */ 569, 569, 546, 569, 593, 569, 593, 1, 12290, 0, 0, 0, 699, 0, 0, 0, 0, 0, 0, 0, 0, 708, 0, 710, 0, 0, 0,
      /* 38223 */ 0, 431, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1643, 0, 0, 0, 0, 743, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 38255 */ 0, 0, 2411, 0, 0, 759, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 656, 0, 775, 0, 0, 0, 0, 0, 824, 0, 0, 0, 0, 0,
      /* 38286 */ 0, 779, 656, 0, 0, 796, 0, 0, 0, 0, 699, 0, 0, 0, 0, 0, 0, 799, 0, 0, 0, 0, 434, 0, 0, 331, 461, 461,
      /* 38314 */ 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 796, 779, 0, 0, 801, 0, 660, 0,
      /* 38336 */ 775, 0, 0, 0, 0, 0, 0, 0, 0, 2755, 0, 0, 0, 0, 0, 0, 0, 0, 2937, 0, 0, 0, 0, 0, 0, 0, 0, 2741, 0, 0, 0,
      /* 38367 */ 2745, 0, 2747, 0, 0, 0, 775, 801, 0, 801, 796, 0, 0, 0, 815, 0, 0, 0, 656, 818, 828, 0, 0, 0, 0, 534,
      /* 38393 */ 832, 534, 534, 534, 848, 534, 534, 862, 534, 534, 534, 534, 534, 534, 2504, 534, 534, 534, 534, 534,
      /* 38413 */ 534, 534, 534, 534, 898, 534, 556, 556, 556, 556, 556, 534, 534, 875, 534, 534, 534, 534, 893, 534, 534,
      /* 38434 */ 534, 556, 556, 904, 556, 556, 0, 580, 580, 976, 580, 580, 580, 580, 580, 580, 1007, 580, 580, 580, 580,
      /* 38455 */ 580, 1908, 580, 580, 580, 580, 580, 580, 580, 580, 580, 1921, 556, 921, 556, 556, 935, 556, 556, 556,
      /* 38475 */ 556, 948, 556, 556, 556, 556, 966, 556, 556, 556, 556, 580, 580, 580, 580, 580, 580, 0, 3594, 0, 534,
      /* 38496 */ 534, 534, 534, 534, 534, 534, 534, 534, 3156, 534, 534, 534, 534, 534, 534, 534, 2802, 534, 534, 534,
      /* 38516 */ 534, 534, 534, 534, 534, 534, 1795, 534, 534, 1341, 1800, 556, 556, 580, 1022, 580, 580, 580, 580, 1040,
      /* 38536 */ 580, 580, 580, 0, 0, 0, 534, 580, 556, 556, 556, 556, 580, 580, 580, 580, 580, 580, 3428, 580, 580, 580,
      /* 38558 */ 580, 580, 534, 556, 580, 3381, 0, 3383, 0, 0, 0, 0, 0, 0, 0, 2126, 0, 0, 0, 534, 534, 534, 534, 534,
      /* 38582 */ 534, 534, 534, 534, 534, 1717, 534, 534, 0, 0, 1131, 0, 364, 364, 0, 1134, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 38607 */ 2481, 0, 0, 0, 0, 0, 0, 0, 1174, 0, 0, 0, 0, 0, 0, 1091, 0, 0, 0, 0, 0, 0, 0, 0, 111044, 111044, 111044,
      /* 38634 */ 111044, 111044, 111044, 111044, 111044, 1, 12290, 1093, 0, 0, 0, 0, 0, 0, 1197, 0, 0, 0, 0, 1202, 0, 0,
      /* 38656 */ 0, 0, 0, 0, 2033, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 131072, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 38688 */ 324, 0, 0, 0, 0, 1131, 0, 0, 1237, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2713, 0, 0, 0, 0, 0, 0, 1216, 0, 0, 0, 0,
      /* 38718 */ 1248, 0, 0, 0, 0, 0, 0, 0, 534, 534, 534, 841, 534, 534, 534, 534, 534, 534, 534, 556, 556, 1360, 556,
      /* 38741 */ 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 1382, 580, 580, 1497, 580, 580, 580, 580, 580,
      /* 38761 */ 580, 580, 580, 580, 580, 580, 580, 580, 2334, 580, 580, 556, 1533, 556, 556, 580, 580, 1537, 580, 580,
      /* 38781 */ 1066, 0, 0, 0, 0, 0, 0, 0, 1121, 0, 0, 1124, 1125, 0, 0, 0, 0, 1584, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 38811 */ 0, 0, 0, 1614, 0, 0, 0, 1602, 0, 0, 1605, 0, 1607, 0, 0, 0, 0, 0, 0, 0, 0, 122880, 0, 122880, 122880,
      /* 38836 */ 122880, 122880, 122880, 0, 0, 1697, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2423, 0, 534, 1755, 534,
      /* 38861 */ 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 2162, 534, 556, 1822, 556, 556, 556,
      /* 38881 */ 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 3049, 556, 556, 556, 556, 2265, 556, 556,
      /* 38901 */ 556, 556, 556, 556, 556, 556, 556, 556, 556, 3031, 556, 556, 556, 556, 0, 0, 0, 0, 2402, 0, 2404, 0, 0,
      /* 38924 */ 2407, 0, 0, 0, 0, 0, 0, 0, 1165, 0, 0, 0, 0, 0, 0, 0, 0, 0, 750, 0, 0, 0, 0, 0, 0, 2412, 0, 0, 0, 2415,
      /* 38954 */ 2416, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 106496, 0, 0, 0, 0, 0, 0, 0, 0, 2426, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 38985 */ 0, 0, 0, 0, 2912256, 0, 3207168, 0, 0, 0, 0, 2440, 0, 2441, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2470, 0, 0, 0,
      /* 39013 */ 0, 0, 2461, 0, 0, 0, 0, 0, 0, 0, 0, 2469, 0, 0, 0, 0, 0, 2475, 0, 0, 0, 0, 2478, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 39044 */ 0, 2486, 0, 0, 0, 0, 435, 0, 0, 447, 463, 463, 463, 463, 463, 463, 463, 463, 463, 473, 463, 463, 463,
      /* 39067 */ 463, 463, 463, 534, 2500, 2501, 534, 534, 534, 534, 534, 2506, 534, 2508, 534, 534, 534, 534, 2512,
      /* 39086 */ 2525, 534, 534, 534, 534, 534, 534, 2533, 534, 534, 534, 534, 2537, 534, 534, 534, 534, 534, 534, 1262,
      /* 39106 */ 534, 534, 534, 534, 534, 534, 1277, 534, 534, 556, 556, 556, 2561, 556, 556, 2564, 2565, 556, 556, 556,
      /* 39126 */ 556, 556, 2570, 556, 2572, 556, 556, 556, 556, 2576, 556, 556, 556, 556, 556, 556, 556, 556, 2582, 556,
      /* 39146 */ 556, 0, 580, 580, 977, 580, 580, 580, 993, 580, 580, 580, 580, 580, 580, 1443, 580, 580, 580, 1447, 580,
      /* 39167 */ 580, 1458, 580, 580, 556, 556, 2602, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556,
      /* 39187 */ 1833, 556, 556, 2685, 534, 534, 556, 2687, 556, 556, 580, 2689, 580, 580, 0, 0, 0, 0, 0, 0, 0, 2936, 0,
      /* 39210 */ 0, 0, 0, 0, 0, 0, 0, 0, 2036, 0, 0, 0, 0, 0, 0, 0, 0, 2708, 0, 0, 0, 0, 0, 0, 0, 2714, 2715, 2716, 0, 0,
      /* 39240 */ 0, 0, 0, 0, 2060, 0, 0, 0, 0, 0, 2064, 0, 0, 2066, 0, 2735, 0, 2737, 0, 0, 0, 2740, 0, 0, 2743, 0, 0, 0,
      /* 39268 */ 0, 0, 0, 0, 2960, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2430, 0, 0, 0, 0, 0, 2435, 534, 534, 2810, 534, 0, 0, 2811,
      /* 39296 */ 556, 556, 556, 556, 556, 556, 556, 556, 556, 2566, 556, 556, 556, 556, 556, 556, 556, 2856, 556, 556,
      /* 39316 */ 2859, 556, 0, 0, 2860, 580, 580, 580, 580, 580, 580, 580, 2651, 580, 580, 580, 580, 580, 580, 2658, 580,
      /* 39337 */ 580, 2892, 580, 580, 580, 580, 580, 580, 580, 580, 580, 580, 580, 580, 580, 580, 2321, 580, 2902, 580,
      /* 39357 */ 580, 2905, 580, 580, 2908, 580, 2909, 2910, 2911, 534, 534, 556, 556, 580, 580, 0, 0, 0, 0, 0, 3115, 0,
      /* 39379 */ 0, 0, 0, 0, 0, 0, 69632, 73728, 0, 0, 0, 420, 0, 65536, 0, 2929, 2930, 0, 0, 0, 0, 2935, 0, 0, 0, 0, 0,
      /* 39406 */ 0, 0, 0, 0, 0, 2730, 0, 0, 0, 0, 0, 534, 534, 2997, 534, 2999, 534, 534, 534, 534, 534, 534, 3005, 534,
      /* 39430 */ 534, 3007, 534, 534, 534, 534, 534, 1324, 534, 534, 534, 534, 534, 534, 534, 534, 1335, 1336, 556, 3037,
      /* 39450 */ 556, 3039, 556, 556, 556, 556, 556, 556, 556, 3046, 556, 556, 3048, 556, 556, 556, 556, 580, 580, 580,
      /* 39470 */ 580, 580, 1066, 0, 0, 0, 0, 0, 0, 0, 377, 0, 380, 0, 0, 0, 380, 0, 0, 580, 580, 3079, 580, 3081, 580,
      /* 39495 */ 580, 580, 580, 580, 580, 580, 3088, 580, 580, 3090, 534, 534, 534, 534, 534, 3164, 534, 534, 534, 534,
      /* 39515 */ 534, 534, 534, 3169, 534, 534, 534, 534, 534, 534, 2779, 534, 534, 534, 534, 534, 534, 534, 534, 534,
      /* 39535 */ 534, 3167, 534, 534, 534, 534, 534, 3181, 3182, 556, 556, 556, 556, 3186, 3187, 556, 556, 556, 556, 556,
      /* 39555 */ 3191, 556, 556, 0, 580, 580, 978, 580, 580, 580, 995, 580, 580, 1009, 580, 580, 580, 580, 580, 2353,
      /* 39575 */ 2354, 580, 580, 580, 580, 580, 580, 2361, 580, 580, 556, 556, 556, 580, 580, 580, 580, 580, 580, 580,
      /* 39595 */ 3210, 3211, 580, 580, 580, 580, 580, 1442, 580, 580, 580, 580, 1448, 580, 580, 580, 580, 580, 580, 3524,
      /* 39615 */ 580, 3526, 580, 580, 580, 580, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 534, 534, 3215, 3216, 580, 580, 580, 580,
      /* 39639 */ 580, 3220, 580, 580, 580, 580, 580, 580, 580, 580, 1507, 580, 580, 580, 580, 580, 580, 580, 3226, 580,
      /* 39659 */ 580, 580, 580, 580, 580, 580, 580, 580, 580, 580, 580, 534, 580, 556, 2684, 556, 556, 556, 3288, 556,
      /* 39679 */ 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 2258, 556, 556, 556, 3307, 580, 580, 580, 580,
      /* 39699 */ 580, 580, 580, 580, 580, 580, 580, 580, 580, 580, 580, 2347, 2348, 3132, 0, 0, 0, 0, 534, 534, 3393,
      /* 39720 */ 534, 534, 534, 534, 3398, 534, 534, 534, 534, 534, 534, 1290, 534, 534, 534, 534, 534, 534, 534, 534,
      /* 39740 */ 534, 1267, 534, 534, 534, 534, 534, 534, 534, 3403, 534, 534, 556, 556, 3408, 556, 556, 556, 556, 3413,
      /* 39760 */ 556, 556, 556, 556, 556, 556, 1874, 556, 556, 556, 556, 556, 1881, 556, 556, 556, 3418, 556, 556, 556,
      /* 39780 */ 580, 580, 3424, 580, 580, 580, 580, 3429, 580, 580, 580, 580, 580, 1468, 580, 580, 580, 580, 580, 580,
      /* 39800 */ 580, 1476, 580, 580, 3434, 580, 580, 580, 0, 0, 0, 0, 0, 3441, 0, 0, 0, 0, 534, 534, 534, 534, 3497,
      /* 39823 */ 534, 534, 534, 534, 534, 534, 534, 534, 1731, 534, 534, 534, 534, 1735, 534, 534, 534, 3563, 3564, 534,
      /* 39843 */ 534, 556, 556, 556, 3569, 3570, 556, 556, 556, 580, 580, 580, 580, 580, 580, 580, 580, 580, 3212, 580,
      /* 39863 */ 580, 580, 3575, 3576, 580, 580, 580, 0, 0, 0, 534, 534, 534, 534, 534, 534, 556, 556, 0, 580, 580, 979,
      /* 39885 */ 580, 580, 580, 580, 580, 580, 580, 580, 580, 580, 2358, 580, 580, 580, 580, 580, 341, 342, 343, 344,
      /* 39905 */ 345, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 221184, 0, 0, 0, 0, 0, 0, 390, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 39937 */ 0, 302, 0, 0, 0, 344, 344, 345, 344, 0, 343, 344, 448, 465, 465, 465, 465, 465, 465, 465, 465, 465, 465,
      /* 39960 */ 465, 465, 465, 465, 465, 465, 465, 465, 480, 489, 489, 497, 489, 499, 489, 489, 499, 499, 489, 499, 514,
      /* 39981 */ 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 547, 570, 547, 570, 547, 547,
      /* 40002 */ 570, 547, 594, 570, 570, 570, 570, 570, 570, 570, 594, 594, 594, 547, 594, 594, 594, 594, 594, 594, 594,
      /* 40023 */ 570, 570, 547, 570, 594, 570, 594, 1, 12290, 650, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 665, 666, 0,
      /* 40050 */ 668, 669, 0, 0, 0, 0, 0, 675, 0, 0, 0, 0, 0, 0, 0, 1220, 1250, 1251, 0, 1220, 0, 534, 534, 534, 0, 0, 0,
      /* 40077 */ 685, 0, 0, 0, 0, 0, 0, 692, 364, 364, 364, 0, 0, 0, 0, 0, 687, 0, 0, 0, 0, 0, 364, 364, 364, 0, 0, 0, 0,
      /* 40106 */ 0, 734, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1691, 0, 0, 0, 0, 712, 0, 714, 0, 716, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 40137 */ 0, 726, 0, 0, 0, 0, 436, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2138112, 0, 0, 0, 0, 0, 0, 639, 745, 746,
      /* 40166 */ 747, 0, 0, 0, 0, 0, 753, 754, 0, 0, 0, 0, 0, 748, 0, 0, 803, 0, 0, 0, 0, 0, 0, 0, 0, 1134592, 0, 0,
      /* 40194 */ 1134592, 0, 0, 0, 0, 0, 685, 0, 0, 665, 0, 685, 0, 797, 668, 716, 0, 685, 798, 0, 0, 0, 0, 0, 1090,
      /* 40219 */ 1091, 1092, 1093, 0, 0, 0, 0, 0, 0, 0, 0, 2948, 0, 0, 0, 0, 0, 2951, 0, 0, 0, 754, 0, 0, 0, 0, 0, 0, 0,
      /* 40248 */ 0, 747, 807, 808, 0, 0, 0, 0, 0, 1119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3055616, 0, 0, 0, 3133440, 0, 0,
      /* 40276 */ 0, 0, 747, 0, 0, 812, 692, 0, 0, 0, 817, 0, 0, 0, 0, 0, 0, 2073, 0, 2075, 0, 0, 0, 0, 0, 0, 0, 0, 1702,
      /* 40305 */ 0, 0, 1703, 0, 0, 1704, 0, 819, 0, 0, 0, 685, 692, 0, 0, 685, 817, 817, 0, 0, 0, 0, 0, 0, 0, 3131, 0, 0,
      /* 40333 */ 0, 0, 0, 0, 0, 0, 749, 0, 0, 0, 0, 0, 0, 756, 870, 873, 534, 534, 534, 885, 889, 534, 534, 534, 534,
      /* 40358 */ 556, 556, 556, 911, 915, 918, 556, 926, 556, 556, 556, 941, 943, 946, 556, 556, 556, 958, 962, 556, 556,
      /* 40379 */ 0, 580, 580, 980, 986, 580, 580, 580, 580, 1004, 580, 580, 580, 580, 580, 1469, 580, 580, 580, 580, 580,
      /* 40400 */ 580, 580, 580, 580, 580, 2627, 580, 580, 2630, 2631, 580, 1020, 580, 580, 580, 1032, 1036, 580, 580,
      /* 40419 */ 580, 580, 0, 0, 0, 1048, 1049, 1050, 838, 534, 885, 889, 1055, 911, 556, 958, 962, 1060, 0, 985, 580,
      /* 40440 */ 1032, 1036, 1065, 1101, 0, 0, 0, 0, 1105, 0, 0, 1108, 0, 0, 0, 0, 0, 0, 0, 0, 249856, 249856, 249856,
      /* 40463 */ 249856, 249856, 249856, 249856, 249856, 1, 12290, 1298, 534, 534, 1302, 534, 534, 534, 534, 534, 534,
      /* 40480 */ 534, 534, 534, 534, 1312, 534, 534, 534, 534, 534, 1727, 534, 534, 534, 534, 534, 534, 534, 534, 534,
      /* 40500 */ 534, 1796, 534, 1341, 0, 556, 556, 534, 1319, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 1332,
      /* 40520 */ 534, 534, 534, 534, 534, 534, 1304, 534, 534, 534, 534, 534, 534, 534, 534, 534, 1266, 1273, 534, 534,
      /* 40540 */ 534, 534, 534, 556, 1383, 556, 556, 556, 556, 556, 556, 556, 1390, 556, 556, 1394, 556, 556, 556, 556,
      /* 40560 */ 556, 1385, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 2595, 556, 556, 556, 556, 556, 580, 580,
      /* 40580 */ 580, 1482, 580, 580, 1486, 580, 580, 580, 580, 580, 580, 580, 580, 580, 1929, 580, 580, 580, 580, 580,
      /* 40600 */ 580, 580, 1496, 580, 580, 1503, 580, 580, 580, 580, 580, 580, 580, 580, 580, 580, 1516, 1615, 0, 0, 0,
      /* 40621 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1655, 0, 0, 0, 1647, 0, 1649, 0, 0, 0, 1651, 0, 741, 0, 0, 0, 0, 0,
      /* 40651 */ 0, 330, 0, 0, 0, 0, 0, 0, 0, 330, 0, 0, 69632, 73728, 0, 418, 418, 0, 0, 65536, 418, 0, 0, 0, 534, 1709,
      /* 40677 */ 534, 534, 534, 534, 534, 534, 1715, 534, 534, 534, 534, 0, 0, 556, 2812, 556, 556, 556, 556, 556, 556,
      /* 40698 */ 556, 556, 3356, 556, 556, 556, 556, 556, 556, 556, 534, 534, 1787, 534, 534, 534, 534, 534, 534, 534,
      /* 40718 */ 534, 534, 1341, 0, 556, 1803, 556, 556, 556, 556, 1839, 556, 556, 556, 1843, 556, 556, 1848, 556, 556,
      /* 40738 */ 556, 556, 556, 556, 1892, 556, 26009, 0, 580, 580, 580, 580, 580, 580, 0, 1269, 1453, 1361, 534, 534,
      /* 40758 */ 534, 534, 534, 556, 580, 580, 580, 1906, 580, 580, 580, 580, 580, 580, 580, 580, 580, 580, 580, 580,
      /* 40778 */ 1917, 580, 580, 580, 1935, 580, 580, 580, 1939, 580, 580, 1944, 580, 580, 580, 580, 580, 580, 580, 580,
      /* 40798 */ 1945, 580, 580, 580, 580, 580, 580, 580, 0, 0, 2010, 0, 1077, 0, 0, 0, 2012, 0, 1081, 0, 0, 0, 0, 0, 0,
      /* 40823 */ 0, 3144, 0, 0, 0, 0, 0, 0, 3147, 0, 534, 534, 534, 2177, 534, 534, 534, 534, 534, 534, 534, 534, 534,
      /* 40846 */ 534, 534, 534, 1341, 1800, 556, 556, 556, 556, 2263, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556,
      /* 40866 */ 556, 556, 556, 1850, 556, 556, 580, 580, 2350, 580, 580, 580, 580, 580, 580, 580, 580, 580, 580, 580,
      /* 40886 */ 580, 580, 2346, 580, 580, 0, 2550, 0, 1800, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556,
      /* 40907 */ 2569, 556, 2571, 556, 556, 2613, 556, 556, 556, 0, 0, 0, 2616, 0, 1896, 580, 580, 580, 580, 580, 580,
      /* 40928 */ 3219, 580, 580, 580, 580, 580, 580, 580, 580, 3225, 0, 0, 2761, 0, 0, 0, 534, 2765, 534, 534, 534, 534,
      /* 40950 */ 534, 534, 534, 534, 534, 3166, 534, 534, 534, 534, 534, 3171, 534, 534, 2789, 534, 534, 534, 534, 534,
      /* 40970 */ 534, 534, 534, 534, 534, 534, 534, 534, 1295, 534, 534, 556, 556, 2836, 556, 556, 556, 556, 556, 556,
      /* 40990 */ 556, 556, 556, 556, 556, 556, 556, 1865, 556, 556, 534, 534, 2985, 534, 534, 534, 534, 534, 534, 534,
      /* 41010 */ 534, 534, 534, 534, 534, 534, 1310, 534, 534, 534, 534, 534, 2998, 534, 534, 534, 534, 534, 534, 534,
      /* 41030 */ 534, 534, 534, 534, 534, 1341, 1801, 556, 556, 556, 3025, 556, 556, 556, 556, 556, 556, 556, 556, 556,
      /* 41050 */ 556, 556, 556, 556, 556, 556, 3205, 556, 556, 3038, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556,
      /* 41070 */ 556, 556, 556, 2247, 556, 556, 580, 580, 3067, 580, 580, 580, 580, 580, 580, 580, 580, 580, 580, 580,
      /* 41090 */ 580, 580, 2643, 580, 580, 580, 580, 580, 3080, 580, 580, 580, 580, 580, 580, 580, 580, 580, 580, 580,
      /* 41110 */ 580, 2345, 580, 580, 580, 534, 534, 534, 534, 534, 3267, 534, 534, 534, 534, 534, 534, 534, 534, 534,
      /* 41130 */ 534, 2159, 534, 534, 534, 534, 2163, 3285, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556,
      /* 41150 */ 556, 556, 556, 2289, 3336, 534, 534, 534, 534, 3340, 534, 534, 534, 534, 534, 3346, 534, 534, 534, 556,
      /* 41170 */ 556, 556, 556, 580, 580, 580, 580, 580, 1066, 0, 0, 0, 1545, 0, 0, 0, 0, 0, 1620, 0, 0, 1623, 0, 1625,
      /* 41194 */ 0, 0, 0, 0, 0, 0, 0, 2480, 0, 0, 0, 0, 0, 0, 0, 0, 555, 578, 555, 578, 555, 555, 578, 555, 556, 556,
      /* 41220 */ 3351, 556, 556, 556, 556, 3355, 556, 556, 556, 556, 556, 3361, 556, 556, 0, 580, 580, 981, 580, 580,
      /* 41240 */ 580, 580, 580, 580, 1010, 1012, 580, 580, 580, 580, 1029, 580, 580, 580, 580, 580, 0, 0, 0, 534, 580,
      /* 41261 */ 556, 3377, 580, 580, 580, 580, 534, 556, 580, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3251, 0, 3132, 3253, 0, 0,
      /* 41285 */ 3256, 3132, 0, 0, 0, 0, 534, 534, 534, 534, 534, 3396, 534, 534, 534, 3400, 534, 534, 534, 534, 534,
      /* 41306 */ 1742, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 2536, 534, 534, 534, 534, 534, 388, 0, 0, 0,
      /* 41327 */ 392, 388, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 233472, 0, 0, 0, 0, 0, 0, 0, 404, 0, 346, 0, 69632, 73728, 0,
      /* 41355 */ 0, 0, 0, 0, 65536, 0, 0, 0, 0, 437, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 636, 0, 0, 0, 0, 515, 515, 515,
      /* 41384 */ 515, 0, 0, 0, 0, 0, 0, 0, 0, 0, 515, 515, 515, 515, 515, 515, 515, 515, 548, 571, 548, 571, 548, 548,
      /* 41408 */ 571, 548, 595, 571, 571, 571, 571, 571, 571, 571, 595, 595, 595, 548, 595, 595, 595, 595, 595, 595, 595,
      /* 41429 */ 571, 571, 610, 615, 595, 615, 621, 1, 12290, 0, 0, 744, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 41456 */ 1668, 534, 534, 876, 534, 534, 534, 534, 894, 534, 534, 534, 556, 556, 905, 556, 556, 0, 580, 580, 982,
      /* 41477 */ 580, 580, 580, 580, 1001, 1005, 1011, 580, 1016, 580, 580, 1023, 580, 580, 580, 580, 1041, 580, 580,
      /* 41496 */ 580, 0, 0, 0, 534, 580, 556, 556, 556, 556, 580, 580, 580, 580, 580, 1066, 0, 0, 1544, 0, 0, 0, 0, 0, 0,
      /* 41521 */ 2764, 534, 534, 534, 534, 534, 534, 534, 534, 534, 1268, 534, 534, 534, 534, 534, 534, 0, 0, 0, 0, 1162,
      /* 41543 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1173, 0, 0, 0, 1178, 0, 0, 0, 0, 1094, 0, 0, 0, 0, 0, 0, 0, 0, 274432,
      /* 41572 */ 274432, 274432, 0, 274432, 274432, 274432, 274432, 1256, 534, 534, 534, 534, 534, 534, 534, 534, 1269,
      /* 41589 */ 534, 534, 534, 534, 1279, 534, 534, 534, 534, 534, 1757, 534, 534, 534, 534, 534, 534, 534, 534, 534,
      /* 41609 */ 534, 2197, 534, 534, 534, 534, 534, 534, 534, 534, 1341, 901, 556, 556, 556, 1347, 556, 556, 556, 556,
      /* 41629 */ 556, 556, 556, 1877, 556, 556, 556, 556, 556, 556, 556, 556, 26009, 0, 580, 1899, 580, 580, 580, 580,
      /* 41649 */ 556, 556, 1361, 556, 556, 556, 556, 1371, 556, 556, 556, 556, 556, 556, 556, 556, 3468, 556, 556, 3470,
      /* 41669 */ 556, 580, 580, 580, 556, 556, 556, 556, 1422, 556, 556, 556, 556, 556, 556, 556, 26009, 1341, 975, 580,
      /* 41689 */ 580, 580, 580, 1990, 1991, 1992, 534, 1994, 534, 534, 556, 1998, 556, 556, 580, 580, 580, 3367, 580,
      /* 41708 */ 580, 580, 580, 3371, 580, 580, 580, 580, 580, 580, 3232, 580, 580, 580, 580, 580, 580, 534, 580, 556,
      /* 41728 */ 2384, 534, 534, 534, 2388, 556, 556, 556, 580, 580, 1439, 580, 580, 580, 580, 580, 580, 580, 580, 580,
      /* 41748 */ 1453, 580, 580, 580, 580, 580, 2381, 2382, 2383, 534, 534, 534, 534, 556, 556, 556, 556, 3410, 556, 556,
      /* 41768 */ 556, 556, 556, 556, 556, 580, 1463, 580, 580, 580, 580, 580, 580, 580, 580, 580, 580, 580, 580, 580,
      /* 41788 */ 1477, 580, 580, 1498, 580, 580, 580, 580, 580, 580, 580, 580, 580, 580, 580, 1514, 580, 580, 580, 580,
      /* 41808 */ 2005, 0, 2007, 0, 2009, 0, 2011, 0, 0, 0, 0, 0, 0, 0, 2034, 2035, 0, 2037, 2038, 0, 0, 0, 0, 0, 0, 0,
      /* 41834 */ 1555, 0, 0, 0, 1561, 0, 0, 0, 0, 0, 0, 0, 0, 0, 286720, 286720, 0, 286720, 286720, 1, 12290, 0, 0, 0,
      /* 41858 */ 1586, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 303, 0, 0, 0, 0, 1600, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 41890 */ 0, 2434, 0, 556, 1852, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 3363,
      /* 41911 */ 0, 1556, 0, 0, 0, 0, 0, 1562, 0, 0, 0, 0, 0, 0, 0, 0, 305, 204800, 204800, 0, 205105, 204800, 1, 12290,
      /* 41935 */ 0, 0, 0, 2070, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 337, 0, 0, 0, 0, 0, 2111, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 41967 */ 0, 0, 0, 0, 1188, 0, 0, 534, 2165, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534,
      /* 41990 */ 2173, 534, 2250, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 2584, 2337,
      /* 42010 */ 580, 580, 580, 580, 580, 580, 580, 580, 580, 580, 580, 580, 580, 580, 580, 2375, 580, 2211, 0, 0, 0,
      /* 42031 */ 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 2597, 556, 556, 556, 556, 556, 556, 2588,
      /* 42051 */ 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 2831, 556, 556, 556, 534, 3107, 556, 3109,
      /* 42071 */ 580, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2138112, 1170, 0, 0, 0, 0, 0, 3132, 3330, 0, 0, 3332, 0, 0, 0,
      /* 42099 */ 0, 0, 534, 3335, 534, 534, 534, 534, 534, 1774, 534, 534, 534, 1778, 534, 534, 534, 534, 534, 534, 534,
      /* 42120 */ 1776, 534, 534, 534, 534, 534, 534, 534, 534, 534, 2535, 534, 534, 534, 534, 534, 534, 534, 3337, 534,
      /* 42140 */ 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 556, 556, 556, 556, 556, 556, 556, 556,
      /* 42160 */ 3350, 556, 556, 3352, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 2852, 556, 556, 556,
      /* 42180 */ 556, 556, 580, 3366, 580, 580, 3368, 580, 580, 580, 580, 580, 580, 580, 580, 580, 1946, 580, 580, 580,
      /* 42200 */ 580, 580, 580, 3132, 0, 3388, 0, 3390, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 556, 556,
      /* 42221 */ 902, 556, 556, 0, 0, 0, 783, 0, 783, 0, 0, 0, 0, 0, 0, 0, 0, 783, 0, 0, 0, 0, 556, 556, 556, 556, 556,
      /* 42248 */ 556, 556, 556, 2557, 556, 556, 556, 556, 556, 556, 2848, 556, 556, 556, 556, 556, 556, 556, 556, 556,
      /* 42268 */ 947, 556, 556, 556, 556, 556, 556, 556, 922, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556,
      /* 42289 */ 556, 556, 1381, 556, 556, 972, 0, 580, 580, 580, 580, 580, 580, 996, 580, 580, 580, 580, 580, 580, 1910,
      /* 42310 */ 580, 580, 580, 580, 1916, 580, 580, 580, 580, 78114, 1066, 0, 0, 1070, 1074, 0, 0, 1078, 1082, 0, 0, 0,
      /* 42332 */ 0, 0, 0, 0, 1222, 0, 0, 0, 0, 1225, 0, 1181, 0, 534, 3162, 534, 534, 534, 534, 534, 534, 534, 534, 534,
      /* 42356 */ 534, 534, 534, 534, 534, 2201, 534, 580, 580, 580, 3218, 580, 580, 580, 580, 580, 580, 580, 580, 580,
      /* 42376 */ 580, 580, 580, 2629, 580, 580, 580, 347, 347, 349, 347, 0, 0, 347, 347, 0, 0, 0, 0, 348, 0, 0, 0, 0, 0,
      /* 42401 */ 0, 2125, 0, 0, 2128, 0, 534, 534, 2131, 534, 534, 0, 0, 0, 347, 347, 349, 347, 347, 347, 347, 347, 347,
      /* 42424 */ 506, 347, 347, 347, 347, 347, 347, 347, 347, 347, 347, 347, 347, 347, 347, 347, 347, 549, 572, 549, 572,
      /* 42445 */ 549, 549, 572, 549, 596, 572, 572, 572, 572, 572, 572, 572, 596, 596, 596, 549, 596, 596, 596, 596, 596,
      /* 42466 */ 596, 596, 572, 572, 549, 572, 596, 572, 596, 1, 12290, 0, 0, 0, 715, 0, 717, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 42492 */ 0, 0, 1147348, 0, 0, 0, 0, 0, 0, 0, 732, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 353, 354, 355, 356, 758, 0,
      /* 42521 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 673, 674, 0, 0, 0, 0, 0, 0, 0, 794, 795, 0, 0, 0, 0, 795, 0, 0,
      /* 42552 */ 0, 0, 0, 795, 0, 0, 794, 809, 0, 803, 0, 657, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3117056, 0, 0, 0, 0,
      /* 42581 */ 820, 0, 0, 0, 0, 0, 0, 795, 0, 0, 0, 0, 0, 0, 0, 0, 1159168, 364, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 795,
      /* 42610 */ 534, 534, 839, 534, 534, 534, 534, 857, 534, 534, 534, 534, 534, 534, 1728, 534, 534, 534, 534, 534,
      /* 42630 */ 534, 534, 534, 534, 534, 3272, 534, 534, 534, 3273, 3274, 534, 534, 877, 879, 534, 534, 890, 534, 534,
      /* 42650 */ 534, 534, 556, 556, 906, 912, 556, 556, 556, 556, 580, 580, 580, 580, 580, 1066, 0, 1543, 0, 0, 0, 1549,
      /* 42672 */ 556, 556, 556, 930, 556, 556, 556, 556, 556, 950, 952, 556, 556, 963, 556, 556, 556, 556, 556, 1840,
      /* 42692 */ 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 1831, 556, 556, 556, 556, 1835, 580, 1024, 1026, 580,
      /* 42712 */ 580, 1037, 580, 580, 580, 580, 0, 0, 0, 534, 580, 556, 556, 556, 556, 580, 580, 580, 580, 580, 1066,
      /* 42733 */ 1540, 0, 0, 0, 1546, 0, 0, 0, 0, 0, 131072, 0, 131072, 131072, 131072, 131072, 0, 131072, 131072,
      /* 42752 */ 131072, 131072, 131072, 131072, 0, 0, 0, 0, 0, 131072, 0, 131072, 1, 12290, 839, 879, 534, 890, 534,
      /* 42771 */ 912, 952, 556, 963, 556, 0, 986, 1026, 580, 1037, 580, 580, 580, 580, 2005, 0, 2007, 0, 2009, 0, 2011,
      /* 42792 */ 0, 0, 2397, 0, 0, 0, 0, 0, 330, 331, 332, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2083, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 42823 */ 0, 0, 2731, 0, 0, 0, 0, 0, 0, 1132, 364, 364, 0, 0, 1135, 0, 0, 0, 1138, 0, 1140, 0, 0, 0, 0, 556, 556,
      /* 42850 */ 556, 556, 556, 556, 556, 2556, 556, 556, 556, 556, 556, 556, 2577, 556, 556, 556, 556, 556, 556, 556,
      /* 42870 */ 556, 556, 26009, 1897, 580, 580, 580, 580, 580, 580, 1142, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1156,
      /* 42895 */ 0, 0, 0, 0, 556, 556, 556, 556, 556, 556, 2555, 556, 556, 556, 556, 2559, 1158, 0, 0, 0, 0, 1163, 0, 0,
      /* 42919 */ 0, 0, 1168, 0, 0, 0, 0, 0, 0, 0, 69632, 73728, 0, 0, 0, 0, 0, 65536, 0, 0, 0, 0, 0, 1247, 0, 0, 0, 0, 0,
      /* 42948 */ 0, 0, 1168, 534, 534, 534, 534, 534, 534, 1743, 534, 534, 534, 534, 534, 534, 534, 534, 534, 897, 534,
      /* 42969 */ 556, 556, 556, 556, 914, 534, 534, 534, 1286, 1288, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534,
      /* 42989 */ 534, 556, 556, 907, 556, 556, 534, 534, 534, 1341, 901, 556, 556, 556, 556, 1348, 556, 556, 556, 556,
      /* 43009 */ 556, 556, 0, 2298, 580, 580, 580, 580, 580, 580, 580, 580, 2640, 580, 580, 580, 580, 580, 580, 2645,
      /* 43029 */ 580, 580, 580, 1440, 580, 580, 580, 580, 580, 580, 580, 580, 580, 580, 580, 580, 2670, 2671, 580, 580,
      /* 43049 */ 1494, 580, 580, 580, 580, 580, 580, 580, 1508, 580, 580, 580, 580, 580, 580, 580, 2678, 580, 580, 580,
      /* 43069 */ 580, 534, 580, 556, 534, 534, 534, 1996, 556, 556, 556, 2000, 580, 580, 1519, 1520, 580, 580, 580, 0,
      /* 43089 */ 534, 580, 556, 534, 1528, 534, 534, 1531, 556, 556, 556, 556, 580, 580, 580, 580, 580, 1066, 1541, 0, 0,
      /* 43110 */ 0, 1547, 0, 0, 0, 0, 556, 556, 556, 2553, 556, 2554, 556, 556, 556, 556, 556, 556, 0, 0, 580, 580, 580,
      /* 43133 */ 580, 2863, 580, 580, 580, 1532, 556, 556, 1535, 580, 1536, 580, 580, 1539, 1066, 0, 0, 0, 0, 0, 0, 0,
      /* 43155 */ 1577, 0, 0, 0, 0, 0, 0, 0, 0, 0, 770, 0, 0, 0, 0, 0, 0, 0, 0, 1617, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 43187 */ 0, 1203, 0, 0, 0, 0, 1633, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1217, 0, 0, 0, 0, 0, 0, 1658, 0, 0, 0,
      /* 43218 */ 0, 0, 0, 0, 0, 0, 0, 0, 364, 364, 364, 0, 0, 0, 0, 1698, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1226, 0,
      /* 43249 */ 0, 534, 1738, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 2207, 2549, 534,
      /* 43269 */ 534, 534, 1788, 534, 534, 534, 534, 1794, 534, 534, 534, 1341, 0, 556, 556, 556, 556, 556, 1891, 556,
      /* 43289 */ 556, 26009, 1896, 580, 580, 580, 580, 580, 580, 1470, 1472, 580, 580, 580, 580, 580, 580, 580, 580,
      /* 43308 */ 1960, 580, 580, 1963, 580, 580, 580, 580, 556, 556, 1870, 556, 556, 556, 1875, 556, 556, 556, 556, 556,
      /* 43328 */ 556, 556, 556, 1884, 556, 556, 556, 556, 1890, 556, 556, 556, 26009, 0, 580, 580, 580, 580, 580, 580,
      /* 43348 */ 1927, 580, 580, 580, 580, 1931, 580, 580, 580, 580, 580, 1904, 580, 580, 580, 580, 580, 580, 580, 580,
      /* 43368 */ 580, 580, 580, 580, 580, 580, 2672, 580, 580, 580, 1971, 580, 580, 580, 580, 580, 580, 580, 580, 1980,
      /* 43388 */ 580, 580, 580, 580, 580, 1504, 580, 580, 580, 580, 580, 580, 580, 580, 580, 580, 2316, 580, 580, 2320,
      /* 43408 */ 580, 580, 1986, 580, 580, 580, 534, 580, 556, 534, 534, 534, 534, 556, 556, 556, 556, 580, 580, 580,
      /* 43428 */ 580, 0, 0, 0, 2693, 0, 0, 0, 0, 0, 2099, 0, 2101, 2102, 2103, 0, 2105, 0, 0, 0, 0, 0, 0, 0, 69632,
      /* 43453 */ 73728, 0, 0, 0, 0, 424, 65536, 0, 0, 0, 0, 2123, 0, 0, 0, 0, 0, 0, 0, 2129, 534, 534, 534, 534, 0, 2211,
      /* 43479 */ 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 3045, 556, 556, 556, 556, 556, 534, 534, 2136, 534,
      /* 43499 */ 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 1333, 534, 534, 534, 534, 534, 2166, 534,
      /* 43519 */ 2168, 534, 2171, 534, 534, 534, 534, 534, 534, 534, 534, 534, 3271, 534, 534, 534, 534, 534, 534, 534,
      /* 43539 */ 534, 534, 534, 2178, 534, 534, 534, 534, 534, 2184, 534, 534, 534, 534, 534, 534, 534, 2792, 534, 534,
      /* 43559 */ 534, 534, 534, 534, 534, 534, 534, 2519, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 2206, 0, 0,
      /* 43580 */ 0, 0, 2213, 556, 556, 556, 556, 556, 556, 939, 556, 944, 556, 951, 556, 954, 556, 556, 968, 556, 2221,
      /* 43601 */ 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 1415, 556, 556, 556, 2251, 556,
      /* 43621 */ 2253, 556, 2256, 556, 556, 556, 556, 556, 556, 556, 556, 556, 2607, 556, 556, 556, 2610, 556, 556, 556,
      /* 43641 */ 556, 556, 2264, 556, 556, 556, 556, 556, 2270, 556, 556, 556, 556, 556, 556, 1369, 556, 556, 556, 1374,
      /* 43661 */ 556, 556, 556, 556, 556, 556, 556, 556, 556, 2293, 0, 0, 0, 0, 2300, 580, 580, 580, 580, 580, 580, 1942,
      /* 43683 */ 580, 580, 580, 1947, 580, 580, 580, 580, 580, 580, 2308, 580, 580, 580, 580, 580, 580, 580, 580, 580,
      /* 43703 */ 580, 580, 580, 580, 580, 2880, 580, 580, 580, 2338, 580, 2340, 580, 2343, 580, 580, 580, 580, 580, 580,
      /* 43723 */ 580, 580, 580, 1961, 580, 580, 580, 580, 580, 580, 580, 580, 580, 2351, 580, 580, 580, 580, 580, 2357,
      /* 43743 */ 580, 580, 580, 580, 580, 580, 1958, 1959, 580, 580, 580, 580, 580, 580, 580, 580, 580, 3234, 580, 580,
      /* 43763 */ 580, 534, 580, 556, 0, 0, 2400, 2401, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 399, 0, 0, 0, 2436, 0, 0,
      /* 43790 */ 2439, 0, 0, 0, 0, 2443, 0, 0, 0, 0, 0, 0, 0, 0, 2818048, 2846720, 0, 2916352, 0, 0, 3002368, 0, 0, 0,
      /* 43814 */ 2451, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2459, 0, 0, 0, 0, 556, 556, 2552, 556, 556, 556, 556, 556, 556,
      /* 43840 */ 556, 556, 556, 2851, 556, 556, 556, 556, 556, 556, 0, 0, 0, 2477, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2485, 0, 0,
      /* 43866 */ 0, 0, 0, 1195, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 111044, 0, 0, 0, 0, 534, 534, 534, 534, 534, 2503, 534,
      /* 43893 */ 534, 534, 534, 534, 534, 534, 534, 534, 534, 2520, 534, 534, 534, 534, 534, 556, 556, 556, 556, 2562,
      /* 43913 */ 556, 556, 556, 556, 556, 2567, 556, 556, 556, 556, 556, 0, 0, 0, 0, 580, 580, 580, 580, 2304, 580, 580,
      /* 43935 */ 580, 2633, 580, 580, 580, 580, 580, 580, 580, 580, 580, 580, 580, 580, 580, 580, 2901, 580, 534, 534,
      /* 43955 */ 534, 2686, 556, 556, 556, 2688, 580, 580, 580, 2690, 2691, 0, 0, 0, 0, 0, 0, 2453, 0, 0, 0, 0, 0, 0, 0,
      /* 43980 */ 0, 0, 0, 1185, 0, 0, 0, 0, 0, 0, 0, 0, 2709, 0, 2710, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1159168, 0, 0, 0,
      /* 44010 */ 0, 2855, 556, 556, 556, 556, 556, 0, 0, 580, 580, 580, 580, 580, 2864, 580, 2865, 580, 580, 2904, 580,
      /* 44031 */ 580, 580, 580, 580, 534, 580, 556, 534, 534, 556, 556, 580, 580, 0, 0, 0, 3113, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 44056 */ 254407, 254407, 254407, 254407, 254407, 254407, 254407, 254407, 1, 12290, 556, 556, 556, 3053, 556, 556,
      /* 44072 */ 556, 556, 556, 556, 556, 580, 3061, 580, 580, 580, 580, 580, 2649, 580, 580, 580, 580, 580, 580, 580,
      /* 44092 */ 580, 580, 580, 2371, 580, 580, 580, 580, 580, 580, 580, 580, 580, 3095, 580, 580, 580, 580, 580, 580,
      /* 44112 */ 580, 534, 580, 556, 534, 534, 2386, 2387, 556, 556, 2390, 2391, 534, 534, 3338, 534, 534, 534, 534, 534,
      /* 44132 */ 534, 534, 534, 534, 3347, 534, 534, 3349, 556, 556, 556, 556, 3353, 556, 556, 556, 556, 556, 556, 556,
      /* 44152 */ 556, 556, 3362, 556, 556, 556, 556, 580, 580, 580, 580, 580, 3427, 580, 580, 580, 3431, 580, 580, 580,
      /* 44172 */ 580, 1031, 580, 580, 580, 580, 580, 0, 0, 0, 534, 580, 556, 556, 556, 3365, 580, 580, 580, 580, 3369,
      /* 44193 */ 580, 580, 580, 580, 580, 580, 580, 580, 2356, 580, 580, 580, 580, 580, 580, 580, 580, 3378, 580, 580,
      /* 44213 */ 580, 534, 556, 580, 0, 0, 0, 0, 0, 0, 0, 0, 402, 0, 0, 0, 0, 0, 0, 0, 534, 534, 534, 3449, 534, 534,
      /* 44239 */ 534, 534, 534, 534, 534, 534, 534, 556, 556, 556, 3179, 556, 556, 556, 556, 556, 3462, 556, 556, 556,
      /* 44259 */ 556, 556, 556, 556, 556, 556, 556, 580, 580, 580, 3300, 580, 580, 580, 3303, 580, 580, 580, 580, 580,
      /* 44279 */ 3476, 580, 580, 580, 580, 580, 580, 580, 580, 580, 580, 0, 0, 0, 534, 580, 556, 0, 0, 3491, 0, 534, 534,
      /* 44302 */ 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 3158, 534, 534, 534, 534, 534, 3565, 534, 556, 556,
      /* 44322 */ 556, 556, 556, 3571, 556, 556, 580, 580, 580, 580, 580, 580, 580, 580, 580, 3372, 580, 580, 580, 580,
      /* 44342 */ 580, 580, 3577, 580, 580, 3579, 0, 3581, 534, 534, 534, 534, 534, 534, 556, 556, 556, 556, 556, 2224,
      /* 44362 */ 556, 556, 2227, 556, 556, 556, 556, 556, 556, 2235, 400, 0, 0, 0, 0, 0, 367, 375, 403, 0, 0, 0, 0, 0,
      /* 44386 */ 367, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2054, 408, 410, 0, 0, 367, 375, 0, 69632, 73728, 0, 0,
      /* 44414 */ 0, 0, 426, 65536, 0, 0, 0, 0, 556, 2551, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 2271, 556,
      /* 44436 */ 556, 556, 556, 556, 426, 426, 0, 426, 0, 410, 426, 449, 0, 0, 0, 0, 0, 0, 0, 0, 534, 556, 534, 556, 534,
      /* 44461 */ 534, 556, 534, 367, 0, 0, 395, 0, 0, 0, 0, 0, 350, 0, 0, 367, 0, 0, 395, 0, 408, 0, 490, 490, 0, 490,
      /* 44487 */ 490, 490, 490, 490, 490, 490, 490, 516, 516, 516, 516, 449, 449, 449, 449, 524, 449, 449, 525, 449, 516,
      /* 44508 */ 530, 516, 516, 516, 530, 516, 516, 516, 516, 532, 550, 573, 550, 573, 550, 550, 573, 550, 597, 573, 573,
      /* 44529 */ 573, 573, 573, 573, 573, 597, 597, 597, 550, 597, 597, 597, 597, 597, 597, 597, 573, 573, 611, 616, 597,
      /* 44550 */ 616, 622, 1, 12290, 0, 0, 636, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1567, 1568, 0, 789, 0, 0, 0, 0,
      /* 44578 */ 534, 834, 534, 534, 534, 534, 534, 534, 863, 865, 534, 534, 534, 534, 534, 1790, 1792, 534, 534, 534,
      /* 44598 */ 534, 534, 1341, 0, 556, 556, 0, 580, 580, 580, 983, 987, 580, 580, 580, 580, 580, 580, 1013, 580, 556,
      /* 44619 */ 556, 556, 556, 936, 938, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 2829, 556, 556, 2832, 556,
      /* 44639 */ 556, 78114, 1066, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1083, 0, 0, 0, 0, 0, 1234, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 44669 */ 0, 0, 2050, 0, 0, 0, 0, 1085, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1098, 0, 0, 0, 0, 0, 1235, 0, 0, 0, 0,
      /* 44700 */ 0, 0, 0, 0, 0, 0, 0, 122880, 0, 0, 0, 0, 0, 0, 1116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1581, 1582,
      /* 44730 */ 0, 0, 0, 0, 1085, 1208, 0, 0, 0, 0, 0, 0, 1215, 0, 0, 0, 0, 0, 0, 347, 348, 349, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 44760 */ 282624, 282624, 282624, 282624, 282624, 282624, 282624, 282624, 282624, 0, 0, 0, 1220, 0, 0, 0, 0, 0, 0,
      /* 44779 */ 0, 0, 0, 0, 1220, 1229, 534, 534, 534, 1259, 534, 534, 534, 1263, 534, 534, 1274, 534, 534, 1278, 534,
      /* 44800 */ 534, 534, 534, 534, 534, 3001, 534, 534, 534, 534, 534, 534, 534, 534, 534, 1327, 534, 534, 534, 534,
      /* 44820 */ 534, 534, 534, 1299, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 2497, 534,
      /* 44840 */ 534, 534, 534, 1341, 901, 556, 556, 556, 556, 556, 556, 556, 1351, 556, 556, 556, 556, 556, 1423, 556,
      /* 44860 */ 556, 556, 1430, 556, 556, 26009, 1341, 975, 580, 1355, 556, 556, 1366, 556, 556, 1370, 556, 556, 556,
      /* 44879 */ 556, 556, 556, 556, 556, 556, 2828, 556, 556, 556, 556, 556, 556, 1462, 580, 580, 580, 580, 580, 580,
      /* 44899 */ 580, 580, 580, 580, 580, 580, 580, 580, 580, 3315, 580, 1479, 580, 580, 580, 1483, 580, 580, 580, 580,
      /* 44919 */ 580, 580, 580, 580, 580, 580, 580, 2877, 580, 580, 580, 580, 0, 1571, 1572, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 44943 */ 0, 0, 0, 0, 1612, 0, 0, 0, 0, 0, 0, 1603, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 364, 364, 364, 0, 696, 0,
      /* 44972 */ 1616, 0, 1618, 0, 0, 0, 1622, 0, 0, 0, 1626, 0, 0, 0, 1630, 0, 0, 0, 0, 1572, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 45001 */ 0, 0, 364, 364, 364, 695, 0, 534, 534, 534, 1724, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534,
      /* 45023 */ 534, 1782, 1783, 534, 534, 556, 1837, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556,
      /* 45043 */ 556, 1818, 556, 556, 556, 556, 1889, 556, 556, 556, 556, 26009, 0, 580, 580, 580, 580, 580, 580, 1976,
      /* 45063 */ 580, 580, 580, 580, 580, 1981, 580, 580, 580, 0, 0, 0, 2031, 0, 2032, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 45089 */ 2200246, 151552, 2200246, 0, 0, 2175, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 2186, 534,
      /* 45108 */ 534, 534, 534, 534, 534, 1758, 534, 534, 534, 534, 1764, 534, 534, 534, 534, 0, 0, 556, 556, 556, 556,
      /* 45129 */ 2814, 556, 556, 556, 556, 556, 0, 0, 0, 0, 580, 2301, 580, 580, 580, 580, 580, 1038, 580, 580, 580, 580,
      /* 45151 */ 0, 0, 0, 534, 580, 556, 580, 580, 2394, 2395, 0, 1544, 0, 1550, 0, 1556, 0, 1562, 0, 0, 0, 0, 0, 0, 374,
      /* 45176 */ 0, 0, 0, 0, 0, 0, 0, 359, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2052, 0, 0, 2476, 0, 0, 0, 0, 0, 0, 0,
      /* 45208 */ 0, 0, 2482, 0, 0, 0, 0, 0, 0, 0, 69632, 73728, 0, 0, 0, 345, 344, 65536, 343, 534, 534, 534, 534, 2530,
      /* 45232 */ 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 1275, 534, 534, 534, 534, 580, 2661, 580, 580,
      /* 45252 */ 580, 580, 580, 580, 580, 580, 580, 580, 580, 580, 580, 580, 3075, 580, 580, 0, 0, 2722, 0, 0, 0, 0, 0,
      /* 45275 */ 0, 0, 0, 0, 0, 0, 0, 0, 1665, 0, 0, 534, 2797, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534,
      /* 45299 */ 534, 534, 534, 2511, 534, 556, 556, 2845, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556,
      /* 45319 */ 556, 2259, 556, 556, 0, 0, 2970, 0, 0, 0, 0, 0, 0, 0, 0, 534, 534, 534, 534, 534, 534, 855, 534, 534,
      /* 45343 */ 534, 534, 0, 0, 0, 0, 3122, 3123, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2424832, 2433024, 0, 0, 2457600,
      /* 45367 */ 3149, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 1737, 3172, 534, 534,
      /* 45387 */ 534, 534, 534, 534, 534, 534, 556, 556, 556, 556, 556, 556, 556, 2242, 556, 556, 556, 556, 556, 556,
      /* 45407 */ 556, 556, 1406, 556, 556, 556, 556, 556, 556, 556, 580, 580, 580, 3229, 580, 580, 580, 580, 580, 580,
      /* 45427 */ 580, 580, 580, 534, 580, 556, 556, 556, 556, 580, 580, 580, 580, 3426, 580, 580, 580, 580, 580, 580,
      /* 45447 */ 580, 2639, 580, 580, 580, 580, 580, 580, 580, 580, 580, 2344, 580, 580, 580, 580, 580, 580, 534, 3236,
      /* 45467 */ 556, 3238, 580, 3240, 3241, 0, 0, 0, 0, 3245, 0, 0, 0, 0, 0, 0, 640, 0, 0, 0, 0, 0, 0, 0, 0, 0, 323,
      /* 45494 */ 397, 0, 0, 0, 323, 0, 0, 0, 3258, 0, 0, 0, 0, 0, 0, 0, 0, 3261, 0, 534, 534, 534, 534, 534, 534, 534,
      /* 45520 */ 3154, 3155, 534, 534, 534, 534, 3159, 3160, 3263, 534, 534, 534, 3266, 534, 534, 534, 534, 534, 534,
      /* 45539 */ 534, 534, 534, 534, 534, 1330, 534, 534, 534, 534, 580, 580, 3318, 534, 3319, 556, 3320, 580, 0, 0, 0,
      /* 45560 */ 0, 0, 0, 0, 0, 543, 566, 543, 566, 543, 543, 566, 543, 556, 556, 3543, 556, 3544, 556, 556, 556, 556,
      /* 45582 */ 556, 556, 556, 556, 580, 580, 3551, 580, 3552, 580, 580, 580, 580, 580, 580, 580, 580, 0, 0, 0, 0, 534,
      /* 45604 */ 534, 3536, 534, 3537, 534, 534, 534, 534, 534, 534, 534, 1730, 534, 534, 534, 534, 534, 534, 534, 534,
      /* 45624 */ 534, 2183, 534, 534, 534, 534, 534, 534, 409, 355, 0, 0, 0, 0, 0, 69632, 73728, 0, 0, 0, 0, 0, 65536, 0,
      /* 45648 */ 0, 0, 0, 638, 0, 0, 641, 642, 0, 0, 0, 0, 0, 0, 0, 0, 1591, 0, 0, 1594, 0, 0, 0, 0, 466, 477, 466, 0, 0,
      /* 45677 */ 466, 0, 0, 0, 0, 0, 0, 0, 0, 517, 517, 521, 521, 521, 521, 466, 466, 466, 466, 466, 466, 466, 471, 466,
      /* 45701 */ 521, 517, 521, 521, 517, 521, 521, 521, 521, 533, 551, 574, 551, 574, 551, 551, 574, 551, 598, 574, 574,
      /* 45722 */ 574, 574, 574, 574, 574, 598, 598, 598, 551, 598, 598, 598, 598, 598, 598, 598, 574, 574, 612, 617, 598,
      /* 45743 */ 617, 623, 1, 12290, 0, 0, 731, 0, 0, 0, 637, 731, 0, 737, 738, 637, 0, 0, 0, 0, 0, 0, 656, 0, 0, 659,
      /* 45769 */ 660, 0, 0, 0, 0, 0, 0, 0, 2754, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2420, 0, 0, 0, 0, 0, 0, 777, 0, 0, 0, 0, 0,
      /* 45800 */ 0, 0, 0, 0, 0, 786, 0, 791, 0, 0, 0, 0, 0, 1575, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 303, 303, 0, 0, 0, 0, 0,
      /* 45831 */ 0, 0, 0, 791, 0, 0, 0, 0, 0, 0, 791, 0, 0, 0, 0, 0, 0, 672, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 45864 */ 2016, 0, 0, 0, 0, 806, 0, 0, 0, 0, 0, 637, 0, 0, 0, 0, 0, 0, 0, 69632, 73728, 0, 0, 0, 349, 347, 65536,
      /* 45891 */ 0, 0, 0, 0, 777, 0, 0, 0, 0, 0, 0, 0, 777, 777, 0, 637, 0, 0, 0, 786, 0, 791, 0, 777, 0, 806, 0, 0, 0,
      /* 45920 */ 658, 0, 777, 791, 829, 0, 534, 835, 534, 534, 534, 534, 854, 858, 864, 534, 869, 556, 556, 927, 931,
      /* 45941 */ 937, 556, 942, 556, 556, 556, 556, 556, 959, 556, 556, 556, 556, 556, 1424, 556, 556, 556, 556, 556,
      /* 45961 */ 556, 26009, 1341, 975, 580, 534, 534, 886, 534, 534, 556, 556, 959, 556, 556, 0, 580, 580, 1033, 580,
      /* 45981 */ 580, 580, 580, 1033, 580, 580, 580, 580, 580, 0, 0, 0, 534, 580, 556, 0, 1086, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 46006 */ 0, 0, 0, 0, 0, 0, 2449, 0, 0, 0, 0, 1103, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1113, 0, 0, 0, 1117, 1118, 0,
      /* 46036 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 364, 364, 208896, 0, 0, 0, 0, 0, 0, 1179, 0, 1182, 0, 0, 0, 0, 0, 1187, 0,
      /* 46065 */ 0, 0, 0, 0, 0, 2726, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 784, 0, 0, 0, 0, 0, 0, 0, 0, 1205, 0, 0, 1086, 0, 0,
      /* 46096 */ 0, 1211, 0, 1213, 0, 0, 0, 0, 0, 0, 0, 1638, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1123, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 46127 */ 1221, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1227, 0, 0, 0, 0, 654, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2964,
      /* 46157 */ 2965, 0, 0, 1230, 1187, 0, 1211, 1233, 0, 1236, 0, 0, 0, 0, 0, 1117, 0, 0, 0, 0, 0, 0, 2739, 0, 0, 0, 0,
      /* 46184 */ 2744, 0, 0, 0, 0, 0, 0, 299, 0, 0, 0, 303, 2424832, 2433024, 0, 0, 2457600, 0, 1245, 0, 0, 0, 0, 0,
      /* 46208 */ 1245, 0, 0, 1136, 1245, 0, 1252, 534, 534, 534, 534, 534, 534, 3279, 534, 556, 556, 556, 556, 556, 556,
      /* 46229 */ 556, 556, 556, 556, 3514, 556, 556, 556, 580, 534, 534, 1258, 534, 534, 534, 534, 1264, 534, 534, 534,
      /* 46249 */ 534, 534, 534, 534, 534, 534, 3455, 534, 534, 3457, 556, 556, 556, 534, 534, 1285, 534, 534, 534, 534,
      /* 46269 */ 534, 534, 534, 534, 534, 534, 1296, 534, 534, 534, 534, 534, 534, 3341, 534, 534, 534, 534, 534, 534,
      /* 46289 */ 534, 534, 556, 580, 3607, 3608, 3609, 534, 556, 580, 534, 556, 580, 0, 0, 0, 0, 0, 0, 333, 0, 0, 333, 0,
      /* 46313 */ 0, 333, 0, 0, 0, 534, 534, 1301, 534, 534, 534, 534, 534, 534, 534, 534, 1308, 534, 534, 534, 1315,
      /* 46334 */ 1317, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 2149, 534, 1339, 534,
      /* 46354 */ 1341, 901, 1343, 556, 556, 556, 556, 556, 1350, 556, 556, 556, 556, 556, 556, 2225, 556, 556, 556, 556,
      /* 46374 */ 556, 556, 556, 556, 556, 2244, 556, 556, 556, 556, 2248, 556, 1356, 556, 556, 556, 556, 556, 556, 556,
      /* 46394 */ 556, 556, 556, 1377, 556, 556, 556, 556, 556, 556, 2241, 556, 2243, 556, 556, 556, 556, 556, 556, 556,
      /* 46414 */ 1425, 556, 556, 556, 556, 556, 26009, 1341, 975, 580, 556, 556, 556, 556, 1400, 556, 556, 556, 1407,
      /* 46433 */ 1409, 556, 556, 556, 556, 556, 556, 1386, 556, 556, 556, 556, 556, 556, 556, 1395, 556, 1480, 580, 580,
      /* 46453 */ 580, 580, 1485, 580, 580, 580, 580, 580, 580, 580, 580, 1492, 580, 580, 580, 580, 2352, 580, 580, 580,
      /* 46473 */ 580, 580, 580, 580, 580, 580, 580, 580, 2628, 580, 580, 580, 580, 580, 580, 1499, 1501, 580, 580, 580,
      /* 46493 */ 580, 580, 580, 580, 580, 580, 580, 580, 580, 2878, 580, 580, 2881, 1550, 0, 0, 0, 1556, 0, 0, 0, 1562,
      /* 46515 */ 0, 0, 0, 0, 0, 0, 0, 0, 2957312, 0, 0, 0, 0, 0, 0, 0, 0, 1150, 0, 0, 0, 0, 0, 0, 0, 0, 1166, 0, 0, 0, 0,
      /* 46546 */ 0, 0, 0, 0, 1179, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2094, 0, 0, 0, 1573, 1574, 0, 0, 0, 0, 0, 1580, 0,
      /* 46576 */ 0, 0, 0, 0, 0, 0, 69632, 73728, 0, 0, 0, 373, 0, 65536, 0, 0, 0, 1601, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 46605 */ 0, 0, 1677, 0, 0, 0, 0, 0, 0, 1619, 0, 0, 0, 0, 0, 0, 0, 1627, 1628, 0, 0, 0, 0, 0, 1604, 0, 0, 0, 0, 0,
      /* 46635 */ 0, 0, 0, 0, 0, 0, 254407, 0, 0, 0, 0, 0, 0, 0, 0, 1635, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 382, 0, 0, 0,
      /* 46666 */ 386, 0, 0, 0, 1685, 0, 0, 0, 0, 0, 1689, 0, 0, 1692, 0, 0, 0, 0, 0, 0, 3143, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 46696 */ 0, 2756, 0, 0, 2759, 0, 0, 0, 0, 0, 0, 1689, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1705, 0, 1707, 1681, 534,
      /* 46723 */ 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 1719, 534, 534, 534, 534, 534, 1791, 534, 534, 534,
      /* 46743 */ 534, 534, 534, 1341, 0, 556, 556, 556, 556, 556, 2295, 0, 0, 0, 580, 580, 580, 580, 580, 580, 580, 2666,
      /* 46765 */ 580, 580, 580, 580, 580, 580, 580, 580, 580, 1446, 580, 580, 580, 580, 580, 580, 534, 534, 534, 1725,
      /* 46785 */ 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 1736, 534, 534, 534, 534, 534, 2179, 534, 534, 534,
      /* 46805 */ 534, 534, 534, 534, 534, 534, 534, 2143, 534, 2145, 534, 534, 534, 534, 534, 534, 1740, 534, 534, 534,
      /* 46825 */ 534, 534, 534, 534, 534, 534, 534, 1751, 534, 534, 534, 534, 534, 2207, 0, 0, 0, 556, 556, 556, 556,
      /* 46846 */ 556, 556, 556, 1403, 556, 556, 556, 556, 556, 556, 556, 556, 1408, 556, 556, 556, 556, 556, 556, 556,
      /* 46866 */ 534, 534, 1756, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 2172, 534, 534, 2002,
      /* 46886 */ 580, 580, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 696, 0, 0, 2019, 2020, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 46917 */ 0, 0, 0, 662, 0, 0, 0, 2055, 2056, 0, 0, 2058, 2059, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2617344, 0, 0, 0,
      /* 46945 */ 0, 2081, 0, 0, 0, 0, 2084, 2085, 0, 0, 0, 0, 0, 2091, 0, 0, 0, 0, 0, 0, 3259, 0, 0, 0, 0, 0, 0, 534,
      /* 46973 */ 534, 534, 534, 534, 849, 534, 534, 534, 534, 534, 534, 534, 2152, 534, 534, 534, 534, 534, 534, 534,
      /* 46993 */ 534, 534, 534, 2161, 534, 534, 534, 534, 534, 534, 3452, 534, 3454, 534, 534, 3456, 534, 556, 556, 556,
      /* 47013 */ 556, 3509, 556, 556, 556, 556, 556, 556, 556, 556, 556, 580, 580, 580, 580, 580, 580, 0, 0, 0, 3595,
      /* 47034 */ 534, 534, 2164, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 2174, 534,
      /* 47054 */ 534, 534, 2191, 534, 534, 534, 2194, 534, 534, 534, 534, 2199, 534, 534, 534, 534, 534, 534, 1759, 534,
      /* 47074 */ 534, 534, 534, 534, 534, 534, 534, 534, 1732, 534, 534, 534, 534, 534, 534, 556, 2237, 556, 556, 556,
      /* 47094 */ 556, 556, 556, 556, 556, 556, 556, 2246, 556, 556, 2249, 556, 556, 2277, 556, 556, 556, 556, 2281, 556,
      /* 47114 */ 556, 556, 556, 2286, 556, 556, 556, 556, 556, 1808, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556,
      /* 47134 */ 2608, 556, 556, 556, 556, 556, 580, 2324, 580, 580, 580, 580, 580, 580, 580, 580, 580, 580, 2333, 580,
      /* 47154 */ 580, 2336, 580, 580, 2364, 580, 580, 580, 580, 2368, 580, 580, 580, 580, 2373, 580, 580, 580, 580, 580,
      /* 47174 */ 2665, 580, 580, 580, 580, 580, 580, 580, 580, 580, 580, 1979, 580, 580, 580, 580, 580, 2398, 0, 0, 0, 0,
      /* 47196 */ 0, 0, 0, 0, 0, 0, 2408, 0, 0, 0, 0, 0, 0, 687, 0, 0, 0, 770, 0, 0, 0, 0, 789, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 47228 */ 0, 176128, 176128, 176128, 176128, 176128, 176128, 176128, 176128, 534, 534, 2488, 534, 534, 534, 534,
      /* 47244 */ 534, 534, 534, 534, 534, 534, 2496, 534, 534, 534, 534, 534, 882, 534, 534, 534, 534, 534, 556, 556,
      /* 47264 */ 556, 556, 556, 3411, 556, 556, 556, 3415, 556, 556, 534, 534, 2514, 534, 534, 2516, 534, 2517, 534, 534,
      /* 47284 */ 534, 534, 534, 534, 534, 2524, 534, 534, 2528, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534,
      /* 47304 */ 534, 2539, 556, 556, 2560, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 3472, 580,
      /* 47324 */ 580, 556, 556, 556, 2575, 556, 556, 556, 2578, 556, 556, 2580, 556, 2581, 556, 556, 556, 556, 556, 1827,
      /* 47344 */ 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 1814, 556, 556, 556, 556, 1820, 580, 2646, 580, 2647,
      /* 47364 */ 580, 580, 580, 580, 580, 580, 580, 580, 2655, 580, 580, 2659, 0, 2696, 2697, 0, 0, 2700, 2701, 0, 0, 0,
      /* 47386 */ 0, 0, 0, 0, 0, 0, 0, 3178496, 2670592, 0, 2744320, 0, 0, 2772, 534, 2775, 534, 534, 534, 534, 2780, 534,
      /* 47408 */ 534, 534, 2783, 534, 534, 534, 534, 534, 534, 534, 3002, 3003, 534, 534, 534, 534, 534, 534, 534, 534,
      /* 47428 */ 2494, 534, 534, 534, 534, 534, 534, 534, 534, 1744, 534, 534, 534, 1748, 534, 534, 1753, 2808, 534, 534,
      /* 47448 */ 534, 0, 0, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 3358, 556, 556, 556, 556, 556, 2819, 556,
      /* 47469 */ 2822, 556, 556, 556, 556, 2827, 556, 556, 556, 2830, 556, 556, 556, 556, 556, 556, 2255, 556, 556, 556,
      /* 47489 */ 556, 556, 556, 556, 556, 556, 2228, 556, 2230, 556, 556, 556, 556, 556, 556, 2857, 556, 556, 556, 0, 0,
      /* 47510 */ 580, 580, 580, 580, 580, 580, 580, 580, 2652, 580, 580, 580, 580, 580, 580, 580, 580, 580, 2868, 580,
      /* 47530 */ 2871, 580, 580, 580, 580, 2876, 580, 580, 580, 2879, 580, 580, 580, 580, 1034, 580, 580, 580, 580, 580,
      /* 47550 */ 0, 0, 0, 534, 580, 556, 580, 580, 580, 580, 2906, 580, 580, 580, 534, 580, 556, 534, 534, 556, 556, 580,
      /* 47572 */ 580, 0, 0, 3112, 0, 3114, 0, 0, 0, 3118, 0, 0, 534, 534, 534, 534, 3013, 534, 534, 534, 534, 534, 556,
      /* 47595 */ 556, 556, 3021, 556, 556, 556, 556, 556, 2266, 2267, 556, 556, 556, 556, 556, 556, 2274, 556, 556, 0,
      /* 47615 */ 580, 580, 580, 580, 580, 580, 994, 580, 580, 1008, 580, 580, 580, 580, 580, 2341, 580, 580, 580, 580,
      /* 47635 */ 580, 580, 580, 580, 580, 580, 0, 0, 733, 534, 580, 556, 0, 0, 3121, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 47662 */ 0, 1693, 0, 0, 534, 3173, 534, 534, 534, 534, 534, 534, 534, 556, 556, 556, 556, 556, 556, 556, 2839,
      /* 47683 */ 556, 556, 556, 556, 556, 556, 556, 556, 1811, 556, 556, 556, 556, 556, 556, 556, 556, 556, 3183, 556,
      /* 47703 */ 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 3033, 556, 556, 556, 556, 3193, 556, 556,
      /* 47723 */ 556, 556, 556, 556, 3199, 556, 3201, 556, 556, 556, 556, 556, 0, 0, 0, 0, 580, 580, 580, 2303, 580,
      /* 47744 */ 2305, 580, 580, 580, 3228, 580, 3230, 580, 580, 580, 580, 580, 580, 580, 580, 534, 580, 556, 556, 556,
      /* 47764 */ 556, 580, 3423, 580, 3425, 580, 580, 580, 580, 580, 580, 580, 580, 580, 2888, 580, 580, 580, 580, 580,
      /* 47784 */ 580, 0, 0, 0, 3248, 0, 0, 0, 0, 0, 0, 0, 3132, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3334, 534, 534, 0, 3257, 0, 0,
      /* 47813 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 534, 534, 534, 534, 2982, 534, 534, 3264, 534, 534, 534, 3268, 534, 534, 534,
      /* 47837 */ 534, 534, 534, 534, 534, 534, 1328, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 3277, 534, 534,
      /* 47857 */ 534, 556, 556, 556, 556, 556, 3282, 556, 556, 556, 556, 556, 2294, 0, 0, 0, 580, 580, 580, 580, 580,
      /* 47878 */ 580, 580, 580, 3482, 580, 580, 3484, 580, 0, 0, 0, 556, 3286, 556, 556, 556, 556, 556, 556, 556, 556,
      /* 47899 */ 556, 556, 556, 556, 556, 556, 1883, 556, 3295, 556, 556, 556, 556, 580, 580, 580, 580, 580, 3301, 580,
      /* 47919 */ 580, 580, 3305, 580, 580, 580, 580, 2380, 534, 580, 556, 534, 534, 534, 534, 556, 556, 556, 556, 580,
      /* 47939 */ 580, 580, 580, 0, 534, 3601, 556, 3602, 580, 3603, 3489, 0, 0, 0, 534, 534, 534, 3496, 534, 534, 534,
      /* 47960 */ 534, 534, 534, 534, 534, 1265, 534, 534, 534, 534, 534, 534, 534, 3504, 556, 556, 556, 3508, 556, 556,
      /* 47980 */ 556, 556, 556, 556, 556, 556, 3516, 556, 580, 580, 580, 580, 2624, 580, 580, 580, 580, 580, 580, 580,
      /* 48000 */ 580, 580, 580, 580, 1475, 580, 580, 580, 580, 580, 580, 3521, 580, 580, 580, 580, 580, 580, 580, 580,
      /* 48020 */ 3529, 580, 0, 0, 0, 0, 0, 0, 122880, 122880, 122880, 122880, 122880, 0, 122880, 0, 2105631, 12290, 0,
      /* 48039 */ 3532, 0, 3534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 3540, 3541, 534, 534, 534, 534, 534, 2208,
      /* 48059 */ 0, 0, 0, 556, 556, 556, 556, 556, 556, 556, 1387, 556, 556, 556, 1391, 556, 556, 556, 556, 556, 357,
      /* 48080 */ 358, 0, 0, 0, 0, 0, 0, 0, 364, 0, 292, 0, 0, 0, 0, 0, 0, 688, 0, 0, 0, 0, 364, 364, 364, 0, 0, 0, 0, 0,
      /* 48110 */ 391, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 722, 0, 735, 654, 467, 467, 481, 0, 0, 481, 358, 358, 358, 503,
      /* 48137 */ 358, 358, 358, 358, 467, 467, 599, 575, 575, 575, 575, 575, 575, 575, 599, 599, 599, 552, 599, 599, 599,
      /* 48158 */ 599, 599, 599, 599, 575, 575, 552, 575, 599, 575, 599, 1, 12290, 556, 556, 928, 556, 556, 556, 556, 556,
      /* 48179 */ 556, 556, 556, 556, 556, 964, 556, 556, 556, 556, 556, 2294, 2615, 0, 0, 0, 0, 580, 580, 580, 580, 580,
      /* 48201 */ 534, 556, 580, 0, 0, 0, 0, 0, 0, 0, 0, 2924, 0, 0, 0, 0, 0, 0, 534, 534, 534, 891, 534, 556, 556, 556,
      /* 48227 */ 964, 556, 0, 580, 580, 580, 1038, 580, 580, 580, 580, 2636, 580, 2638, 580, 580, 580, 580, 2642, 580,
      /* 48247 */ 580, 580, 580, 0, 0, 0, 3440, 0, 0, 0, 3443, 0, 0, 534, 534, 78114, 1066, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 48274 */ 0, 0, 1084, 0, 0, 0, 0, 670, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2432, 0, 0, 0, 1184, 0, 0, 0, 0, 0, 0,
      /* 48305 */ 0, 0, 0, 0, 0, 0, 534, 534, 534, 2132, 2133, 534, 534, 1340, 1341, 901, 556, 556, 556, 556, 556, 556,
      /* 48327 */ 556, 556, 556, 1353, 556, 556, 556, 556, 580, 3590, 580, 580, 580, 580, 0, 0, 0, 534, 534, 534, 534,
      /* 48348 */ 534, 534, 1713, 534, 534, 534, 534, 534, 534, 534, 2140, 534, 534, 534, 534, 534, 534, 534, 534, 534,
      /* 48368 */ 2990, 534, 534, 534, 534, 534, 534, 556, 556, 1362, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556,
      /* 48388 */ 556, 556, 556, 3047, 556, 556, 556, 0, 1551, 0, 0, 0, 1557, 0, 0, 0, 1563, 0, 0, 0, 0, 0, 0, 0, 1650, 0,
      /* 48414 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 172032, 0, 1656, 0, 0, 0, 0, 0, 0, 0, 0, 1662, 0, 1664, 0, 0,
      /* 48444 */ 0, 0, 0, 0, 172032, 172032, 172032, 172032, 172032, 172032, 172032, 172032, 1, 12290, 534, 534, 1771,
      /* 48461 */ 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 2523, 534, 534, 556, 556, 1854, 556,
      /* 48481 */ 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 1866, 556, 556, 556, 556, 932, 556, 556, 556, 556,
      /* 48501 */ 556, 556, 556, 556, 556, 556, 556, 1815, 556, 556, 556, 556, 556, 1887, 556, 556, 556, 556, 556, 556,
      /* 48521 */ 26009, 0, 580, 580, 580, 580, 580, 580, 2312, 580, 580, 580, 580, 580, 580, 580, 580, 580, 1488, 580,
      /* 48541 */ 580, 580, 580, 580, 580, 580, 580, 580, 1924, 580, 580, 580, 580, 580, 580, 580, 580, 580, 580, 580,
      /* 48561 */ 580, 3073, 580, 580, 580, 580, 580, 1937, 580, 580, 580, 580, 580, 580, 580, 580, 580, 580, 580, 1950,
      /* 48581 */ 580, 580, 580, 580, 2648, 580, 580, 580, 580, 580, 580, 580, 580, 2656, 580, 580, 580, 580, 580, 3231,
      /* 48601 */ 580, 580, 580, 580, 580, 580, 580, 534, 580, 556, 580, 580, 580, 1973, 580, 580, 580, 580, 580, 580,
      /* 48621 */ 580, 580, 580, 1983, 580, 580, 580, 580, 1484, 580, 580, 580, 580, 580, 580, 580, 580, 580, 580, 580,
      /* 48641 */ 3222, 580, 580, 580, 580, 0, 0, 0, 2043, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 733, 1171, 0, 0, 534, 2151,
      /* 48668 */ 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 2795, 534, 2236, 556, 556, 556,
      /* 48688 */ 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 2600, 2323, 580, 580, 580, 580, 580, 580,
      /* 48708 */ 580, 580, 580, 580, 580, 580, 580, 580, 580, 3089, 580, 580, 580, 580, 2622, 580, 580, 580, 580, 580,
      /* 48728 */ 580, 580, 580, 580, 580, 580, 580, 580, 3224, 580, 580, 2695, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 48754 */ 0, 2120, 2734, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2719, 534, 2774, 534, 2776, 534, 534, 534,
      /* 48780 */ 534, 534, 534, 534, 534, 534, 534, 534, 534, 2160, 534, 534, 534, 556, 2821, 556, 2823, 556, 556, 556,
      /* 48800 */ 556, 556, 556, 556, 556, 556, 556, 556, 556, 3190, 556, 556, 556, 580, 580, 580, 2870, 580, 2872, 580,
      /* 48820 */ 580, 580, 580, 580, 580, 580, 580, 580, 580, 2654, 580, 580, 580, 580, 580, 0, 0, 0, 0, 2933, 0, 0, 0,
      /* 48843 */ 0, 0, 0, 0, 0, 0, 0, 0, 534, 534, 534, 2981, 534, 556, 556, 556, 556, 3289, 556, 556, 556, 556, 556,
      /* 48866 */ 556, 556, 556, 556, 556, 556, 3202, 556, 556, 556, 556, 580, 3308, 580, 580, 580, 580, 580, 580, 580,
      /* 48886 */ 580, 580, 580, 580, 580, 580, 580, 3314, 580, 580, 556, 556, 3589, 556, 580, 580, 580, 580, 3593, 580,
      /* 48906 */ 0, 0, 0, 534, 534, 534, 3152, 534, 534, 534, 534, 534, 534, 534, 3157, 534, 534, 534, 0, 0, 359, 0, 0,
      /* 48929 */ 0, 0, 0, 0, 364, 0, 292, 0, 0, 0, 0, 0, 0, 702, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2600960, 0, 0, 2768896,
      /* 48957 */ 2777088, 2781184, 0, 0, 369, 0, 0, 369, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2040, 2041, 0, 600, 576,
      /* 48983 */ 576, 576, 576, 576, 576, 576, 600, 600, 600, 553, 600, 600, 600, 600, 600, 600, 600, 576, 576, 553, 576,
      /* 49004 */ 600, 576, 600, 1, 12290, 556, 923, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556,
      /* 49025 */ 2234, 556, 556, 556, 556, 556, 1367, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 3547, 3548,
      /* 49045 */ 556, 556, 580, 580, 580, 580, 580, 1500, 580, 580, 580, 580, 580, 580, 580, 580, 580, 580, 580, 580,
      /* 49065 */ 580, 3102, 3103, 3104, 534, 1646, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2748, 0, 0, 1684, 0, 0,
      /* 49092 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2065, 0, 0, 580, 580, 580, 1938, 580, 580, 580, 580, 580, 580, 580,
      /* 49117 */ 580, 580, 580, 580, 580, 3223, 580, 580, 580, 0, 0, 0, 2723, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 734, 0,
      /* 49144 */ 0, 0, 2942, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2760, 0, 0, 0, 0, 3249, 0, 3250, 0, 0, 0, 0,
      /* 49174 */ 3132, 0, 0, 0, 0, 0, 0, 0, 3333, 0, 534, 534, 534, 0, 0, 0, 360, 361, 362, 363, 0, 0, 364, 0, 292, 0, 0,
      /* 49201 */ 0, 0, 0, 0, 718, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2445, 0, 0, 0, 0, 0, 0, 361, 0, 360, 0, 0, 0, 69632,
      /* 49230 */ 73728, 0, 0, 0, 0, 427, 65536, 0, 0, 0, 0, 685, 534, 534, 838, 842, 845, 534, 853, 534, 534, 534, 868,
      /* 49253 */ 427, 427, 0, 427, 0, 361, 427, 450, 0, 0, 0, 0, 0, 0, 0, 0, 690, 691, 0, 364, 364, 364, 0, 0, 0, 0, 0,
      /* 49280 */ 491, 491, 0, 498, 498, 498, 498, 504, 505, 498, 498, 518, 518, 518, 518, 450, 450, 450, 450, 450, 450,
      /* 49301 */ 450, 450, 450, 518, 518, 518, 518, 518, 518, 518, 518, 554, 577, 554, 577, 554, 554, 577, 554, 601, 577,
      /* 49322 */ 577, 577, 577, 577, 577, 577, 601, 601, 601, 554, 601, 601, 601, 601, 601, 601, 601, 577, 577, 613, 618,
      /* 49343 */ 601, 618, 624, 1, 12290, 534, 534, 887, 534, 534, 556, 556, 960, 556, 556, 0, 580, 580, 1034, 580, 580,
      /* 49364 */ 580, 580, 1502, 580, 580, 580, 580, 580, 580, 580, 580, 580, 580, 580, 2332, 580, 580, 580, 580, 534,
      /* 49384 */ 2513, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 2806, 534, 534, 534, 534,
      /* 49404 */ 2542, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 0, 0, 0, 0, 556, 556, 556, 2216, 556, 2218, 556,
      /* 49426 */ 580, 2674, 580, 580, 580, 580, 580, 580, 580, 580, 580, 580, 534, 580, 556, 534, 534, 534, 534, 534,
      /* 49446 */ 2491, 534, 534, 534, 534, 2495, 534, 534, 534, 534, 534, 0, 0, 0, 0, 556, 556, 2215, 556, 556, 556, 556,
      /* 49468 */ 602, 578, 578, 578, 578, 578, 578, 578, 602, 602, 602, 555, 602, 602, 602, 602, 602, 602, 602, 578, 578,
      /* 49489 */ 555, 578, 602, 578, 602, 1, 12290, 0, 0, 698, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2410, 0, 0, 728, 0,
      /* 49517 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2952, 0, 0, 0, 728, 0, 784, 0, 0, 0, 0, 0, 0, 0, 0, 784, 0, 0,
      /* 49549 */ 0, 0, 686, 0, 0, 0, 0, 0, 0, 364, 364, 364, 0, 0, 0, 0, 0, 671, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3145,
      /* 49579 */ 3146, 0, 0, 0, 556, 924, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 2260,
      /* 49600 */ 2261, 0, 0, 1176, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2433, 0, 0, 534, 1300, 534, 534, 534, 534, 534,
      /* 49627 */ 534, 534, 534, 534, 534, 534, 534, 534, 534, 2548, 0, 0, 1418, 556, 556, 556, 556, 556, 556, 556, 556,
      /* 49648 */ 556, 556, 556, 26009, 1341, 975, 580, 580, 580, 580, 2664, 580, 580, 580, 580, 2668, 580, 580, 580, 580,
      /* 49668 */ 580, 580, 1505, 580, 580, 1509, 580, 580, 580, 580, 580, 1515, 0, 0, 1553, 0, 0, 0, 1559, 0, 0, 0, 0, 0,
      /* 49692 */ 0, 0, 0, 0, 299, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2082, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 736, 0, 0, 0, 0,
      /* 49724 */ 0, 0, 0, 534, 534, 534, 534, 2167, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 1733, 534,
      /* 49745 */ 534, 534, 534, 556, 556, 556, 2252, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 3471,
      /* 49765 */ 580, 580, 580, 580, 580, 580, 2339, 580, 580, 580, 580, 580, 580, 580, 580, 580, 580, 580, 580, 3485, 0,
      /* 49786 */ 0, 3488, 2499, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 2202, 0, 0, 0,
      /* 49808 */ 0, 736, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 1747, 534, 534, 534, 534, 1051, 534, 534,
      /* 49829 */ 892, 534, 1056, 556, 556, 965, 556, 0, 1061, 580, 580, 1039, 580, 580, 580, 580, 2885, 580, 580, 580,
      /* 49849 */ 580, 580, 580, 580, 580, 580, 580, 580, 2680, 534, 580, 556, 534, 556, 556, 1420, 556, 556, 556, 556,
      /* 49869 */ 556, 556, 556, 556, 556, 26009, 1341, 975, 580, 580, 580, 580, 2894, 580, 580, 580, 580, 580, 580, 580,
      /* 49889 */ 580, 580, 580, 580, 2900, 580, 580, 580, 580, 534, 534, 534, 534, 1726, 534, 534, 534, 534, 534, 534,
      /* 49909 */ 534, 534, 534, 534, 534, 2144, 534, 534, 2148, 534, 1821, 556, 556, 556, 556, 556, 556, 556, 556, 556,
      /* 49929 */ 556, 556, 556, 556, 556, 556, 2843, 580, 580, 1954, 580, 580, 580, 580, 580, 580, 580, 580, 580, 580,
      /* 49949 */ 580, 580, 580, 3313, 580, 580, 580, 580, 556, 2586, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556,
      /* 49969 */ 556, 556, 556, 556, 2288, 556, 556, 556, 556, 556, 2614, 0, 0, 0, 0, 0, 0, 580, 580, 580, 580, 580,
      /* 49991 */ 1039, 580, 580, 580, 580, 0, 0, 0, 534, 580, 556, 0, 0, 0, 0, 2957, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 50018 */ 534, 2979, 534, 534, 534, 2983, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534,
      /* 50038 */ 534, 2498, 3065, 580, 580, 580, 580, 580, 580, 580, 580, 580, 580, 580, 580, 580, 580, 580, 2889, 580,
      /* 50058 */ 580, 580, 580, 580, 3192, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556,
      /* 50078 */ 3035, 1134592, 0, 1134592, 0, 0, 0, 1134592, 1135007, 1135007, 0, 0, 0, 0, 0, 1135007, 0, 0, 0, 0, 700,
      /* 50099 */ 701, 0, 0, 0, 0, 0, 707, 0, 0, 0, 711, 0, 1134592, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2718, 0, 0,
      /* 50129 */ 1134592, 1134592, 0, 0, 0, 0, 1135196, 1135196, 1135196, 1135196, 1134592, 1135196, 1135196, 1135196,
      /* 50143 */ 1135196, 1135196, 1135196, 0, 1134592, 1134592, 1134592, 1134592, 1135196, 1134592, 1135196, 1, 12290,
      /* 50156 */ 2125824, 3117056, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824,
      /* 50167 */ 2125824, 0, 0, 0, 2125824, 2125824, 2125824, 2125824, 3137536, 2940928, 2940928, 2940928, 0, 0, 0, 0, 0,
      /* 50184 */ 2748416, 2879488, 0, 0, 0, 0, 0, 2113, 0, 0, 0, 2113, 0, 0, 2118, 2119, 0, 0, 0, 0, 0, 1180, 0, 0, 0,
      /* 50209 */ 1184, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2474, 0, 1147348, 1147348, 1147348, 451, 451, 1147348,
      /* 50232 */ 451, 451, 451, 451, 451, 451, 451, 451, 1147399, 1147399, 1147399, 1147399, 1147399, 1147399, 1147399,
      /* 50247 */ 1147399, 1147399, 1147399, 1147399, 1147399, 1147399, 1147399, 1147399, 1147399, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 50264 */ 768, 0, 0, 0, 0, 0, 0, 0, 451, 0, 0, 0, 0, 0, 1147348, 1147348, 1147348, 1147399, 1147399, 1147348,
      /* 50284 */ 1147399, 1147399, 1, 12290, 3, 0, 0, 0, 0, 0, 253952, 0, 0, 0, 253952, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 50310 */ 0, 0, 2950, 0, 0, 0, 0, 1159168, 0, 1159168, 1159168, 0, 1159168, 1159168, 0, 1159168, 1159168, 1159168,
      /* 50328 */ 1159168, 1159168, 1159168, 1159168, 1159168, 1159168, 1159168, 1159168, 1159168, 1159168, 1159168,
      /* 50339 */ 1159168, 1159168, 1159168, 1159168, 1159168, 1159168, 1159168, 1159168, 1159168, 1159168, 1159168,
      /* 50350 */ 1159168, 0, 0, 0, 0, 0, 0, 0, 0, 781, 0, 0, 0, 0, 0, 792, 0, 0, 1159168, 0, 0, 1159168, 1159168,
      /* 50373 */ 1159168, 1159168, 1159168, 1159168, 1159168, 1159168, 1159168, 1159168, 1, 12290, 3, 0, 0, 0, 0, 249856,
      /* 50389 */ 0, 0, 0, 249856, 0, 0, 0, 0, 0, 0, 0, 69632, 73728, 163840, 0, 0, 0, 0, 65536, 0, 2125824, 3117056,
      /* 50411 */ 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 0, 0, 974,
      /* 50424 */ 2125824, 2125824, 2125824, 2125824, 3149824, 2125824, 2428928, 2437120, 2125824, 2486272, 2125824,
      /* 50435 */ 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2625536, 2125824, 2125824,
      /* 50446 */ 2125824, 2125824, 2125824, 2125824, 2699264, 2125824, 2715648, 2125824, 2723840, 2125824, 0, 106496,
      /* 50458 */ 106496, 0, 106496, 106496, 106496, 106496, 106496, 106496, 106496, 106496, 106496, 106496, 106496,
      /* 50471 */ 106496, 106496, 106496, 106496, 106496, 0, 0, 106496, 0, 0, 106496, 106496, 106496, 106496, 106496,
      /* 50486 */ 106496, 106496, 106496, 106496, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2183168, 0, 0, 0, 0, 0, 0, 0, 0,
      /* 50510 */ 2134016, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 695, 0, 0, 0, 0, 0, 3108864, 3198976, 0, 0, 3043328, 0,
      /* 50534 */ 3149824, 2936832, 0, 2760704, 0, 0, 0, 0, 0, 0, 0, 69632, 73728, 0, 369, 369, 0, 0, 65536, 369
    ];

    private static EXPECTED: number[] =
    [
      /*    0 */ 127, 143, 342, 950, 172, 201, 188, 217, 769, 963, 247, 263, 279, 295, 311, 327, 1395, 373, 1083, 374,
      /*   20 */ 374, 374, 374, 374, 374, 374, 374, 374, 419, 391, 407, 466, 435, 589, 1682, 909, 574, 156, 1220, 451,
      /*   40 */ 495, 511, 527, 543, 559, 634, 1096, 678, 694, 755, 649, 785, 801, 817, 833, 849, 865, 881, 897, 937, 979,
      /*   61 */ 995, 1023, 1039, 1055, 479, 1112, 1128, 1473, 1144, 1160, 1206, 1236, 357, 662, 1266, 709, 1282, 1292,
      /*   79 */ 1308, 1324, 1339, 1355, 1411, 1427, 1443, 618, 1459, 724, 1489, 604, 1518, 1528, 231, 1070, 1544, 1560,
      /*   97 */ 1576, 1592, 1622, 1250, 1638, 1654, 1606, 921, 1670, 739, 1698, 1714, 1820, 1190, 1730, 1746, 1502, 1758,
      /*  115 */ 1774, 1790, 1806, 1175, 1850, 1860, 1836, 1009, 1370, 1876, 1385, 375, 1892, 1896, 1903, 1903, 1903,
      /*  132 */ 1898, 1902, 1903, 1910, 1907, 1914, 1918, 1922, 1926, 1929, 1933, 1937, 1941, 1945, 4040, 4040, 4040,
      /*  149 */ 4106, 4040, 4040, 2020, 2279, 4040, 1949, 4040, 4040, 4040, 2429, 2379, 4040, 4040, 4040, 4040, 2438,
      /*  166 */ 4040, 4040, 3112, 2651, 3443, 2444, 1955, 1984, 1994, 1998, 4040, 4040, 4040, 4040, 4040, 2017, 2042,
      /*  183 */ 4040, 4040, 4040, 2024, 2285, 2030, 2034, 4040, 4040, 4040, 4040, 4040, 2041, 4040, 4040, 3002, 2285,
      /*  200 */ 2285, 2285, 2285, 2285, 2111, 1988, 1988, 1988, 1988, 1988, 1990, 1955, 1955, 1955, 1955, 1955, 2101,
      /*  217 */ 3099, 1988, 1988, 1988, 1988, 1988, 2120, 1955, 1955, 1955, 1955, 1955, 2046, 2055, 4040, 4040, 2212,
      /*  234 */ 2349, 4040, 4040, 4040, 4137, 3441, 4040, 4040, 4040, 4040, 3531, 4040, 2745, 1988, 1988, 1988, 2066,
      /*  251 */ 1955, 1955, 1955, 1957, 2073, 4040, 4040, 2473, 3002, 2285, 2285, 2026, 1988, 1988, 3101, 1955, 1955,
      /*  268 */ 1956, 2072, 4040, 2471, 4040, 2284, 2285, 3098, 1988, 1988, 2078, 1955, 2068, 2129, 2446, 3554, 2285,
      /*  285 */ 2112, 1988, 2120, 1955, 2083, 2281, 2286, 1988, 2067, 2089, 2095, 2113, 2049, 2107, 3097, 2114, 2079,
      /*  302 */ 3096, 3100, 2079, 3096, 2114, 2051, 2118, 2126, 2135, 2139, 2143, 2156, 2160, 2170, 2170, 2170, 2163,
      /*  319 */ 2167, 2170, 2173, 2177, 2181, 2185, 2189, 2193, 2197, 2201, 2205, 2209, 2216, 4040, 4040, 4040, 2131,
      /*  336 */ 4040, 4040, 4040, 2220, 4040, 2226, 4040, 2283, 2287, 1988, 1954, 2122, 2098, 1961, 4040, 4040, 4040,
      /*  353 */ 1970, 4040, 2474, 1980, 4040, 2321, 3139, 4040, 2440, 3145, 4427, 2277, 3219, 2796, 3151, 3505, 3155,
      /*  370 */ 4040, 3263, 3161, 2906, 4040, 4040, 4040, 4040, 4040, 4040, 4040, 4040, 4040, 4040, 4040, 4040, 4040,
      /*  387 */ 4040, 4040, 4040, 4041, 2255, 2259, 2262, 2266, 2270, 2274, 3465, 2291, 4040, 4040, 4040, 4040, 3213,
      /*  404 */ 2296, 2312, 2303, 2396, 2240, 2243, 2309, 2316, 2320, 2649, 4006, 4040, 2726, 2326, 3670, 4040, 4040,
      /*  421 */ 4040, 4040, 2231, 3466, 4040, 4040, 4040, 3429, 2237, 4040, 2618, 3123, 2249, 2253, 3877, 2348, 4040,
      /*  438 */ 4040, 4013, 2355, 4040, 2359, 4040, 4040, 4040, 4040, 3173, 2321, 2227, 2367, 3192, 4040, 4040, 2459,
      /*  455 */ 4040, 4040, 3192, 4040, 4040, 4348, 2989, 2882, 2918, 3129, 2349, 4040, 3014, 2311, 2670, 2331, 3577,
      /*  472 */ 4417, 2336, 2379, 4040, 4040, 2549, 2340, 4040, 4040, 4040, 2984, 4040, 4040, 4040, 4040, 3591, 2979,
      /*  489 */ 4040, 4040, 4040, 3390, 4180, 4419, 3131, 4040, 3190, 3194, 4040, 2950, 2989, 2918, 3210, 4040, 2469,
      /*  506 */ 2788, 3212, 4040, 4005, 3283, 3279, 4282, 4040, 3281, 4226, 4226, 2601, 4283, 3283, 3283, 1966, 3282,
      /*  523 */ 3279, 1966, 4227, 3283, 4191, 2462, 2478, 4040, 4040, 4040, 4040, 2588, 2522, 4040, 4040, 4040, 2007,
      /*  540 */ 2858, 2484, 3025, 2492, 2495, 2498, 2502, 2503, 2507, 2511, 2515, 4040, 2521, 4040, 4040, 2526, 4040,
      /*  557 */ 3968, 2913, 2541, 2545, 3867, 2553, 2563, 2574, 2578, 4040, 3387, 3385, 4040, 2582, 4040, 3458, 2587,
      /*  574 */ 4040, 3120, 4040, 4040, 4040, 3174, 2074, 2409, 2537, 2432, 4040, 4040, 4040, 2536, 2416, 4040, 2373,
      /*  591 */ 2377, 4040, 4040, 4040, 4040, 4255, 2378, 4040, 4040, 4040, 4040, 4256, 2379, 4040, 2838, 3503, 4040,
      /*  608 */ 4040, 4040, 4040, 2839, 3504, 3974, 3509, 4040, 4040, 3730, 3536, 4040, 3349, 2906, 4040, 3326, 2556,
      /*  625 */ 3181, 3383, 3394, 3403, 4040, 4397, 4040, 3553, 3551, 3545, 4040, 2668, 2912, 3478, 3399, 2548, 2592,
      /*  642 */ 3456, 3471, 2600, 4040, 4040, 4040, 4242, 4040, 3147, 4040, 3818, 4040, 4037, 3923, 3990, 3561, 4003,
      /*  659 */ 4040, 2655, 4039, 4040, 4040, 4040, 3167, 4040, 4040, 4040, 3331, 3171, 4040, 4040, 4040, 4040, 3632,
      /*  676 */ 3179, 4040, 2638, 2611, 2615, 4040, 2388, 2622, 4040, 4040, 4040, 4040, 2389, 2349, 4040, 4040, 4040,
      /*  693 */ 2397, 2390, 4040, 4040, 4040, 3141, 4040, 4040, 3846, 4040, 4040, 2630, 2517, 4070, 2637, 2412, 2989,
      /*  710 */ 4040, 4040, 4040, 4040, 2344, 4040, 4040, 4040, 4040, 4040, 3269, 2989, 2380, 3207, 4040, 3463, 4040,
      /*  727 */ 4040, 4040, 3861, 3470, 4040, 4040, 4040, 3475, 4040, 3482, 4040, 4040, 2631, 3905, 4040, 4040, 4040,
      /*  744 */ 4040, 2631, 3905, 2424, 3909, 4040, 2152, 2595, 3785, 3915, 2631, 4365, 2642, 4040, 4040, 4040, 4040,
      /*  761 */ 4085, 2646, 4040, 4040, 4040, 4040, 4085, 2646, 4040, 4040, 2464, 4040, 4040, 2285, 2285, 2285, 2285,
      /*  778 */ 2025, 1988, 1988, 1988, 1988, 1988, 2120, 3610, 3833, 4040, 4040, 4040, 4365, 2656, 4040, 4040, 4040,
      /*  795 */ 2660, 2665, 3980, 2516, 3196, 2674, 2678, 3830, 2685, 4040, 4040, 3830, 2685, 4040, 4040, 2299, 2690,
      /*  812 */ 4040, 3184, 3458, 2004, 3969, 3197, 3312, 3251, 2696, 4040, 2037, 2690, 4040, 3251, 2696, 4040, 2702,
      /*  829 */ 2709, 3195, 4000, 2713, 2717, 4040, 2715, 4040, 2679, 2723, 4040, 2730, 2734, 2739, 3644, 4040, 2705,
      /*  846 */ 2583, 3646, 2583, 2749, 2753, 2704, 3203, 2944, 2566, 2570, 2956, 2945, 3843, 2568, 2568, 2761, 3815,
      /*  863 */ 3641, 2765, 3607, 2769, 2773, 2775, 2779, 2783, 2787, 4040, 4040, 4040, 3316, 4040, 4040, 3564, 2792,
      /*  880 */ 3570, 2800, 2804, 2808, 2810, 2814, 2818, 2821, 2823, 2824, 4040, 4040, 3315, 4040, 3428, 2828, 3896,
      /*  897 */ 3248, 2833, 2843, 2434, 2453, 3918, 2849, 2907, 2853, 4040, 2150, 2148, 4040, 4040, 4040, 4040, 2405,
      /*  914 */ 2349, 4040, 4040, 4040, 4040, 2405, 2349, 4040, 4040, 4040, 4040, 2362, 3442, 4040, 4040, 4040, 4040,
      /*  931 */ 2363, 3773, 3950, 4040, 4040, 4040, 2857, 4040, 2559, 2968, 3853, 2862, 2937, 4379, 2869, 3988, 3295,
      /*  948 */ 4040, 2873, 4040, 4040, 4040, 3554, 2285, 2285, 2285, 2285, 1987, 1988, 1988, 1988, 1989, 1955, 1955,
      /*  965 */ 1955, 1955, 1956, 2103, 4040, 4040, 4040, 2472, 4040, 2109, 2285, 2285, 2285, 2113, 3527, 2877, 4040,
      /*  982 */ 4040, 4040, 2886, 2890, 4040, 4040, 4040, 4040, 2980, 4040, 3336, 2829, 3897, 2895, 2899, 4040, 2911,
      /*  999 */ 2917, 4040, 4040, 2922, 4040, 4040, 4040, 4040, 2844, 2923, 4040, 4040, 2626, 4289, 4040, 3453, 3038,
      /* 1016 */ 4353, 4386, 3183, 4040, 4040, 4041, 4370, 4040, 4040, 2845, 2924, 4040, 4040, 4040, 4040, 4040, 2990,
      /* 1033 */ 4040, 2558, 2928, 4420, 2935, 4040, 2943, 2949, 4040, 2970, 2954, 4040, 4040, 4040, 4040, 3855, 2960,
      /* 1050 */ 4040, 4040, 4040, 4040, 3855, 2960, 4040, 4040, 4040, 4040, 3389, 4040, 2966, 3897, 2974, 2327, 4275,
      /* 1067 */ 4040, 3590, 2978, 4040, 3535, 3379, 3488, 3521, 3230, 4040, 4040, 3540, 4040, 4040, 4040, 3439, 4040,
      /* 1084 */ 4040, 4040, 4364, 4040, 4040, 4040, 4040, 4040, 4040, 4040, 4040, 4378, 4040, 4040, 4040, 2605, 4040,
      /* 1101 */ 4040, 2245, 4040, 4040, 3459, 4040, 4040, 4038, 3923, 4040, 2013, 3616, 2411, 4040, 3631, 2988, 4040,
      /* 1118 */ 4040, 3631, 2988, 4040, 4040, 4040, 2994, 4040, 4040, 2350, 4262, 2381, 3617, 4040, 4040, 4346, 4040,
      /* 1135 */ 4040, 3000, 4040, 4040, 4346, 4040, 2350, 4208, 3615, 2881, 4040, 2795, 3174, 3112, 3180, 3024, 3111,
      /* 1152 */ 3180, 3180, 3933, 3014, 3113, 3113, 3006, 3181, 3014, 3013, 3014, 3175, 4047, 3018, 3029, 3053, 4040,
      /* 1169 */ 4040, 4040, 4040, 3634, 4040, 4221, 4040, 3650, 4040, 4040, 4040, 4040, 2631, 3651, 4040, 4040, 4040,
      /* 1186 */ 4040, 3648, 4287, 4291, 4040, 4010, 4017, 4303, 4022, 2632, 3182, 4040, 4032, 4040, 1950, 4012, 4040,
      /* 1203 */ 2865, 4045, 4051, 3043, 3047, 4064, 3061, 3065, 3069, 3073, 3077, 3081, 3105, 3084, 4040, 4040, 3633,
      /* 1220 */ 4040, 4040, 3443, 2444, 4040, 4040, 4040, 2450, 4040, 4040, 4040, 4349, 4040, 4040, 3014, 3276, 2487,
      /* 1237 */ 2961, 2691, 4276, 3109, 1976, 3117, 3127, 3289, 3135, 3305, 4040, 3324, 3322, 4040, 4040, 3734, 3779,
      /* 1254 */ 3739, 3744, 3969, 4040, 3748, 3754, 3761, 3943, 3887, 3765, 4057, 4040, 2488, 2962, 2692, 3163, 3224,
      /* 1271 */ 3188, 3412, 4040, 4040, 2085, 3201, 4040, 4040, 4040, 4040, 2343, 3217, 3223, 3228, 4040, 4040, 4040,
      /* 1288 */ 3234, 4040, 4040, 4040, 4040, 4040, 3238, 4040, 4040, 4040, 4040, 3422, 4040, 2529, 2686, 4354, 3245,
      /* 1305 */ 4040, 4040, 4040, 4342, 4040, 4040, 4040, 4040, 1972, 4040, 4040, 4040, 4040, 4040, 3255, 4040, 4040,
      /* 1322 */ 4040, 3423, 3952, 2686, 4355, 3261, 4040, 4040, 3267, 4040, 4040, 4040, 1974, 4040, 4040, 4040, 3273,
      /* 1339 */ 4040, 4220, 3981, 2680, 4356, 3895, 4040, 3287, 4040, 4040, 3293, 4040, 4040, 2062, 4040, 4220, 3953,
      /* 1356 */ 3299, 2146, 4040, 3303, 4040, 2607, 4040, 4040, 2061, 4040, 4248, 3309, 3894, 3498, 4040, 4360, 4040,
      /* 1373 */ 4040, 4040, 4369, 4040, 4374, 3056, 4383, 3622, 4040, 4040, 4390, 4040, 4040, 4424, 2742, 4040, 2633,
      /* 1390 */ 4040, 3056, 4040, 3039, 3157, 4040, 4040, 4040, 4040, 4040, 4040, 4040, 2455, 4325, 4040, 4040, 4040,
      /* 1407 */ 4040, 4040, 4040, 4040, 3320, 4040, 3330, 3911, 3335, 3629, 3588, 4213, 3943, 3587, 4213, 4213, 4040,
      /* 1424 */ 3341, 3589, 3589, 3628, 4214, 3341, 3340, 3341, 3630, 4040, 4040, 4040, 4040, 4040, 4040, 4040, 4040,
      /* 1441 */ 3836, 2349, 3347, 4040, 3354, 3001, 4080, 4404, 3358, 3362, 3366, 3369, 3373, 3373, 3377, 4040, 4040,
      /* 1458 */ 3835, 4091, 3410, 4040, 4040, 3416, 4040, 4040, 3420, 3427, 4040, 3433, 4040, 4331, 3447, 4040, 4040,
      /* 1475 */ 3797, 4040, 3795, 4040, 4040, 4345, 4040, 2350, 1964, 4040, 2879, 4040, 3397, 4040, 2904, 4040, 3350,
      /* 1492 */ 3488, 4040, 3486, 2535, 3492, 3496, 4040, 4040, 4040, 3502, 4040, 4040, 4040, 4127, 4028, 2010, 4131,
      /* 1509 */ 4141, 4145, 4149, 4153, 4157, 4161, 4165, 4169, 4173, 4134, 4377, 4293, 2534, 3516, 4040, 4040, 4040,
      /* 1526 */ 2839, 3504, 4040, 4040, 4040, 4040, 2931, 3442, 4040, 3450, 4040, 2902, 4040, 3799, 4363, 3520, 4196,
      /* 1543 */ 3525, 3406, 2349, 2757, 2305, 2996, 4393, 4347, 3544, 4040, 3549, 4040, 4040, 3549, 4040, 4040, 3558,
      /* 1560 */ 2756, 2305, 4077, 4395, 3960, 4040, 3568, 4040, 3823, 2349, 4040, 3997, 3750, 3574, 3884, 3961, 4269,
      /* 1577 */ 4040, 4270, 4040, 3581, 3944, 3585, 3595, 3931, 3600, 2001, 3930, 3604, 3604, 4211, 3614, 3932, 3621,
      /* 1594 */ 3626, 3662, 3638, 3655, 3656, 3660, 3667, 3674, 3678, 3682, 3685, 4040, 4040, 4040, 3840, 2596, 3740,
      /* 1611 */ 3850, 2668, 2332, 3343, 4040, 3859, 4040, 4040, 4040, 2233, 3865, 2891, 3735, 2465, 2351, 3690, 3698,
      /* 1628 */ 3874, 3702, 3705, 3709, 3713, 3717, 3721, 3725, 3729, 4040, 2423, 2421, 3241, 3772, 4040, 4040, 2939,
      /* 1645 */ 3777, 3783, 3789, 3793, 4136, 2698, 3342, 2633, 2425, 3803, 4040, 4040, 3808, 2349, 4040, 4040, 4186,
      /* 1662 */ 3812, 4040, 4040, 4040, 3009, 3822, 3827, 4040, 3871, 2532, 4318, 3881, 4040, 3891, 3773, 4040, 4040,
      /* 1679 */ 4040, 4040, 3901, 4040, 4040, 4040, 4040, 4040, 2385, 4040, 4040, 4040, 4040, 3014, 4040, 2394, 4040,
      /* 1696 */ 2401, 2379, 4035, 3922, 4040, 4040, 2292, 3927, 4040, 4040, 4040, 4040, 3937, 4040, 4040, 4040, 4040,
      /* 1713 */ 2091, 3941, 3948, 4040, 3957, 3757, 3966, 2835, 3112, 4040, 4040, 2222, 3979, 4040, 4040, 2719, 3973,
      /* 1730 */ 2632, 3183, 3021, 4040, 4055, 4040, 4061, 2419, 4040, 3023, 4068, 4074, 4084, 4112, 4089, 4095, 3596,
      /* 1747 */ 4100, 4308, 4099, 4104, 4110, 4099, 4113, 4119, 3257, 4117, 4123, 4040, 4040, 4040, 4040, 4177, 4184,
      /* 1764 */ 2836, 3686, 4190, 3693, 4195, 4200, 4410, 4205, 4218, 4040, 3090, 2735, 4225, 3093, 4231, 4040, 4040,
      /* 1781 */ 4040, 3631, 4235, 2661, 4040, 2681, 4429, 2369, 4040, 4239, 4040, 4040, 4040, 4040, 3804, 4246, 4040,
      /* 1798 */ 4040, 4040, 4252, 4040, 4040, 4040, 2631, 4260, 4266, 4040, 4040, 4040, 4025, 4185, 2837, 2686, 2480,
      /* 1815 */ 4274, 4040, 4280, 4040, 4040, 4040, 4040, 4201, 3978, 4018, 4303, 3768, 4040, 3050, 4040, 4040, 3985,
      /* 1832 */ 4040, 4040, 3994, 4040, 4322, 4385, 4329, 4040, 4040, 4040, 4040, 4335, 4040, 4040, 4040, 4040, 3663,
      /* 1849 */ 4339, 4040, 4040, 4297, 4040, 3057, 3087, 4301, 3962, 3032, 4040, 4040, 4040, 4040, 2624, 4307, 4040,
      /* 1866 */ 4040, 4040, 4040, 2624, 4312, 4315, 4040, 2322, 3436, 2837, 2058, 4040, 4040, 3035, 4040, 4401, 4408,
      /* 1883 */ 3694, 4040, 4040, 3512, 4040, 2631, 4414, 4040, 3511, 4558, 4433, 6024, 6027, 4439, 4466, 4468, 4468,
      /* 1900 */ 4446, 4455, 4467, 4468, 4468, 4468, 4468, 4468, 4468, 4473, 4468, 4468, 4463, 4457, 4459, 4479, 4477,
      /* 1917 */ 4483, 4468, 4469, 4493, 4496, 4506, 4510, 4524, 4519, 4511, 4500, 4502, 4502, 4518, 4519, 4498, 4515,
      /* 1934 */ 4523, 4528, 4532, 4536, 4539, 4547, 4546, 4543, 4551, 4554, 4556, 4566, 5097, 4574, 6086, 5003, 5101,
      /* 1951 */ 5101, 5101, 4593, 4599, 4602, 4602, 4602, 4602, 4608, 4640, 4568, 4622, 4628, 5101, 4434, 5101, 5099,
      /* 1968 */ 5101, 6713, 5101, 6256, 5101, 5101, 4584, 5992, 5101, 5101, 4729, 5101, 5473, 6277, 5101, 5007, 4602,
      /* 1985 */ 5693, 4609, 5696, 5699, 5699, 5699, 5699, 4601, 4602, 5699, 4602, 4619, 4621, 4623, 4627, 6087, 5101,
      /* 2002 */ 4434, 6165, 6164, 5101, 5101, 6380, 6242, 5096, 5101, 4576, 5101, 6463, 5101, 5101, 5635, 4488, 5366,
      /* 2019 */ 6275, 5101, 4581, 5101, 4590, 5411, 5123, 5123, 5123, 5697, 5699, 4603, 4621, 4621, 4622, 4627, 4627,
      /* 2036 */ 4628, 5101, 4583, 5448, 6513, 5474, 5101, 5008, 5101, 5101, 4602, 4632, 5123, 5699, 4602, 4602, 4602,
      /* 2053 */ 5704, 5121, 4602, 4621, 4627, 5101, 4583, 6563, 5101, 4584, 6017, 5101, 5101, 5699, 5701, 4602, 4602,
      /* 2070 */ 4602, 4632, 4640, 5705, 5101, 5101, 5101, 4734, 5700, 4602, 4602, 4602, 5705, 4643, 5701, 5101, 5101,
      /* 2087 */ 4824, 5651, 4602, 4650, 5101, 5101, 4824, 6512, 5010, 5695, 5123, 5123, 5698, 5690, 4602, 4608, 5696,
      /* 2104 */ 5700, 5703, 5101, 4602, 5101, 5101, 5121, 5123, 5123, 5123, 5699, 5699, 5699, 5702, 5123, 5698, 5699,
      /* 2121 */ 5702, 4602, 4602, 5704, 4607, 4602, 5705, 5123, 5697, 5704, 5101, 5101, 4816, 4822, 5699, 4602, 5704,
      /* 2138 */ 5695, 5698, 5702, 5694, 5701, 4651, 4652, 4650, 5101, 4592, 5101, 5101, 5815, 5567, 5101, 5101, 5106,
      /* 2155 */ 6519, 6761, 6550, 6560, 4662, 4695, 4656, 4660, 4693, 4666, 4673, 4670, 4680, 4684, 4691, 4693, 4693,
      /* 2172 */ 4693, 4693, 4694, 4676, 4699, 4693, 4703, 4708, 4714, 4704, 4726, 4740, 4744, 4687, 4751, 4753, 4748,
      /* 2189 */ 4787, 4789, 4789, 4791, 4757, 4759, 4761, 4763, 4776, 4776, 4770, 4767, 4774, 4717, 4675, 4710, 4780,
      /* 2206 */ 4784, 4795, 4797, 4801, 4805, 4809, 5101, 4592, 6198, 6202, 4990, 5007, 5230, 6461, 5101, 6373, 5101,
      /* 2223 */ 5101, 4824, 6698, 4831, 5101, 5101, 5101, 4736, 5108, 5108, 5101, 5101, 4826, 6485, 5490, 5979, 4838,
      /* 2240 */ 5101, 4720, 4985, 5101, 4720, 5101, 5101, 4853, 5311, 4857, 5333, 4876, 4902, 4906, 4906, 4906, 4906,
      /* 2257 */ 4908, 4915, 4917, 4912, 4921, 4925, 4928, 4931, 4934, 4939, 4938, 4943, 4944, 4959, 4949, 4948, 4953,
      /* 2274 */ 4956, 4963, 5101, 5107, 5101, 4892, 5101, 5007, 5101, 5101, 5695, 5123, 5123, 5123, 5123, 5696, 5699,
      /* 2291 */ 5988, 5101, 5101, 5101, 4825, 5300, 5101, 5608, 5101, 4811, 5449, 6426, 4969, 5101, 5101, 4988, 6219,
      /* 2308 */ 5101, 5018, 4987, 5101, 5101, 4860, 5101, 5101, 4995, 5015, 5101, 6412, 5034, 5101, 5101, 5101, 4893,
      /* 2325 */ 6751, 6138, 5101, 5101, 5101, 4894, 6729, 5101, 5101, 5101, 4965, 5055, 5068, 5081, 5086, 5091, 5076,
      /* 2342 */ 5095, 5101, 4824, 5933, 5929, 5376, 5087, 4434, 5101, 5101, 5101, 4979, 5008, 6409, 5996, 5101, 5999,
      /* 2359 */ 5151, 5987, 5376, 5101, 4826, 6502, 6738, 6204, 5101, 6730, 5101, 5101, 4891, 5101, 4570, 5101, 5115,
      /* 2376 */ 5127, 5074, 4442, 5096, 5101, 5101, 5101, 4975, 5538, 5411, 5986, 5281, 5101, 4840, 5628, 5355, 5382,
      /* 2393 */ 4434, 4736, 5101, 4973, 5101, 5101, 5101, 4840, 5687, 5132, 5075, 5140, 5890, 5072, 5076, 5141, 6462,
      /* 2410 */ 4888, 5101, 5101, 4895, 5101, 5343, 5073, 6582, 4451, 5101, 4894, 5101, 5101, 6416, 5101, 5101, 5101,
      /* 2427 */ 6191, 5101, 5415, 5892, 5074, 6583, 5096, 5101, 5101, 4898, 5999, 5411, 5280, 5101, 5101, 4974, 4978,
      /* 2444 */ 5134, 5157, 5101, 5101, 5007, 5101, 5132, 5075, 5159, 5101, 4897, 5101, 5871, 4980, 5101, 5949, 5135,
      /* 2461 */ 5159, 5101, 4976, 5101, 5101, 5010, 5101, 5101, 5169, 4434, 5101, 5101, 5009, 5101, 5101, 5101, 4613,
      /* 2478 */ 4614, 4975, 5101, 4614, 5101, 5411, 4978, 6164, 6391, 5101, 4977, 6380, 5395, 5376, 5188, 4872, 5243,
      /* 2495 */ 5197, 5197, 5194, 5197, 5199, 5203, 5205, 5207, 5209, 5209, 5209, 5213, 5213, 5213, 5213, 5214, 5213,
      /* 2512 */ 5213, 5215, 5219, 5221, 5101, 5101, 5101, 5036, 5101, 5059, 5063, 5372, 5101, 5101, 5101, 6378, 6010,
      /* 2529 */ 5101, 4978, 6569, 5101, 4980, 5101, 5417, 5101, 5101, 5101, 5891, 5074, 5240, 5101, 5351, 6463, 5247,
      /* 2546 */ 5101, 5101, 5257, 5101, 5101, 5101, 5068, 5263, 6448, 5875, 5101, 4981, 5101, 5101, 5876, 6281, 5416,
      /* 2563 */ 5275, 4435, 5874, 5101, 4990, 6089, 5406, 5410, 5101, 5265, 5407, 5285, 5101, 5101, 5297, 6402, 5101,
      /* 2580 */ 5101, 5304, 5309, 5101, 5101, 5101, 5057, 5371, 5101, 5101, 5101, 5059, 5330, 4833, 5427, 5101, 5010,
      /* 2597 */ 4978, 5101, 5415, 5358, 5101, 5101, 5101, 5100, 5883, 5359, 5101, 5101, 5102, 6015, 4893, 5258, 5101,
      /* 2614 */ 5342, 5432, 5101, 5348, 5101, 5024, 6570, 5977, 5382, 4434, 5101, 5101, 5102, 6113, 5726, 5101, 6379,
      /* 2631 */ 5101, 5101, 5101, 5102, 5101, 5101, 6462, 5101, 4561, 5876, 5101, 6422, 6426, 5381, 6381, 6423, 6427,
      /* 2648 */ 5382, 5101, 5031, 5101, 5101, 4866, 4885, 4811, 5438, 6425, 5399, 6381, 5479, 5101, 5101, 5101, 5104,
      /* 2665 */ 5106, 5060, 5064, 5101, 5035, 5101, 5101, 5051, 5101, 5350, 5101, 5879, 4896, 5431, 5101, 5101, 5101,
      /* 2682 */ 5106, 5101, 4975, 5471, 5101, 5101, 5101, 5107, 6430, 5101, 5101, 5101, 5108, 4890, 6429, 6381, 5101,
      /* 2699 */ 5101, 5102, 6446, 5479, 5101, 5101, 5453, 5269, 5410, 5101, 4614, 5101, 5101, 6380, 5153, 5101, 5101,
      /* 2716 */ 5732, 5268, 5470, 5101, 5101, 5102, 6697, 5459, 5468, 6381, 5101, 5041, 5046, 5045, 5478, 5101, 5101,
      /* 2733 */ 5453, 4614, 5101, 5101, 5101, 5111, 6088, 5350, 5877, 5413, 5538, 5101, 5101, 5047, 5047, 5047, 5461,
      /* 2750 */ 5101, 6088, 6119, 5106, 5267, 5271, 5101, 5047, 6213, 5101, 5101, 5404, 4990, 5404, 5408, 5404, 4990,
      /* 2767 */ 5404, 5962, 5423, 5961, 5101, 6084, 5423, 5233, 6104, 5101, 4990, 5232, 5230, 5101, 5232, 4989, 5232,
      /* 2784 */ 5232, 5232, 5231, 6488, 5101, 5101, 5101, 5168, 5876, 5722, 5483, 4434, 5099, 5101, 5101, 6498, 6279,
      /* 2801 */ 5487, 5101, 4886, 6166, 5489, 5856, 5494, 5500, 5498, 5504, 5504, 5504, 5504, 5506, 5513, 5510, 5517,
      /* 2818 */ 5519, 5519, 5519, 5521, 5519, 5525, 5525, 5525, 5525, 5527, 6280, 5415, 5319, 5672, 5101, 5005, 6438,
      /* 2835 */ 5101, 5101, 5103, 5101, 5101, 5101, 6361, 6199, 5571, 5101, 5101, 5101, 5176, 5626, 6498, 5551, 5101,
      /* 2852 */ 6442, 5561, 5101, 5814, 5566, 5575, 5101, 5101, 5101, 5181, 6167, 5004, 6438, 5101, 5102, 6092, 6381,
      /* 2869 */ 5580, 5101, 5101, 5004, 6127, 5600, 5863, 5606, 5862, 5605, 5101, 5101, 5235, 5101, 5101, 5101, 5424,
      /* 2886 */ 5102, 6128, 5601, 5864, 5607, 5101, 5101, 5101, 5224, 5101, 6167, 5101, 5006, 6440, 5101, 5569, 5101,
      /* 2903 */ 5102, 6180, 5148, 5101, 5101, 5996, 5101, 6283, 5464, 5101, 5101, 5101, 5228, 5101, 5620, 5101, 5101,
      /* 2920 */ 5101, 5232, 5176, 5626, 6753, 5665, 5101, 5101, 5632, 5321, 4434, 5101, 5102, 6362, 6200, 5027, 5562,
      /* 2937 */ 5101, 5570, 5101, 5101, 5223, 5746, 5463, 5101, 5101, 5101, 5266, 4989, 5621, 5101, 5101, 5101, 5278,
      /* 2954 */ 6754, 5666, 5101, 5101, 5265, 5407, 6755, 5376, 5101, 5101, 4990, 5101, 5612, 5415, 5320, 6393, 5101,
      /* 2971 */ 5101, 5176, 5639, 5646, 4577, 5568, 5410, 5640, 5664, 5101, 5101, 5101, 5293, 5175, 5639, 5663, 5376,
      /* 2988 */ 5659, 5376, 5101, 5101, 5101, 4980, 5657, 5676, 5101, 5101, 5288, 5037, 5658, 5101, 5101, 5101, 5411,
      /* 3005 */ 5123, 5098, 5101, 5423, 5101, 5102, 6471, 6477, 5098, 5101, 5424, 5101, 5101, 5426, 5098, 5424, 5101,
      /* 3022 */ 5102, 6558, 5101, 5101, 5101, 6393, 5101, 5426, 5424, 5568, 5424, 5233, 5101, 5101, 5102, 6562, 5101,
      /* 3039 */ 5104, 5101, 5101, 5101, 4974, 6215, 5710, 4879, 5101, 6496, 5376, 5101, 5105, 5101, 5424, 5424, 5099,
      /* 3056 */ 5101, 5105, 5101, 5101, 5101, 5720, 4722, 5730, 5742, 5751, 5757, 5766, 5764, 5767, 5755, 5761, 5771,
      /* 3073 */ 5774, 5776, 5778, 5790, 5782, 5785, 5789, 5790, 5791, 5796, 5795, 5801, 5797, 5806, 5101, 5108, 4976,
      /* 3090 */ 5101, 5110, 6702, 5101, 5111, 6707, 5101, 5123, 5123, 5123, 5698, 5699, 5699, 5700, 4602, 5801, 5802,
      /* 3107 */ 5801, 5801, 4998, 5101, 5098, 5101, 5101, 5425, 5101, 5101, 5812, 5819, 5557, 5101, 5145, 5281, 5101,
      /* 3124 */ 4844, 5876, 4852, 5595, 5101, 4888, 5101, 5950, 5136, 4434, 5101, 4615, 5101, 5101, 5823, 5848, 5941,
      /* 3141 */ 5101, 5101, 5363, 5101, 5472, 5373, 5101, 5101, 5386, 5101, 5860, 4888, 5868, 5887, 5011, 5011, 5101,
      /* 3158 */ 5101, 5414, 5101, 6528, 5376, 5101, 5101, 5414, 6347, 5545, 5908, 6527, 4732, 5904, 6529, 5101, 5101,
      /* 3175 */ 5423, 5101, 5101, 5100, 5942, 5101, 5101, 5101, 5426, 5101, 5101, 5101, 5479, 5912, 5924, 5101, 5101,
      /* 3192 */ 5423, 5163, 5158, 5101, 5101, 5101, 4989, 5101, 5350, 5929, 5376, 5101, 5101, 5454, 5270, 6215, 5393,
      /* 3209 */ 5374, 5101, 5168, 5173, 5101, 5101, 5101, 5021, 5109, 5101, 5411, 5101, 5853, 5101, 6347, 5101, 5100,
      /* 3226 */ 5101, 5102, 5947, 5925, 5101, 5101, 5530, 4980, 4811, 5650, 5954, 5376, 4812, 5959, 5955, 5101, 5184,
      /* 3243 */ 5539, 6436, 5879, 5098, 5102, 5538, 5101, 6166, 5101, 5102, 5447, 5442, 4585, 5993, 5101, 5101, 5538,
      /* 3260 */ 6089, 5099, 4592, 5101, 5101, 5546, 5903, 4584, 5993, 5101, 5101, 5649, 5940, 5102, 4586, 5994, 5101,
      /* 3277 */ 5231, 4887, 5101, 4974, 5100, 5101, 5101, 6712, 5101, 5101, 4584, 5995, 5101, 5101, 5706, 5898, 4585,
      /* 3294 */ 5995, 5101, 5101, 5808, 5101, 5106, 5101, 5413, 6346, 5102, 6004, 5101, 5101, 5833, 5840, 6392, 5107,
      /* 3311 */ 5412, 5876, 4894, 5152, 5101, 5035, 5576, 5101, 5101, 5106, 6016, 5101, 5101, 5837, 5841, 5101, 5101,
      /* 3328 */ 5338, 5101, 6015, 5101, 5101, 5101, 5547, 5412, 5101, 5101, 5101, 5612, 5101, 6161, 5101, 5101, 5101,
      /* 3345 */ 5679, 5101, 5101, 6367, 5101, 5101, 5842, 6096, 5101, 6282, 5101, 4486, 6021, 6046, 6045, 6046, 6046,
      /* 3362 */ 6043, 6046, 6050, 6054, 6058, 6062, 6071, 6066, 6070, 6071, 6071, 6075, 6075, 6075, 6075, 6078, 6082,
      /* 3379 */ 5101, 5101, 5842, 6097, 5103, 5234, 5101, 5101, 5880, 5305, 5101, 5101, 5047, 5101, 5101, 6102, 5109,
      /* 3396 */ 6108, 5101, 5236, 5101, 5101, 5325, 5101, 6117, 5101, 6123, 5101, 5249, 6209, 6202, 5101, 6493, 5101,
      /* 3413 */ 5101, 5897, 5101, 5101, 6142, 6181, 5096, 5843, 6097, 5101, 5101, 5966, 5101, 5101, 5996, 5101, 5101,
      /* 3430 */ 5101, 5876, 5103, 6174, 5101, 5101, 5416, 5421, 5101, 5101, 5251, 6200, 6204, 5101, 5101, 5101, 5949,
      /* 3447 */ 6147, 6152, 6000, 4980, 4980, 4980, 5101, 5292, 4635, 5101, 5299, 5101, 5101, 5058, 5062, 5371, 6361,
      /* 3464 */ 5737, 5101, 5101, 5975, 4848, 5988, 6137, 5101, 5101, 5101, 5882, 5102, 5734, 5738, 5101, 5317, 6462,
      /* 3481 */ 5349, 6382, 5101, 6160, 6159, 5101, 6173, 5101, 5101, 5999, 5101, 5101, 6667, 5106, 4894, 6247, 4978,
      /* 3498 */ 5101, 5101, 6004, 5101, 6361, 6199, 6203, 5101, 5101, 5101, 5896, 6382, 6382, 5101, 5101, 6111, 5418,
      /* 3515 */ 5101, 5101, 6668, 4893, 6186, 5101, 6769, 5879, 5101, 5101, 5529, 6188, 5101, 5101, 6126, 5599, 5102,
      /* 3532 */ 6197, 6201, 6205, 5419, 6182, 4434, 5101, 5101, 6089, 5252, 6201, 6205, 5585, 5101, 5101, 5101, 6007,
      /* 3549 */ 6455, 4450, 5101, 5101, 6133, 5101, 5101, 5101, 5695, 6454, 4449, 4434, 5101, 5350, 5101, 5878, 5101,
      /* 3566 */ 6280, 4886, 4988, 6229, 5101, 5101, 6162, 4614, 5101, 6378, 4434, 5101, 5375, 5101, 4562, 6229, 5101,
      /* 3583 */ 4978, 6214, 6161, 4980, 5101, 5101, 6162, 5101, 5101, 5101, 5655, 5640, 6234, 5101, 5101, 5101, 6089,
      /* 3600 */ 5101, 6258, 4434, 6240, 5101, 6258, 4434, 5101, 5404, 5962, 5101, 5102, 5437, 6424, 6235, 5101, 5101,
      /* 3617 */ 5568, 5410, 5101, 5101, 6236, 5101, 6165, 5101, 5101, 5101, 6259, 5101, 5101, 6164, 5101, 5101, 5101,
      /* 3634 */ 5648, 5849, 5942, 5101, 6260, 5101, 6165, 5101, 5405, 5409, 5101, 5057, 5268, 5409, 5101, 5101, 5102,
      /* 3651 */ 6742, 5253, 5101, 5101, 5101, 6260, 5101, 5101, 6259, 5101, 6167, 6258, 5101, 5101, 5101, 6112, 6259,
      /* 3668 */ 5101, 6259, 6165, 4847, 5987, 5376, 5568, 6497, 6259, 5568, 6497, 6168, 6257, 6257, 6261, 6251, 6254,
      /* 3685 */ 6254, 5101, 5101, 5101, 6169, 5118, 5101, 5916, 5101, 5414, 5538, 5101, 5101, 5918, 4896, 5553, 4884,
      /* 3702 */ 5037, 6272, 6287, 6305, 6299, 6305, 6303, 6299, 6309, 6293, 6290, 6295, 6322, 6313, 6327, 6316, 6319,
      /* 3719 */ 6323, 6332, 6331, 6339, 6339, 6340, 6339, 6339, 6339, 6336, 6344, 5101, 5101, 5101, 6178, 5224, 5747,
      /* 3736 */ 5376, 5101, 5101, 5415, 5101, 5101, 6351, 4893, 4893, 4882, 5230, 5001, 5101, 6372, 5101, 5101, 6214,
      /* 3753 */ 4980, 5101, 6357, 5969, 5101, 5417, 5419, 6353, 6366, 4434, 5101, 6371, 6390, 6397, 6401, 5101, 5418,
      /* 3770 */ 4636, 5647, 6434, 5101, 5101, 5101, 6192, 5943, 5101, 5008, 5101, 4978, 5101, 4979, 5101, 5416, 5101,
      /* 3787 */ 6351, 4893, 5419, 6352, 4894, 6268, 6367, 5002, 5101, 5101, 6279, 5641, 5101, 5101, 5290, 5101, 6452,
      /* 3804 */ 5101, 5101, 5101, 6223, 5101, 6470, 6459, 6480, 6475, 6479, 6205, 5101, 5423, 5407, 5101, 5057, 5061,
      /* 3821 */ 5390, 6481, 5101, 5101, 5101, 6228, 5589, 5588, 5587, 5101, 5436, 5442, 6428, 5402, 5101, 5101, 5102,
      /* 3838 */ 6143, 6182, 5106, 5745, 6520, 5101, 5455, 5409, 5101, 5057, 5061, 5370, 6267, 5101, 5410, 5101, 5535,
      /* 3855 */ 5101, 5101, 5177, 5640, 5423, 5999, 5101, 5101, 6360, 5736, 6738, 6204, 5101, 5101, 6378, 5101, 5224,
      /* 3872 */ 5077, 5101, 5008, 6265, 5555, 5101, 5415, 5070, 5082, 5622, 5101, 5101, 6278, 6165, 5233, 5101, 5377,
      /* 3889 */ 6377, 6386, 5103, 5101, 5679, 5101, 5538, 5101, 5101, 5101, 5534, 5538, 4826, 5935, 6737, 6204, 4827,
      /* 3906 */ 5936, 6535, 6204, 6191, 6191, 5101, 5101, 6378, 6393, 5232, 5101, 5036, 5101, 5543, 5259, 5326, 6190,
      /* 3923 */ 5101, 5101, 5101, 6278, 5443, 6506, 4434, 5101, 5568, 6236, 5101, 5101, 5568, 5101, 5102, 6511, 5134,
      /* 3940 */ 6507, 5164, 4451, 5101, 5101, 6392, 5101, 6165, 5101, 6192, 6192, 6192, 5101, 5101, 6378, 6392, 5101,
      /* 3957 */ 5101, 6517, 5376, 5101, 5583, 5101, 5101, 5101, 6011, 6524, 5101, 6278, 5101, 5101, 5101, 5037, 6155,
      /* 3974 */ 5101, 5101, 5101, 6382, 6533, 6549, 5101, 5101, 5101, 6379, 6393, 5101, 6544, 6381, 5101, 5593, 5101,
      /* 3991 */ 5101, 5229, 5634, 5101, 6676, 6549, 5101, 5616, 6230, 5101, 5351, 5877, 4895, 5411, 5432, 5101, 5101,
      /* 4008 */ 5101, 5031, 5101, 6675, 6548, 5101, 5101, 5101, 6391, 5101, 6539, 5426, 5101, 5101, 5417, 5920, 4896,
      /* 4025 */ 5101, 5648, 6722, 5416, 6462, 5101, 5562, 5101, 6554, 6381, 5101, 5680, 5101, 5101, 6381, 5101, 5101,
      /* 4042 */ 5101, 5101, 4583, 5101, 6540, 5425, 5101, 5426, 5101, 5101, 6709, 5417, 4895, 5102, 4595, 5101, 5101,
      /* 4059 */ 6406, 5101, 4594, 5403, 6540, 5101, 5714, 5003, 4991, 6090, 6568, 5101, 5101, 6464, 4988, 5101, 6091,
      /* 4076 */ 6381, 5101, 5842, 5037, 5998, 5996, 5996, 5413, 4893, 5101, 5101, 5101, 6419, 5101, 6091, 5101, 5101,
      /* 4093 */ 6492, 6491, 5101, 6091, 5101, 4895, 4561, 4896, 5101, 5101, 6090, 6089, 4896, 5101, 5101, 6494, 6256,
      /* 4110 */ 4559, 5101, 5101, 6090, 5101, 5101, 6090, 4561, 6089, 4561, 5101, 6089, 4560, 5537, 6089, 5101, 5537,
      /* 4127 */ 6574, 6752, 4888, 4577, 5716, 5997, 6579, 5101, 5844, 5037, 5101, 5101, 5101, 6196, 5101, 6462, 6465,
      /* 4144 */ 6463, 4869, 5826, 5829, 6587, 4489, 4646, 6598, 6591, 6597, 6593, 6605, 6602, 6607, 6611, 6613, 6617,
      /* 4161 */ 6619, 6628, 6625, 6632, 6621, 6635, 6639, 6640, 6644, 6647, 6654, 6653, 6651, 6658, 6661, 6665, 5101,
      /* 4178 */ 6574, 6723, 5101, 5876, 6281, 5670, 5418, 5421, 5101, 5101, 5101, 6469, 5107, 5101, 4975, 5101, 4976,
      /* 4195 */ 6672, 5101, 5101, 5101, 6682, 6494, 5101, 5101, 5101, 6695, 6680, 5313, 6686, 5101, 5877, 5684, 4434,
      /* 4212 */ 6246, 5101, 5101, 6163, 5101, 5101, 5101, 6692, 5101, 5101, 6495, 5101, 5101, 6703, 5101, 5101, 5101,
      /* 4229 */ 6713, 5101, 5101, 6718, 6717, 4834, 6722, 5101, 5418, 5422, 5101, 6727, 6734, 5101, 5881, 5357, 5337,
      /* 4246 */ 6746, 5101, 5101, 5101, 6495, 6378, 5101, 6222, 6745, 5101, 5889, 5128, 5074, 4442, 6224, 6747, 5101,
      /* 4263 */ 5877, 5615, 5671, 5876, 5101, 5879, 5101, 5899, 6230, 5101, 5101, 6089, 5101, 5101, 4892, 5101, 5412,
      /* 4280 */ 5002, 6734, 5101, 5101, 6711, 5101, 5101, 5253, 5101, 5877, 5877, 5877, 5101, 5101, 5101, 6771, 5101,
      /* 4297 */ 5101, 6575, 5642, 4635, 5411, 6089, 5101, 4889, 5258, 5101, 5252, 4561, 5101, 5101, 6090, 5252, 4561,
      /* 4314 */ 5876, 5876, 5101, 5101, 5101, 5914, 6353, 6148, 5106, 4974, 5101, 5101, 5972, 5101, 4989, 5101, 6165,
      /* 4331 */ 5425, 5101, 6688, 5107, 5101, 6111, 5724, 6759, 5725, 4561, 5101, 5101, 5983, 5994, 5101, 5190, 5879,
      /* 4348 */ 5101, 5101, 5101, 5344, 5376, 5106, 5101, 5101, 5413, 6463, 5879, 5102, 6775, 6767, 5101, 5101, 5997,
      /* 4365 */ 5101, 5101, 5101, 4811, 4583, 6765, 5101, 5101, 5101, 5101, 6098, 5420, 5101, 5998, 5101, 5101, 5101,
      /* 4382 */ 4818, 5109, 5101, 5413, 5537, 5101, 5101, 6165, 5101, 6111, 6564, 5101, 5998, 5101, 6769, 5101, 5101,
      /* 4399 */ 6132, 6137, 5101, 6098, 5101, 5101, 6033, 6031, 6039, 5105, 5101, 5109, 5101, 4863, 5101, 6776, 5101,
      /* 4416 */ 5101, 5101, 6035, 4434, 5101, 6161, 5536, 5101, 5036, 5102, 5101, 5101, 6088, 5101, 5101, 5412, 6089,
      /* 4433 */ 1048576, 1073741824, 0, 0, 0, -872415232, 4194560, 4196352, 270532608, 2097152, 4194304, 117440512,
      /* 4445 */ 134217728, 4194304, 16777216, 4194432, 3145728, 16777216, 134217728, 536870912, 1073741824, 0, 541065216,
      /* 4456 */ 541065216, -2143289344, -2143289344, 4194304, 4194304, 4196352, -2143289344, 4194304, 4194432, 37748736,
      /* 4466 */ 541065216, -2143289344, 4194304, 4194304, 4194304, 4194304, 37748736, 4194304, 4194304, 4198144, 4196352,
      /* 4477 */ 8540160, 4194304, 4194304, 4194304, 4196352, 276901888, 4194304, 4194304, 8425488, 4194304, 1, 0, 1024,
      /* 4490 */ 1024, 0, 1024, 742391808, 239075328, -1405091840, 742391808, 742391808, 775946240, 239075328, 171966464,
      /* 4501 */ 775946240, 171966464, 171966464, 171966464, 171966464, -1405091840, 775946240, 775946240, -1405091840,
      /* 4510 */ -1371537408, 775946240, 775946240, 775946240, 171966464, 239075328, 239075328, 171966464, 775946240,
      /* 4519 */ -1371537408, 775946240, 775946240, -1371537408, 239075328, 775946240, 775946240, 775946240, 775946240,
      /* 4528 */ 4718592, 64, 4718592, 2097216, 4720640, 541589504, 4194368, 541589504, 4194400, 4194368, 541065280,
      /* 4539 */ 4194368, -2143289280, 4194368, -2143285440, -2143285408, -2143285408, -2109730976, -2143285408,
      /* 4547 */ -2143285408, -2143285408, -2143285408, 776470528, -2143285408, -2109730976, 775946336, 775946304,
      /* 4555 */ 776470528, 775946304, -1908404384, 2, 4, 8, 262144, 0, 0, 0, 0x80000000, 8, 262144, 262144, 1048576, 0,
      /* 4571 */ 128, 4096, 0, 4194304, 128, 128, 0, 1048576, 0, 0, 1536, 1792, 0, 0, 1, 2, 4, 128, 2097152, 8192,
      /* 4591 */ 8392704, 0, 0, 1, 4, 8, 262144, 536870912, 64, 64, 32, 96, 96, 96, 96, 128, 1536, 524288, 96, 64, 524288,
      /* 4612 */ 524288, 1536, 1024, 0, 0, 0, 29, 96, 1048576, 128, 128, 128, 128, 2048, 2048, 2048, 2048, 2048, 2048, 0,
      /* 4632 */ 96, 524288, 96, 64, 0, 0, 128, 1024, 524288, 64, 64, 96, 96, 524288, 524288, 4100, 1024, 100680704, 96,
      /* 4651 */ 524288, 64, 96, 524288, 64, 80, 528, 524304, 1048592, 2097168, 268435472, 16, 16, 2, 536936448, 16,
      /* 4667 */ 262160, 16, 536936448, 16, 17, 17, 20, 16, 48, 16, 16, 20, 560, 24, 560, 48, 2097680, 3145744, 1048592,
      /* 4686 */ 1048592, 2097168, 16, 1049104, 2228784, 2097168, 2097168, 16, 16, 16, 16, 20, 48, 48, 3146256, 2097680,
      /* 4702 */ 1048592, 16, 16, 16, 28, 0, 2097552, 3146256, 16, 16, 16, 21, 16, 16, 28, 16, 0, 16, 0, -2046820352, 0,
      /* 4723 */ 0, 2, 2, 2, 2098064, 17, 21, 266240, 1048576, 67108864, 0x80000000, 0, 0, 64, 65536, 1048576, 0, 16, 16,
      /* 4742 */ 163577856, 17, 528, 528, 16, 528, -161430188, -161429676, -161429676, -161430188, -161429680, -161430188,
      /* 4754 */ -161430188, -161429680, -161429676, -161349072, -161429675, -161349072, -161349072, -161349072,
      /* 4762 */ -161349072, -161347728, -161347728, -161347728, -161347728, -161298572, -160774288, -160299084,
      /* 4770 */ -161298572, -161298576, -160299088, -161298576, -160774284, -160774284, -161298572, -161298572,
      /* 4778 */ -161298572, -161298572, 112, 21, 53, 146804757, 146812949, 146862101, 146863389, -161429676, -160905388,
      /* 4789 */ -161429676, -161429676, -161429676, -161429676, -161429675, -161349072, 146863421, 148960541, 146863389,
      /* 4798 */ 146863389, 148960541, 146863421, 148960541, 148960541, -161429740, -161429676, -160905388, -161298572,
      /* 4807 */ -161298572, -18860267, -160774284, -18729163, 0, 0, 1, 6, 8, 16, 262144, 0, 0, 1, 8, 0, 24, 0, 0, 1, 14,
      /* 4828 */ 16, 32, 1024, 32768, 100663296, -1073741824, 0, 0, 0, 150528, 131072, 16777216, 0, 0, 1, 102, 1, 32768,
      /* 4846 */ 131328, 131072, 524288, 2097152, 8388608, 16777216, 164096, 0, 0, 0, 1007, 0, 1073741825, 0x80000000,
      /* 4860 */ 0x80000000, 1073741824, 8, 0, 0, 58368, 0, 0, 65536, 1048576, 4096, 1048576, 512, 512, 9476, 134218240,
      /* 4876 */ 0, 1073741824, 2621440, 1073741824, 0x80000000, 0x80000000, 0, 0, 66048, 0, 0, 0, 67108864, 0, 0, 0,
      /* 4892 */ 16384, 0, 0, 0, 8, 0, 0, 0, 9, 4456448, 8, 16777216, 1073774592, 1226014816, 100665360, 100665360,
      /* 4908 */ 100665360, 100665360, -2046818288, 1091799136, 1091799136, 1091803360, 1091799136, 1091799136,
      /* 4916 */ -2044196848, 1091799136, 1091799136, 1091799136, 1091799136, 1091799136, 1158908000, 1158908001,
      /* 4924 */ 1192462432, 1192462448, 1192462448, 1192462448, 1192462448, 1200851056, 1091799393, 1200851056,
      /* 4932 */ 1200851056, 1091799393, 1200851056, 1200851056, 1200851056, 1192462448, 1870638912, 1870638912,
      /* 4940 */ 1870655296, 1870638912, 1870655296, 1870655296, 1870655296, 1870655296, 1870655296, 1870655312,
      /* 4948 */ 1870655316, 1870655316, 1870655316, 1870655317, 1870655348, 1870655316, 1870655316, 1870655312,
      /* 4956 */ 1870655312, 1879027568, 1879043952, 1870655316, 1870655316, 1870655316, 1870638928, 1879043952,
      /* 4964 */ 1879043956, 0, 0, 1, 12288, 0, 229440, 1048576, 1224736768, 100663296, 0, 0, 0, 1024, 0, 0, 8192, 0, 0,
      /* 4983 */ 0, 576, 0, 231488, 1090519040, 0, 0, 0, 2048, 0, 0, 134217728, 0, 1157627904, 1191182336, 0, 0, 131584,
      /* 5001 */ 268435456, 49152, 0, 0, 0, 134217728, 0, 0, 0, 16, 0, 0, 0, 13, 0, 9437184, 231744, 0, 0, 235712, 0, 0,
      /* 5023 */ 131328, 0, 0, 131072, 32768, 0, 0, 134217728, 0, 520000, 7864320, 1862270976, 0, 0, 0, 4096, 0, 0, 0,
      /* 5042 */ 1862270976, 1862270976, 1862270976, 0, 16252928, 0, 0, 0, 8192, 64, 98304, 1048576, 150994944, 83886080,
      /* 5056 */ 117440512, 0, 0, 2, 4, 16, 32, 256, 1024, 8192, 33554432, 0, 0, 64, 256, 3584, 8192, 16384, 65536,
      /* 5075 */ 262144, 524288, 1048576, 2097152, 4194304, 0x80000000, 8192, 98304, 393216, 524288, 1048576, 1048576,
      /* 5087 */ 2097152, 4194304, 251658240, 536870912, 8192, 16384, 98304, 393216, 251658240, 536870912, 1073741824, 0,
      /* 5099 */ 0, 2097152, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 3, 240, 0, 83886080, 117440512, 64, 0, 2, 0, 0, 524288,
      /* 5124 */ 524288, 524288, 524288, 256, 1536, 2048, 8192, 16384, 256, 1536, 8192, 65536, 262144, 524288, 2097152,
      /* 5139 */ 67108864, 4194304, 16777216, 100663296, 134217728, 536870912, 524288, 2097152, 134217728, 268435456,
      /* 5149 */ 536870912, 1073741824, 0, 0, 524288, 2097152, 0, 0, 1048576, 2097152, 67108864, 1073741824, 0, 0, 1536,
      /* 5164 */ 65536, 262144, 524288, 33554432, 0, 1024, 65536, 262144, 2097152, 2097152, 1073741824, 0, 0, 2, 8, 16,
      /* 5180 */ 32, 0, 8192, 4096, 0, 0, 605503, 1066401792, 9476, 512, 0, 32, 384, 8192, 4194312, 4194312, 541065224,
      /* 5197 */ 4194312, 4194312, 4194312, 4194312, 4194344, -869654016, -869654016, 4203820, -869654016, -869654016,
      /* 5207 */ -869654016, -869654016, 1279402504, 1279402504, 1279402504, 1279402504, 2143549415, 2143549415,
      /* 5215 */ 2143549415, 2143549415, 2143549423, 2143549423, 2143549423, 2143549423, 2143549423, 2143549423, 0, 0, 2,
      /* 5226 */ 16384, 32768, 260, 512, 0, 0, 0, 65536, 0, 0, 0, 384, 8192, 0, 32, 512, 0, 1050624, 262144, 512,
      /* 5246 */ 1275208192, 139264, 1275068416, 0, 0, 4, 128, 1024, 2048, 16384, 262144, 8, 4194304, 0, 0, 0, 82432, 0,
      /* 5264 */ 40, 0, 0, 4, 256, 1024, 98304, 131072, 16777216, 268435456, 0, 0, 300, 4203520, 0, 0, 2097152,
      /* 5281 */ 1073741824, 0x80000000, 0, 0, 520, 4333568, 1275068416, 0, 0, 4194304, 1024, 0, 4096, 8192, 0, 0, 0, 520,
      /* 5299 */ 520, 0, 0, 0, 164096, 999, 29619200, 2113929216, 0, 0, 0, 1007, 1007, 1007, 0, 0, 8, 124160, 32, 512, 0,
      /* 5320 */ 2048, 524288, 0, 536870912, 0, 139264, 0, 0, 0, 139264, 0, 40, 0, 2621440, 0, 0, 0x80000000, 1610612736,
      /* 5338 */ 0, 0, 0, 229376, 0, 40, 0, 524288, 2097152, 1073741824, 44, 0, 0, 0, 262144, 0, 0, 16384, 229376,
      /* 5357 */ 4194304, 25165824, 100663296, 402653184, 1610612736, 0, 110, 110, 110, 0, 0, 8388608, 8388608, 8192,
      /* 5371 */ 33554432, 67108864, 134217728, 1073741824, 0, 0x80000000, 0, 0, 0, 12545, 25165824, 33554432, 67108864,
      /* 5384 */ 402653184, 536870912, 0, 104, 104, 104, 8192, 33554432, 134217728, 0, 0, 8388608, 134217728, 1073741824,
      /* 5398 */ 0, 229376, 25165824, 33554432, 402653184, 536870912, 0, 0, 256, 1024, 65536, 16777216, 268435456, 0, 0,
      /* 5413 */ 0, 524288, 0, 0, 0, 64, 0, 0, 0, 128, 0, 0, 0, 256, 0, 0, 0, 300, 524288, 2097152, 0x80000000, 0, 0, 1,
      /* 5437 */ 6, 32, 64, 256, 512, 256, 1024, 4096, 8192, 65536, 2, 4, 32, 64, 256, 1024, 0, 2, 4, 256, 1024, 65536, 4,
      /* 5460 */ 64, 256, 1024, 0, 0, 8, 8388608, 0, 98304, 131072, 25165824, 268435456, 536870912, 0, 0, 8388608, 4096,
      /* 5477 */ 0, 0, 8, 8, 8, 0, 2048, 524288, 67108864, 536870912, 32, 4100, 67108864, 0, 32768, 0, 32768, 0, 1049088,
      /* 5496 */ 0, 134348800, 270532608, 0, 1049088, 1049088, 8192, 1049088, 12845065, 12845065, 12845065, 12845065,
      /* 5508 */ 147193865, 5505537, 5591557, 5587465, 5587457, 5587457, 147202057, 5587457, 5587457, 5591557, 5587457,
      /* 5519 */ 13894153, 13894153, 13894153, 13894153, 81003049, 13894153, -1881791493, -1881791493, -1881791493,
      /* 5528 */ -1881791493, 0, 0, 8, 33554432, 262144, 0, 33554432, 1024, 0, 4, 0, 0, 0, 867647, 1, 5505024, 0, 0, 15,
      /* 5548 */ 16, 32, 192, 86528, 9, 0, 0, 16, 8192, 0, 0, 23, 0, 75497472, 0, 0, 0, 1048576, 5505024, -1887436800, 0,
      /* 5569 */ 0, 0, 2097152, 268435456, 0, 0, 4096, 8192, 67108864, 0, 0, 262144, 4194304, 8388608, 0, 0, 33554432,
      /* 5586 */ 8192, 0, 0, 288, 8388608, 0, 0, 0, 81920, 0, 0, 24, 282624, 64, 896, 8192, 131072, 262144, 1048576,
      /* 5605 */ 16777216, 33554432, -1946157056, 0, 0, 0, 2621440, 0, 131072, 0, 32, 0, 0, 2048, 3145728, 0, 16384,
      /* 5622 */ 65536, 0, 0, 268435456, 32, 64, 384, 512, 5120, 8192, 0, 64, 0, 2048, 1048576, 0, 0, 32, 64, 384, 8192,
      /* 5643 */ 131072, 0, 0, 32768, 134217728, 0, 0, 8, 32, 64, 1024, 2048, 0, 2, 8, 32, 384, 8192, 131072, 33554432,
      /* 5663 */ 131072, 1048576, 33554432, 134217728, 0x80000000, 0, 0, 2048, 524288, 536870912, 0, 1073741824, 0,
      /* 5676 */ 131072, 33554432, 0x80000000, 0, 0, 33554432, 1073741824, 0, 32, 0, 524288, 0, 0, 67108864, 64, 64, 0,
      /* 5693 */ 96, 96, 0, 524288, 524288, 524288, 64, 64, 64, 64, 96, 96, 96, 0, 0, 0, 28, 0, 8396800, 4194304,
      /* 5713 */ 134217728, 2048, 134217728, 0, 0, 32, 1, 0, 8396800, 0, 0, 32, 64, 128, 1024, 2048, 262144, 0, 16384, 0,
      /* 5733 */ 2, 4, 64, 128, 3840, 16384, 19922944, 2080374784, 0, 16384, 16384, 16777216, 16384, 32768, 1048576,
      /* 5748 */ 2097152, 4194304, 16777216, 524288, 268567040, 16384, 2113544, 68489237, 72618005, 68423701, 68423701,
      /* 5759 */ 68423701, 68489237, 68423701, -2079059883, -2079059947, 68423701, 85200917, 68423701, 68423701, 68423701,
      /* 5769 */ 68423701, 68423765, -2079059883, 68425749, 68423703, 69488664, 85200919, 69488664, 69488664, 69488664,
      /* 5779 */ 69488664, 70537244, 70537245, 70537245, 70537245, 70537309, 70537245, -2076946339, -2076946403, 70537245,
      /* 5789 */ -2076946339, 70537245, 70537245, 70537245, 70537245, 70539293, -2022351745, -2022351745, -2022351617,
      /* 5798 */ -2022351745, -2022351617, -2022351617, -2022351617, -2022351617, -2022351617, -2022351617, -2022351745,
      /* 5806 */ -2022351617, -2022351617, 0, 0, 40, 67108864, 331776, 83886080, 0, 0, 59, 140224, 5505024, 5242880,
      /* 5820 */ -2080374784, -2080374784, 268288, 29, 0, 284672, 0, 0, 68157440, 137363456, 0, 66, 66, 0, 63, 64, 351232,
      /* 5837 */ 63, 192, 351232, 7340032, -2030043136, 0, 0, 0, 4194304, 1, 1024, 32, 64, 256, 32768, 65536, 512, 131072,
      /* 5855 */ 268435456, 0, 0, 134348800, 134348800, 16, 4096, 262144, 1048576, 4194304, 8388608, 16777216, 33554432,
      /* 5868 */ 5242880, 0, 7, 0, 0, 142606336, 0, -872415232, 0, 0, 0, 131072, 0, 0, 0, 999, 259072, 4194304, 25165824,
      /* 5887 */ 0, 20480, 0, 0, 64, 256, 1536, 8192, 16384, 0, 12, 3145728, 0, 0, 0, 3145728, 64, 3072, 20480, 65536,
      /* 5907 */ 262144, 32, 192, 3072, 20480, 4, 1048576, 0, 0, 128, 131072, 0, 134218752, 0, 0, 128, 134217728, 5242880,
      /* 5925 */ 0, 6, 0, 0, 16384, 65536, 7340032, 50331648, 32, 192, 1024, 2048, 4096, 8192, 65536, 32768, 65536,
      /* 5942 */ 4194304, 16777216, 0x80000000, 0, 0, 1, 4, 0, 0, 256, 1536, 65536, 65536, 2097152, 4194304, 50331648,
      /* 5958 */ 0x80000000, 32, 192, 1024, 65536, 268435456, 0, 0, 32768, 4194304, 16777216, 0, 0, 184549376, 0, 0,
      /* 5974 */ 243269632, 0, 0, 32768, 131072, 131072, 0, 32768, 32768, 1, 2, 4, 2097152, 16777216, 134217728,
      /* 5989 */ 268435456, 1073741824, 0x80000000, 128, 2097152, 4194304, 50331648, 0, 0, 0, 8388608, 0, 0, 0, 768, 2, 4,
      /* 6006 */ 50331648, 0, 0, 536870912, 9216, 0, 0, 0, 49152, 2, 4, 128, 50331648, 0, 0, 4096, 4194304, 268435456, 0,
      /* 6025 */ 0, 1075838976, 2097152, 2097152, 268435456, 4194432, 268435968, 268435968, 1073743872, 268435968, 0, 128,
      /* 6037 */ 6144, 0, 229376, 128, 268435968, 268436032, 256, 256, 536871168, 256, 256, 256, 256, 257, 256, 384,
      /* 6053 */ -1879046336, -1879046334, 1073744256, -1879046334, -1879046326, -1879046334, -1879046334, -1879046326,
      /* 6061 */ -1879046326, -1845491902, -1878784182, 268444480, 268444480, 268436288, 268436288, 268436288, 268436288,
      /* 6070 */ 268436289, 268444480, 268444480, 268444480, 268444480, 2100318149, 2100318149, 2100318149, 2100318149,
      /* 6079 */ 2100326341, 2100326341, 2100318149, 2100326341, 2100326341, 0, 0, 256, 2048, 2048, 0, 0, 0, 4, 8, 262144,
      /* 6095 */ 134217728, 1, 1024, 0, 4096, 0, 64, 1856, 0x80000000, 0, 0, 256, 65536, 2432, 0, 1864, 0, 1, 2, 16, 32,
      /* 6116 */ 64, 0, 301989888, 0, 262144, 131072, 0, 0, 832, 8192, 0, 1, 2, 56, 64, 896, 0, 1, 4036, 19939328,
      /* 6136 */ 2080374784, 2080374784, 0, 0, 0, 16252928, 1, 16, 32, 128, 512, 2304, 0, 8, 0, 512, 301989888, 0, 0,
      /* 6155 */ 262144, 524288, 134217728, 536870912, 0, 24576, 0, 0, 0, 33554432, 0, 0, 0, 32768, 0, 0, 2097152,
      /* 6172 */ 134217728, 0, 32768, 196608, 0, 0, 0, 1, 128, 512, 2048, 524288, 268435456, 536870912, 0, 33554432,
      /* 6188 */ 262144, 8192, 0, 0, 256, 8388608, 0, 0, 1, 4, 128, 3584, 16384, 3145728, 16777216, 67108864, 134217728,
      /* 6205 */ 805306368, 1073741824, 0, 0, 1024, 2048, 16384, 3145728, 0, 8192, 0, 8192, 0, 536870912, 524288,
      /* 6220 */ 536870912, 1073741824, 0, 1, 2, 112, 128, 3072, 2048, 3145728, 16777216, 536870912, 1073741824, 0, 0,
      /* 6235 */ 2097152, 16777216, 1073741824, 0, 0, 0, 8192, 8192, 8192, 9216, 33554432, 32768, 33554432, 0, 0, 262144,
      /* 6251 */ 0, 16777216, 0, 16777216, 16777216, 16777216, 16777216, 0, 0, 2097152, 16777216, 0, 0, 16777216,
      /* 6265 */ 268500992, 4243456, 0, 0, 512, 65536, 0, 4096, 4096, 0, 4096, 4096, 4096, 4096, 0, 0, 0, 32, 0, 0, 0, 41,
      /* 6287 */ 0, 4243456, 4096, 12289, 1073754113, 12289, 12289, 1124073472, 12289, 12289, 1098920193, 1098920193,
      /* 6299 */ 1124073488, 1124073472, 1124073472, 1258292224, 1124073472, 1124073474, 1124073472, 1124073472,
      /* 6307 */ 1124073472, 1124073472, 1124073472, 1392574464, 1124073472, 12289, 1124085761, 1124085761, 1124085761,
      /* 6316 */ 1124085761, 1132474625, 1098920209, 1132474625, 1132474625, 1098920209, 1132474625, 1132474625,
      /* 6324 */ 1132474625, 1132474625, 1400975617, 1124085777, 1124085761, 1124085761, 1258304513, 2132360255,
      /* 6332 */ 2132360255, 2132622399, 2132360255, 2132622399, 2132622399, 2140749119, 2141011263, 2132622399,
      /* 6340 */ 2132622399, 2132622399, 2132622399, 2132360255, 2141011263, 2141011263, 0, 0, 512, 131072, 0, 128,
      /* 6352 */ 131072, 1024, 134217728, 0, 0, 0, 50331648, 1073741824, 0, 1, 4, 64, 128, 3584, 318767104, 0, 0, 0,
      /* 6370 */ 268435456, 0, 12289, 0, 0, 0, 159383552, 25165824, 0, 0, 0, 536870912, 0, 0, 0, 24576, 58720256, 0, 0,
      /* 6389 */ 12305, 13313, 0, 0, 0, 1073741824, 0, 0, 0, 12561, 0, 78081, 327155712, 0, 0, 0, 1275068416, 0, 605247,
      /* 6408 */ 1058013184, 1073741824, 1073741824, 8388608, 0, 0, 503616, 7864320, 867391, 1058013184, 1073741824, 0, 1,
      /* 6421 */ 6, 96, 384, 512, 1024, 4096, 8192, 16384, 229376, 25165824, 33554432, 268435456, 536870912, 0, 867647,
      /* 6436 */ 1066401792, 0, 0, 0, 512, 1048576, 0, 0, 9, 8388608, 12288, 0, 0, 0, 512, 2760704, 77824, 0, 0, 0, 1024,
      /* 6457 */ 2048, 3145728, 2048, 77824, 524288, 1048576, 0, 0, 0, 512, 0, 1048576, 0, 1, 30, 32, 1024, 2048, 1024,
      /* 6476 */ 2048, 339968, 524288, 1048576, 16777216, 100663296, 134217728, 805306368, 1073741824, 1024, 2048, 12288,
      /* 6488 */ 65536, 0, 65536, 0, 0, 19947520, 0, 0, 0, 16777216, 0, 0, 0, 5, 1024, 2048, 12288, 327680, 524288,
      /* 6507 */ 33554432, 134217728, 536870912, 1073741824, 14, 16, 1024, 4096, 8192, 229376, 0, 2, 16384, 4194304,
      /* 6521 */ 0x80000000, 0, 0, 0, 8, 0, 65536, 262144, 7340032, 50331648, 67108864, 0x80000000, 4096, 65536, 262144,
      /* 6536 */ 524288, 1048576, 33554432, 256, 0, 256, 0, 256, 1, 12, 1024, 134217728, 262144, 134217728, 536870912, 0,
      /* 6552 */ 0, 268435456, 1, 4, 8, 134217728, 4, 8, 536870912, 0, 2, 16, 64, 128, 0, 0, 262144, 536870912, 0, 0,
      /* 6572 */ 1073741824, 32768, 0, 8, 32, 512, 4096, 9437184, 0, 0, 1048576, 2097152, 4194304, 67108864, 134217728, 0,
      /* 6588 */ 1024, 137363456, 66, 25165824, 26214400, 92274688, 92274688, 25165952, 92274688, 25165824, 25165824,
      /* 6599 */ 92274688, 25165824, 25165824, 92274688, 92274688, 92274720, 92274688, 25165824, 92274688, 93323264,
      /* 6609 */ 25165890, 100721664, 100721664, 25165890, 100721928, 100721928, 100787464, 100853000, 100721928,
      /* 6618 */ 100721928, 125977600, 125977600, 125977600, 125977600, 127026176, 125977600, 125846528, 125846528,
      /* 6627 */ 125846560, 125846528, 125846528, 125846528, 126895104, 125846528, 125977600, 127026176, 125977600,
      /* 6636 */ 125977600, 127026176, 127026176, 281843, 281843, 1330419, 281843, 1330419, 281843, 1330419, 1330419,
      /* 6647 */ 281843, 281843, 281843, 5524723, 39079155, 72633587, 5524723, 5524723, 5524723, 5524723, 93605107,
      /* 6658 */ 72633587, 72633587, 92556531, 93605107, 127290611, 127290611, 97799411, 127290611, 131484915, 0, 0, 1536,
      /* 6670 */ 0x80000000, 0, 0, 17408, 33554432, 0, 1, 12, 1024, 262144, 0, 58624, 0, 0, 1536, 0, 189696, 0, 0, 0,
      /* 6690 */ 1792, 0x80000000, 0, 148480, 50331648, 0, 1, 14, 1024, 4096, 65536, 524288, 240, 19456, 262144, 0, 0,
      /* 6707 */ 19456, 262144, 0, 4194304, 0, 0, 1024, 2097152, 0, 0, 0, 150528, 0, 0, 0, 512, 4096, 8192, 131072, 0,
      /* 6727 */ 57344, 0, 0, 0, 2048, 100663296, 0, 0, 256, 0, 65536, 524288, 1048576, 33554432, 67108864, 2, 48, 64,
      /* 6745 */ 128, 3072, 16384, 262144, 0, 0, 32, 4096, 8192, 131072, 1048576, 8388608, 33554432, 134217728, 2048,
      /* 6760 */ 262144, 0, 0, 2048, 268435456, 16, 64, 128, 262144, 0, 0, 32768, 65536, 131072, 0, 1, 2, 16, 64, 0
    ];

    private static TOKEN: string [] =
    [
      "(0)",
      "PragmaContents",
      "DirCommentContents",
      "DirPIContents",
      "CDataSection",
      "Wildcard",
      "EQName",
      "URILiteral",
      "IntegerLiteral",
      "DecimalLiteral",
      "DoubleLiteral",
      "StringLiteral",
      "PredefinedEntityRef",
      "'\"\"'",
      "EscapeApos",
      "ElementContentChar",
      "QuotAttrContentChar",
      "AposAttrContentChar",
      "PITarget",
      "NCName",
      "QName",
      "S",
      "S",
      "CharRef",
      "CommentContents",
      "EOF",
      "'!'",
      "'!='",
      "'\"'",
      "'#'",
      "'#)'",
      "'$'",
      "'%'",
      "''''",
      "'('",
      "'(#'",
      "'(:'",
      "')'",
      "'*'",
      "'*'",
      "'+'",
      "','",
      "'-'",
      "'-->'",
      "'.'",
      "'..'",
      "'/'",
      "'//'",
      "'/>'",
      "':'",
      "':)'",
      "'::'",
      "':='",
      "';'",
      "'<'",
      "'<!--'",
      "'</'",
      "'<<'",
      "'<='",
      "'<?'",
      "'='",
      "'>'",
      "'>='",
      "'>>'",
      "'?'",
      "'?>'",
      "'@'",
      "'NaN'",
      "'['",
      "']'",
      "'after'",
      "'all'",
      "'allowing'",
      "'ancestor'",
      "'ancestor-or-self'",
      "'and'",
      "'any'",
      "'append'",
      "'array'",
      "'as'",
      "'ascending'",
      "'at'",
      "'attribute'",
      "'base-uri'",
      "'before'",
      "'boundary-space'",
      "'break'",
      "'by'",
      "'case'",
      "'cast'",
      "'castable'",
      "'catch'",
      "'check'",
      "'child'",
      "'collation'",
      "'collection'",
      "'comment'",
      "'constraint'",
      "'construction'",
      "'contains'",
      "'content'",
      "'context'",
      "'continue'",
      "'copy'",
      "'copy-namespaces'",
      "'count'",
      "'decimal-format'",
      "'decimal-separator'",
      "'declare'",
      "'default'",
      "'delete'",
      "'descendant'",
      "'descendant-or-self'",
      "'descending'",
      "'diacritics'",
      "'different'",
      "'digit'",
      "'distance'",
      "'div'",
      "'document'",
      "'document-node'",
      "'element'",
      "'else'",
      "'empty'",
      "'empty-sequence'",
      "'encoding'",
      "'end'",
      "'entire'",
      "'eq'",
      "'every'",
      "'exactly'",
      "'except'",
      "'exit'",
      "'external'",
      "'first'",
      "'following'",
      "'following-sibling'",
      "'for'",
      "'foreach'",
      "'foreign'",
      "'from'",
      "'ft-option'",
      "'ftand'",
      "'ftnot'",
      "'ftor'",
      "'function'",
      "'ge'",
      "'greatest'",
      "'group'",
      "'grouping-separator'",
      "'gt'",
      "'idiv'",
      "'if'",
      "'import'",
      "'in'",
      "'index'",
      "'infinity'",
      "'inherit'",
      "'insensitive'",
      "'insert'",
      "'instance'",
      "'integrity'",
      "'intersect'",
      "'into'",
      "'is'",
      "'item'",
      "'json'",
      "'json-item'",
      "'key'",
      "'language'",
      "'last'",
      "'lax'",
      "'le'",
      "'least'",
      "'let'",
      "'levels'",
      "'loop'",
      "'lowercase'",
      "'lt'",
      "'minus-sign'",
      "'mod'",
      "'modify'",
      "'module'",
      "'most'",
      "'namespace'",
      "'namespace-node'",
      "'ne'",
      "'next'",
      "'no'",
      "'no-inherit'",
      "'no-preserve'",
      "'node'",
      "'nodes'",
      "'not'",
      "'object'",
      "'occurs'",
      "'of'",
      "'on'",
      "'only'",
      "'option'",
      "'or'",
      "'order'",
      "'ordered'",
      "'ordering'",
      "'paragraph'",
      "'paragraphs'",
      "'parent'",
      "'pattern-separator'",
      "'per-mille'",
      "'percent'",
      "'phrase'",
      "'position'",
      "'preceding'",
      "'preceding-sibling'",
      "'preserve'",
      "'previous'",
      "'processing-instruction'",
      "'relationship'",
      "'rename'",
      "'replace'",
      "'return'",
      "'returning'",
      "'revalidation'",
      "'same'",
      "'satisfies'",
      "'schema'",
      "'schema-attribute'",
      "'schema-element'",
      "'score'",
      "'self'",
      "'sensitive'",
      "'sentence'",
      "'sentences'",
      "'skip'",
      "'sliding'",
      "'some'",
      "'stable'",
      "'start'",
      "'stemming'",
      "'stop'",
      "'strict'",
      "'strip'",
      "'structured-item'",
      "'switch'",
      "'text'",
      "'then'",
      "'thesaurus'",
      "'times'",
      "'to'",
      "'treat'",
      "'try'",
      "'tumbling'",
      "'type'",
      "'typeswitch'",
      "'union'",
      "'unique'",
      "'unordered'",
      "'updating'",
      "'uppercase'",
      "'using'",
      "'validate'",
      "'value'",
      "'variable'",
      "'version'",
      "'weight'",
      "'when'",
      "'where'",
      "'while'",
      "'wildcards'",
      "'window'",
      "'with'",
      "'without'",
      "'word'",
      "'words'",
      "'xquery'",
      "'zero-digit'",
      "'{'",
      "'{{'",
      "'{|'",
      "'|'",
      "'||'",
      "'|}'",
      "'}'",
      "'}}'"
    ];
  }
// End
